
usb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011ed0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000608  08012060  08012060  00022060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012668  08012668  000300e0  2**0
                  CONTENTS
  4 .ARM          00000008  08012668  08012668  00022668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012670  08012670  000300e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012670  08012670  00022670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012674  08012674  00022674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e0  20000000  08012678  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000300e0  2**0
                  CONTENTS
 10 .bss          00005080  200000e0  200000e0  000300e0  2**3
                  ALLOC
 11 ._user_heap_stack 00004000  20005160  20005160  000300e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000300e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023daf  00000000  00000000  00030110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000548a  00000000  00000000  00053ebf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ba0  00000000  00000000  00059350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001990  00000000  00000000  0005aef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028b85  00000000  00000000  0005c880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00028c6a  00000000  00000000  00085405  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d55a4  00000000  00000000  000ae06f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00183613  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007d34  00000000  00000000  00183664  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000e0 	.word	0x200000e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08012048 	.word	0x08012048

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000e4 	.word	0x200000e4
 80001cc:	08012048 	.word	0x08012048

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <write_register>:
static void write_register(uint8_t reg, uint8_t *data);
static void read_register(uint8_t reg, uint8_t *data);

// Function(1): Write to register
static void write_register(uint8_t reg, uint8_t *data)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b086      	sub	sp, #24
 8000588:	af02      	add	r7, sp, #8
 800058a:	4603      	mov	r3, r0
 800058c:	6039      	str	r1, [r7, #0]
 800058e:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	iData[0] = reg;
 8000590:	79fb      	ldrb	r3, [r7, #7]
 8000592:	733b      	strb	r3, [r7, #12]
	iData[1] = data[0];
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100);
 800059a:	f107 020c 	add.w	r2, r7, #12
 800059e:	2364      	movs	r3, #100	; 0x64
 80005a0:	9300      	str	r3, [sp, #0]
 80005a2:	2302      	movs	r3, #2
 80005a4:	2194      	movs	r1, #148	; 0x94
 80005a6:	4803      	ldr	r0, [pc, #12]	; (80005b4 <write_register+0x30>)
 80005a8:	f004 f8ec 	bl	8004784 <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, data, size, 100);
}
 80005ac:	bf00      	nop
 80005ae:	3710      	adds	r7, #16
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	200000fc 	.word	0x200000fc

080005b8 <read_register>:
// Function(2): Read from register
static void read_register(uint8_t reg, uint8_t *data)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b086      	sub	sp, #24
 80005bc:	af02      	add	r7, sp, #8
 80005be:	4603      	mov	r3, r0
 80005c0:	6039      	str	r1, [r7, #0]
 80005c2:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	iData[0] = reg;
 80005c4:	79fb      	ldrb	r3, [r7, #7]
 80005c6:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100);
 80005c8:	f107 020c 	add.w	r2, r7, #12
 80005cc:	2364      	movs	r3, #100	; 0x64
 80005ce:	9300      	str	r3, [sp, #0]
 80005d0:	2301      	movs	r3, #1
 80005d2:	2194      	movs	r1, #148	; 0x94
 80005d4:	4807      	ldr	r0, [pc, #28]	; (80005f4 <read_register+0x3c>)
 80005d6:	f004 f8d5 	bl	8004784 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100);
 80005da:	2364      	movs	r3, #100	; 0x64
 80005dc:	9300      	str	r3, [sp, #0]
 80005de:	2301      	movs	r3, #1
 80005e0:	683a      	ldr	r2, [r7, #0]
 80005e2:	2194      	movs	r1, #148	; 0x94
 80005e4:	4803      	ldr	r0, [pc, #12]	; (80005f4 <read_register+0x3c>)
 80005e6:	f004 f9cb 	bl	8004980 <HAL_I2C_Master_Receive>
}
 80005ea:	bf00      	nop
 80005ec:	3710      	adds	r7, #16
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	200000fc 	.word	0x200000fc

080005f8 <CS43_Init>:

//-------------- Public Functions ----------------//
// Function(1): Initialisation
void CS43_Init(I2C_HandleTypeDef i2c_handle, CS43_MODE outputMode)
{
 80005f8:	b084      	sub	sp, #16
 80005fa:	b580      	push	{r7, lr}
 80005fc:	b082      	sub	sp, #8
 80005fe:	af00      	add	r7, sp, #0
 8000600:	f107 0c10 	add.w	ip, r7, #16
 8000604:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  uint8_t iData[2];
	__HAL_UNLOCK(&hi2s3);     // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000608:	4b7b      	ldr	r3, [pc, #492]	; (80007f8 <CS43_Init+0x200>)
 800060a:	2200      	movs	r2, #0
 800060c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	__HAL_I2S_ENABLE(&hi2s3); // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000610:	4b79      	ldr	r3, [pc, #484]	; (80007f8 <CS43_Init+0x200>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	69da      	ldr	r2, [r3, #28]
 8000616:	4b78      	ldr	r3, [pc, #480]	; (80007f8 <CS43_Init+0x200>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800061e:	61da      	str	r2, [r3, #28]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8000620:	2201      	movs	r2, #1
 8000622:	2110      	movs	r1, #16
 8000624:	4875      	ldr	r0, [pc, #468]	; (80007fc <CS43_Init+0x204>)
 8000626:	f002 fb07 	bl	8002c38 <HAL_GPIO_WritePin>
	//(1): Get the I2C handle
	i2cx = i2c_handle;
 800062a:	4b75      	ldr	r3, [pc, #468]	; (8000800 <CS43_Init+0x208>)
 800062c:	4618      	mov	r0, r3
 800062e:	f107 0310 	add.w	r3, r7, #16
 8000632:	2254      	movs	r2, #84	; 0x54
 8000634:	4619      	mov	r1, r3
 8000636:	f010 fb17 	bl	8010c68 <memcpy>
	//(2): Power down
	iData[1] = 0x01;
 800063a:	2301      	movs	r3, #1
 800063c:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL1,iData);
 800063e:	1d3b      	adds	r3, r7, #4
 8000640:	4619      	mov	r1, r3
 8000642:	2002      	movs	r0, #2
 8000644:	f7ff ff9e 	bl	8000584 <write_register>
	//(3): Enable Right and Left headphones
	iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000648:	2380      	movs	r3, #128	; 0x80
 800064a:	717b      	strb	r3, [r7, #5]
	iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 800064c:	797b      	ldrb	r3, [r7, #5]
 800064e:	f043 0320 	orr.w	r3, r3, #32
 8000652:	b2db      	uxtb	r3, r3
 8000654:	717b      	strb	r3, [r7, #5]
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 8000656:	797b      	ldrb	r3, [r7, #5]
 8000658:	f043 030c 	orr.w	r3, r3, #12
 800065c:	b2db      	uxtb	r3, r3
 800065e:	717b      	strb	r3, [r7, #5]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 8000660:	797b      	ldrb	r3, [r7, #5]
 8000662:	f043 0303 	orr.w	r3, r3, #3
 8000666:	b2db      	uxtb	r3, r3
 8000668:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL2,&iData[1]);
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	3301      	adds	r3, #1
 800066e:	4619      	mov	r1, r3
 8000670:	2004      	movs	r0, #4
 8000672:	f7ff ff87 	bl	8000584 <write_register>
	//(4): Automatic clock detection
	iData[1] = (1 << 7);
 8000676:	2380      	movs	r3, #128	; 0x80
 8000678:	717b      	strb	r3, [r7, #5]
	write_register(CLOCKING_CONTROL,&iData[1]);
 800067a:	1d3b      	adds	r3, r7, #4
 800067c:	3301      	adds	r3, #1
 800067e:	4619      	mov	r1, r3
 8000680:	2005      	movs	r0, #5
 8000682:	f7ff ff7f 	bl	8000584 <write_register>
	//(5): Interface control 1
	read_register(INTERFACE_CONTROL1, iData);
 8000686:	1d3b      	adds	r3, r7, #4
 8000688:	4619      	mov	r1, r3
 800068a:	2006      	movs	r0, #6
 800068c:	f7ff ff94 	bl	80005b8 <read_register>
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 8000690:	797b      	ldrb	r3, [r7, #5]
 8000692:	f003 0320 	and.w	r3, r3, #32
 8000696:	b2db      	uxtb	r3, r3
 8000698:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 7);  // Slave
 800069a:	797b      	ldrb	r3, [r7, #5]
 800069c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 6);  // Clock polarity: Not inverted
 80006a4:	797b      	ldrb	r3, [r7, #5]
 80006a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 4);  // No DSP mode
 80006ae:	797b      	ldrb	r3, [r7, #5]
 80006b0:	f023 0310 	bic.w	r3, r3, #16
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 2);  // Left justified, up to 24 bit (default)
 80006b8:	797b      	ldrb	r3, [r7, #5]
 80006ba:	f023 0304 	bic.w	r3, r3, #4
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	717b      	strb	r3, [r7, #5]
	iData[1] |= (1 << 2);
 80006c2:	797b      	ldrb	r3, [r7, #5]
 80006c4:	f043 0304 	orr.w	r3, r3, #4
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	717b      	strb	r3, [r7, #5]
	
	iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
 80006cc:	797b      	ldrb	r3, [r7, #5]
 80006ce:	f043 0303 	orr.w	r3, r3, #3
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	717b      	strb	r3, [r7, #5]
	write_register(INTERFACE_CONTROL1,&iData[1]);
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	3301      	adds	r3, #1
 80006da:	4619      	mov	r1, r3
 80006dc:	2006      	movs	r0, #6
 80006de:	f7ff ff51 	bl	8000584 <write_register>
	//(6): Passthrough A settings
	read_register(PASSTHROUGH_A, &iData[1]);
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	3301      	adds	r3, #1
 80006e6:	4619      	mov	r1, r3
 80006e8:	2008      	movs	r0, #8
 80006ea:	f7ff ff65 	bl	80005b8 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 80006ee:	797b      	ldrb	r3, [r7, #5]
 80006f0:	f023 030f 	bic.w	r3, r3, #15
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	717b      	strb	r3, [r7, #5]
	iData[1] |=  (1 << 0); // Use AIN1A as source for passthrough
 80006f8:	797b      	ldrb	r3, [r7, #5]
 80006fa:	f043 0301 	orr.w	r3, r3, #1
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_A,&iData[1]);
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	3301      	adds	r3, #1
 8000706:	4619      	mov	r1, r3
 8000708:	2008      	movs	r0, #8
 800070a:	f7ff ff3b 	bl	8000584 <write_register>
	//(7): Passthrough B settings
	read_register(PASSTHROUGH_B, &iData[1]);
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	3301      	adds	r3, #1
 8000712:	4619      	mov	r1, r3
 8000714:	2009      	movs	r0, #9
 8000716:	f7ff ff4f 	bl	80005b8 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 800071a:	797b      	ldrb	r3, [r7, #5]
 800071c:	f023 030f 	bic.w	r3, r3, #15
 8000720:	b2db      	uxtb	r3, r3
 8000722:	717b      	strb	r3, [r7, #5]
	iData[1] |=  (1 << 0); // Use AIN1B as source for passthrough
 8000724:	797b      	ldrb	r3, [r7, #5]
 8000726:	f043 0301 	orr.w	r3, r3, #1
 800072a:	b2db      	uxtb	r3, r3
 800072c:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_B,&iData[1]);
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	3301      	adds	r3, #1
 8000732:	4619      	mov	r1, r3
 8000734:	2009      	movs	r0, #9
 8000736:	f7ff ff25 	bl	8000584 <write_register>
	//(8): Miscellaneous register settings
	read_register(MISCELLANEOUS_CONTRLS, &iData[1]);
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	3301      	adds	r3, #1
 800073e:	4619      	mov	r1, r3
 8000740:	200e      	movs	r0, #14
 8000742:	f7ff ff39 	bl	80005b8 <read_register>
	if(outputMode == MODE_ANALOG)
 8000746:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800074a:	2b03      	cmp	r3, #3
 800074c:	d119      	bne.n	8000782 <CS43_Init+0x18a>
	{
		iData[1] |=  (1 << 7);   // Enable passthrough for AIN-A
 800074e:	797b      	ldrb	r3, [r7, #5]
 8000750:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000754:	b2db      	uxtb	r3, r3
 8000756:	717b      	strb	r3, [r7, #5]
		iData[1] |=  (1 << 6);   // Enable passthrough for AIN-B
 8000758:	797b      	ldrb	r3, [r7, #5]
 800075a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800075e:	b2db      	uxtb	r3, r3
 8000760:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 5);   // Unmute passthrough on AIN-A
 8000762:	797b      	ldrb	r3, [r7, #5]
 8000764:	f023 0320 	bic.w	r3, r3, #32
 8000768:	b2db      	uxtb	r3, r3
 800076a:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 4);   // Unmute passthrough on AIN-B
 800076c:	797b      	ldrb	r3, [r7, #5]
 800076e:	f023 0310 	bic.w	r3, r3, #16
 8000772:	b2db      	uxtb	r3, r3
 8000774:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 8000776:	797b      	ldrb	r3, [r7, #5]
 8000778:	f023 0308 	bic.w	r3, r3, #8
 800077c:	b2db      	uxtb	r3, r3
 800077e:	717b      	strb	r3, [r7, #5]
 8000780:	e005      	b.n	800078e <CS43_Init+0x196>
	}
	else if(outputMode == MODE_I2S)
 8000782:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000786:	2b00      	cmp	r3, #0
 8000788:	d101      	bne.n	800078e <CS43_Init+0x196>
	{
		iData[1] = 0x02;
 800078a:	2302      	movs	r3, #2
 800078c:	717b      	strb	r3, [r7, #5]
	}
	write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	3301      	adds	r3, #1
 8000792:	4619      	mov	r1, r3
 8000794:	200e      	movs	r0, #14
 8000796:	f7ff fef5 	bl	8000584 <write_register>
	//(9): Unmute headphone and speaker
	read_register(PLAYBACK_CONTROL, &iData[1]);
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	3301      	adds	r3, #1
 800079e:	4619      	mov	r1, r3
 80007a0:	200f      	movs	r0, #15
 80007a2:	f7ff ff09 	bl	80005b8 <read_register>
	iData[1] = 0x00;
 80007a6:	2300      	movs	r3, #0
 80007a8:	717b      	strb	r3, [r7, #5]
	write_register(PLAYBACK_CONTROL,&iData[1]);
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	3301      	adds	r3, #1
 80007ae:	4619      	mov	r1, r3
 80007b0:	200f      	movs	r0, #15
 80007b2:	f7ff fee7 	bl	8000584 <write_register>
	//(10): Set volume to default (0dB)
	iData[1] = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	3301      	adds	r3, #1
 80007be:	4619      	mov	r1, r3
 80007c0:	2014      	movs	r0, #20
 80007c2:	f7ff fedf 	bl	8000584 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	3301      	adds	r3, #1
 80007ca:	4619      	mov	r1, r3
 80007cc:	2015      	movs	r0, #21
 80007ce:	f7ff fed9 	bl	8000584 <write_register>
	write_register(PCM_VOLUME_A,&iData[1]);
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	3301      	adds	r3, #1
 80007d6:	4619      	mov	r1, r3
 80007d8:	201a      	movs	r0, #26
 80007da:	f7ff fed3 	bl	8000584 <write_register>
	write_register(PCM_VOLUME_B,&iData[1]);
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	3301      	adds	r3, #1
 80007e2:	4619      	mov	r1, r3
 80007e4:	201b      	movs	r0, #27
 80007e6:	f7ff fecd 	bl	8000584 <write_register>
}
 80007ea:	bf00      	nop
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007f4:	b004      	add	sp, #16
 80007f6:	4770      	bx	lr
 80007f8:	20002218 	.word	0x20002218
 80007fc:	40020c00 	.word	0x40020c00
 8000800:	200000fc 	.word	0x200000fc

08000804 <CS43_Enable_RightLeft>:

// Function(2): Enable Right and Left headphones
void CS43_Enable_RightLeft(uint8_t side)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	switch (side)
 800080e:	79fb      	ldrb	r3, [r7, #7]
 8000810:	2b03      	cmp	r3, #3
 8000812:	d82b      	bhi.n	800086c <CS43_Enable_RightLeft+0x68>
 8000814:	a201      	add	r2, pc, #4	; (adr r2, 800081c <CS43_Enable_RightLeft+0x18>)
 8000816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800081a:	bf00      	nop
 800081c:	0800082d 	.word	0x0800082d
 8000820:	0800083d 	.word	0x0800083d
 8000824:	0800084d 	.word	0x0800084d
 8000828:	0800085d 	.word	0x0800085d
	{
		case 0:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 800082c:	23c0      	movs	r3, #192	; 0xc0
 800082e:	737b      	strb	r3, [r7, #13]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000830:	7b7b      	ldrb	r3, [r7, #13]
 8000832:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000836:	b2db      	uxtb	r3, r3
 8000838:	737b      	strb	r3, [r7, #13]
			break;
 800083a:	e018      	b.n	800086e <CS43_Enable_RightLeft+0x6a>
		case 1:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 800083c:	2380      	movs	r3, #128	; 0x80
 800083e:	737b      	strb	r3, [r7, #13]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000840:	7b7b      	ldrb	r3, [r7, #13]
 8000842:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000846:	b2db      	uxtb	r3, r3
 8000848:	737b      	strb	r3, [r7, #13]
			break;
 800084a:	e010      	b.n	800086e <CS43_Enable_RightLeft+0x6a>
		case 2:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 800084c:	23c0      	movs	r3, #192	; 0xc0
 800084e:	737b      	strb	r3, [r7, #13]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000850:	7b7b      	ldrb	r3, [r7, #13]
 8000852:	f043 0320 	orr.w	r3, r3, #32
 8000856:	b2db      	uxtb	r3, r3
 8000858:	737b      	strb	r3, [r7, #13]
			break;
 800085a:	e008      	b.n	800086e <CS43_Enable_RightLeft+0x6a>
		case 3:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 800085c:	2380      	movs	r3, #128	; 0x80
 800085e:	737b      	strb	r3, [r7, #13]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000860:	7b7b      	ldrb	r3, [r7, #13]
 8000862:	f043 0320 	orr.w	r3, r3, #32
 8000866:	b2db      	uxtb	r3, r3
 8000868:	737b      	strb	r3, [r7, #13]
			break;
 800086a:	e000      	b.n	800086e <CS43_Enable_RightLeft+0x6a>
		default:
			break;
 800086c:	bf00      	nop
	}
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 800086e:	7b7b      	ldrb	r3, [r7, #13]
 8000870:	f043 030c 	orr.w	r3, r3, #12
 8000874:	b2db      	uxtb	r3, r3
 8000876:	737b      	strb	r3, [r7, #13]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 8000878:	7b7b      	ldrb	r3, [r7, #13]
 800087a:	f043 0303 	orr.w	r3, r3, #3
 800087e:	b2db      	uxtb	r3, r3
 8000880:	737b      	strb	r3, [r7, #13]
	write_register(POWER_CONTROL2,&iData[1]);
 8000882:	f107 030c 	add.w	r3, r7, #12
 8000886:	3301      	adds	r3, #1
 8000888:	4619      	mov	r1, r3
 800088a:	2004      	movs	r0, #4
 800088c:	f7ff fe7a 	bl	8000584 <write_register>
}
 8000890:	bf00      	nop
 8000892:	3710      	adds	r7, #16
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}

08000898 <CS43_SetVolume>:

// Function(3): Set Volume Level
void CS43_SetVolume(uint8_t volume)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
  /* Set the Master volume */
  iData[1] = VOLUME_MASTER(volume);
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	3319      	adds	r3, #25
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	737b      	strb	r3, [r7, #13]
  write_register(CS43L22_REG_MASTER_A_VOL,&iData[1]);
 80008aa:	f107 030c 	add.w	r3, r7, #12
 80008ae:	3301      	adds	r3, #1
 80008b0:	4619      	mov	r1, r3
 80008b2:	2020      	movs	r0, #32
 80008b4:	f7ff fe66 	bl	8000584 <write_register>
  write_register(CS43L22_REG_MASTER_B_VOL,&iData[1]);
 80008b8:	f107 030c 	add.w	r3, r7, #12
 80008bc:	3301      	adds	r3, #1
 80008be:	4619      	mov	r1, r3
 80008c0:	2021      	movs	r0, #33	; 0x21
 80008c2:	f7ff fe5f 	bl	8000584 <write_register>
}
 80008c6:	bf00      	nop
 80008c8:	3710      	adds	r7, #16
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <CS43_SetMute>:

void CS43_SetMute(bool mute)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b084      	sub	sp, #16
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	4603      	mov	r3, r0
 80008d6:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
  if(mute)
 80008d8:	79fb      	ldrb	r3, [r7, #7]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d019      	beq.n	8000912 <CS43_SetMute+0x44>
  {
    iData[1] = 0xFF;
 80008de:	23ff      	movs	r3, #255	; 0xff
 80008e0:	737b      	strb	r3, [r7, #13]
    write_register(POWER_CONTROL2,&iData[1]);
 80008e2:	f107 030c 	add.w	r3, r7, #12
 80008e6:	3301      	adds	r3, #1
 80008e8:	4619      	mov	r1, r3
 80008ea:	2004      	movs	r0, #4
 80008ec:	f7ff fe4a 	bl	8000584 <write_register>
    iData[1] = 0x01;
 80008f0:	2301      	movs	r3, #1
 80008f2:	737b      	strb	r3, [r7, #13]
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
 80008f4:	f107 030c 	add.w	r3, r7, #12
 80008f8:	3301      	adds	r3, #1
 80008fa:	4619      	mov	r1, r3
 80008fc:	2022      	movs	r0, #34	; 0x22
 80008fe:	f7ff fe41 	bl	8000584 <write_register>
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
 8000902:	f107 030c 	add.w	r3, r7, #12
 8000906:	3301      	adds	r3, #1
 8000908:	4619      	mov	r1, r3
 800090a:	2023      	movs	r0, #35	; 0x23
 800090c:	f7ff fe3a 	bl	8000584 <write_register>
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
    iData[1] = 0xAF;
    write_register(POWER_CONTROL2,&iData[1]);
  }
}
 8000910:	e018      	b.n	8000944 <CS43_SetMute+0x76>
    iData[1] = 0x00;
 8000912:	2300      	movs	r3, #0
 8000914:	737b      	strb	r3, [r7, #13]
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
 8000916:	f107 030c 	add.w	r3, r7, #12
 800091a:	3301      	adds	r3, #1
 800091c:	4619      	mov	r1, r3
 800091e:	2022      	movs	r0, #34	; 0x22
 8000920:	f7ff fe30 	bl	8000584 <write_register>
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
 8000924:	f107 030c 	add.w	r3, r7, #12
 8000928:	3301      	adds	r3, #1
 800092a:	4619      	mov	r1, r3
 800092c:	2023      	movs	r0, #35	; 0x23
 800092e:	f7ff fe29 	bl	8000584 <write_register>
    iData[1] = 0xAF;
 8000932:	23af      	movs	r3, #175	; 0xaf
 8000934:	737b      	strb	r3, [r7, #13]
    write_register(POWER_CONTROL2,&iData[1]);
 8000936:	f107 030c 	add.w	r3, r7, #12
 800093a:	3301      	adds	r3, #1
 800093c:	4619      	mov	r1, r3
 800093e:	2004      	movs	r0, #4
 8000940:	f7ff fe20 	bl	8000584 <write_register>
}
 8000944:	bf00      	nop
 8000946:	3710      	adds	r7, #16
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}

0800094c <CS43_Start>:

// Function(4): Start the Audio DAC
void CS43_Start(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
  uint8_t iData[2];
  CS43_SetMute(0);
 8000952:	2000      	movs	r0, #0
 8000954:	f7ff ffbb 	bl	80008ce <CS43_SetMute>
	// Write 0x99 to register 0x00.
	iData[1] = 0x99;
 8000958:	2399      	movs	r3, #153	; 0x99
 800095a:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_00,&iData[1]);
 800095c:	1d3b      	adds	r3, r7, #4
 800095e:	3301      	adds	r3, #1
 8000960:	4619      	mov	r1, r3
 8000962:	2000      	movs	r0, #0
 8000964:	f7ff fe0e 	bl	8000584 <write_register>
	// Write 0x80 to register 0x47.
	iData[1] = 0x80;
 8000968:	2380      	movs	r3, #128	; 0x80
 800096a:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_47,&iData[1]);
 800096c:	1d3b      	adds	r3, r7, #4
 800096e:	3301      	adds	r3, #1
 8000970:	4619      	mov	r1, r3
 8000972:	2047      	movs	r0, #71	; 0x47
 8000974:	f7ff fe06 	bl	8000584 <write_register>
	// Write '1'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 8000978:	1d3b      	adds	r3, r7, #4
 800097a:	3301      	adds	r3, #1
 800097c:	4619      	mov	r1, r3
 800097e:	2032      	movs	r0, #50	; 0x32
 8000980:	f7ff fe1a 	bl	80005b8 <read_register>
	iData[1] |= 0x80;
 8000984:	797b      	ldrb	r3, [r7, #5]
 8000986:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800098a:	b2db      	uxtb	r3, r3
 800098c:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_32,&iData[1]);
 800098e:	1d3b      	adds	r3, r7, #4
 8000990:	3301      	adds	r3, #1
 8000992:	4619      	mov	r1, r3
 8000994:	2032      	movs	r0, #50	; 0x32
 8000996:	f7ff fdf5 	bl	8000584 <write_register>
	// Write '0'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 800099a:	1d3b      	adds	r3, r7, #4
 800099c:	3301      	adds	r3, #1
 800099e:	4619      	mov	r1, r3
 80009a0:	2032      	movs	r0, #50	; 0x32
 80009a2:	f7ff fe09 	bl	80005b8 <read_register>
	iData[1] &= ~(0x80);
 80009a6:	797b      	ldrb	r3, [r7, #5]
 80009a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_32,&iData[1]);
 80009b0:	1d3b      	adds	r3, r7, #4
 80009b2:	3301      	adds	r3, #1
 80009b4:	4619      	mov	r1, r3
 80009b6:	2032      	movs	r0, #50	; 0x32
 80009b8:	f7ff fde4 	bl	8000584 <write_register>
	// Write 0x00 to register 0x00.
	iData[1] = 0x00;
 80009bc:	2300      	movs	r3, #0
 80009be:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_00,&iData[1]);
 80009c0:	1d3b      	adds	r3, r7, #4
 80009c2:	3301      	adds	r3, #1
 80009c4:	4619      	mov	r1, r3
 80009c6:	2000      	movs	r0, #0
 80009c8:	f7ff fddc 	bl	8000584 <write_register>
	//Set the "Power Ctl 1" register (0x02) to 0x9E
	iData[1] = 0x9E;
 80009cc:	239e      	movs	r3, #158	; 0x9e
 80009ce:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL1,&iData[1]);
 80009d0:	1d3b      	adds	r3, r7, #4
 80009d2:	3301      	adds	r3, #1
 80009d4:	4619      	mov	r1, r3
 80009d6:	2002      	movs	r0, #2
 80009d8:	f7ff fdd4 	bl	8000584 <write_register>
}
 80009dc:	bf00      	nop
 80009de:	3708      	adds	r7, #8
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <CS43_Stop>:

void CS43_Stop(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
  uint8_t iData[2];
  CS43_SetMute(1);
 80009ea:	2001      	movs	r0, #1
 80009ec:	f7ff ff6f 	bl	80008ce <CS43_SetMute>
  iData[1] = 0x04;
 80009f0:	2304      	movs	r3, #4
 80009f2:	717b      	strb	r3, [r7, #5]
  write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 80009f4:	1d3b      	adds	r3, r7, #4
 80009f6:	3301      	adds	r3, #1
 80009f8:	4619      	mov	r1, r3
 80009fa:	200e      	movs	r0, #14
 80009fc:	f7ff fdc2 	bl	8000584 <write_register>
	iData[1] = 0x9F;
 8000a00:	239f      	movs	r3, #159	; 0x9f
 8000a02:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL1,&iData[1]);
 8000a04:	1d3b      	adds	r3, r7, #4
 8000a06:	3301      	adds	r3, #1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	2002      	movs	r0, #2
 8000a0c:	f7ff fdba 	bl	8000584 <write_register>
}
 8000a10:	bf00      	nop
 8000a12:	3708      	adds	r7, #8
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <audioI2S_pllClockConfig>:

/**
 * @brief I2S Clock Config
 */
static void audioI2S_pllClockConfig(uint32_t audioFreq)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b088      	sub	sp, #32
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef rccclkinit;
  uint8_t index = 0, freqindex = 0xFF;
 8000a20:	2300      	movs	r3, #0
 8000a22:	77fb      	strb	r3, [r7, #31]
 8000a24:	23ff      	movs	r3, #255	; 0xff
 8000a26:	77bb      	strb	r3, [r7, #30]

  for(index = 0; index < 8; index++)
 8000a28:	2300      	movs	r3, #0
 8000a2a:	77fb      	strb	r3, [r7, #31]
 8000a2c:	e00b      	b.n	8000a46 <audioI2S_pllClockConfig+0x2e>
  {
    if(I2SFreq[index] == audioFreq)
 8000a2e:	7ffb      	ldrb	r3, [r7, #31]
 8000a30:	4a1c      	ldr	r2, [pc, #112]	; (8000aa4 <audioI2S_pllClockConfig+0x8c>)
 8000a32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a36:	687a      	ldr	r2, [r7, #4]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	d101      	bne.n	8000a40 <audioI2S_pllClockConfig+0x28>
    {
      freqindex = index;
 8000a3c:	7ffb      	ldrb	r3, [r7, #31]
 8000a3e:	77bb      	strb	r3, [r7, #30]
  for(index = 0; index < 8; index++)
 8000a40:	7ffb      	ldrb	r3, [r7, #31]
 8000a42:	3301      	adds	r3, #1
 8000a44:	77fb      	strb	r3, [r7, #31]
 8000a46:	7ffb      	ldrb	r3, [r7, #31]
 8000a48:	2b07      	cmp	r3, #7
 8000a4a:	d9f0      	bls.n	8000a2e <audioI2S_pllClockConfig+0x16>
    }
  }
  /* Enable PLLI2S clock */
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 8000a4c:	f107 030c 	add.w	r3, r7, #12
 8000a50:	4618      	mov	r0, r3
 8000a52:	f006 f9f5 	bl	8006e40 <HAL_RCCEx_GetPeriphCLKConfig>
  /* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  if ((freqindex & 0x7) == 0)
 8000a56:	7fbb      	ldrb	r3, [r7, #30]
 8000a58:	f003 0307 	and.w	r3, r3, #7
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d111      	bne.n	8000a84 <audioI2S_pllClockConfig+0x6c>
  {
    /* I2S clock config
    PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) × (PLLI2SN/PLLM)
    I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a60:	2301      	movs	r3, #1
 8000a62:	60fb      	str	r3, [r7, #12]
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 8000a64:	7fbb      	ldrb	r3, [r7, #30]
 8000a66:	4a10      	ldr	r2, [pc, #64]	; (8000aa8 <audioI2S_pllClockConfig+0x90>)
 8000a68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a6c:	613b      	str	r3, [r7, #16]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 8000a6e:	7fbb      	ldrb	r3, [r7, #30]
 8000a70:	4a0e      	ldr	r2, [pc, #56]	; (8000aac <audioI2S_pllClockConfig+0x94>)
 8000a72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a76:	617b      	str	r3, [r7, #20]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8000a78:	f107 030c 	add.w	r3, r7, #12
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f006 f8fd 	bl	8006c7c <HAL_RCCEx_PeriphCLKConfig>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
    rccclkinit.PLLI2S.PLLI2SN = 258;
    rccclkinit.PLLI2S.PLLI2SR = 3;
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
  }
}
 8000a82:	e00b      	b.n	8000a9c <audioI2S_pllClockConfig+0x84>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a84:	2301      	movs	r3, #1
 8000a86:	60fb      	str	r3, [r7, #12]
    rccclkinit.PLLI2S.PLLI2SN = 258;
 8000a88:	f44f 7381 	mov.w	r3, #258	; 0x102
 8000a8c:	613b      	str	r3, [r7, #16]
    rccclkinit.PLLI2S.PLLI2SR = 3;
 8000a8e:	2303      	movs	r3, #3
 8000a90:	617b      	str	r3, [r7, #20]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8000a92:	f107 030c 	add.w	r3, r7, #12
 8000a96:	4618      	mov	r0, r3
 8000a98:	f006 f8f0 	bl	8006c7c <HAL_RCCEx_PeriphCLKConfig>
}
 8000a9c:	bf00      	nop
 8000a9e:	3720      	adds	r7, #32
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	080120fc 	.word	0x080120fc
 8000aa8:	0801211c 	.word	0x0801211c
 8000aac:	0801213c 	.word	0x0801213c

08000ab0 <I2S3_freqUpdate>:

/**
 * @brief update I2S peripheral with selected Sampling Frequency
 */
static bool I2S3_freqUpdate(uint32_t AudioFreq)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  /* Initialize the hAudioOutI2s Instance parameter */
  hAudioI2S->Instance         = SPI3;
 8000ab8:	4b1d      	ldr	r3, [pc, #116]	; (8000b30 <I2S3_freqUpdate+0x80>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a1d      	ldr	r2, [pc, #116]	; (8000b34 <I2S3_freqUpdate+0x84>)
 8000abe:	601a      	str	r2, [r3, #0]

 /* Disable I2S block */
  __HAL_I2S_DISABLE(hAudioI2S);
 8000ac0:	4b1b      	ldr	r3, [pc, #108]	; (8000b30 <I2S3_freqUpdate+0x80>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	69da      	ldr	r2, [r3, #28]
 8000ac8:	4b19      	ldr	r3, [pc, #100]	; (8000b30 <I2S3_freqUpdate+0x80>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ad2:	61da      	str	r2, [r3, #28]

  /* I2S3 peripheral configuration */
  hAudioI2S->Init.AudioFreq   = AudioFreq;
 8000ad4:	4b16      	ldr	r3, [pc, #88]	; (8000b30 <I2S3_freqUpdate+0x80>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	687a      	ldr	r2, [r7, #4]
 8000ada:	615a      	str	r2, [r3, #20]
  hAudioI2S->Init.ClockSource = I2S_CLOCK_PLL;
 8000adc:	4b14      	ldr	r3, [pc, #80]	; (8000b30 <I2S3_freqUpdate+0x80>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	61da      	str	r2, [r3, #28]
  hAudioI2S->Init.CPOL        = I2S_CPOL_LOW;
 8000ae4:	4b12      	ldr	r3, [pc, #72]	; (8000b30 <I2S3_freqUpdate+0x80>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]
  hAudioI2S->Init.DataFormat  = I2S_DATAFORMAT_16B;
 8000aec:	4b10      	ldr	r3, [pc, #64]	; (8000b30 <I2S3_freqUpdate+0x80>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	2200      	movs	r2, #0
 8000af2:	60da      	str	r2, [r3, #12]
  hAudioI2S->Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 8000af4:	4b0e      	ldr	r3, [pc, #56]	; (8000b30 <I2S3_freqUpdate+0x80>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000afc:	611a      	str	r2, [r3, #16]
  hAudioI2S->Init.Mode        = I2S_MODE_MASTER_TX;
 8000afe:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <I2S3_freqUpdate+0x80>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b06:	605a      	str	r2, [r3, #4]
  hAudioI2S->Init.Standard    = I2S_STANDARD_PHILIPS;
 8000b08:	4b09      	ldr	r3, [pc, #36]	; (8000b30 <I2S3_freqUpdate+0x80>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]
  /* Initialize the I2S peripheral with the structure above */
  if(HAL_I2S_Init(hAudioI2S) != HAL_OK)
 8000b10:	4b07      	ldr	r3, [pc, #28]	; (8000b30 <I2S3_freqUpdate+0x80>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4618      	mov	r0, r3
 8000b16:	f004 fc87 	bl	8005428 <HAL_I2S_Init>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <I2S3_freqUpdate+0x74>
  {
    return false;
 8000b20:	2300      	movs	r3, #0
 8000b22:	e000      	b.n	8000b26 <I2S3_freqUpdate+0x76>
  }
  else
  {
    return true;
 8000b24:	2301      	movs	r3, #1
  }
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20000150 	.word	0x20000150
 8000b34:	40003c00 	.word	0x40003c00

08000b38 <audioI2S_setHandle>:

/**
 * @brief set I2S HAL handle
 */
void audioI2S_setHandle(I2S_HandleTypeDef *pI2Shandle)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  hAudioI2S = pI2Shandle;
 8000b40:	4a04      	ldr	r2, [pc, #16]	; (8000b54 <audioI2S_setHandle+0x1c>)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6013      	str	r3, [r2, #0]
}
 8000b46:	bf00      	nop
 8000b48:	370c      	adds	r7, #12
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	20000150 	.word	0x20000150

08000b58 <audioI2S_init>:
 * @param audioFreq - WAV file Audio sampling rate (44.1KHz, 48KHz, ...)
 * @param volume - CS43L22 Codec volume settings (0 - 100)
 * @retval state - true: Successfully, false: Failed
 */
bool audioI2S_init(uint32_t audioFreq)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  //Update PLL Clock Frequency setting
  audioI2S_pllClockConfig(audioFreq);
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	f7ff ff59 	bl	8000a18 <audioI2S_pllClockConfig>
  //Update I2S peripheral sampling frequency
  I2S3_freqUpdate(audioFreq);
 8000b66:	6878      	ldr	r0, [r7, #4]
 8000b68:	f7ff ffa2 	bl	8000ab0 <I2S3_freqUpdate>
  return true;
 8000b6c:	2301      	movs	r3, #1
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
	...

08000b78 <audioI2S_play>:

/**
 * @brief Starts Playing Audio from buffer
 */
bool audioI2S_play(uint16_t* pDataBuf, uint32_t len)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	6039      	str	r1, [r7, #0]
  //Start Codec
  CS43_Start();
 8000b82:	f7ff fee3 	bl	800094c <CS43_Start>
  //Start I2S DMA transfer
  HAL_I2S_Transmit_DMA(hAudioI2S, pDataBuf, DMA_MAX(len/AUDIODATA_SIZE));
 8000b86:	4b0a      	ldr	r3, [pc, #40]	; (8000bb0 <audioI2S_play+0x38>)
 8000b88:	6818      	ldr	r0, [r3, #0]
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000b90:	d203      	bcs.n	8000b9a <audioI2S_play+0x22>
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	085b      	lsrs	r3, r3, #1
 8000b96:	b29b      	uxth	r3, r3
 8000b98:	e001      	b.n	8000b9e <audioI2S_play+0x26>
 8000b9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	6879      	ldr	r1, [r7, #4]
 8000ba2:	f004 fd81 	bl	80056a8 <HAL_I2S_Transmit_DMA>
  return true;
 8000ba6:	2301      	movs	r3, #1
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	20000150 	.word	0x20000150

08000bb4 <audioI2S_stop>:

/**
 * @brief Stop audio
 */
void audioI2S_stop(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  CS43_Stop();
 8000bb8:	f7ff ff14 	bl	80009e4 <CS43_Stop>
  HAL_I2S_DMAStop(hAudioI2S);
 8000bbc:	4b03      	ldr	r3, [pc, #12]	; (8000bcc <audioI2S_stop+0x18>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f004 fe19 	bl	80057f8 <HAL_I2S_DMAStop>
}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	20000150 	.word	0x20000150

08000bd0 <HAL_I2S_TxCpltCallback>:
{

}

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == SPI3)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a04      	ldr	r2, [pc, #16]	; (8000bf0 <HAL_I2S_TxCpltCallback+0x20>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d101      	bne.n	8000be6 <HAL_I2S_TxCpltCallback+0x16>
  {
    audioI2S_fullTransfer_Callback();
 8000be2:	f000 f91f 	bl	8000e24 <audioI2S_fullTransfer_Callback>
  }
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40003c00 	.word	0x40003c00

08000bf4 <HAL_I2S_TxHalfCpltCallback>:

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == SPI3)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a04      	ldr	r2, [pc, #16]	; (8000c14 <HAL_I2S_TxHalfCpltCallback+0x20>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d101      	bne.n	8000c0a <HAL_I2S_TxHalfCpltCallback+0x16>
  {
    audioI2S_halfTransfer_Callback();
 8000c06:	f000 f901 	bl	8000e0c <audioI2S_halfTransfer_Callback>
  }
}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40003c00 	.word	0x40003c00

08000c18 <wavPlayer_reset>:
  PLAYER_CONTROL_EndOfFile,
}PLAYER_CONTROL_e;
static volatile PLAYER_CONTROL_e playerControlSM = PLAYER_CONTROL_Idle;

static void wavPlayer_reset(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  audioRemainSize = 0;
 8000c1c:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <wavPlayer_reset+0x1c>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
  playerReadBytes = 0;
 8000c22:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <wavPlayer_reset+0x20>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	200021b4 	.word	0x200021b4
 8000c38:	200021bc 	.word	0x200021bc

08000c3c <wavPlayer_fileSelect>:
/**
 * @brief Select WAV file to play
 * @retval returns true when file is found in USB Drive
 */
bool wavPlayer_fileSelect(const char* filePath)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08e      	sub	sp, #56	; 0x38
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  WAV_HeaderTypeDef wavHeader;
  UINT readBytes = 0;
 8000c44:	2300      	movs	r3, #0
 8000c46:	60bb      	str	r3, [r7, #8]
  //Open WAV file
  if(f_open(&wavFile, filePath, FA_READ) != FR_OK)
 8000c48:	2201      	movs	r2, #1
 8000c4a:	6879      	ldr	r1, [r7, #4]
 8000c4c:	480d      	ldr	r0, [pc, #52]	; (8000c84 <wavPlayer_fileSelect+0x48>)
 8000c4e:	f00e f9ff 	bl	800f050 <f_open>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <wavPlayer_fileSelect+0x20>
  {
    return false;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	e00e      	b.n	8000c7a <wavPlayer_fileSelect+0x3e>
  }
  //Read WAV file Header
  f_read(&wavFile, &wavHeader, sizeof(wavHeader), &readBytes);
 8000c5c:	f107 0308 	add.w	r3, r7, #8
 8000c60:	f107 010c 	add.w	r1, r7, #12
 8000c64:	222c      	movs	r2, #44	; 0x2c
 8000c66:	4807      	ldr	r0, [pc, #28]	; (8000c84 <wavPlayer_fileSelect+0x48>)
 8000c68:	f00e fcc5 	bl	800f5f6 <f_read>
  //Get audio data size
  fileLength = wavHeader.FileSize;
 8000c6c:	693b      	ldr	r3, [r7, #16]
 8000c6e:	4a06      	ldr	r2, [pc, #24]	; (8000c88 <wavPlayer_fileSelect+0x4c>)
 8000c70:	6013      	str	r3, [r2, #0]
  //Play the WAV file with frequency specified in header
  samplingFreq = wavHeader.SampleRate;
 8000c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c74:	4a05      	ldr	r2, [pc, #20]	; (8000c8c <wavPlayer_fileSelect+0x50>)
 8000c76:	6013      	str	r3, [r2, #0]
  return true;
 8000c78:	2301      	movs	r3, #1
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3738      	adds	r7, #56	; 0x38
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20000158 	.word	0x20000158
 8000c88:	200011b0 	.word	0x200011b0
 8000c8c:	200021b8 	.word	0x200021b8

08000c90 <wavPlayer_play>:

/**
 * @brief WAV File Play
 */
void wavPlayer_play(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  isFinished = false;
 8000c94:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <wavPlayer_play+0x4c>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	701a      	strb	r2, [r3, #0]
  //Initialise I2S Audio Sampling settings
  audioI2S_init(samplingFreq);
 8000c9a:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <wavPlayer_play+0x50>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff ff5a 	bl	8000b58 <audioI2S_init>
  //Read Audio data from USB Disk
  f_lseek(&wavFile, 0);
 8000ca4:	f04f 0200 	mov.w	r2, #0
 8000ca8:	f04f 0300 	mov.w	r3, #0
 8000cac:	480d      	ldr	r0, [pc, #52]	; (8000ce4 <wavPlayer_play+0x54>)
 8000cae:	f00e ff82 	bl	800fbb6 <f_lseek>
  f_read (&wavFile, &audioBuffer[0], AUDIO_BUFFER_SIZE, &playerReadBytes);
 8000cb2:	4b0d      	ldr	r3, [pc, #52]	; (8000ce8 <wavPlayer_play+0x58>)
 8000cb4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000cb8:	490c      	ldr	r1, [pc, #48]	; (8000cec <wavPlayer_play+0x5c>)
 8000cba:	480a      	ldr	r0, [pc, #40]	; (8000ce4 <wavPlayer_play+0x54>)
 8000cbc:	f00e fc9b 	bl	800f5f6 <f_read>
  audioRemainSize = fileLength - playerReadBytes;
 8000cc0:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <wavPlayer_play+0x60>)
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <wavPlayer_play+0x58>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	1ad3      	subs	r3, r2, r3
 8000cca:	4a0a      	ldr	r2, [pc, #40]	; (8000cf4 <wavPlayer_play+0x64>)
 8000ccc:	6013      	str	r3, [r2, #0]
  //Start playing the WAV
  audioI2S_play((uint16_t *)&audioBuffer[0], AUDIO_BUFFER_SIZE);
 8000cce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cd2:	4806      	ldr	r0, [pc, #24]	; (8000cec <wavPlayer_play+0x5c>)
 8000cd4:	f7ff ff50 	bl	8000b78 <audioI2S_play>
}
 8000cd8:	bf00      	nop
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	200021c0 	.word	0x200021c0
 8000ce0:	200021b8 	.word	0x200021b8
 8000ce4:	20000158 	.word	0x20000158
 8000ce8:	200021bc 	.word	0x200021bc
 8000cec:	200011b4 	.word	0x200011b4
 8000cf0:	200011b0 	.word	0x200011b0
 8000cf4:	200021b4 	.word	0x200021b4

08000cf8 <wavPlayer_process>:

/**
 * @brief Process WAV
 */
void wavPlayer_process(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  switch(playerControlSM)
 8000cfc:	4b30      	ldr	r3, [pc, #192]	; (8000dc0 <wavPlayer_process+0xc8>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	2b03      	cmp	r3, #3
 8000d04:	d859      	bhi.n	8000dba <wavPlayer_process+0xc2>
 8000d06:	a201      	add	r2, pc, #4	; (adr r2, 8000d0c <wavPlayer_process+0x14>)
 8000d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d0c:	08000db9 	.word	0x08000db9
 8000d10:	08000d1d 	.word	0x08000d1d
 8000d14:	08000d5f 	.word	0x08000d5f
 8000d18:	08000da1 	.word	0x08000da1
  {
  case PLAYER_CONTROL_Idle:
    break;

  case PLAYER_CONTROL_HalfBuffer:
    playerReadBytes = 0;
 8000d1c:	4b29      	ldr	r3, [pc, #164]	; (8000dc4 <wavPlayer_process+0xcc>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 8000d22:	4b27      	ldr	r3, [pc, #156]	; (8000dc0 <wavPlayer_process+0xc8>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	701a      	strb	r2, [r3, #0]
    f_read (&wavFile, &audioBuffer[0], AUDIO_BUFFER_SIZE/2, &playerReadBytes);
 8000d28:	4b26      	ldr	r3, [pc, #152]	; (8000dc4 <wavPlayer_process+0xcc>)
 8000d2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d2e:	4926      	ldr	r1, [pc, #152]	; (8000dc8 <wavPlayer_process+0xd0>)
 8000d30:	4826      	ldr	r0, [pc, #152]	; (8000dcc <wavPlayer_process+0xd4>)
 8000d32:	f00e fc60 	bl	800f5f6 <f_read>
    if(audioRemainSize > (AUDIO_BUFFER_SIZE / 2))
 8000d36:	4b26      	ldr	r3, [pc, #152]	; (8000dd0 <wavPlayer_process+0xd8>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000d3e:	d907      	bls.n	8000d50 <wavPlayer_process+0x58>
    {
      audioRemainSize -= playerReadBytes;
 8000d40:	4b23      	ldr	r3, [pc, #140]	; (8000dd0 <wavPlayer_process+0xd8>)
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	4b1f      	ldr	r3, [pc, #124]	; (8000dc4 <wavPlayer_process+0xcc>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	1ad3      	subs	r3, r2, r3
 8000d4a:	4a21      	ldr	r2, [pc, #132]	; (8000dd0 <wavPlayer_process+0xd8>)
 8000d4c:	6013      	str	r3, [r2, #0]
    else
    {
      audioRemainSize = 0;
      playerControlSM = PLAYER_CONTROL_EndOfFile;
    }
    break;
 8000d4e:	e034      	b.n	8000dba <wavPlayer_process+0xc2>
      audioRemainSize = 0;
 8000d50:	4b1f      	ldr	r3, [pc, #124]	; (8000dd0 <wavPlayer_process+0xd8>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
      playerControlSM = PLAYER_CONTROL_EndOfFile;
 8000d56:	4b1a      	ldr	r3, [pc, #104]	; (8000dc0 <wavPlayer_process+0xc8>)
 8000d58:	2203      	movs	r2, #3
 8000d5a:	701a      	strb	r2, [r3, #0]
    break;
 8000d5c:	e02d      	b.n	8000dba <wavPlayer_process+0xc2>

  case PLAYER_CONTROL_FullBuffer:
    playerReadBytes = 0;
 8000d5e:	4b19      	ldr	r3, [pc, #100]	; (8000dc4 <wavPlayer_process+0xcc>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 8000d64:	4b16      	ldr	r3, [pc, #88]	; (8000dc0 <wavPlayer_process+0xc8>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	701a      	strb	r2, [r3, #0]
    f_read (&wavFile, &audioBuffer[AUDIO_BUFFER_SIZE/2], AUDIO_BUFFER_SIZE/2, &playerReadBytes);
 8000d6a:	4b16      	ldr	r3, [pc, #88]	; (8000dc4 <wavPlayer_process+0xcc>)
 8000d6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d70:	4918      	ldr	r1, [pc, #96]	; (8000dd4 <wavPlayer_process+0xdc>)
 8000d72:	4816      	ldr	r0, [pc, #88]	; (8000dcc <wavPlayer_process+0xd4>)
 8000d74:	f00e fc3f 	bl	800f5f6 <f_read>
    if(audioRemainSize > (AUDIO_BUFFER_SIZE / 2))
 8000d78:	4b15      	ldr	r3, [pc, #84]	; (8000dd0 <wavPlayer_process+0xd8>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000d80:	d907      	bls.n	8000d92 <wavPlayer_process+0x9a>
    {
      audioRemainSize -= playerReadBytes;
 8000d82:	4b13      	ldr	r3, [pc, #76]	; (8000dd0 <wavPlayer_process+0xd8>)
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	4b0f      	ldr	r3, [pc, #60]	; (8000dc4 <wavPlayer_process+0xcc>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	1ad3      	subs	r3, r2, r3
 8000d8c:	4a10      	ldr	r2, [pc, #64]	; (8000dd0 <wavPlayer_process+0xd8>)
 8000d8e:	6013      	str	r3, [r2, #0]
    else
    {
      audioRemainSize = 0;
      playerControlSM = PLAYER_CONTROL_EndOfFile;
    }
    break;
 8000d90:	e013      	b.n	8000dba <wavPlayer_process+0xc2>
      audioRemainSize = 0;
 8000d92:	4b0f      	ldr	r3, [pc, #60]	; (8000dd0 <wavPlayer_process+0xd8>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
      playerControlSM = PLAYER_CONTROL_EndOfFile;
 8000d98:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <wavPlayer_process+0xc8>)
 8000d9a:	2203      	movs	r2, #3
 8000d9c:	701a      	strb	r2, [r3, #0]
    break;
 8000d9e:	e00c      	b.n	8000dba <wavPlayer_process+0xc2>

  case PLAYER_CONTROL_EndOfFile:
    f_close(&wavFile);
 8000da0:	480a      	ldr	r0, [pc, #40]	; (8000dcc <wavPlayer_process+0xd4>)
 8000da2:	f00e fede 	bl	800fb62 <f_close>
    wavPlayer_reset();
 8000da6:	f7ff ff37 	bl	8000c18 <wavPlayer_reset>
    isFinished = true;
 8000daa:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <wavPlayer_process+0xe0>)
 8000dac:	2201      	movs	r2, #1
 8000dae:	701a      	strb	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 8000db0:	4b03      	ldr	r3, [pc, #12]	; (8000dc0 <wavPlayer_process+0xc8>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	701a      	strb	r2, [r3, #0]
    break;
 8000db6:	e000      	b.n	8000dba <wavPlayer_process+0xc2>
    break;
 8000db8:	bf00      	nop
  }
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	200021c1 	.word	0x200021c1
 8000dc4:	200021bc 	.word	0x200021bc
 8000dc8:	200011b4 	.word	0x200011b4
 8000dcc:	20000158 	.word	0x20000158
 8000dd0:	200021b4 	.word	0x200021b4
 8000dd4:	200019b4 	.word	0x200019b4
 8000dd8:	200021c0 	.word	0x200021c0

08000ddc <wavPlayer_stop>:

/**
 * @brief WAV stop
 */
void wavPlayer_stop(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  audioI2S_stop();
 8000de0:	f7ff fee8 	bl	8000bb4 <audioI2S_stop>
  isFinished = true;
 8000de4:	4b02      	ldr	r3, [pc, #8]	; (8000df0 <wavPlayer_stop+0x14>)
 8000de6:	2201      	movs	r2, #1
 8000de8:	701a      	strb	r2, [r3, #0]
}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	200021c0 	.word	0x200021c0

08000df4 <wavPlayer_isFinished>:

/**
 * @brief isEndofFile reached
 */
bool wavPlayer_isFinished(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  return isFinished;
 8000df8:	4b03      	ldr	r3, [pc, #12]	; (8000e08 <wavPlayer_isFinished+0x14>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	200021c0 	.word	0x200021c0

08000e0c <audioI2S_halfTransfer_Callback>:

/**
 * @brief Half/Full transfer Audio callback for buffer management
 */
void audioI2S_halfTransfer_Callback(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  playerControlSM = PLAYER_CONTROL_HalfBuffer;
 8000e10:	4b03      	ldr	r3, [pc, #12]	; (8000e20 <audioI2S_halfTransfer_Callback+0x14>)
 8000e12:	2201      	movs	r2, #1
 8000e14:	701a      	strb	r2, [r3, #0]
}
 8000e16:	bf00      	nop
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	200021c1 	.word	0x200021c1

08000e24 <audioI2S_fullTransfer_Callback>:
void audioI2S_fullTransfer_Callback(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  playerControlSM = PLAYER_CONTROL_FullBuffer;
 8000e28:	4b03      	ldr	r3, [pc, #12]	; (8000e38 <audioI2S_fullTransfer_Callback+0x14>)
 8000e2a:	2202      	movs	r2, #2
 8000e2c:	701a      	strb	r2, [r3, #0]
//  audioI2S_changeBuffer((uint16_t*)&audioBuffer[0], AUDIO_BUFFER_SIZE / 2);
}
 8000e2e:	bf00      	nop
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	200021c1 	.word	0x200021c1

08000e3c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000e44:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e48:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000e4c:	f003 0301 	and.w	r3, r3, #1
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d013      	beq.n	8000e7c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000e54:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e58:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000e5c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d00b      	beq.n	8000e7c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000e64:	e000      	b.n	8000e68 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000e66:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000e68:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d0f9      	beq.n	8000e66 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000e72:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e76:	687a      	ldr	r2, [r7, #4]
 8000e78:	b2d2      	uxtb	r2, r2
 8000e7a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000e7c:	687b      	ldr	r3, [r7, #4]
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
	...

08000e8c <primarySoundFileName>:
		GPIO_PIN_7,
		};
char list[100];
int mode =0; //0 noraml mode | 1 learning mode | 2 recording mode,
int lastMode=0;
char *primarySoundFileName(int i){
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b09c      	sub	sp, #112	; 0x70
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
	char fileName[100];
	sprintf(fileName,"%s/%d.wav",instrements[instrement],i);
 8000e94:	4b11      	ldr	r3, [pc, #68]	; (8000edc <primarySoundFileName+0x50>)
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	4613      	mov	r3, r2
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	4413      	add	r3, r2
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	4a0f      	ldr	r2, [pc, #60]	; (8000ee0 <primarySoundFileName+0x54>)
 8000ea2:	441a      	add	r2, r3
 8000ea4:	f107 0008 	add.w	r0, r7, #8
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	490e      	ldr	r1, [pc, #56]	; (8000ee4 <primarySoundFileName+0x58>)
 8000eac:	f010 f870 	bl	8010f90 <siprintf>
    char* reslt =(char*) malloc(strlen(fileName)*sizeof(char));
 8000eb0:	f107 0308 	add.w	r3, r7, #8
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff f98b 	bl	80001d0 <strlen>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f00f fec3 	bl	8010c48 <malloc>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	66fb      	str	r3, [r7, #108]	; 0x6c
    strcpy(reslt,fileName);
 8000ec6:	f107 0308 	add.w	r3, r7, #8
 8000eca:	4619      	mov	r1, r3
 8000ecc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8000ece:	f010 f87f 	bl	8010fd0 <strcpy>
	return reslt ;
 8000ed2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
};
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3770      	adds	r7, #112	; 0x70
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20003500 	.word	0x20003500
 8000ee0:	20000004 	.word	0x20000004
 8000ee4:	08012060 	.word	0x08012060

08000ee8 <_write>:



int _write(int file, char *ptr, int len){
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b086      	sub	sp, #24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
	for(int i =0; i < len; i++){
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]
 8000ef8:	e009      	b.n	8000f0e <_write+0x26>
		ITM_SendChar(*ptr++);
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	1c5a      	adds	r2, r3, #1
 8000efe:	60ba      	str	r2, [r7, #8]
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff ff9a 	bl	8000e3c <ITM_SendChar>
	for(int i =0; i < len; i++){
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	617b      	str	r3, [r7, #20]
 8000f0e:	697a      	ldr	r2, [r7, #20]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	429a      	cmp	r2, r3
 8000f14:	dbf1      	blt.n	8000efa <_write+0x12>
	}
	return len;
 8000f16:	687b      	ldr	r3, [r7, #4]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3718      	adds	r7, #24
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <setClickToggle>:




void setClickToggle(){
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
	clickToggle=!clickToggle;
 8000f24:	4b09      	ldr	r3, [pc, #36]	; (8000f4c <setClickToggle+0x2c>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	bf14      	ite	ne
 8000f2c:	2301      	movne	r3, #1
 8000f2e:	2300      	moveq	r3, #0
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	f083 0301 	eor.w	r3, r3, #1
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	f003 0301 	and.w	r3, r3, #1
 8000f3c:	b2da      	uxtb	r2, r3
 8000f3e:	4b03      	ldr	r3, [pc, #12]	; (8000f4c <setClickToggle+0x2c>)
 8000f40:	701a      	strb	r2, [r3, #0]
}
 8000f42:	bf00      	nop
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	20002308 	.word	0x20002308

08000f50 <changeInstrement>:

void changeInstrement(){
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
	instrement++;
 8000f54:	4b0b      	ldr	r3, [pc, #44]	; (8000f84 <changeInstrement+0x34>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	4a0a      	ldr	r2, [pc, #40]	; (8000f84 <changeInstrement+0x34>)
 8000f5c:	6013      	str	r3, [r2, #0]
	instrement%=Ninstrements;
 8000f5e:	4b09      	ldr	r3, [pc, #36]	; (8000f84 <changeInstrement+0x34>)
 8000f60:	6819      	ldr	r1, [r3, #0]
 8000f62:	4b09      	ldr	r3, [pc, #36]	; (8000f88 <changeInstrement+0x38>)
 8000f64:	fb83 3201 	smull	r3, r2, r3, r1
 8000f68:	17cb      	asrs	r3, r1, #31
 8000f6a:	1ad2      	subs	r2, r2, r3
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	4413      	add	r3, r2
 8000f72:	1aca      	subs	r2, r1, r3
 8000f74:	4b03      	ldr	r3, [pc, #12]	; (8000f84 <changeInstrement+0x34>)
 8000f76:	601a      	str	r2, [r3, #0]
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	20003500 	.word	0x20003500
 8000f88:	55555556 	.word	0x55555556

08000f8c <blinkLeds>:
void blinkLeds(){
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
	for (int i=0;i<Nsounds;i++){
 8000f92:	2300      	movs	r3, #0
 8000f94:	607b      	str	r3, [r7, #4]
 8000f96:	e012      	b.n	8000fbe <blinkLeds+0x32>
		HAL_GPIO_WritePin(GPIOE, pinLed[i], i==key);
 8000f98:	4a0d      	ldr	r2, [pc, #52]	; (8000fd0 <blinkLeds+0x44>)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000fa0:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <blinkLeds+0x48>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	429a      	cmp	r2, r3
 8000fa8:	bf0c      	ite	eq
 8000faa:	2301      	moveq	r3, #1
 8000fac:	2300      	movne	r3, #0
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	4809      	ldr	r0, [pc, #36]	; (8000fd8 <blinkLeds+0x4c>)
 8000fb4:	f001 fe40 	bl	8002c38 <HAL_GPIO_WritePin>
	for (int i=0;i<Nsounds;i++){
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	607b      	str	r3, [r7, #4]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2b07      	cmp	r3, #7
 8000fc2:	dde9      	ble.n	8000f98 <blinkLeds+0xc>
	}
}
 8000fc4:	bf00      	nop
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000040 	.word	0x20000040
 8000fd4:	20000000 	.word	0x20000000
 8000fd8:	40021000 	.word	0x40021000

08000fdc <setKey>:

void setKey(int i){
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
	key=i;
 8000fe4:	4a05      	ldr	r2, [pc, #20]	; (8000ffc <setKey+0x20>)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6013      	str	r3, [r2, #0]
	setClickToggle();
 8000fea:	f7ff ff99 	bl	8000f20 <setClickToggle>
	blinkLeds();
 8000fee:	f7ff ffcd 	bl	8000f8c <blinkLeds>
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000000 	.word	0x20000000

08001000 <readNewKey>:
void updateSetKey(){
	key++;
	key%=8;
	setClickToggle();
}
void readNewKey(){
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
	if(rIndex==strlen(bodyText)){
 8001004:	480f      	ldr	r0, [pc, #60]	; (8001044 <readNewKey+0x44>)
 8001006:	f7ff f8e3 	bl	80001d0 <strlen>
 800100a:	4603      	mov	r3, r0
 800100c:	4a0e      	ldr	r2, [pc, #56]	; (8001048 <readNewKey+0x48>)
 800100e:	6812      	ldr	r2, [r2, #0]
 8001010:	4293      	cmp	r3, r2
 8001012:	d103      	bne.n	800101c <readNewKey+0x1c>
//		HAL_TIM_Base_Stop_IT(&htim6);
		rIndex=0;
 8001014:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <readNewKey+0x48>)
 8001016:	2200      	movs	r2, #0
 8001018:	601a      	str	r2, [r3, #0]
//		mode=0;
		return ;
 800101a:	e012      	b.n	8001042 <readNewKey+0x42>
	}
	setKey((int) bodyText[rIndex]-48);
 800101c:	4b0a      	ldr	r3, [pc, #40]	; (8001048 <readNewKey+0x48>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a08      	ldr	r2, [pc, #32]	; (8001044 <readNewKey+0x44>)
 8001022:	5cd3      	ldrb	r3, [r2, r3]
 8001024:	3b30      	subs	r3, #48	; 0x30
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff ffd8 	bl	8000fdc <setKey>
	printf("%d_",key);
 800102c:	4b07      	ldr	r3, [pc, #28]	; (800104c <readNewKey+0x4c>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4619      	mov	r1, r3
 8001032:	4807      	ldr	r0, [pc, #28]	; (8001050 <readNewKey+0x50>)
 8001034:	f00f ff0e 	bl	8010e54 <iprintf>
	rIndex++;
 8001038:	4b03      	ldr	r3, [pc, #12]	; (8001048 <readNewKey+0x48>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	3301      	adds	r3, #1
 800103e:	4a02      	ldr	r2, [pc, #8]	; (8001048 <readNewKey+0x48>)
 8001040:	6013      	str	r3, [r2, #0]

}
 8001042:	bd80      	pop	{r7, pc}
 8001044:	2000349c 	.word	0x2000349c
 8001048:	20003504 	.word	0x20003504
 800104c:	20000000 	.word	0x20000000
 8001050:	0801206c 	.word	0x0801206c

08001054 <bodyHeaderFile>:
	return 1; //success
}



void bodyHeaderFile(){
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0

	int index =0;
 800105a:	2300      	movs	r3, #0
 800105c:	607b      	str	r3, [r7, #4]
	for(int i=0;i<strlen(rtext);i++){
 800105e:	2300      	movs	r3, #0
 8001060:	603b      	str	r3, [r7, #0]
 8001062:	e022      	b.n	80010aa <bodyHeaderFile+0x56>
		if(rtext[i]=='\n'){
 8001064:	4a1c      	ldr	r2, [pc, #112]	; (80010d8 <bodyHeaderFile+0x84>)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	4413      	add	r3, r2
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	2b0a      	cmp	r3, #10
 800106e:	d103      	bne.n	8001078 <bodyHeaderFile+0x24>
			index=i+1;
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	3301      	adds	r3, #1
 8001074:	607b      	str	r3, [r7, #4]
			continue;
 8001076:	e015      	b.n	80010a4 <bodyHeaderFile+0x50>
		}
		if(index==0){
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d109      	bne.n	8001092 <bodyHeaderFile+0x3e>
			headerText[i]=rtext[i];
 800107e:	4a16      	ldr	r2, [pc, #88]	; (80010d8 <bodyHeaderFile+0x84>)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	4413      	add	r3, r2
 8001084:	7819      	ldrb	r1, [r3, #0]
 8001086:	4a15      	ldr	r2, [pc, #84]	; (80010dc <bodyHeaderFile+0x88>)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	4413      	add	r3, r2
 800108c:	460a      	mov	r2, r1
 800108e:	701a      	strb	r2, [r3, #0]
 8001090:	e008      	b.n	80010a4 <bodyHeaderFile+0x50>
		}
		else{
			bodyText[i-index]=rtext[i];
 8001092:	683a      	ldr	r2, [r7, #0]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	490f      	ldr	r1, [pc, #60]	; (80010d8 <bodyHeaderFile+0x84>)
 800109a:	683a      	ldr	r2, [r7, #0]
 800109c:	440a      	add	r2, r1
 800109e:	7811      	ldrb	r1, [r2, #0]
 80010a0:	4a0f      	ldr	r2, [pc, #60]	; (80010e0 <bodyHeaderFile+0x8c>)
 80010a2:	54d1      	strb	r1, [r2, r3]
	for(int i=0;i<strlen(rtext);i++){
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	3301      	adds	r3, #1
 80010a8:	603b      	str	r3, [r7, #0]
 80010aa:	480b      	ldr	r0, [pc, #44]	; (80010d8 <bodyHeaderFile+0x84>)
 80010ac:	f7ff f890 	bl	80001d0 <strlen>
 80010b0:	4602      	mov	r2, r0
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d8d5      	bhi.n	8001064 <bodyHeaderFile+0x10>
		}
	}
	printf("head:%s",headerText);
 80010b8:	4908      	ldr	r1, [pc, #32]	; (80010dc <bodyHeaderFile+0x88>)
 80010ba:	480a      	ldr	r0, [pc, #40]	; (80010e4 <bodyHeaderFile+0x90>)
 80010bc:	f00f feca 	bl	8010e54 <iprintf>
	printf("body:%s,",bodyText);
 80010c0:	4907      	ldr	r1, [pc, #28]	; (80010e0 <bodyHeaderFile+0x8c>)
 80010c2:	4809      	ldr	r0, [pc, #36]	; (80010e8 <bodyHeaderFile+0x94>)
 80010c4:	f00f fec6 	bl	8010e54 <iprintf>
	printf("rtext:%s,",rtext);
 80010c8:	4903      	ldr	r1, [pc, #12]	; (80010d8 <bodyHeaderFile+0x84>)
 80010ca:	4808      	ldr	r0, [pc, #32]	; (80010ec <bodyHeaderFile+0x98>)
 80010cc:	f00f fec2 	bl	8010e54 <iprintf>
}
 80010d0:	bf00      	nop
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20003370 	.word	0x20003370
 80010dc:	20003438 	.word	0x20003438
 80010e0:	2000349c 	.word	0x2000349c
 80010e4:	08012070 	.word	0x08012070
 80010e8:	08012078 	.word	0x08012078
 80010ec:	08012084 	.word	0x08012084

080010f0 <UsbFile_Read>:


bool UsbFile_Read(char fileName[])
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]

	//Open file for Reading
	if(f_open(&myFile, fileName, FA_READ) != FR_OK)
 80010f8:	2201      	movs	r2, #1
 80010fa:	6879      	ldr	r1, [r7, #4]
 80010fc:	481a      	ldr	r0, [pc, #104]	; (8001168 <UsbFile_Read+0x78>)
 80010fe:	f00d ffa7 	bl	800f050 <f_open>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <UsbFile_Read+0x1c>
	{
		return 0; //error
 8001108:	2300      	movs	r3, #0
 800110a:	e029      	b.n	8001160 <UsbFile_Read+0x70>
	}
	else
	{	//Read text from files until NULL
		for(uint8_t i=0; i<100; i++)
 800110c:	2300      	movs	r3, #0
 800110e:	73fb      	strb	r3, [r7, #15]
 8001110:	e017      	b.n	8001142 <UsbFile_Read+0x52>
		{
			res = f_read(&myFile, (uint8_t*)&rtext[i], 1, &bytesread);
 8001112:	7bfb      	ldrb	r3, [r7, #15]
 8001114:	4a15      	ldr	r2, [pc, #84]	; (800116c <UsbFile_Read+0x7c>)
 8001116:	1899      	adds	r1, r3, r2
 8001118:	4b15      	ldr	r3, [pc, #84]	; (8001170 <UsbFile_Read+0x80>)
 800111a:	2201      	movs	r2, #1
 800111c:	4812      	ldr	r0, [pc, #72]	; (8001168 <UsbFile_Read+0x78>)
 800111e:	f00e fa6a 	bl	800f5f6 <f_read>
 8001122:	4603      	mov	r3, r0
 8001124:	461a      	mov	r2, r3
 8001126:	4b13      	ldr	r3, [pc, #76]	; (8001174 <UsbFile_Read+0x84>)
 8001128:	701a      	strb	r2, [r3, #0]
			if(rtext[i] == 0x00)
 800112a:	7bfb      	ldrb	r3, [r7, #15]
 800112c:	4a0f      	ldr	r2, [pc, #60]	; (800116c <UsbFile_Read+0x7c>)
 800112e:	5cd3      	ldrb	r3, [r2, r3]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d103      	bne.n	800113c <UsbFile_Read+0x4c>
			{
				bytesread = i;
 8001134:	7bfb      	ldrb	r3, [r7, #15]
 8001136:	4a0e      	ldr	r2, [pc, #56]	; (8001170 <UsbFile_Read+0x80>)
 8001138:	6013      	str	r3, [r2, #0]
				break;
 800113a:	e005      	b.n	8001148 <UsbFile_Read+0x58>
		for(uint8_t i=0; i<100; i++)
 800113c:	7bfb      	ldrb	r3, [r7, #15]
 800113e:	3301      	adds	r3, #1
 8001140:	73fb      	strb	r3, [r7, #15]
 8001142:	7bfb      	ldrb	r3, [r7, #15]
 8001144:	2b63      	cmp	r3, #99	; 0x63
 8001146:	d9e4      	bls.n	8001112 <UsbFile_Read+0x22>
			}
		}
		//Reading error handling
		if(bytesread==0) return 0;
 8001148:	4b09      	ldr	r3, [pc, #36]	; (8001170 <UsbFile_Read+0x80>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d101      	bne.n	8001154 <UsbFile_Read+0x64>
 8001150:	2300      	movs	r3, #0
 8001152:	e005      	b.n	8001160 <UsbFile_Read+0x70>
	}

	//Close file
	f_close(&myFile);
 8001154:	4804      	ldr	r0, [pc, #16]	; (8001168 <UsbFile_Read+0x78>)
 8001156:	f00e fd04 	bl	800fb62 <f_close>
	bodyHeaderFile();
 800115a:	f7ff ff7b 	bl	8001054 <bodyHeaderFile>
	return 1; //success
 800115e:	2301      	movs	r3, #1
}
 8001160:	4618      	mov	r0, r3
 8001162:	3710      	adds	r7, #16
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	20002310 	.word	0x20002310
 800116c:	20003370 	.word	0x20003370
 8001170:	2000336c 	.word	0x2000336c
 8001174:	20003368 	.word	0x20003368

08001178 <changeMode>:





void changeMode(){
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
mode++;
 800117c:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <changeMode+0x34>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	3301      	adds	r3, #1
 8001182:	4a0a      	ldr	r2, [pc, #40]	; (80011ac <changeMode+0x34>)
 8001184:	6013      	str	r3, [r2, #0]
mode%=3;
 8001186:	4b09      	ldr	r3, [pc, #36]	; (80011ac <changeMode+0x34>)
 8001188:	6819      	ldr	r1, [r3, #0]
 800118a:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <changeMode+0x38>)
 800118c:	fb83 3201 	smull	r3, r2, r3, r1
 8001190:	17cb      	asrs	r3, r1, #31
 8001192:	1ad2      	subs	r2, r2, r3
 8001194:	4613      	mov	r3, r2
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	4413      	add	r3, r2
 800119a:	1aca      	subs	r2, r1, r3
 800119c:	4b03      	ldr	r3, [pc, #12]	; (80011ac <changeMode+0x34>)
 800119e:	601a      	str	r2, [r3, #0]

}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	20003508 	.word	0x20003508
 80011b0:	55555556 	.word	0x55555556

080011b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011b4:	b590      	push	{r4, r7, lr}
 80011b6:	b095      	sub	sp, #84	; 0x54
 80011b8:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011ba:	f000 fe01 	bl	8001dc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011be:	f000 f8f3 	bl	80013a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011c2:	f000 fa0d 	bl	80015e0 <MX_GPIO_Init>
  MX_DMA_Init();
 80011c6:	f000 f9eb 	bl	80015a0 <MX_DMA_Init>
  MX_I2C1_Init();
 80011ca:	f000 f957 	bl	800147c <MX_I2C1_Init>
  MX_I2S3_Init();
 80011ce:	f000 f983 	bl	80014d8 <MX_I2S3_Init>
  MX_FATFS_Init();
 80011d2:	f007 f9ff 	bl	80085d4 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 80011d6:	f00f f9fb 	bl	80105d0 <MX_USB_HOST_Init>
  MX_TIM6_Init();
 80011da:	f000 f9ab 	bl	8001534 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  CS43_Init(hi2c1, MODE_I2S);
 80011de:	4c63      	ldr	r4, [pc, #396]	; (800136c <main+0x1b8>)
 80011e0:	2300      	movs	r3, #0
 80011e2:	9311      	str	r3, [sp, #68]	; 0x44
 80011e4:	4668      	mov	r0, sp
 80011e6:	f104 0310 	add.w	r3, r4, #16
 80011ea:	2244      	movs	r2, #68	; 0x44
 80011ec:	4619      	mov	r1, r3
 80011ee:	f00f fd3b 	bl	8010c68 <memcpy>
 80011f2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80011f6:	f7ff f9ff 	bl	80005f8 <CS43_Init>
  CS43_SetVolume(220);
 80011fa:	20dc      	movs	r0, #220	; 0xdc
 80011fc:	f7ff fb4c 	bl	8000898 <CS43_SetVolume>
  CS43_Enable_RightLeft(CS43_RIGHT_LEFT);
 8001200:	2003      	movs	r0, #3
 8001202:	f7ff faff 	bl	8000804 <CS43_Enable_RightLeft>

  audioI2S_setHandle(&hi2s3);
 8001206:	485a      	ldr	r0, [pc, #360]	; (8001370 <main+0x1bc>)
 8001208:	f7ff fc96 	bl	8000b38 <audioI2S_setHandle>
  bool isSdCardMounted=0;
 800120c:	2300      	movs	r3, #0
 800120e:	71fb      	strb	r3, [r7, #7]

  while (1)
  {

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001210:	f00f fa04 	bl	801061c <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    if(Appli_state==APPLICATION_START){
 8001214:	4b57      	ldr	r3, [pc, #348]	; (8001374 <main+0x1c0>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	2b01      	cmp	r3, #1
 800121a:	d106      	bne.n	800122a <main+0x76>
    	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12, GPIO_PIN_SET);
 800121c:	2201      	movs	r2, #1
 800121e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001222:	4855      	ldr	r0, [pc, #340]	; (8001378 <main+0x1c4>)
 8001224:	f001 fd08 	bl	8002c38 <HAL_GPIO_WritePin>
 8001228:	e009      	b.n	800123e <main+0x8a>
    }else if(Appli_state==APPLICATION_DISCONNECT){
 800122a:	4b52      	ldr	r3, [pc, #328]	; (8001374 <main+0x1c0>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	2b03      	cmp	r3, #3
 8001230:	d105      	bne.n	800123e <main+0x8a>
    	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12, GPIO_PIN_RESET);
 8001232:	2200      	movs	r2, #0
 8001234:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001238:	484f      	ldr	r0, [pc, #316]	; (8001378 <main+0x1c4>)
 800123a:	f001 fcfd 	bl	8002c38 <HAL_GPIO_WritePin>
    }
    if(Appli_state==APPLICATION_READY){
 800123e:	4b4d      	ldr	r3, [pc, #308]	; (8001374 <main+0x1c0>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	2b02      	cmp	r3, #2
 8001244:	d1e4      	bne.n	8001210 <main+0x5c>
    	if(!isSdCardMounted){
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	f083 0301 	eor.w	r3, r3, #1
 800124c:	b2db      	uxtb	r3, r3
 800124e:	2b00      	cmp	r3, #0
 8001250:	d004      	beq.n	800125c <main+0xa8>
    	f_mount(&USBHFatFS,(const TCHAR*)USBHPath,0);
 8001252:	2200      	movs	r2, #0
 8001254:	4949      	ldr	r1, [pc, #292]	; (800137c <main+0x1c8>)
 8001256:	484a      	ldr	r0, [pc, #296]	; (8001380 <main+0x1cc>)
 8001258:	f00d feb4 	bl	800efc4 <f_mount>

    	}
if(lastMode!=mode){
 800125c:	4b49      	ldr	r3, [pc, #292]	; (8001384 <main+0x1d0>)
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	4b49      	ldr	r3, [pc, #292]	; (8001388 <main+0x1d4>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	429a      	cmp	r2, r3
 8001266:	d027      	beq.n	80012b8 <main+0x104>
	lastMode=mode;
 8001268:	4b47      	ldr	r3, [pc, #284]	; (8001388 <main+0x1d4>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a45      	ldr	r2, [pc, #276]	; (8001384 <main+0x1d0>)
 800126e:	6013      	str	r3, [r2, #0]
	switch(mode){
 8001270:	4b45      	ldr	r3, [pc, #276]	; (8001388 <main+0x1d4>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2b02      	cmp	r3, #2
 8001276:	d016      	beq.n	80012a6 <main+0xf2>
 8001278:	2b02      	cmp	r3, #2
 800127a:	dc1e      	bgt.n	80012ba <main+0x106>
 800127c:	2b00      	cmp	r3, #0
 800127e:	d002      	beq.n	8001286 <main+0xd2>
 8001280:	2b01      	cmp	r3, #1
 8001282:	d006      	beq.n	8001292 <main+0xde>
 8001284:	e019      	b.n	80012ba <main+0x106>
	case 0:HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);break;
 8001286:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800128a:	483b      	ldr	r0, [pc, #236]	; (8001378 <main+0x1c4>)
 800128c:	f001 fced 	bl	8002c6a <HAL_GPIO_TogglePin>
 8001290:	e013      	b.n	80012ba <main+0x106>
	case 1:
		UsbFile_Read("twinkle.txt");
 8001292:	483e      	ldr	r0, [pc, #248]	; (800138c <main+0x1d8>)
 8001294:	f7ff ff2c 	bl	80010f0 <UsbFile_Read>
		HAL_TIM_Base_Start_IT(&htim6);rIndex=0;
 8001298:	483d      	ldr	r0, [pc, #244]	; (8001390 <main+0x1dc>)
 800129a:	f005 feab 	bl	8006ff4 <HAL_TIM_Base_Start_IT>
 800129e:	4b3d      	ldr	r3, [pc, #244]	; (8001394 <main+0x1e0>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
		break;
 80012a4:	e009      	b.n	80012ba <main+0x106>
	case 2:
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80012a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012aa:	4833      	ldr	r0, [pc, #204]	; (8001378 <main+0x1c4>)
 80012ac:	f001 fcdd 	bl	8002c6a <HAL_GPIO_TogglePin>
		HAL_TIM_Base_Stop_IT(&htim6);
 80012b0:	4837      	ldr	r0, [pc, #220]	; (8001390 <main+0x1dc>)
 80012b2:	f005 ff0f 	bl	80070d4 <HAL_TIM_Base_Stop_IT>
		break;
 80012b6:	e000      	b.n	80012ba <main+0x106>
	}
}
 80012b8:	bf00      	nop
    	lastClickToggle=clickToggle;
 80012ba:	4b37      	ldr	r3, [pc, #220]	; (8001398 <main+0x1e4>)
 80012bc:	781a      	ldrb	r2, [r3, #0]
 80012be:	4b37      	ldr	r3, [pc, #220]	; (800139c <main+0x1e8>)
 80012c0:	701a      	strb	r2, [r3, #0]
    	if(lastMode!=mode){
 80012c2:	4b30      	ldr	r3, [pc, #192]	; (8001384 <main+0x1d0>)
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	4b30      	ldr	r3, [pc, #192]	; (8001388 <main+0x1d4>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d003      	beq.n	80012d6 <main+0x122>
    		lastMode=mode;
 80012ce:	4b2e      	ldr	r3, [pc, #184]	; (8001388 <main+0x1d4>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a2c      	ldr	r2, [pc, #176]	; (8001384 <main+0x1d0>)
 80012d4:	6013      	str	r3, [r2, #0]
    	}
    	if(key==-1||key==8){
 80012d6:	4b32      	ldr	r3, [pc, #200]	; (80013a0 <main+0x1ec>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012de:	d042      	beq.n	8001366 <main+0x1b2>
 80012e0:	4b2f      	ldr	r3, [pc, #188]	; (80013a0 <main+0x1ec>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2b08      	cmp	r3, #8
 80012e6:	d03e      	beq.n	8001366 <main+0x1b2>
continue;
    	}else{
    		printf("%s\n",primarySoundFileName(key));
 80012e8:	4b2d      	ldr	r3, [pc, #180]	; (80013a0 <main+0x1ec>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff fdcd 	bl	8000e8c <primarySoundFileName>
 80012f2:	4603      	mov	r3, r0
 80012f4:	4618      	mov	r0, r3
 80012f6:	f00f fe33 	bl	8010f60 <puts>
    		if(!wavPlayer_fileSelect(primarySoundFileName(key))){
 80012fa:	4b29      	ldr	r3, [pc, #164]	; (80013a0 <main+0x1ec>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff fdc4 	bl	8000e8c <primarySoundFileName>
 8001304:	4603      	mov	r3, r0
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff fc98 	bl	8000c3c <wavPlayer_fileSelect>
 800130c:	4603      	mov	r3, r0
 800130e:	f083 0301 	eor.w	r3, r3, #1
 8001312:	b2db      	uxtb	r3, r3
 8001314:	2b00      	cmp	r3, #0
 8001316:	d003      	beq.n	8001320 <main+0x16c>
    			printf("\terror\t");
 8001318:	4822      	ldr	r0, [pc, #136]	; (80013a4 <main+0x1f0>)
 800131a:	f00f fd9b 	bl	8010e54 <iprintf>
    			continue;
 800131e:	e023      	b.n	8001368 <main+0x1b4>
    		}


    		wavPlayer_play();
 8001320:	f7ff fcb6 	bl	8000c90 <wavPlayer_play>
    		while(!wavPlayer_isFinished()&&clickToggle==lastClickToggle){
 8001324:	e001      	b.n	800132a <main+0x176>
    		wavPlayer_process();
 8001326:	f7ff fce7 	bl	8000cf8 <wavPlayer_process>
    		while(!wavPlayer_isFinished()&&clickToggle==lastClickToggle){
 800132a:	f7ff fd63 	bl	8000df4 <wavPlayer_isFinished>
 800132e:	4603      	mov	r3, r0
 8001330:	f083 0301 	eor.w	r3, r3, #1
 8001334:	b2db      	uxtb	r3, r3
 8001336:	2b00      	cmp	r3, #0
 8001338:	d005      	beq.n	8001346 <main+0x192>
 800133a:	4b17      	ldr	r3, [pc, #92]	; (8001398 <main+0x1e4>)
 800133c:	781a      	ldrb	r2, [r3, #0]
 800133e:	4b17      	ldr	r3, [pc, #92]	; (800139c <main+0x1e8>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	429a      	cmp	r2, r3
 8001344:	d0ef      	beq.n	8001326 <main+0x172>
    		}
    		key=clickToggle==lastClickToggle?-1:key;
 8001346:	4b14      	ldr	r3, [pc, #80]	; (8001398 <main+0x1e4>)
 8001348:	781a      	ldrb	r2, [r3, #0]
 800134a:	4b14      	ldr	r3, [pc, #80]	; (800139c <main+0x1e8>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	429a      	cmp	r2, r3
 8001350:	d002      	beq.n	8001358 <main+0x1a4>
 8001352:	4b13      	ldr	r3, [pc, #76]	; (80013a0 <main+0x1ec>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	e001      	b.n	800135c <main+0x1a8>
 8001358:	f04f 33ff 	mov.w	r3, #4294967295
 800135c:	4a10      	ldr	r2, [pc, #64]	; (80013a0 <main+0x1ec>)
 800135e:	6013      	str	r3, [r2, #0]
    		wavPlayer_stop();
 8001360:	f7ff fd3c 	bl	8000ddc <wavPlayer_stop>
 8001364:	e754      	b.n	8001210 <main+0x5c>
continue;
 8001366:	bf00      	nop
    MX_USB_HOST_Process();
 8001368:	e752      	b.n	8001210 <main+0x5c>
 800136a:	bf00      	nop
 800136c:	200021c4 	.word	0x200021c4
 8001370:	20002218 	.word	0x20002218
 8001374:	20004e48 	.word	0x20004e48
 8001378:	40020c00 	.word	0x40020c00
 800137c:	2000351c 	.word	0x2000351c
 8001380:	20003520 	.word	0x20003520
 8001384:	2000350c 	.word	0x2000350c
 8001388:	20003508 	.word	0x20003508
 800138c:	08012090 	.word	0x08012090
 8001390:	200022c0 	.word	0x200022c0
 8001394:	20003504 	.word	0x20003504
 8001398:	20002308 	.word	0x20002308
 800139c:	20002309 	.word	0x20002309
 80013a0:	20000000 	.word	0x20000000
 80013a4:	0801209c 	.word	0x0801209c

080013a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b094      	sub	sp, #80	; 0x50
 80013ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ae:	f107 0320 	add.w	r3, r7, #32
 80013b2:	2230      	movs	r2, #48	; 0x30
 80013b4:	2100      	movs	r1, #0
 80013b6:	4618      	mov	r0, r3
 80013b8:	f00f fc64 	bl	8010c84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013bc:	f107 030c 	add.w	r3, r7, #12
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	60da      	str	r2, [r3, #12]
 80013ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013cc:	2300      	movs	r3, #0
 80013ce:	60bb      	str	r3, [r7, #8]
 80013d0:	4b28      	ldr	r3, [pc, #160]	; (8001474 <SystemClock_Config+0xcc>)
 80013d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d4:	4a27      	ldr	r2, [pc, #156]	; (8001474 <SystemClock_Config+0xcc>)
 80013d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013da:	6413      	str	r3, [r2, #64]	; 0x40
 80013dc:	4b25      	ldr	r3, [pc, #148]	; (8001474 <SystemClock_Config+0xcc>)
 80013de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e4:	60bb      	str	r3, [r7, #8]
 80013e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013e8:	2300      	movs	r3, #0
 80013ea:	607b      	str	r3, [r7, #4]
 80013ec:	4b22      	ldr	r3, [pc, #136]	; (8001478 <SystemClock_Config+0xd0>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a21      	ldr	r2, [pc, #132]	; (8001478 <SystemClock_Config+0xd0>)
 80013f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013f6:	6013      	str	r3, [r2, #0]
 80013f8:	4b1f      	ldr	r3, [pc, #124]	; (8001478 <SystemClock_Config+0xd0>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001400:	607b      	str	r3, [r7, #4]
 8001402:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001404:	2301      	movs	r3, #1
 8001406:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001408:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800140c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800140e:	2302      	movs	r3, #2
 8001410:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001412:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001416:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001418:	2308      	movs	r3, #8
 800141a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800141c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001420:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001422:	2302      	movs	r3, #2
 8001424:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001426:	2307      	movs	r3, #7
 8001428:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800142a:	f107 0320 	add.w	r3, r7, #32
 800142e:	4618      	mov	r0, r3
 8001430:	f004 ffa0 	bl	8006374 <HAL_RCC_OscConfig>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800143a:	f000 f9d3 	bl	80017e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800143e:	230f      	movs	r3, #15
 8001440:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001442:	2302      	movs	r3, #2
 8001444:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001446:	2300      	movs	r3, #0
 8001448:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800144a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800144e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001450:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001454:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001456:	f107 030c 	add.w	r3, r7, #12
 800145a:	2105      	movs	r1, #5
 800145c:	4618      	mov	r0, r3
 800145e:	f005 fa01 	bl	8006864 <HAL_RCC_ClockConfig>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001468:	f000 f9bc 	bl	80017e4 <Error_Handler>
  }
}
 800146c:	bf00      	nop
 800146e:	3750      	adds	r7, #80	; 0x50
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40023800 	.word	0x40023800
 8001478:	40007000 	.word	0x40007000

0800147c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001480:	4b12      	ldr	r3, [pc, #72]	; (80014cc <MX_I2C1_Init+0x50>)
 8001482:	4a13      	ldr	r2, [pc, #76]	; (80014d0 <MX_I2C1_Init+0x54>)
 8001484:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001486:	4b11      	ldr	r3, [pc, #68]	; (80014cc <MX_I2C1_Init+0x50>)
 8001488:	4a12      	ldr	r2, [pc, #72]	; (80014d4 <MX_I2C1_Init+0x58>)
 800148a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800148c:	4b0f      	ldr	r3, [pc, #60]	; (80014cc <MX_I2C1_Init+0x50>)
 800148e:	2200      	movs	r2, #0
 8001490:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001492:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <MX_I2C1_Init+0x50>)
 8001494:	2200      	movs	r2, #0
 8001496:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001498:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <MX_I2C1_Init+0x50>)
 800149a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800149e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014a0:	4b0a      	ldr	r3, [pc, #40]	; (80014cc <MX_I2C1_Init+0x50>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014a6:	4b09      	ldr	r3, [pc, #36]	; (80014cc <MX_I2C1_Init+0x50>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014ac:	4b07      	ldr	r3, [pc, #28]	; (80014cc <MX_I2C1_Init+0x50>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014b2:	4b06      	ldr	r3, [pc, #24]	; (80014cc <MX_I2C1_Init+0x50>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014b8:	4804      	ldr	r0, [pc, #16]	; (80014cc <MX_I2C1_Init+0x50>)
 80014ba:	f003 f81f 	bl	80044fc <HAL_I2C_Init>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014c4:	f000 f98e 	bl	80017e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014c8:	bf00      	nop
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	200021c4 	.word	0x200021c4
 80014d0:	40005400 	.word	0x40005400
 80014d4:	000186a0 	.word	0x000186a0

080014d8 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80014dc:	4b13      	ldr	r3, [pc, #76]	; (800152c <MX_I2S3_Init+0x54>)
 80014de:	4a14      	ldr	r2, [pc, #80]	; (8001530 <MX_I2S3_Init+0x58>)
 80014e0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80014e2:	4b12      	ldr	r3, [pc, #72]	; (800152c <MX_I2S3_Init+0x54>)
 80014e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014e8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80014ea:	4b10      	ldr	r3, [pc, #64]	; (800152c <MX_I2S3_Init+0x54>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80014f0:	4b0e      	ldr	r3, [pc, #56]	; (800152c <MX_I2S3_Init+0x54>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80014f6:	4b0d      	ldr	r3, [pc, #52]	; (800152c <MX_I2S3_Init+0x54>)
 80014f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014fc:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 80014fe:	4b0b      	ldr	r3, [pc, #44]	; (800152c <MX_I2S3_Init+0x54>)
 8001500:	f64a 4244 	movw	r2, #44100	; 0xac44
 8001504:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001506:	4b09      	ldr	r3, [pc, #36]	; (800152c <MX_I2S3_Init+0x54>)
 8001508:	2200      	movs	r2, #0
 800150a:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800150c:	4b07      	ldr	r3, [pc, #28]	; (800152c <MX_I2S3_Init+0x54>)
 800150e:	2200      	movs	r2, #0
 8001510:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001512:	4b06      	ldr	r3, [pc, #24]	; (800152c <MX_I2S3_Init+0x54>)
 8001514:	2200      	movs	r2, #0
 8001516:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001518:	4804      	ldr	r0, [pc, #16]	; (800152c <MX_I2S3_Init+0x54>)
 800151a:	f003 ff85 	bl	8005428 <HAL_I2S_Init>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8001524:	f000 f95e 	bl	80017e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001528:	bf00      	nop
 800152a:	bd80      	pop	{r7, pc}
 800152c:	20002218 	.word	0x20002218
 8001530:	40003c00 	.word	0x40003c00

08001534 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800153a:	463b      	mov	r3, r7
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001542:	4b15      	ldr	r3, [pc, #84]	; (8001598 <MX_TIM6_Init+0x64>)
 8001544:	4a15      	ldr	r2, [pc, #84]	; (800159c <MX_TIM6_Init+0x68>)
 8001546:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 600;
 8001548:	4b13      	ldr	r3, [pc, #76]	; (8001598 <MX_TIM6_Init+0x64>)
 800154a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800154e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001550:	4b11      	ldr	r3, [pc, #68]	; (8001598 <MX_TIM6_Init+0x64>)
 8001552:	2200      	movs	r2, #0
 8001554:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001556:	4b10      	ldr	r3, [pc, #64]	; (8001598 <MX_TIM6_Init+0x64>)
 8001558:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800155c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800155e:	4b0e      	ldr	r3, [pc, #56]	; (8001598 <MX_TIM6_Init+0x64>)
 8001560:	2200      	movs	r2, #0
 8001562:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001564:	480c      	ldr	r0, [pc, #48]	; (8001598 <MX_TIM6_Init+0x64>)
 8001566:	f005 fcf5 	bl	8006f54 <HAL_TIM_Base_Init>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001570:	f000 f938 	bl	80017e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001574:	2300      	movs	r3, #0
 8001576:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001578:	2300      	movs	r3, #0
 800157a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800157c:	463b      	mov	r3, r7
 800157e:	4619      	mov	r1, r3
 8001580:	4805      	ldr	r0, [pc, #20]	; (8001598 <MX_TIM6_Init+0x64>)
 8001582:	f005 ffb1 	bl	80074e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800158c:	f000 f92a 	bl	80017e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001590:	bf00      	nop
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	200022c0 	.word	0x200022c0
 800159c:	40001000 	.word	0x40001000

080015a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	607b      	str	r3, [r7, #4]
 80015aa:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <MX_DMA_Init+0x3c>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	4a0b      	ldr	r2, [pc, #44]	; (80015dc <MX_DMA_Init+0x3c>)
 80015b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015b4:	6313      	str	r3, [r2, #48]	; 0x30
 80015b6:	4b09      	ldr	r3, [pc, #36]	; (80015dc <MX_DMA_Init+0x3c>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015be:	607b      	str	r3, [r7, #4]
 80015c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80015c2:	2200      	movs	r2, #0
 80015c4:	2100      	movs	r1, #0
 80015c6:	2010      	movs	r0, #16
 80015c8:	f000 fd6b 	bl	80020a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80015cc:	2010      	movs	r0, #16
 80015ce:	f000 fd84 	bl	80020da <HAL_NVIC_EnableIRQ>

}
 80015d2:	bf00      	nop
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40023800 	.word	0x40023800

080015e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b08c      	sub	sp, #48	; 0x30
 80015e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e6:	f107 031c 	add.w	r3, r7, #28
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	605a      	str	r2, [r3, #4]
 80015f0:	609a      	str	r2, [r3, #8]
 80015f2:	60da      	str	r2, [r3, #12]
 80015f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	61bb      	str	r3, [r7, #24]
 80015fa:	4b75      	ldr	r3, [pc, #468]	; (80017d0 <MX_GPIO_Init+0x1f0>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	4a74      	ldr	r2, [pc, #464]	; (80017d0 <MX_GPIO_Init+0x1f0>)
 8001600:	f043 0310 	orr.w	r3, r3, #16
 8001604:	6313      	str	r3, [r2, #48]	; 0x30
 8001606:	4b72      	ldr	r3, [pc, #456]	; (80017d0 <MX_GPIO_Init+0x1f0>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	f003 0310 	and.w	r3, r3, #16
 800160e:	61bb      	str	r3, [r7, #24]
 8001610:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	617b      	str	r3, [r7, #20]
 8001616:	4b6e      	ldr	r3, [pc, #440]	; (80017d0 <MX_GPIO_Init+0x1f0>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	4a6d      	ldr	r2, [pc, #436]	; (80017d0 <MX_GPIO_Init+0x1f0>)
 800161c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001620:	6313      	str	r3, [r2, #48]	; 0x30
 8001622:	4b6b      	ldr	r3, [pc, #428]	; (80017d0 <MX_GPIO_Init+0x1f0>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800162a:	617b      	str	r3, [r7, #20]
 800162c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	613b      	str	r3, [r7, #16]
 8001632:	4b67      	ldr	r3, [pc, #412]	; (80017d0 <MX_GPIO_Init+0x1f0>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	4a66      	ldr	r2, [pc, #408]	; (80017d0 <MX_GPIO_Init+0x1f0>)
 8001638:	f043 0304 	orr.w	r3, r3, #4
 800163c:	6313      	str	r3, [r2, #48]	; 0x30
 800163e:	4b64      	ldr	r3, [pc, #400]	; (80017d0 <MX_GPIO_Init+0x1f0>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	f003 0304 	and.w	r3, r3, #4
 8001646:	613b      	str	r3, [r7, #16]
 8001648:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	4b60      	ldr	r3, [pc, #384]	; (80017d0 <MX_GPIO_Init+0x1f0>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	4a5f      	ldr	r2, [pc, #380]	; (80017d0 <MX_GPIO_Init+0x1f0>)
 8001654:	f043 0301 	orr.w	r3, r3, #1
 8001658:	6313      	str	r3, [r2, #48]	; 0x30
 800165a:	4b5d      	ldr	r3, [pc, #372]	; (80017d0 <MX_GPIO_Init+0x1f0>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	60bb      	str	r3, [r7, #8]
 800166a:	4b59      	ldr	r3, [pc, #356]	; (80017d0 <MX_GPIO_Init+0x1f0>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	4a58      	ldr	r2, [pc, #352]	; (80017d0 <MX_GPIO_Init+0x1f0>)
 8001670:	f043 0308 	orr.w	r3, r3, #8
 8001674:	6313      	str	r3, [r2, #48]	; 0x30
 8001676:	4b56      	ldr	r3, [pc, #344]	; (80017d0 <MX_GPIO_Init+0x1f0>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	f003 0308 	and.w	r3, r3, #8
 800167e:	60bb      	str	r3, [r7, #8]
 8001680:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	607b      	str	r3, [r7, #4]
 8001686:	4b52      	ldr	r3, [pc, #328]	; (80017d0 <MX_GPIO_Init+0x1f0>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	4a51      	ldr	r2, [pc, #324]	; (80017d0 <MX_GPIO_Init+0x1f0>)
 800168c:	f043 0302 	orr.w	r3, r3, #2
 8001690:	6313      	str	r3, [r2, #48]	; 0x30
 8001692:	4b4f      	ldr	r3, [pc, #316]	; (80017d0 <MX_GPIO_Init+0x1f0>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	607b      	str	r3, [r7, #4]
 800169c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800169e:	2200      	movs	r2, #0
 80016a0:	21ff      	movs	r1, #255	; 0xff
 80016a2:	484c      	ldr	r0, [pc, #304]	; (80017d4 <MX_GPIO_Init+0x1f4>)
 80016a4:	f001 fac8 	bl	8002c38 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80016a8:	2200      	movs	r2, #0
 80016aa:	2101      	movs	r1, #1
 80016ac:	484a      	ldr	r0, [pc, #296]	; (80017d8 <MX_GPIO_Init+0x1f8>)
 80016ae:	f001 fac3 	bl	8002c38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 80016b2:	2200      	movs	r2, #0
 80016b4:	f24f 0110 	movw	r1, #61456	; 0xf010
 80016b8:	4848      	ldr	r0, [pc, #288]	; (80017dc <MX_GPIO_Init+0x1fc>)
 80016ba:	f001 fabd 	bl	8002c38 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80016be:	23ff      	movs	r3, #255	; 0xff
 80016c0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c2:	2301      	movs	r3, #1
 80016c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ca:	2300      	movs	r3, #0
 80016cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016ce:	f107 031c 	add.w	r3, r7, #28
 80016d2:	4619      	mov	r1, r3
 80016d4:	483f      	ldr	r0, [pc, #252]	; (80017d4 <MX_GPIO_Init+0x1f4>)
 80016d6:	f001 f8fb 	bl	80028d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016da:	2301      	movs	r3, #1
 80016dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016de:	2301      	movs	r3, #1
 80016e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e2:	2300      	movs	r3, #0
 80016e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e6:	2300      	movs	r3, #0
 80016e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ea:	f107 031c 	add.w	r3, r7, #28
 80016ee:	4619      	mov	r1, r3
 80016f0:	4839      	ldr	r0, [pc, #228]	; (80017d8 <MX_GPIO_Init+0x1f8>)
 80016f2:	f001 f8ed 	bl	80028d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016f6:	2301      	movs	r3, #1
 80016f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016fa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80016fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001704:	f107 031c 	add.w	r3, r7, #28
 8001708:	4619      	mov	r1, r3
 800170a:	4835      	ldr	r0, [pc, #212]	; (80017e0 <MX_GPIO_Init+0x200>)
 800170c:	f001 f8e0 	bl	80028d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA5
                           PA7 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5
 8001710:	f44f 73d7 	mov.w	r3, #430	; 0x1ae
 8001714:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001716:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800171a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800171c:	2302      	movs	r3, #2
 800171e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001720:	f107 031c 	add.w	r3, r7, #28
 8001724:	4619      	mov	r1, r3
 8001726:	482e      	ldr	r0, [pc, #184]	; (80017e0 <MX_GPIO_Init+0x200>)
 8001728:	f001 f8d2 	bl	80028d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC6 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_9;
 800172c:	f44f 7314 	mov.w	r3, #592	; 0x250
 8001730:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001732:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001736:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001738:	2302      	movs	r3, #2
 800173a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800173c:	f107 031c 	add.w	r3, r7, #28
 8001740:	4619      	mov	r1, r3
 8001742:	4825      	ldr	r0, [pc, #148]	; (80017d8 <MX_GPIO_Init+0x1f8>)
 8001744:	f001 f8c4 	bl	80028d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15
                           PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8001748:	f24f 0310 	movw	r3, #61456	; 0xf010
 800174c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800174e:	2301      	movs	r3, #1
 8001750:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001756:	2300      	movs	r3, #0
 8001758:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800175a:	f107 031c 	add.w	r3, r7, #28
 800175e:	4619      	mov	r1, r3
 8001760:	481e      	ldr	r0, [pc, #120]	; (80017dc <MX_GPIO_Init+0x1fc>)
 8001762:	f001 f8b5 	bl	80028d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001766:	2200      	movs	r2, #0
 8001768:	2100      	movs	r1, #0
 800176a:	2006      	movs	r0, #6
 800176c:	f000 fc99 	bl	80020a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001770:	2006      	movs	r0, #6
 8001772:	f000 fcb2 	bl	80020da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001776:	2200      	movs	r2, #0
 8001778:	2100      	movs	r1, #0
 800177a:	2007      	movs	r0, #7
 800177c:	f000 fc91 	bl	80020a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001780:	2007      	movs	r0, #7
 8001782:	f000 fcaa 	bl	80020da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001786:	2200      	movs	r2, #0
 8001788:	2100      	movs	r1, #0
 800178a:	2008      	movs	r0, #8
 800178c:	f000 fc89 	bl	80020a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001790:	2008      	movs	r0, #8
 8001792:	f000 fca2 	bl	80020da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001796:	2200      	movs	r2, #0
 8001798:	2100      	movs	r1, #0
 800179a:	2009      	movs	r0, #9
 800179c:	f000 fc81 	bl	80020a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80017a0:	2009      	movs	r0, #9
 80017a2:	f000 fc9a 	bl	80020da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80017a6:	2200      	movs	r2, #0
 80017a8:	2100      	movs	r1, #0
 80017aa:	200a      	movs	r0, #10
 80017ac:	f000 fc79 	bl	80020a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80017b0:	200a      	movs	r0, #10
 80017b2:	f000 fc92 	bl	80020da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80017b6:	2200      	movs	r2, #0
 80017b8:	2100      	movs	r1, #0
 80017ba:	2017      	movs	r0, #23
 80017bc:	f000 fc71 	bl	80020a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80017c0:	2017      	movs	r0, #23
 80017c2:	f000 fc8a 	bl	80020da <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017c6:	bf00      	nop
 80017c8:	3730      	adds	r7, #48	; 0x30
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40023800 	.word	0x40023800
 80017d4:	40021000 	.word	0x40021000
 80017d8:	40020800 	.word	0x40020800
 80017dc:	40020c00 	.word	0x40020c00
 80017e0:	40020000 	.word	0x40020000

080017e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017e8:	b672      	cpsid	i
}
 80017ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017ec:	e7fe      	b.n	80017ec <Error_Handler+0x8>
	...

080017f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	607b      	str	r3, [r7, #4]
 80017fa:	4b10      	ldr	r3, [pc, #64]	; (800183c <HAL_MspInit+0x4c>)
 80017fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fe:	4a0f      	ldr	r2, [pc, #60]	; (800183c <HAL_MspInit+0x4c>)
 8001800:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001804:	6453      	str	r3, [r2, #68]	; 0x44
 8001806:	4b0d      	ldr	r3, [pc, #52]	; (800183c <HAL_MspInit+0x4c>)
 8001808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800180e:	607b      	str	r3, [r7, #4]
 8001810:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	603b      	str	r3, [r7, #0]
 8001816:	4b09      	ldr	r3, [pc, #36]	; (800183c <HAL_MspInit+0x4c>)
 8001818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181a:	4a08      	ldr	r2, [pc, #32]	; (800183c <HAL_MspInit+0x4c>)
 800181c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001820:	6413      	str	r3, [r2, #64]	; 0x40
 8001822:	4b06      	ldr	r3, [pc, #24]	; (800183c <HAL_MspInit+0x4c>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800182a:	603b      	str	r3, [r7, #0]
 800182c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800182e:	bf00      	nop
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	40023800 	.word	0x40023800

08001840 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b08a      	sub	sp, #40	; 0x28
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001848:	f107 0314 	add.w	r3, r7, #20
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a19      	ldr	r2, [pc, #100]	; (80018c4 <HAL_I2C_MspInit+0x84>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d12c      	bne.n	80018bc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	613b      	str	r3, [r7, #16]
 8001866:	4b18      	ldr	r3, [pc, #96]	; (80018c8 <HAL_I2C_MspInit+0x88>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	4a17      	ldr	r2, [pc, #92]	; (80018c8 <HAL_I2C_MspInit+0x88>)
 800186c:	f043 0302 	orr.w	r3, r3, #2
 8001870:	6313      	str	r3, [r2, #48]	; 0x30
 8001872:	4b15      	ldr	r3, [pc, #84]	; (80018c8 <HAL_I2C_MspInit+0x88>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	613b      	str	r3, [r7, #16]
 800187c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800187e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001882:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001884:	2312      	movs	r3, #18
 8001886:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	2300      	movs	r3, #0
 800188a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800188c:	2303      	movs	r3, #3
 800188e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001890:	2304      	movs	r3, #4
 8001892:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001894:	f107 0314 	add.w	r3, r7, #20
 8001898:	4619      	mov	r1, r3
 800189a:	480c      	ldr	r0, [pc, #48]	; (80018cc <HAL_I2C_MspInit+0x8c>)
 800189c:	f001 f818 	bl	80028d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018a0:	2300      	movs	r3, #0
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <HAL_I2C_MspInit+0x88>)
 80018a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a8:	4a07      	ldr	r2, [pc, #28]	; (80018c8 <HAL_I2C_MspInit+0x88>)
 80018aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018ae:	6413      	str	r3, [r2, #64]	; 0x40
 80018b0:	4b05      	ldr	r3, [pc, #20]	; (80018c8 <HAL_I2C_MspInit+0x88>)
 80018b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80018bc:	bf00      	nop
 80018be:	3728      	adds	r7, #40	; 0x28
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40005400 	.word	0x40005400
 80018c8:	40023800 	.word	0x40023800
 80018cc:	40020400 	.word	0x40020400

080018d0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b08e      	sub	sp, #56	; 0x38
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	60da      	str	r2, [r3, #12]
 80018e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018e8:	f107 0314 	add.w	r3, r7, #20
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a4e      	ldr	r2, [pc, #312]	; (8001a34 <HAL_I2S_MspInit+0x164>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	f040 8095 	bne.w	8001a2c <HAL_I2S_MspInit+0x15c>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001902:	2301      	movs	r3, #1
 8001904:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 271;
 8001906:	f240 130f 	movw	r3, #271	; 0x10f
 800190a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 6;
 800190c:	2306      	movs	r3, #6
 800190e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001910:	f107 0314 	add.w	r3, r7, #20
 8001914:	4618      	mov	r0, r3
 8001916:	f005 f9b1 	bl	8006c7c <HAL_RCCEx_PeriphCLKConfig>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <HAL_I2S_MspInit+0x54>
    {
      Error_Handler();
 8001920:	f7ff ff60 	bl	80017e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001924:	2300      	movs	r3, #0
 8001926:	613b      	str	r3, [r7, #16]
 8001928:	4b43      	ldr	r3, [pc, #268]	; (8001a38 <HAL_I2S_MspInit+0x168>)
 800192a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192c:	4a42      	ldr	r2, [pc, #264]	; (8001a38 <HAL_I2S_MspInit+0x168>)
 800192e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001932:	6413      	str	r3, [r2, #64]	; 0x40
 8001934:	4b40      	ldr	r3, [pc, #256]	; (8001a38 <HAL_I2S_MspInit+0x168>)
 8001936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001938:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800193c:	613b      	str	r3, [r7, #16]
 800193e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001940:	2300      	movs	r3, #0
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	4b3c      	ldr	r3, [pc, #240]	; (8001a38 <HAL_I2S_MspInit+0x168>)
 8001946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001948:	4a3b      	ldr	r2, [pc, #236]	; (8001a38 <HAL_I2S_MspInit+0x168>)
 800194a:	f043 0301 	orr.w	r3, r3, #1
 800194e:	6313      	str	r3, [r2, #48]	; 0x30
 8001950:	4b39      	ldr	r3, [pc, #228]	; (8001a38 <HAL_I2S_MspInit+0x168>)
 8001952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001954:	f003 0301 	and.w	r3, r3, #1
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800195c:	2300      	movs	r3, #0
 800195e:	60bb      	str	r3, [r7, #8]
 8001960:	4b35      	ldr	r3, [pc, #212]	; (8001a38 <HAL_I2S_MspInit+0x168>)
 8001962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001964:	4a34      	ldr	r2, [pc, #208]	; (8001a38 <HAL_I2S_MspInit+0x168>)
 8001966:	f043 0304 	orr.w	r3, r3, #4
 800196a:	6313      	str	r3, [r2, #48]	; 0x30
 800196c:	4b32      	ldr	r3, [pc, #200]	; (8001a38 <HAL_I2S_MspInit+0x168>)
 800196e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001970:	f003 0304 	and.w	r3, r3, #4
 8001974:	60bb      	str	r3, [r7, #8]
 8001976:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001978:	2310      	movs	r3, #16
 800197a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197c:	2302      	movs	r3, #2
 800197e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	2300      	movs	r3, #0
 8001982:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001984:	2300      	movs	r3, #0
 8001986:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001988:	2306      	movs	r3, #6
 800198a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001990:	4619      	mov	r1, r3
 8001992:	482a      	ldr	r0, [pc, #168]	; (8001a3c <HAL_I2S_MspInit+0x16c>)
 8001994:	f000 ff9c 	bl	80028d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8001998:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800199c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199e:	2302      	movs	r3, #2
 80019a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a6:	2300      	movs	r3, #0
 80019a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80019aa:	2306      	movs	r3, #6
 80019ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019b2:	4619      	mov	r1, r3
 80019b4:	4822      	ldr	r0, [pc, #136]	; (8001a40 <HAL_I2S_MspInit+0x170>)
 80019b6:	f000 ff8b 	bl	80028d0 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 80019ba:	4b22      	ldr	r3, [pc, #136]	; (8001a44 <HAL_I2S_MspInit+0x174>)
 80019bc:	4a22      	ldr	r2, [pc, #136]	; (8001a48 <HAL_I2S_MspInit+0x178>)
 80019be:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 80019c0:	4b20      	ldr	r3, [pc, #128]	; (8001a44 <HAL_I2S_MspInit+0x174>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019c6:	4b1f      	ldr	r3, [pc, #124]	; (8001a44 <HAL_I2S_MspInit+0x174>)
 80019c8:	2240      	movs	r2, #64	; 0x40
 80019ca:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019cc:	4b1d      	ldr	r3, [pc, #116]	; (8001a44 <HAL_I2S_MspInit+0x174>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019d2:	4b1c      	ldr	r3, [pc, #112]	; (8001a44 <HAL_I2S_MspInit+0x174>)
 80019d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019d8:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80019da:	4b1a      	ldr	r3, [pc, #104]	; (8001a44 <HAL_I2S_MspInit+0x174>)
 80019dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019e0:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80019e2:	4b18      	ldr	r3, [pc, #96]	; (8001a44 <HAL_I2S_MspInit+0x174>)
 80019e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019e8:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 80019ea:	4b16      	ldr	r3, [pc, #88]	; (8001a44 <HAL_I2S_MspInit+0x174>)
 80019ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019f0:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80019f2:	4b14      	ldr	r3, [pc, #80]	; (8001a44 <HAL_I2S_MspInit+0x174>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80019f8:	4b12      	ldr	r3, [pc, #72]	; (8001a44 <HAL_I2S_MspInit+0x174>)
 80019fa:	2204      	movs	r2, #4
 80019fc:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80019fe:	4b11      	ldr	r3, [pc, #68]	; (8001a44 <HAL_I2S_MspInit+0x174>)
 8001a00:	2203      	movs	r2, #3
 8001a02:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001a04:	4b0f      	ldr	r3, [pc, #60]	; (8001a44 <HAL_I2S_MspInit+0x174>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001a0a:	4b0e      	ldr	r3, [pc, #56]	; (8001a44 <HAL_I2S_MspInit+0x174>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001a10:	480c      	ldr	r0, [pc, #48]	; (8001a44 <HAL_I2S_MspInit+0x174>)
 8001a12:	f000 fb7d 	bl	8002110 <HAL_DMA_Init>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <HAL_I2S_MspInit+0x150>
    {
      Error_Handler();
 8001a1c:	f7ff fee2 	bl	80017e4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	4a08      	ldr	r2, [pc, #32]	; (8001a44 <HAL_I2S_MspInit+0x174>)
 8001a24:	639a      	str	r2, [r3, #56]	; 0x38
 8001a26:	4a07      	ldr	r2, [pc, #28]	; (8001a44 <HAL_I2S_MspInit+0x174>)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001a2c:	bf00      	nop
 8001a2e:	3738      	adds	r7, #56	; 0x38
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	40003c00 	.word	0x40003c00
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	40020000 	.word	0x40020000
 8001a40:	40020800 	.word	0x40020800
 8001a44:	20002260 	.word	0x20002260
 8001a48:	40026088 	.word	0x40026088

08001a4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a0e      	ldr	r2, [pc, #56]	; (8001a94 <HAL_TIM_Base_MspInit+0x48>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d115      	bne.n	8001a8a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	4b0d      	ldr	r3, [pc, #52]	; (8001a98 <HAL_TIM_Base_MspInit+0x4c>)
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	4a0c      	ldr	r2, [pc, #48]	; (8001a98 <HAL_TIM_Base_MspInit+0x4c>)
 8001a68:	f043 0310 	orr.w	r3, r3, #16
 8001a6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a6e:	4b0a      	ldr	r3, [pc, #40]	; (8001a98 <HAL_TIM_Base_MspInit+0x4c>)
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	f003 0310 	and.w	r3, r3, #16
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	2036      	movs	r0, #54	; 0x36
 8001a80:	f000 fb0f 	bl	80020a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a84:	2036      	movs	r0, #54	; 0x36
 8001a86:	f000 fb28 	bl	80020da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001a8a:	bf00      	nop
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	40001000 	.word	0x40001000
 8001a98:	40023800 	.word	0x40023800

08001a9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001aa0:	e7fe      	b.n	8001aa0 <NMI_Handler+0x4>

08001aa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aa6:	e7fe      	b.n	8001aa6 <HardFault_Handler+0x4>

08001aa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aac:	e7fe      	b.n	8001aac <MemManage_Handler+0x4>

08001aae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ab2:	e7fe      	b.n	8001ab2 <BusFault_Handler+0x4>

08001ab4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ab8:	e7fe      	b.n	8001ab8 <UsageFault_Handler+0x4>

08001aba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aba:	b480      	push	{r7}
 8001abc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001abe:	bf00      	nop
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001acc:	bf00      	nop
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ae8:	f000 f9bc 	bl	8001e64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aec:	bf00      	nop
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	changeMode();
 8001af4:	f7ff fb40 	bl	8001178 <changeMode>
//	 setKey(4);
//
//	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
//	printf("pass1");
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001af8:	2001      	movs	r0, #1
 8001afa:	f001 f8d1 	bl	8002ca0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
	 setKey(0);
 8001b06:	2000      	movs	r0, #0
 8001b08:	f7ff fa68 	bl	8000fdc <setKey>
//	 printf("key"),
//	Create_File("/ROOTFILE.txt");
//	Write_File("/ROOTFILE.txt", "This data should be in root file\n");
//	printf("click");
  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001b0c:	2002      	movs	r0, #2
 8001b0e:	f001 f8c7 	bl	8002ca0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */
	setKey(1);
 8001b1a:	2001      	movs	r0, #1
 8001b1c:	f7ff fa5e 	bl	8000fdc <setKey>
  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001b20:	2004      	movs	r0, #4
 8001b22:	f001 f8bd 	bl	8002ca0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001b26:	bf00      	nop
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
	setKey(2);
 8001b2e:	2002      	movs	r0, #2
 8001b30:	f7ff fa54 	bl	8000fdc <setKey>
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001b34:	2008      	movs	r0, #8
 8001b36:	f001 f8b3 	bl	8002ca0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
//	setKey(3);
	setKey(3);
 8001b42:	2003      	movs	r0, #3
 8001b44:	f7ff fa4a 	bl	8000fdc <setKey>
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001b48:	2010      	movs	r0, #16
 8001b4a:	f001 f8a9 	bl	8002ca0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
	...

08001b54 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001b58:	4802      	ldr	r0, [pc, #8]	; (8001b64 <DMA1_Stream5_IRQHandler+0x10>)
 8001b5a:	f000 fc4f 	bl	80023fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20002260 	.word	0x20002260

08001b68 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5)){setKey(4);}
 8001b6c:	2120      	movs	r1, #32
 8001b6e:	4822      	ldr	r0, [pc, #136]	; (8001bf8 <EXTI9_5_IRQHandler+0x90>)
 8001b70:	f001 f84a 	bl	8002c08 <HAL_GPIO_ReadPin>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d002      	beq.n	8001b80 <EXTI9_5_IRQHandler+0x18>
 8001b7a:	2004      	movs	r0, #4
 8001b7c:	f7ff fa2e 	bl	8000fdc <setKey>
	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6)){setKey(5);}
 8001b80:	2140      	movs	r1, #64	; 0x40
 8001b82:	481e      	ldr	r0, [pc, #120]	; (8001bfc <EXTI9_5_IRQHandler+0x94>)
 8001b84:	f001 f840 	bl	8002c08 <HAL_GPIO_ReadPin>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d002      	beq.n	8001b94 <EXTI9_5_IRQHandler+0x2c>
 8001b8e:	2005      	movs	r0, #5
 8001b90:	f7ff fa24 	bl	8000fdc <setKey>
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7)){setKey(6);}
 8001b94:	2180      	movs	r1, #128	; 0x80
 8001b96:	4818      	ldr	r0, [pc, #96]	; (8001bf8 <EXTI9_5_IRQHandler+0x90>)
 8001b98:	f001 f836 	bl	8002c08 <HAL_GPIO_ReadPin>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d002      	beq.n	8001ba8 <EXTI9_5_IRQHandler+0x40>
 8001ba2:	2006      	movs	r0, #6
 8001ba4:	f7ff fa1a 	bl	8000fdc <setKey>
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)){setKey(7);}
 8001ba8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bac:	4812      	ldr	r0, [pc, #72]	; (8001bf8 <EXTI9_5_IRQHandler+0x90>)
 8001bae:	f001 f82b 	bl	8002c08 <HAL_GPIO_ReadPin>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d002      	beq.n	8001bbe <EXTI9_5_IRQHandler+0x56>
 8001bb8:	2007      	movs	r0, #7
 8001bba:	f7ff fa0f 	bl	8000fdc <setKey>
	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9)){changeInstrement();}
 8001bbe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bc2:	480e      	ldr	r0, [pc, #56]	; (8001bfc <EXTI9_5_IRQHandler+0x94>)
 8001bc4:	f001 f820 	bl	8002c08 <HAL_GPIO_ReadPin>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <EXTI9_5_IRQHandler+0x6a>
 8001bce:	f7ff f9bf 	bl	8000f50 <changeInstrement>
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001bd2:	2020      	movs	r0, #32
 8001bd4:	f001 f864 	bl	8002ca0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001bd8:	2040      	movs	r0, #64	; 0x40
 8001bda:	f001 f861 	bl	8002ca0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001bde:	2080      	movs	r0, #128	; 0x80
 8001be0:	f001 f85e 	bl	8002ca0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001be4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001be8:	f001 f85a 	bl	8002ca0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001bec:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001bf0:	f001 f856 	bl	8002ca0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001bf4:	bf00      	nop
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	40020000 	.word	0x40020000
 8001bfc:	40020800 	.word	0x40020800

08001c00 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8001c04:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c08:	4804      	ldr	r0, [pc, #16]	; (8001c1c <TIM6_DAC_IRQHandler+0x1c>)
 8001c0a:	f001 f82e 	bl	8002c6a <HAL_GPIO_TogglePin>
readNewKey();
 8001c0e:	f7ff f9f7 	bl	8001000 <readNewKey>
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001c12:	4803      	ldr	r0, [pc, #12]	; (8001c20 <TIM6_DAC_IRQHandler+0x20>)
 8001c14:	f005 fa8d 	bl	8007132 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001c18:	bf00      	nop
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	40020c00 	.word	0x40020c00
 8001c20:	200022c0 	.word	0x200022c0

08001c24 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001c28:	4802      	ldr	r0, [pc, #8]	; (8001c34 <OTG_FS_IRQHandler+0x10>)
 8001c2a:	f001 fac7 	bl	80031bc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	20004e4c 	.word	0x20004e4c

08001c38 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c44:	2300      	movs	r3, #0
 8001c46:	617b      	str	r3, [r7, #20]
 8001c48:	e00a      	b.n	8001c60 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c4a:	f3af 8000 	nop.w
 8001c4e:	4601      	mov	r1, r0
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	1c5a      	adds	r2, r3, #1
 8001c54:	60ba      	str	r2, [r7, #8]
 8001c56:	b2ca      	uxtb	r2, r1
 8001c58:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	617b      	str	r3, [r7, #20]
 8001c60:	697a      	ldr	r2, [r7, #20]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	dbf0      	blt.n	8001c4a <_read+0x12>
  }

  return len;
 8001c68:	687b      	ldr	r3, [r7, #4]
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3718      	adds	r7, #24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001c72:	b480      	push	{r7}
 8001c74:	b083      	sub	sp, #12
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr

08001c8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	b083      	sub	sp, #12
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
 8001c92:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c9a:	605a      	str	r2, [r3, #4]
  return 0;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr

08001caa <_isatty>:

int _isatty(int file)
{
 8001caa:	b480      	push	{r7}
 8001cac:	b083      	sub	sp, #12
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cb2:	2301      	movs	r3, #1
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3714      	adds	r7, #20
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
	...

08001cdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b086      	sub	sp, #24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ce4:	4a14      	ldr	r2, [pc, #80]	; (8001d38 <_sbrk+0x5c>)
 8001ce6:	4b15      	ldr	r3, [pc, #84]	; (8001d3c <_sbrk+0x60>)
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cf0:	4b13      	ldr	r3, [pc, #76]	; (8001d40 <_sbrk+0x64>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d102      	bne.n	8001cfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cf8:	4b11      	ldr	r3, [pc, #68]	; (8001d40 <_sbrk+0x64>)
 8001cfa:	4a12      	ldr	r2, [pc, #72]	; (8001d44 <_sbrk+0x68>)
 8001cfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cfe:	4b10      	ldr	r3, [pc, #64]	; (8001d40 <_sbrk+0x64>)
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4413      	add	r3, r2
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d207      	bcs.n	8001d1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d0c:	f00e ff72 	bl	8010bf4 <__errno>
 8001d10:	4603      	mov	r3, r0
 8001d12:	220c      	movs	r2, #12
 8001d14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d16:	f04f 33ff 	mov.w	r3, #4294967295
 8001d1a:	e009      	b.n	8001d30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d1c:	4b08      	ldr	r3, [pc, #32]	; (8001d40 <_sbrk+0x64>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d22:	4b07      	ldr	r3, [pc, #28]	; (8001d40 <_sbrk+0x64>)
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4413      	add	r3, r2
 8001d2a:	4a05      	ldr	r2, [pc, #20]	; (8001d40 <_sbrk+0x64>)
 8001d2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3718      	adds	r7, #24
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	20020000 	.word	0x20020000
 8001d3c:	00002000 	.word	0x00002000
 8001d40:	20003510 	.word	0x20003510
 8001d44:	20005160 	.word	0x20005160

08001d48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d4c:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <SystemInit+0x20>)
 8001d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d52:	4a05      	ldr	r2, [pc, #20]	; (8001d68 <SystemInit+0x20>)
 8001d54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d5c:	bf00      	nop
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	e000ed00 	.word	0xe000ed00

08001d6c <Reset_Handler>:
 8001d6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001da4 <LoopFillZerobss+0x12>
 8001d70:	480d      	ldr	r0, [pc, #52]	; (8001da8 <LoopFillZerobss+0x16>)
 8001d72:	490e      	ldr	r1, [pc, #56]	; (8001dac <LoopFillZerobss+0x1a>)
 8001d74:	4a0e      	ldr	r2, [pc, #56]	; (8001db0 <LoopFillZerobss+0x1e>)
 8001d76:	2300      	movs	r3, #0
 8001d78:	e002      	b.n	8001d80 <LoopCopyDataInit>

08001d7a <CopyDataInit>:
 8001d7a:	58d4      	ldr	r4, [r2, r3]
 8001d7c:	50c4      	str	r4, [r0, r3]
 8001d7e:	3304      	adds	r3, #4

08001d80 <LoopCopyDataInit>:
 8001d80:	18c4      	adds	r4, r0, r3
 8001d82:	428c      	cmp	r4, r1
 8001d84:	d3f9      	bcc.n	8001d7a <CopyDataInit>
 8001d86:	4a0b      	ldr	r2, [pc, #44]	; (8001db4 <LoopFillZerobss+0x22>)
 8001d88:	4c0b      	ldr	r4, [pc, #44]	; (8001db8 <LoopFillZerobss+0x26>)
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	e001      	b.n	8001d92 <LoopFillZerobss>

08001d8e <FillZerobss>:
 8001d8e:	6013      	str	r3, [r2, #0]
 8001d90:	3204      	adds	r2, #4

08001d92 <LoopFillZerobss>:
 8001d92:	42a2      	cmp	r2, r4
 8001d94:	d3fb      	bcc.n	8001d8e <FillZerobss>
 8001d96:	f7ff ffd7 	bl	8001d48 <SystemInit>
 8001d9a:	f00e ff31 	bl	8010c00 <__libc_init_array>
 8001d9e:	f7ff fa09 	bl	80011b4 <main>
 8001da2:	4770      	bx	lr
 8001da4:	20020000 	.word	0x20020000
 8001da8:	20000000 	.word	0x20000000
 8001dac:	200000e0 	.word	0x200000e0
 8001db0:	08012678 	.word	0x08012678
 8001db4:	200000e0 	.word	0x200000e0
 8001db8:	20005160 	.word	0x20005160

08001dbc <ADC_IRQHandler>:
 8001dbc:	e7fe      	b.n	8001dbc <ADC_IRQHandler>
	...

08001dc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dc4:	4b0e      	ldr	r3, [pc, #56]	; (8001e00 <HAL_Init+0x40>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a0d      	ldr	r2, [pc, #52]	; (8001e00 <HAL_Init+0x40>)
 8001dca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001dd0:	4b0b      	ldr	r3, [pc, #44]	; (8001e00 <HAL_Init+0x40>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a0a      	ldr	r2, [pc, #40]	; (8001e00 <HAL_Init+0x40>)
 8001dd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ddc:	4b08      	ldr	r3, [pc, #32]	; (8001e00 <HAL_Init+0x40>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a07      	ldr	r2, [pc, #28]	; (8001e00 <HAL_Init+0x40>)
 8001de2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001de6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001de8:	2003      	movs	r0, #3
 8001dea:	f000 f94f 	bl	800208c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dee:	200f      	movs	r0, #15
 8001df0:	f000 f808 	bl	8001e04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001df4:	f7ff fcfc 	bl	80017f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40023c00 	.word	0x40023c00

08001e04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e0c:	4b12      	ldr	r3, [pc, #72]	; (8001e58 <HAL_InitTick+0x54>)
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	4b12      	ldr	r3, [pc, #72]	; (8001e5c <HAL_InitTick+0x58>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	4619      	mov	r1, r3
 8001e16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e22:	4618      	mov	r0, r3
 8001e24:	f000 f967 	bl	80020f6 <HAL_SYSTICK_Config>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e00e      	b.n	8001e50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2b0f      	cmp	r3, #15
 8001e36:	d80a      	bhi.n	8001e4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e38:	2200      	movs	r2, #0
 8001e3a:	6879      	ldr	r1, [r7, #4]
 8001e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e40:	f000 f92f 	bl	80020a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e44:	4a06      	ldr	r2, [pc, #24]	; (8001e60 <HAL_InitTick+0x5c>)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	e000      	b.n	8001e50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3708      	adds	r7, #8
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	20000050 	.word	0x20000050
 8001e5c:	20000058 	.word	0x20000058
 8001e60:	20000054 	.word	0x20000054

08001e64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e68:	4b06      	ldr	r3, [pc, #24]	; (8001e84 <HAL_IncTick+0x20>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <HAL_IncTick+0x24>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4413      	add	r3, r2
 8001e74:	4a04      	ldr	r2, [pc, #16]	; (8001e88 <HAL_IncTick+0x24>)
 8001e76:	6013      	str	r3, [r2, #0]
}
 8001e78:	bf00      	nop
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	20000058 	.word	0x20000058
 8001e88:	20003514 	.word	0x20003514

08001e8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e90:	4b03      	ldr	r3, [pc, #12]	; (8001ea0 <HAL_GetTick+0x14>)
 8001e92:	681b      	ldr	r3, [r3, #0]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	20003514 	.word	0x20003514

08001ea4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001eac:	f7ff ffee 	bl	8001e8c <HAL_GetTick>
 8001eb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ebc:	d005      	beq.n	8001eca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ebe:	4b0a      	ldr	r3, [pc, #40]	; (8001ee8 <HAL_Delay+0x44>)
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001eca:	bf00      	nop
 8001ecc:	f7ff ffde 	bl	8001e8c <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	68fa      	ldr	r2, [r7, #12]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d8f7      	bhi.n	8001ecc <HAL_Delay+0x28>
  {
  }
}
 8001edc:	bf00      	nop
 8001ede:	bf00      	nop
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	20000058 	.word	0x20000058

08001eec <__NVIC_SetPriorityGrouping>:
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f003 0307 	and.w	r3, r3, #7
 8001efa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001efc:	4b0c      	ldr	r3, [pc, #48]	; (8001f30 <__NVIC_SetPriorityGrouping+0x44>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f02:	68ba      	ldr	r2, [r7, #8]
 8001f04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f08:	4013      	ands	r3, r2
 8001f0a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f1e:	4a04      	ldr	r2, [pc, #16]	; (8001f30 <__NVIC_SetPriorityGrouping+0x44>)
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	60d3      	str	r3, [r2, #12]
}
 8001f24:	bf00      	nop
 8001f26:	3714      	adds	r7, #20
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	e000ed00 	.word	0xe000ed00

08001f34 <__NVIC_GetPriorityGrouping>:
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f38:	4b04      	ldr	r3, [pc, #16]	; (8001f4c <__NVIC_GetPriorityGrouping+0x18>)
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	0a1b      	lsrs	r3, r3, #8
 8001f3e:	f003 0307 	and.w	r3, r3, #7
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	e000ed00 	.word	0xe000ed00

08001f50 <__NVIC_EnableIRQ>:
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	4603      	mov	r3, r0
 8001f58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	db0b      	blt.n	8001f7a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f62:	79fb      	ldrb	r3, [r7, #7]
 8001f64:	f003 021f 	and.w	r2, r3, #31
 8001f68:	4907      	ldr	r1, [pc, #28]	; (8001f88 <__NVIC_EnableIRQ+0x38>)
 8001f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6e:	095b      	lsrs	r3, r3, #5
 8001f70:	2001      	movs	r0, #1
 8001f72:	fa00 f202 	lsl.w	r2, r0, r2
 8001f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f7a:	bf00      	nop
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	e000e100 	.word	0xe000e100

08001f8c <__NVIC_SetPriority>:
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4603      	mov	r3, r0
 8001f94:	6039      	str	r1, [r7, #0]
 8001f96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	db0a      	blt.n	8001fb6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	b2da      	uxtb	r2, r3
 8001fa4:	490c      	ldr	r1, [pc, #48]	; (8001fd8 <__NVIC_SetPriority+0x4c>)
 8001fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001faa:	0112      	lsls	r2, r2, #4
 8001fac:	b2d2      	uxtb	r2, r2
 8001fae:	440b      	add	r3, r1
 8001fb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001fb4:	e00a      	b.n	8001fcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	b2da      	uxtb	r2, r3
 8001fba:	4908      	ldr	r1, [pc, #32]	; (8001fdc <__NVIC_SetPriority+0x50>)
 8001fbc:	79fb      	ldrb	r3, [r7, #7]
 8001fbe:	f003 030f 	and.w	r3, r3, #15
 8001fc2:	3b04      	subs	r3, #4
 8001fc4:	0112      	lsls	r2, r2, #4
 8001fc6:	b2d2      	uxtb	r2, r2
 8001fc8:	440b      	add	r3, r1
 8001fca:	761a      	strb	r2, [r3, #24]
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	e000e100 	.word	0xe000e100
 8001fdc:	e000ed00 	.word	0xe000ed00

08001fe0 <NVIC_EncodePriority>:
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b089      	sub	sp, #36	; 0x24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	f1c3 0307 	rsb	r3, r3, #7
 8001ffa:	2b04      	cmp	r3, #4
 8001ffc:	bf28      	it	cs
 8001ffe:	2304      	movcs	r3, #4
 8002000:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	3304      	adds	r3, #4
 8002006:	2b06      	cmp	r3, #6
 8002008:	d902      	bls.n	8002010 <NVIC_EncodePriority+0x30>
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	3b03      	subs	r3, #3
 800200e:	e000      	b.n	8002012 <NVIC_EncodePriority+0x32>
 8002010:	2300      	movs	r3, #0
 8002012:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002014:	f04f 32ff 	mov.w	r2, #4294967295
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	43da      	mvns	r2, r3
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	401a      	ands	r2, r3
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002028:	f04f 31ff 	mov.w	r1, #4294967295
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	fa01 f303 	lsl.w	r3, r1, r3
 8002032:	43d9      	mvns	r1, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002038:	4313      	orrs	r3, r2
}
 800203a:	4618      	mov	r0, r3
 800203c:	3724      	adds	r7, #36	; 0x24
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
	...

08002048 <SysTick_Config>:
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	3b01      	subs	r3, #1
 8002054:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002058:	d301      	bcc.n	800205e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800205a:	2301      	movs	r3, #1
 800205c:	e00f      	b.n	800207e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800205e:	4a0a      	ldr	r2, [pc, #40]	; (8002088 <SysTick_Config+0x40>)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	3b01      	subs	r3, #1
 8002064:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002066:	210f      	movs	r1, #15
 8002068:	f04f 30ff 	mov.w	r0, #4294967295
 800206c:	f7ff ff8e 	bl	8001f8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002070:	4b05      	ldr	r3, [pc, #20]	; (8002088 <SysTick_Config+0x40>)
 8002072:	2200      	movs	r2, #0
 8002074:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002076:	4b04      	ldr	r3, [pc, #16]	; (8002088 <SysTick_Config+0x40>)
 8002078:	2207      	movs	r2, #7
 800207a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	e000e010 	.word	0xe000e010

0800208c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f7ff ff29 	bl	8001eec <__NVIC_SetPriorityGrouping>
}
 800209a:	bf00      	nop
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b086      	sub	sp, #24
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	4603      	mov	r3, r0
 80020aa:	60b9      	str	r1, [r7, #8]
 80020ac:	607a      	str	r2, [r7, #4]
 80020ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020b0:	2300      	movs	r3, #0
 80020b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020b4:	f7ff ff3e 	bl	8001f34 <__NVIC_GetPriorityGrouping>
 80020b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	68b9      	ldr	r1, [r7, #8]
 80020be:	6978      	ldr	r0, [r7, #20]
 80020c0:	f7ff ff8e 	bl	8001fe0 <NVIC_EncodePriority>
 80020c4:	4602      	mov	r2, r0
 80020c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ca:	4611      	mov	r1, r2
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff ff5d 	bl	8001f8c <__NVIC_SetPriority>
}
 80020d2:	bf00      	nop
 80020d4:	3718      	adds	r7, #24
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b082      	sub	sp, #8
 80020de:	af00      	add	r7, sp, #0
 80020e0:	4603      	mov	r3, r0
 80020e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff ff31 	bl	8001f50 <__NVIC_EnableIRQ>
}
 80020ee:	bf00      	nop
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b082      	sub	sp, #8
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f7ff ffa2 	bl	8002048 <SysTick_Config>
 8002104:	4603      	mov	r3, r0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
	...

08002110 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002118:	2300      	movs	r3, #0
 800211a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800211c:	f7ff feb6 	bl	8001e8c <HAL_GetTick>
 8002120:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d101      	bne.n	800212c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e099      	b.n	8002260 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2202      	movs	r2, #2
 8002130:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f022 0201 	bic.w	r2, r2, #1
 800214a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800214c:	e00f      	b.n	800216e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800214e:	f7ff fe9d 	bl	8001e8c <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	2b05      	cmp	r3, #5
 800215a:	d908      	bls.n	800216e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2220      	movs	r2, #32
 8002160:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2203      	movs	r2, #3
 8002166:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e078      	b.n	8002260 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	2b00      	cmp	r3, #0
 800217a:	d1e8      	bne.n	800214e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002184:	697a      	ldr	r2, [r7, #20]
 8002186:	4b38      	ldr	r3, [pc, #224]	; (8002268 <HAL_DMA_Init+0x158>)
 8002188:	4013      	ands	r3, r2
 800218a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685a      	ldr	r2, [r3, #4]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800219a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	691b      	ldr	r3, [r3, #16]
 80021a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a1b      	ldr	r3, [r3, #32]
 80021b8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021ba:	697a      	ldr	r2, [r7, #20]
 80021bc:	4313      	orrs	r3, r2
 80021be:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c4:	2b04      	cmp	r3, #4
 80021c6:	d107      	bne.n	80021d8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d0:	4313      	orrs	r3, r2
 80021d2:	697a      	ldr	r2, [r7, #20]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	697a      	ldr	r2, [r7, #20]
 80021de:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	695b      	ldr	r3, [r3, #20]
 80021e6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	f023 0307 	bic.w	r3, r3, #7
 80021ee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f4:	697a      	ldr	r2, [r7, #20]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fe:	2b04      	cmp	r3, #4
 8002200:	d117      	bne.n	8002232 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002206:	697a      	ldr	r2, [r7, #20]
 8002208:	4313      	orrs	r3, r2
 800220a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00e      	beq.n	8002232 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f000 fadf 	bl	80027d8 <DMA_CheckFifoParam>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d008      	beq.n	8002232 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2240      	movs	r2, #64	; 0x40
 8002224:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2201      	movs	r2, #1
 800222a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800222e:	2301      	movs	r3, #1
 8002230:	e016      	b.n	8002260 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	697a      	ldr	r2, [r7, #20]
 8002238:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f000 fa96 	bl	800276c <DMA_CalcBaseAndBitshift>
 8002240:	4603      	mov	r3, r0
 8002242:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002248:	223f      	movs	r2, #63	; 0x3f
 800224a:	409a      	lsls	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2201      	movs	r2, #1
 800225a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	3718      	adds	r7, #24
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	f010803f 	.word	0xf010803f

0800226c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
 8002278:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800227a:	2300      	movs	r3, #0
 800227c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002282:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800228a:	2b01      	cmp	r3, #1
 800228c:	d101      	bne.n	8002292 <HAL_DMA_Start_IT+0x26>
 800228e:	2302      	movs	r3, #2
 8002290:	e040      	b.n	8002314 <HAL_DMA_Start_IT+0xa8>
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2201      	movs	r2, #1
 8002296:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d12f      	bne.n	8002306 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2202      	movs	r2, #2
 80022aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2200      	movs	r2, #0
 80022b2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	68b9      	ldr	r1, [r7, #8]
 80022ba:	68f8      	ldr	r0, [r7, #12]
 80022bc:	f000 fa28 	bl	8002710 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022c4:	223f      	movs	r2, #63	; 0x3f
 80022c6:	409a      	lsls	r2, r3
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f042 0216 	orr.w	r2, r2, #22
 80022da:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d007      	beq.n	80022f4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f042 0208 	orr.w	r2, r2, #8
 80022f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f042 0201 	orr.w	r2, r2, #1
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	e005      	b.n	8002312 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800230e:	2302      	movs	r3, #2
 8002310:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002312:	7dfb      	ldrb	r3, [r7, #23]
}
 8002314:	4618      	mov	r0, r3
 8002316:	3718      	adds	r7, #24
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002328:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800232a:	f7ff fdaf 	bl	8001e8c <HAL_GetTick>
 800232e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002336:	b2db      	uxtb	r3, r3
 8002338:	2b02      	cmp	r3, #2
 800233a:	d008      	beq.n	800234e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2280      	movs	r2, #128	; 0x80
 8002340:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e052      	b.n	80023f4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f022 0216 	bic.w	r2, r2, #22
 800235c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	695a      	ldr	r2, [r3, #20]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800236c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002372:	2b00      	cmp	r3, #0
 8002374:	d103      	bne.n	800237e <HAL_DMA_Abort+0x62>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800237a:	2b00      	cmp	r3, #0
 800237c:	d007      	beq.n	800238e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f022 0208 	bic.w	r2, r2, #8
 800238c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f022 0201 	bic.w	r2, r2, #1
 800239c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800239e:	e013      	b.n	80023c8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023a0:	f7ff fd74 	bl	8001e8c <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b05      	cmp	r3, #5
 80023ac:	d90c      	bls.n	80023c8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2220      	movs	r2, #32
 80023b2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2203      	movs	r2, #3
 80023b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e015      	b.n	80023f4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d1e4      	bne.n	80023a0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023da:	223f      	movs	r2, #63	; 0x3f
 80023dc:	409a      	lsls	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2201      	movs	r2, #1
 80023e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3710      	adds	r7, #16
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002404:	2300      	movs	r3, #0
 8002406:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002408:	4b8e      	ldr	r3, [pc, #568]	; (8002644 <HAL_DMA_IRQHandler+0x248>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a8e      	ldr	r2, [pc, #568]	; (8002648 <HAL_DMA_IRQHandler+0x24c>)
 800240e:	fba2 2303 	umull	r2, r3, r2, r3
 8002412:	0a9b      	lsrs	r3, r3, #10
 8002414:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800241a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002426:	2208      	movs	r2, #8
 8002428:	409a      	lsls	r2, r3
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	4013      	ands	r3, r2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d01a      	beq.n	8002468 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0304 	and.w	r3, r3, #4
 800243c:	2b00      	cmp	r3, #0
 800243e:	d013      	beq.n	8002468 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f022 0204 	bic.w	r2, r2, #4
 800244e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002454:	2208      	movs	r2, #8
 8002456:	409a      	lsls	r2, r3
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002460:	f043 0201 	orr.w	r2, r3, #1
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800246c:	2201      	movs	r2, #1
 800246e:	409a      	lsls	r2, r3
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	4013      	ands	r3, r2
 8002474:	2b00      	cmp	r3, #0
 8002476:	d012      	beq.n	800249e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	695b      	ldr	r3, [r3, #20]
 800247e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00b      	beq.n	800249e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800248a:	2201      	movs	r2, #1
 800248c:	409a      	lsls	r2, r3
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002496:	f043 0202 	orr.w	r2, r3, #2
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a2:	2204      	movs	r2, #4
 80024a4:	409a      	lsls	r2, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	4013      	ands	r3, r2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d012      	beq.n	80024d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d00b      	beq.n	80024d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c0:	2204      	movs	r2, #4
 80024c2:	409a      	lsls	r2, r3
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024cc:	f043 0204 	orr.w	r2, r3, #4
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d8:	2210      	movs	r2, #16
 80024da:	409a      	lsls	r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	4013      	ands	r3, r2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d043      	beq.n	800256c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0308 	and.w	r3, r3, #8
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d03c      	beq.n	800256c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f6:	2210      	movs	r2, #16
 80024f8:	409a      	lsls	r2, r3
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d018      	beq.n	800253e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d108      	bne.n	800252c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251e:	2b00      	cmp	r3, #0
 8002520:	d024      	beq.n	800256c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	4798      	blx	r3
 800252a:	e01f      	b.n	800256c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002530:	2b00      	cmp	r3, #0
 8002532:	d01b      	beq.n	800256c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	4798      	blx	r3
 800253c:	e016      	b.n	800256c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002548:	2b00      	cmp	r3, #0
 800254a:	d107      	bne.n	800255c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f022 0208 	bic.w	r2, r2, #8
 800255a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002560:	2b00      	cmp	r3, #0
 8002562:	d003      	beq.n	800256c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002570:	2220      	movs	r2, #32
 8002572:	409a      	lsls	r2, r3
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	4013      	ands	r3, r2
 8002578:	2b00      	cmp	r3, #0
 800257a:	f000 808f 	beq.w	800269c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0310 	and.w	r3, r3, #16
 8002588:	2b00      	cmp	r3, #0
 800258a:	f000 8087 	beq.w	800269c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002592:	2220      	movs	r2, #32
 8002594:	409a      	lsls	r2, r3
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b05      	cmp	r3, #5
 80025a4:	d136      	bne.n	8002614 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f022 0216 	bic.w	r2, r2, #22
 80025b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	695a      	ldr	r2, [r3, #20]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d103      	bne.n	80025d6 <HAL_DMA_IRQHandler+0x1da>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d007      	beq.n	80025e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f022 0208 	bic.w	r2, r2, #8
 80025e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ea:	223f      	movs	r2, #63	; 0x3f
 80025ec:	409a      	lsls	r2, r3
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2201      	movs	r2, #1
 80025f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002606:	2b00      	cmp	r3, #0
 8002608:	d07e      	beq.n	8002708 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	4798      	blx	r3
        }
        return;
 8002612:	e079      	b.n	8002708 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d01d      	beq.n	800265e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d10d      	bne.n	800264c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002634:	2b00      	cmp	r3, #0
 8002636:	d031      	beq.n	800269c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	4798      	blx	r3
 8002640:	e02c      	b.n	800269c <HAL_DMA_IRQHandler+0x2a0>
 8002642:	bf00      	nop
 8002644:	20000050 	.word	0x20000050
 8002648:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002650:	2b00      	cmp	r3, #0
 8002652:	d023      	beq.n	800269c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	4798      	blx	r3
 800265c:	e01e      	b.n	800269c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002668:	2b00      	cmp	r3, #0
 800266a:	d10f      	bne.n	800268c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f022 0210 	bic.w	r2, r2, #16
 800267a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002690:	2b00      	cmp	r3, #0
 8002692:	d003      	beq.n	800269c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d032      	beq.n	800270a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a8:	f003 0301 	and.w	r3, r3, #1
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d022      	beq.n	80026f6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2205      	movs	r2, #5
 80026b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f022 0201 	bic.w	r2, r2, #1
 80026c6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	3301      	adds	r3, #1
 80026cc:	60bb      	str	r3, [r7, #8]
 80026ce:	697a      	ldr	r2, [r7, #20]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d307      	bcc.n	80026e4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1f2      	bne.n	80026c8 <HAL_DMA_IRQHandler+0x2cc>
 80026e2:	e000      	b.n	80026e6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80026e4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2201      	movs	r2, #1
 80026ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d005      	beq.n	800270a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	4798      	blx	r3
 8002706:	e000      	b.n	800270a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002708:	bf00      	nop
    }
  }
}
 800270a:	3718      	adds	r7, #24
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002710:	b480      	push	{r7}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
 800271c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800272c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	2b40      	cmp	r3, #64	; 0x40
 800273c:	d108      	bne.n	8002750 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68ba      	ldr	r2, [r7, #8]
 800274c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800274e:	e007      	b.n	8002760 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68ba      	ldr	r2, [r7, #8]
 8002756:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	60da      	str	r2, [r3, #12]
}
 8002760:	bf00      	nop
 8002762:	3714      	adds	r7, #20
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800276c:	b480      	push	{r7}
 800276e:	b085      	sub	sp, #20
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	b2db      	uxtb	r3, r3
 800277a:	3b10      	subs	r3, #16
 800277c:	4a14      	ldr	r2, [pc, #80]	; (80027d0 <DMA_CalcBaseAndBitshift+0x64>)
 800277e:	fba2 2303 	umull	r2, r3, r2, r3
 8002782:	091b      	lsrs	r3, r3, #4
 8002784:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002786:	4a13      	ldr	r2, [pc, #76]	; (80027d4 <DMA_CalcBaseAndBitshift+0x68>)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	4413      	add	r3, r2
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	461a      	mov	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2b03      	cmp	r3, #3
 8002798:	d909      	bls.n	80027ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80027a2:	f023 0303 	bic.w	r3, r3, #3
 80027a6:	1d1a      	adds	r2, r3, #4
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	659a      	str	r2, [r3, #88]	; 0x58
 80027ac:	e007      	b.n	80027be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80027b6:	f023 0303 	bic.w	r3, r3, #3
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3714      	adds	r7, #20
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	aaaaaaab 	.word	0xaaaaaaab
 80027d4:	08012174 	.word	0x08012174

080027d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027e0:	2300      	movs	r3, #0
 80027e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d11f      	bne.n	8002832 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	2b03      	cmp	r3, #3
 80027f6:	d856      	bhi.n	80028a6 <DMA_CheckFifoParam+0xce>
 80027f8:	a201      	add	r2, pc, #4	; (adr r2, 8002800 <DMA_CheckFifoParam+0x28>)
 80027fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027fe:	bf00      	nop
 8002800:	08002811 	.word	0x08002811
 8002804:	08002823 	.word	0x08002823
 8002808:	08002811 	.word	0x08002811
 800280c:	080028a7 	.word	0x080028a7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002814:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d046      	beq.n	80028aa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002820:	e043      	b.n	80028aa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002826:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800282a:	d140      	bne.n	80028ae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002830:	e03d      	b.n	80028ae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800283a:	d121      	bne.n	8002880 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	2b03      	cmp	r3, #3
 8002840:	d837      	bhi.n	80028b2 <DMA_CheckFifoParam+0xda>
 8002842:	a201      	add	r2, pc, #4	; (adr r2, 8002848 <DMA_CheckFifoParam+0x70>)
 8002844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002848:	08002859 	.word	0x08002859
 800284c:	0800285f 	.word	0x0800285f
 8002850:	08002859 	.word	0x08002859
 8002854:	08002871 	.word	0x08002871
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	73fb      	strb	r3, [r7, #15]
      break;
 800285c:	e030      	b.n	80028c0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002862:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d025      	beq.n	80028b6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800286e:	e022      	b.n	80028b6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002874:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002878:	d11f      	bne.n	80028ba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800287e:	e01c      	b.n	80028ba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	2b02      	cmp	r3, #2
 8002884:	d903      	bls.n	800288e <DMA_CheckFifoParam+0xb6>
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	2b03      	cmp	r3, #3
 800288a:	d003      	beq.n	8002894 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800288c:	e018      	b.n	80028c0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	73fb      	strb	r3, [r7, #15]
      break;
 8002892:	e015      	b.n	80028c0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002898:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00e      	beq.n	80028be <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	73fb      	strb	r3, [r7, #15]
      break;
 80028a4:	e00b      	b.n	80028be <DMA_CheckFifoParam+0xe6>
      break;
 80028a6:	bf00      	nop
 80028a8:	e00a      	b.n	80028c0 <DMA_CheckFifoParam+0xe8>
      break;
 80028aa:	bf00      	nop
 80028ac:	e008      	b.n	80028c0 <DMA_CheckFifoParam+0xe8>
      break;
 80028ae:	bf00      	nop
 80028b0:	e006      	b.n	80028c0 <DMA_CheckFifoParam+0xe8>
      break;
 80028b2:	bf00      	nop
 80028b4:	e004      	b.n	80028c0 <DMA_CheckFifoParam+0xe8>
      break;
 80028b6:	bf00      	nop
 80028b8:	e002      	b.n	80028c0 <DMA_CheckFifoParam+0xe8>
      break;   
 80028ba:	bf00      	nop
 80028bc:	e000      	b.n	80028c0 <DMA_CheckFifoParam+0xe8>
      break;
 80028be:	bf00      	nop
    }
  } 
  
  return status; 
 80028c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3714      	adds	r7, #20
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop

080028d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b089      	sub	sp, #36	; 0x24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028da:	2300      	movs	r3, #0
 80028dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028de:	2300      	movs	r3, #0
 80028e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028e2:	2300      	movs	r3, #0
 80028e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028e6:	2300      	movs	r3, #0
 80028e8:	61fb      	str	r3, [r7, #28]
 80028ea:	e16b      	b.n	8002bc4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028ec:	2201      	movs	r2, #1
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	697a      	ldr	r2, [r7, #20]
 80028fc:	4013      	ands	r3, r2
 80028fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	429a      	cmp	r2, r3
 8002906:	f040 815a 	bne.w	8002bbe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f003 0303 	and.w	r3, r3, #3
 8002912:	2b01      	cmp	r3, #1
 8002914:	d005      	beq.n	8002922 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800291e:	2b02      	cmp	r3, #2
 8002920:	d130      	bne.n	8002984 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	2203      	movs	r2, #3
 800292e:	fa02 f303 	lsl.w	r3, r2, r3
 8002932:	43db      	mvns	r3, r3
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	4013      	ands	r3, r2
 8002938:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	68da      	ldr	r2, [r3, #12]
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	fa02 f303 	lsl.w	r3, r2, r3
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	4313      	orrs	r3, r2
 800294a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	69ba      	ldr	r2, [r7, #24]
 8002950:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002958:	2201      	movs	r2, #1
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	fa02 f303 	lsl.w	r3, r2, r3
 8002960:	43db      	mvns	r3, r3
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	4013      	ands	r3, r2
 8002966:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	091b      	lsrs	r3, r3, #4
 800296e:	f003 0201 	and.w	r2, r3, #1
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	fa02 f303 	lsl.w	r3, r2, r3
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	4313      	orrs	r3, r2
 800297c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f003 0303 	and.w	r3, r3, #3
 800298c:	2b03      	cmp	r3, #3
 800298e:	d017      	beq.n	80029c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	005b      	lsls	r3, r3, #1
 800299a:	2203      	movs	r2, #3
 800299c:	fa02 f303 	lsl.w	r3, r2, r3
 80029a0:	43db      	mvns	r3, r3
 80029a2:	69ba      	ldr	r2, [r7, #24]
 80029a4:	4013      	ands	r3, r2
 80029a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	689a      	ldr	r2, [r3, #8]
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f003 0303 	and.w	r3, r3, #3
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d123      	bne.n	8002a14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	08da      	lsrs	r2, r3, #3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	3208      	adds	r2, #8
 80029d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	f003 0307 	and.w	r3, r3, #7
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	220f      	movs	r2, #15
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	43db      	mvns	r3, r3
 80029ea:	69ba      	ldr	r2, [r7, #24]
 80029ec:	4013      	ands	r3, r2
 80029ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	691a      	ldr	r2, [r3, #16]
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	f003 0307 	and.w	r3, r3, #7
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	08da      	lsrs	r2, r3, #3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	3208      	adds	r2, #8
 8002a0e:	69b9      	ldr	r1, [r7, #24]
 8002a10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	005b      	lsls	r3, r3, #1
 8002a1e:	2203      	movs	r2, #3
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	43db      	mvns	r3, r3
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f003 0203 	and.w	r2, r3, #3
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	005b      	lsls	r3, r3, #1
 8002a38:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	f000 80b4 	beq.w	8002bbe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a56:	2300      	movs	r3, #0
 8002a58:	60fb      	str	r3, [r7, #12]
 8002a5a:	4b60      	ldr	r3, [pc, #384]	; (8002bdc <HAL_GPIO_Init+0x30c>)
 8002a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a5e:	4a5f      	ldr	r2, [pc, #380]	; (8002bdc <HAL_GPIO_Init+0x30c>)
 8002a60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a64:	6453      	str	r3, [r2, #68]	; 0x44
 8002a66:	4b5d      	ldr	r3, [pc, #372]	; (8002bdc <HAL_GPIO_Init+0x30c>)
 8002a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a6e:	60fb      	str	r3, [r7, #12]
 8002a70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a72:	4a5b      	ldr	r2, [pc, #364]	; (8002be0 <HAL_GPIO_Init+0x310>)
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	089b      	lsrs	r3, r3, #2
 8002a78:	3302      	adds	r3, #2
 8002a7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	f003 0303 	and.w	r3, r3, #3
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	220f      	movs	r2, #15
 8002a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8e:	43db      	mvns	r3, r3
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	4013      	ands	r3, r2
 8002a94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a52      	ldr	r2, [pc, #328]	; (8002be4 <HAL_GPIO_Init+0x314>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d02b      	beq.n	8002af6 <HAL_GPIO_Init+0x226>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a51      	ldr	r2, [pc, #324]	; (8002be8 <HAL_GPIO_Init+0x318>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d025      	beq.n	8002af2 <HAL_GPIO_Init+0x222>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a50      	ldr	r2, [pc, #320]	; (8002bec <HAL_GPIO_Init+0x31c>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d01f      	beq.n	8002aee <HAL_GPIO_Init+0x21e>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a4f      	ldr	r2, [pc, #316]	; (8002bf0 <HAL_GPIO_Init+0x320>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d019      	beq.n	8002aea <HAL_GPIO_Init+0x21a>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a4e      	ldr	r2, [pc, #312]	; (8002bf4 <HAL_GPIO_Init+0x324>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d013      	beq.n	8002ae6 <HAL_GPIO_Init+0x216>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a4d      	ldr	r2, [pc, #308]	; (8002bf8 <HAL_GPIO_Init+0x328>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d00d      	beq.n	8002ae2 <HAL_GPIO_Init+0x212>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a4c      	ldr	r2, [pc, #304]	; (8002bfc <HAL_GPIO_Init+0x32c>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d007      	beq.n	8002ade <HAL_GPIO_Init+0x20e>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a4b      	ldr	r2, [pc, #300]	; (8002c00 <HAL_GPIO_Init+0x330>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d101      	bne.n	8002ada <HAL_GPIO_Init+0x20a>
 8002ad6:	2307      	movs	r3, #7
 8002ad8:	e00e      	b.n	8002af8 <HAL_GPIO_Init+0x228>
 8002ada:	2308      	movs	r3, #8
 8002adc:	e00c      	b.n	8002af8 <HAL_GPIO_Init+0x228>
 8002ade:	2306      	movs	r3, #6
 8002ae0:	e00a      	b.n	8002af8 <HAL_GPIO_Init+0x228>
 8002ae2:	2305      	movs	r3, #5
 8002ae4:	e008      	b.n	8002af8 <HAL_GPIO_Init+0x228>
 8002ae6:	2304      	movs	r3, #4
 8002ae8:	e006      	b.n	8002af8 <HAL_GPIO_Init+0x228>
 8002aea:	2303      	movs	r3, #3
 8002aec:	e004      	b.n	8002af8 <HAL_GPIO_Init+0x228>
 8002aee:	2302      	movs	r3, #2
 8002af0:	e002      	b.n	8002af8 <HAL_GPIO_Init+0x228>
 8002af2:	2301      	movs	r3, #1
 8002af4:	e000      	b.n	8002af8 <HAL_GPIO_Init+0x228>
 8002af6:	2300      	movs	r3, #0
 8002af8:	69fa      	ldr	r2, [r7, #28]
 8002afa:	f002 0203 	and.w	r2, r2, #3
 8002afe:	0092      	lsls	r2, r2, #2
 8002b00:	4093      	lsls	r3, r2
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b08:	4935      	ldr	r1, [pc, #212]	; (8002be0 <HAL_GPIO_Init+0x310>)
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	089b      	lsrs	r3, r3, #2
 8002b0e:	3302      	adds	r3, #2
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b16:	4b3b      	ldr	r3, [pc, #236]	; (8002c04 <HAL_GPIO_Init+0x334>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	43db      	mvns	r3, r3
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	4013      	ands	r3, r2
 8002b24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d003      	beq.n	8002b3a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b3a:	4a32      	ldr	r2, [pc, #200]	; (8002c04 <HAL_GPIO_Init+0x334>)
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b40:	4b30      	ldr	r3, [pc, #192]	; (8002c04 <HAL_GPIO_Init+0x334>)
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d003      	beq.n	8002b64 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b64:	4a27      	ldr	r2, [pc, #156]	; (8002c04 <HAL_GPIO_Init+0x334>)
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b6a:	4b26      	ldr	r3, [pc, #152]	; (8002c04 <HAL_GPIO_Init+0x334>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	43db      	mvns	r3, r3
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	4013      	ands	r3, r2
 8002b78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d003      	beq.n	8002b8e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b8e:	4a1d      	ldr	r2, [pc, #116]	; (8002c04 <HAL_GPIO_Init+0x334>)
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b94:	4b1b      	ldr	r3, [pc, #108]	; (8002c04 <HAL_GPIO_Init+0x334>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	43db      	mvns	r3, r3
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d003      	beq.n	8002bb8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bb8:	4a12      	ldr	r2, [pc, #72]	; (8002c04 <HAL_GPIO_Init+0x334>)
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	61fb      	str	r3, [r7, #28]
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	2b0f      	cmp	r3, #15
 8002bc8:	f67f ae90 	bls.w	80028ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002bcc:	bf00      	nop
 8002bce:	bf00      	nop
 8002bd0:	3724      	adds	r7, #36	; 0x24
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	40023800 	.word	0x40023800
 8002be0:	40013800 	.word	0x40013800
 8002be4:	40020000 	.word	0x40020000
 8002be8:	40020400 	.word	0x40020400
 8002bec:	40020800 	.word	0x40020800
 8002bf0:	40020c00 	.word	0x40020c00
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	40021400 	.word	0x40021400
 8002bfc:	40021800 	.word	0x40021800
 8002c00:	40021c00 	.word	0x40021c00
 8002c04:	40013c00 	.word	0x40013c00

08002c08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b085      	sub	sp, #20
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	460b      	mov	r3, r1
 8002c12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	691a      	ldr	r2, [r3, #16]
 8002c18:	887b      	ldrh	r3, [r7, #2]
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d002      	beq.n	8002c26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c20:	2301      	movs	r3, #1
 8002c22:	73fb      	strb	r3, [r7, #15]
 8002c24:	e001      	b.n	8002c2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c26:	2300      	movs	r3, #0
 8002c28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3714      	adds	r7, #20
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	460b      	mov	r3, r1
 8002c42:	807b      	strh	r3, [r7, #2]
 8002c44:	4613      	mov	r3, r2
 8002c46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c48:	787b      	ldrb	r3, [r7, #1]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d003      	beq.n	8002c56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c4e:	887a      	ldrh	r2, [r7, #2]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c54:	e003      	b.n	8002c5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c56:	887b      	ldrh	r3, [r7, #2]
 8002c58:	041a      	lsls	r2, r3, #16
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	619a      	str	r2, [r3, #24]
}
 8002c5e:	bf00      	nop
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr

08002c6a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	b085      	sub	sp, #20
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
 8002c72:	460b      	mov	r3, r1
 8002c74:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	695b      	ldr	r3, [r3, #20]
 8002c7a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c7c:	887a      	ldrh	r2, [r7, #2]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	4013      	ands	r3, r2
 8002c82:	041a      	lsls	r2, r3, #16
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	43d9      	mvns	r1, r3
 8002c88:	887b      	ldrh	r3, [r7, #2]
 8002c8a:	400b      	ands	r3, r1
 8002c8c:	431a      	orrs	r2, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	619a      	str	r2, [r3, #24]
}
 8002c92:	bf00      	nop
 8002c94:	3714      	adds	r7, #20
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
	...

08002ca0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002caa:	4b08      	ldr	r3, [pc, #32]	; (8002ccc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002cac:	695a      	ldr	r2, [r3, #20]
 8002cae:	88fb      	ldrh	r3, [r7, #6]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d006      	beq.n	8002cc4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002cb6:	4a05      	ldr	r2, [pc, #20]	; (8002ccc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002cb8:	88fb      	ldrh	r3, [r7, #6]
 8002cba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002cbc:	88fb      	ldrh	r3, [r7, #6]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f000 f806 	bl	8002cd0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002cc4:	bf00      	nop
 8002cc6:	3708      	adds	r7, #8
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	40013c00 	.word	0x40013c00

08002cd0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002cda:	bf00      	nop
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr

08002ce6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002ce6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ce8:	b08f      	sub	sp, #60	; 0x3c
 8002cea:	af0a      	add	r7, sp, #40	; 0x28
 8002cec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d101      	bne.n	8002cf8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e054      	b.n	8002da2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d106      	bne.n	8002d18 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f00d fcba 	bl	801068c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2203      	movs	r2, #3
 8002d1c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d102      	bne.n	8002d32 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f004 fcd8 	bl	80076ec <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	603b      	str	r3, [r7, #0]
 8002d42:	687e      	ldr	r6, [r7, #4]
 8002d44:	466d      	mov	r5, sp
 8002d46:	f106 0410 	add.w	r4, r6, #16
 8002d4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d52:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d56:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d5a:	1d33      	adds	r3, r6, #4
 8002d5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d5e:	6838      	ldr	r0, [r7, #0]
 8002d60:	f004 fc52 	bl	8007608 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2101      	movs	r1, #1
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f004 fccf 	bl	800770e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	603b      	str	r3, [r7, #0]
 8002d76:	687e      	ldr	r6, [r7, #4]
 8002d78:	466d      	mov	r5, sp
 8002d7a:	f106 0410 	add.w	r4, r6, #16
 8002d7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d86:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d8a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d8e:	1d33      	adds	r3, r6, #4
 8002d90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d92:	6838      	ldr	r0, [r7, #0]
 8002d94:	f004 fe58 	bl	8007a48 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3714      	adds	r7, #20
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002daa <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002daa:	b590      	push	{r4, r7, lr}
 8002dac:	b089      	sub	sp, #36	; 0x24
 8002dae:	af04      	add	r7, sp, #16
 8002db0:	6078      	str	r0, [r7, #4]
 8002db2:	4608      	mov	r0, r1
 8002db4:	4611      	mov	r1, r2
 8002db6:	461a      	mov	r2, r3
 8002db8:	4603      	mov	r3, r0
 8002dba:	70fb      	strb	r3, [r7, #3]
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	70bb      	strb	r3, [r7, #2]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d101      	bne.n	8002dd2 <HAL_HCD_HC_Init+0x28>
 8002dce:	2302      	movs	r3, #2
 8002dd0:	e076      	b.n	8002ec0 <HAL_HCD_HC_Init+0x116>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002dda:	78fb      	ldrb	r3, [r7, #3]
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	212c      	movs	r1, #44	; 0x2c
 8002de0:	fb01 f303 	mul.w	r3, r1, r3
 8002de4:	4413      	add	r3, r2
 8002de6:	333d      	adds	r3, #61	; 0x3d
 8002de8:	2200      	movs	r2, #0
 8002dea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002dec:	78fb      	ldrb	r3, [r7, #3]
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	212c      	movs	r1, #44	; 0x2c
 8002df2:	fb01 f303 	mul.w	r3, r1, r3
 8002df6:	4413      	add	r3, r2
 8002df8:	3338      	adds	r3, #56	; 0x38
 8002dfa:	787a      	ldrb	r2, [r7, #1]
 8002dfc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002dfe:	78fb      	ldrb	r3, [r7, #3]
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	212c      	movs	r1, #44	; 0x2c
 8002e04:	fb01 f303 	mul.w	r3, r1, r3
 8002e08:	4413      	add	r3, r2
 8002e0a:	3340      	adds	r3, #64	; 0x40
 8002e0c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002e0e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002e10:	78fb      	ldrb	r3, [r7, #3]
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	212c      	movs	r1, #44	; 0x2c
 8002e16:	fb01 f303 	mul.w	r3, r1, r3
 8002e1a:	4413      	add	r3, r2
 8002e1c:	3339      	adds	r3, #57	; 0x39
 8002e1e:	78fa      	ldrb	r2, [r7, #3]
 8002e20:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002e22:	78fb      	ldrb	r3, [r7, #3]
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	212c      	movs	r1, #44	; 0x2c
 8002e28:	fb01 f303 	mul.w	r3, r1, r3
 8002e2c:	4413      	add	r3, r2
 8002e2e:	333f      	adds	r3, #63	; 0x3f
 8002e30:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002e34:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002e36:	78fb      	ldrb	r3, [r7, #3]
 8002e38:	78ba      	ldrb	r2, [r7, #2]
 8002e3a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002e3e:	b2d0      	uxtb	r0, r2
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	212c      	movs	r1, #44	; 0x2c
 8002e44:	fb01 f303 	mul.w	r3, r1, r3
 8002e48:	4413      	add	r3, r2
 8002e4a:	333a      	adds	r3, #58	; 0x3a
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002e50:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	da09      	bge.n	8002e6c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002e58:	78fb      	ldrb	r3, [r7, #3]
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	212c      	movs	r1, #44	; 0x2c
 8002e5e:	fb01 f303 	mul.w	r3, r1, r3
 8002e62:	4413      	add	r3, r2
 8002e64:	333b      	adds	r3, #59	; 0x3b
 8002e66:	2201      	movs	r2, #1
 8002e68:	701a      	strb	r2, [r3, #0]
 8002e6a:	e008      	b.n	8002e7e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002e6c:	78fb      	ldrb	r3, [r7, #3]
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	212c      	movs	r1, #44	; 0x2c
 8002e72:	fb01 f303 	mul.w	r3, r1, r3
 8002e76:	4413      	add	r3, r2
 8002e78:	333b      	adds	r3, #59	; 0x3b
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002e7e:	78fb      	ldrb	r3, [r7, #3]
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	212c      	movs	r1, #44	; 0x2c
 8002e84:	fb01 f303 	mul.w	r3, r1, r3
 8002e88:	4413      	add	r3, r2
 8002e8a:	333c      	adds	r3, #60	; 0x3c
 8002e8c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002e90:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6818      	ldr	r0, [r3, #0]
 8002e96:	787c      	ldrb	r4, [r7, #1]
 8002e98:	78ba      	ldrb	r2, [r7, #2]
 8002e9a:	78f9      	ldrb	r1, [r7, #3]
 8002e9c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002e9e:	9302      	str	r3, [sp, #8]
 8002ea0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002ea4:	9301      	str	r3, [sp, #4]
 8002ea6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002eaa:	9300      	str	r3, [sp, #0]
 8002eac:	4623      	mov	r3, r4
 8002eae:	f004 ff51 	bl	8007d54 <USB_HC_Init>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3714      	adds	r7, #20
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd90      	pop	{r4, r7, pc}

08002ec8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d101      	bne.n	8002ee6 <HAL_HCD_HC_Halt+0x1e>
 8002ee2:	2302      	movs	r3, #2
 8002ee4:	e00f      	b.n	8002f06 <HAL_HCD_HC_Halt+0x3e>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	78fa      	ldrb	r2, [r7, #3]
 8002ef4:	4611      	mov	r1, r2
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f005 f9a1 	bl	800823e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3710      	adds	r7, #16
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
	...

08002f10 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	4608      	mov	r0, r1
 8002f1a:	4611      	mov	r1, r2
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	4603      	mov	r3, r0
 8002f20:	70fb      	strb	r3, [r7, #3]
 8002f22:	460b      	mov	r3, r1
 8002f24:	70bb      	strb	r3, [r7, #2]
 8002f26:	4613      	mov	r3, r2
 8002f28:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002f2a:	78fb      	ldrb	r3, [r7, #3]
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	212c      	movs	r1, #44	; 0x2c
 8002f30:	fb01 f303 	mul.w	r3, r1, r3
 8002f34:	4413      	add	r3, r2
 8002f36:	333b      	adds	r3, #59	; 0x3b
 8002f38:	78ba      	ldrb	r2, [r7, #2]
 8002f3a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002f3c:	78fb      	ldrb	r3, [r7, #3]
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	212c      	movs	r1, #44	; 0x2c
 8002f42:	fb01 f303 	mul.w	r3, r1, r3
 8002f46:	4413      	add	r3, r2
 8002f48:	333f      	adds	r3, #63	; 0x3f
 8002f4a:	787a      	ldrb	r2, [r7, #1]
 8002f4c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002f4e:	7c3b      	ldrb	r3, [r7, #16]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d112      	bne.n	8002f7a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002f54:	78fb      	ldrb	r3, [r7, #3]
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	212c      	movs	r1, #44	; 0x2c
 8002f5a:	fb01 f303 	mul.w	r3, r1, r3
 8002f5e:	4413      	add	r3, r2
 8002f60:	3342      	adds	r3, #66	; 0x42
 8002f62:	2203      	movs	r2, #3
 8002f64:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002f66:	78fb      	ldrb	r3, [r7, #3]
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	212c      	movs	r1, #44	; 0x2c
 8002f6c:	fb01 f303 	mul.w	r3, r1, r3
 8002f70:	4413      	add	r3, r2
 8002f72:	333d      	adds	r3, #61	; 0x3d
 8002f74:	7f3a      	ldrb	r2, [r7, #28]
 8002f76:	701a      	strb	r2, [r3, #0]
 8002f78:	e008      	b.n	8002f8c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002f7a:	78fb      	ldrb	r3, [r7, #3]
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	212c      	movs	r1, #44	; 0x2c
 8002f80:	fb01 f303 	mul.w	r3, r1, r3
 8002f84:	4413      	add	r3, r2
 8002f86:	3342      	adds	r3, #66	; 0x42
 8002f88:	2202      	movs	r2, #2
 8002f8a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002f8c:	787b      	ldrb	r3, [r7, #1]
 8002f8e:	2b03      	cmp	r3, #3
 8002f90:	f200 80c6 	bhi.w	8003120 <HAL_HCD_HC_SubmitRequest+0x210>
 8002f94:	a201      	add	r2, pc, #4	; (adr r2, 8002f9c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f9a:	bf00      	nop
 8002f9c:	08002fad 	.word	0x08002fad
 8002fa0:	0800310d 	.word	0x0800310d
 8002fa4:	08003011 	.word	0x08003011
 8002fa8:	0800308f 	.word	0x0800308f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002fac:	7c3b      	ldrb	r3, [r7, #16]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	f040 80b8 	bne.w	8003124 <HAL_HCD_HC_SubmitRequest+0x214>
 8002fb4:	78bb      	ldrb	r3, [r7, #2]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	f040 80b4 	bne.w	8003124 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002fbc:	8b3b      	ldrh	r3, [r7, #24]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d108      	bne.n	8002fd4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002fc2:	78fb      	ldrb	r3, [r7, #3]
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	212c      	movs	r1, #44	; 0x2c
 8002fc8:	fb01 f303 	mul.w	r3, r1, r3
 8002fcc:	4413      	add	r3, r2
 8002fce:	3355      	adds	r3, #85	; 0x55
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002fd4:	78fb      	ldrb	r3, [r7, #3]
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	212c      	movs	r1, #44	; 0x2c
 8002fda:	fb01 f303 	mul.w	r3, r1, r3
 8002fde:	4413      	add	r3, r2
 8002fe0:	3355      	adds	r3, #85	; 0x55
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d109      	bne.n	8002ffc <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002fe8:	78fb      	ldrb	r3, [r7, #3]
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	212c      	movs	r1, #44	; 0x2c
 8002fee:	fb01 f303 	mul.w	r3, r1, r3
 8002ff2:	4413      	add	r3, r2
 8002ff4:	3342      	adds	r3, #66	; 0x42
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002ffa:	e093      	b.n	8003124 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002ffc:	78fb      	ldrb	r3, [r7, #3]
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	212c      	movs	r1, #44	; 0x2c
 8003002:	fb01 f303 	mul.w	r3, r1, r3
 8003006:	4413      	add	r3, r2
 8003008:	3342      	adds	r3, #66	; 0x42
 800300a:	2202      	movs	r2, #2
 800300c:	701a      	strb	r2, [r3, #0]
      break;
 800300e:	e089      	b.n	8003124 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003010:	78bb      	ldrb	r3, [r7, #2]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d11d      	bne.n	8003052 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003016:	78fb      	ldrb	r3, [r7, #3]
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	212c      	movs	r1, #44	; 0x2c
 800301c:	fb01 f303 	mul.w	r3, r1, r3
 8003020:	4413      	add	r3, r2
 8003022:	3355      	adds	r3, #85	; 0x55
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d109      	bne.n	800303e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800302a:	78fb      	ldrb	r3, [r7, #3]
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	212c      	movs	r1, #44	; 0x2c
 8003030:	fb01 f303 	mul.w	r3, r1, r3
 8003034:	4413      	add	r3, r2
 8003036:	3342      	adds	r3, #66	; 0x42
 8003038:	2200      	movs	r2, #0
 800303a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800303c:	e073      	b.n	8003126 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800303e:	78fb      	ldrb	r3, [r7, #3]
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	212c      	movs	r1, #44	; 0x2c
 8003044:	fb01 f303 	mul.w	r3, r1, r3
 8003048:	4413      	add	r3, r2
 800304a:	3342      	adds	r3, #66	; 0x42
 800304c:	2202      	movs	r2, #2
 800304e:	701a      	strb	r2, [r3, #0]
      break;
 8003050:	e069      	b.n	8003126 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003052:	78fb      	ldrb	r3, [r7, #3]
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	212c      	movs	r1, #44	; 0x2c
 8003058:	fb01 f303 	mul.w	r3, r1, r3
 800305c:	4413      	add	r3, r2
 800305e:	3354      	adds	r3, #84	; 0x54
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d109      	bne.n	800307a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003066:	78fb      	ldrb	r3, [r7, #3]
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	212c      	movs	r1, #44	; 0x2c
 800306c:	fb01 f303 	mul.w	r3, r1, r3
 8003070:	4413      	add	r3, r2
 8003072:	3342      	adds	r3, #66	; 0x42
 8003074:	2200      	movs	r2, #0
 8003076:	701a      	strb	r2, [r3, #0]
      break;
 8003078:	e055      	b.n	8003126 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800307a:	78fb      	ldrb	r3, [r7, #3]
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	212c      	movs	r1, #44	; 0x2c
 8003080:	fb01 f303 	mul.w	r3, r1, r3
 8003084:	4413      	add	r3, r2
 8003086:	3342      	adds	r3, #66	; 0x42
 8003088:	2202      	movs	r2, #2
 800308a:	701a      	strb	r2, [r3, #0]
      break;
 800308c:	e04b      	b.n	8003126 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800308e:	78bb      	ldrb	r3, [r7, #2]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d11d      	bne.n	80030d0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003094:	78fb      	ldrb	r3, [r7, #3]
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	212c      	movs	r1, #44	; 0x2c
 800309a:	fb01 f303 	mul.w	r3, r1, r3
 800309e:	4413      	add	r3, r2
 80030a0:	3355      	adds	r3, #85	; 0x55
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d109      	bne.n	80030bc <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80030a8:	78fb      	ldrb	r3, [r7, #3]
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	212c      	movs	r1, #44	; 0x2c
 80030ae:	fb01 f303 	mul.w	r3, r1, r3
 80030b2:	4413      	add	r3, r2
 80030b4:	3342      	adds	r3, #66	; 0x42
 80030b6:	2200      	movs	r2, #0
 80030b8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80030ba:	e034      	b.n	8003126 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80030bc:	78fb      	ldrb	r3, [r7, #3]
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	212c      	movs	r1, #44	; 0x2c
 80030c2:	fb01 f303 	mul.w	r3, r1, r3
 80030c6:	4413      	add	r3, r2
 80030c8:	3342      	adds	r3, #66	; 0x42
 80030ca:	2202      	movs	r2, #2
 80030cc:	701a      	strb	r2, [r3, #0]
      break;
 80030ce:	e02a      	b.n	8003126 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80030d0:	78fb      	ldrb	r3, [r7, #3]
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	212c      	movs	r1, #44	; 0x2c
 80030d6:	fb01 f303 	mul.w	r3, r1, r3
 80030da:	4413      	add	r3, r2
 80030dc:	3354      	adds	r3, #84	; 0x54
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d109      	bne.n	80030f8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80030e4:	78fb      	ldrb	r3, [r7, #3]
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	212c      	movs	r1, #44	; 0x2c
 80030ea:	fb01 f303 	mul.w	r3, r1, r3
 80030ee:	4413      	add	r3, r2
 80030f0:	3342      	adds	r3, #66	; 0x42
 80030f2:	2200      	movs	r2, #0
 80030f4:	701a      	strb	r2, [r3, #0]
      break;
 80030f6:	e016      	b.n	8003126 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80030f8:	78fb      	ldrb	r3, [r7, #3]
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	212c      	movs	r1, #44	; 0x2c
 80030fe:	fb01 f303 	mul.w	r3, r1, r3
 8003102:	4413      	add	r3, r2
 8003104:	3342      	adds	r3, #66	; 0x42
 8003106:	2202      	movs	r2, #2
 8003108:	701a      	strb	r2, [r3, #0]
      break;
 800310a:	e00c      	b.n	8003126 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800310c:	78fb      	ldrb	r3, [r7, #3]
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	212c      	movs	r1, #44	; 0x2c
 8003112:	fb01 f303 	mul.w	r3, r1, r3
 8003116:	4413      	add	r3, r2
 8003118:	3342      	adds	r3, #66	; 0x42
 800311a:	2200      	movs	r2, #0
 800311c:	701a      	strb	r2, [r3, #0]
      break;
 800311e:	e002      	b.n	8003126 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003120:	bf00      	nop
 8003122:	e000      	b.n	8003126 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003124:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003126:	78fb      	ldrb	r3, [r7, #3]
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	212c      	movs	r1, #44	; 0x2c
 800312c:	fb01 f303 	mul.w	r3, r1, r3
 8003130:	4413      	add	r3, r2
 8003132:	3344      	adds	r3, #68	; 0x44
 8003134:	697a      	ldr	r2, [r7, #20]
 8003136:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003138:	78fb      	ldrb	r3, [r7, #3]
 800313a:	8b3a      	ldrh	r2, [r7, #24]
 800313c:	6879      	ldr	r1, [r7, #4]
 800313e:	202c      	movs	r0, #44	; 0x2c
 8003140:	fb00 f303 	mul.w	r3, r0, r3
 8003144:	440b      	add	r3, r1
 8003146:	334c      	adds	r3, #76	; 0x4c
 8003148:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800314a:	78fb      	ldrb	r3, [r7, #3]
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	212c      	movs	r1, #44	; 0x2c
 8003150:	fb01 f303 	mul.w	r3, r1, r3
 8003154:	4413      	add	r3, r2
 8003156:	3360      	adds	r3, #96	; 0x60
 8003158:	2200      	movs	r2, #0
 800315a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800315c:	78fb      	ldrb	r3, [r7, #3]
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	212c      	movs	r1, #44	; 0x2c
 8003162:	fb01 f303 	mul.w	r3, r1, r3
 8003166:	4413      	add	r3, r2
 8003168:	3350      	adds	r3, #80	; 0x50
 800316a:	2200      	movs	r2, #0
 800316c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800316e:	78fb      	ldrb	r3, [r7, #3]
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	212c      	movs	r1, #44	; 0x2c
 8003174:	fb01 f303 	mul.w	r3, r1, r3
 8003178:	4413      	add	r3, r2
 800317a:	3339      	adds	r3, #57	; 0x39
 800317c:	78fa      	ldrb	r2, [r7, #3]
 800317e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003180:	78fb      	ldrb	r3, [r7, #3]
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	212c      	movs	r1, #44	; 0x2c
 8003186:	fb01 f303 	mul.w	r3, r1, r3
 800318a:	4413      	add	r3, r2
 800318c:	3361      	adds	r3, #97	; 0x61
 800318e:	2200      	movs	r2, #0
 8003190:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6818      	ldr	r0, [r3, #0]
 8003196:	78fb      	ldrb	r3, [r7, #3]
 8003198:	222c      	movs	r2, #44	; 0x2c
 800319a:	fb02 f303 	mul.w	r3, r2, r3
 800319e:	3338      	adds	r3, #56	; 0x38
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	18d1      	adds	r1, r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	691b      	ldr	r3, [r3, #16]
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	461a      	mov	r2, r3
 80031ac:	f004 fef4 	bl	8007f98 <USB_HC_StartXfer>
 80031b0:	4603      	mov	r3, r0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3708      	adds	r7, #8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop

080031bc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b086      	sub	sp, #24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f004 fbf5 	bl	80079c2 <USB_GetMode>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b01      	cmp	r3, #1
 80031dc:	f040 80f6 	bne.w	80033cc <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4618      	mov	r0, r3
 80031e6:	f004 fbd9 	bl	800799c <USB_ReadInterrupts>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f000 80ec 	beq.w	80033ca <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f004 fbd0 	bl	800799c <USB_ReadInterrupts>
 80031fc:	4603      	mov	r3, r0
 80031fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003202:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003206:	d104      	bne.n	8003212 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003210:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4618      	mov	r0, r3
 8003218:	f004 fbc0 	bl	800799c <USB_ReadInterrupts>
 800321c:	4603      	mov	r3, r0
 800321e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003222:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003226:	d104      	bne.n	8003232 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003230:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4618      	mov	r0, r3
 8003238:	f004 fbb0 	bl	800799c <USB_ReadInterrupts>
 800323c:	4603      	mov	r3, r0
 800323e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003242:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003246:	d104      	bne.n	8003252 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003250:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4618      	mov	r0, r3
 8003258:	f004 fba0 	bl	800799c <USB_ReadInterrupts>
 800325c:	4603      	mov	r3, r0
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b02      	cmp	r3, #2
 8003264:	d103      	bne.n	800326e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2202      	movs	r2, #2
 800326c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4618      	mov	r0, r3
 8003274:	f004 fb92 	bl	800799c <USB_ReadInterrupts>
 8003278:	4603      	mov	r3, r0
 800327a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800327e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003282:	d11c      	bne.n	80032be <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800328c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	2b00      	cmp	r3, #0
 800329c:	d10f      	bne.n	80032be <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800329e:	2110      	movs	r1, #16
 80032a0:	6938      	ldr	r0, [r7, #16]
 80032a2:	f004 fa81 	bl	80077a8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80032a6:	6938      	ldr	r0, [r7, #16]
 80032a8:	f004 fab2 	bl	8007810 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2101      	movs	r1, #1
 80032b2:	4618      	mov	r0, r3
 80032b4:	f004 fc88 	bl	8007bc8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f00d fa65 	bl	8010788 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f004 fb6a 	bl	800799c <USB_ReadInterrupts>
 80032c8:	4603      	mov	r3, r0
 80032ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032ce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032d2:	d102      	bne.n	80032da <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f001 f89e 	bl	8004416 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4618      	mov	r0, r3
 80032e0:	f004 fb5c 	bl	800799c <USB_ReadInterrupts>
 80032e4:	4603      	mov	r3, r0
 80032e6:	f003 0308 	and.w	r3, r3, #8
 80032ea:	2b08      	cmp	r3, #8
 80032ec:	d106      	bne.n	80032fc <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f00d fa2e 	bl	8010750 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2208      	movs	r2, #8
 80032fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4618      	mov	r0, r3
 8003302:	f004 fb4b 	bl	800799c <USB_ReadInterrupts>
 8003306:	4603      	mov	r3, r0
 8003308:	f003 0310 	and.w	r3, r3, #16
 800330c:	2b10      	cmp	r3, #16
 800330e:	d101      	bne.n	8003314 <HAL_HCD_IRQHandler+0x158>
 8003310:	2301      	movs	r3, #1
 8003312:	e000      	b.n	8003316 <HAL_HCD_IRQHandler+0x15a>
 8003314:	2300      	movs	r3, #0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d012      	beq.n	8003340 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	699a      	ldr	r2, [r3, #24]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f022 0210 	bic.w	r2, r2, #16
 8003328:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f000 ffa1 	bl	8004272 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	699a      	ldr	r2, [r3, #24]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f042 0210 	orr.w	r2, r2, #16
 800333e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4618      	mov	r0, r3
 8003346:	f004 fb29 	bl	800799c <USB_ReadInterrupts>
 800334a:	4603      	mov	r3, r0
 800334c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003350:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003354:	d13a      	bne.n	80033cc <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4618      	mov	r0, r3
 800335c:	f004 ff5e 	bl	800821c <USB_HC_ReadInterrupt>
 8003360:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003362:	2300      	movs	r3, #0
 8003364:	617b      	str	r3, [r7, #20]
 8003366:	e025      	b.n	80033b4 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	f003 030f 	and.w	r3, r3, #15
 800336e:	68ba      	ldr	r2, [r7, #8]
 8003370:	fa22 f303 	lsr.w	r3, r2, r3
 8003374:	f003 0301 	and.w	r3, r3, #1
 8003378:	2b00      	cmp	r3, #0
 800337a:	d018      	beq.n	80033ae <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	015a      	lsls	r2, r3, #5
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	4413      	add	r3, r2
 8003384:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800338e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003392:	d106      	bne.n	80033a2 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	b2db      	uxtb	r3, r3
 8003398:	4619      	mov	r1, r3
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 f8ab 	bl	80034f6 <HCD_HC_IN_IRQHandler>
 80033a0:	e005      	b.n	80033ae <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	4619      	mov	r1, r3
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f000 fbf9 	bl	8003ba0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	3301      	adds	r3, #1
 80033b2:	617b      	str	r3, [r7, #20]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	697a      	ldr	r2, [r7, #20]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d3d4      	bcc.n	8003368 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033c6:	615a      	str	r2, [r3, #20]
 80033c8:	e000      	b.n	80033cc <HAL_HCD_IRQHandler+0x210>
      return;
 80033ca:	bf00      	nop
    }
  }
}
 80033cc:	3718      	adds	r7, #24
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b082      	sub	sp, #8
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d101      	bne.n	80033e8 <HAL_HCD_Start+0x16>
 80033e4:	2302      	movs	r3, #2
 80033e6:	e013      	b.n	8003410 <HAL_HCD_Start+0x3e>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2101      	movs	r1, #1
 80033f6:	4618      	mov	r0, r3
 80033f8:	f004 fc4a 	bl	8007c90 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4618      	mov	r0, r3
 8003402:	f004 f962 	bl	80076ca <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800340e:	2300      	movs	r3, #0
}
 8003410:	4618      	mov	r0, r3
 8003412:	3708      	adds	r7, #8
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003426:	2b01      	cmp	r3, #1
 8003428:	d101      	bne.n	800342e <HAL_HCD_Stop+0x16>
 800342a:	2302      	movs	r3, #2
 800342c:	e00d      	b.n	800344a <HAL_HCD_Stop+0x32>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4618      	mov	r0, r3
 800343c:	f005 f838 	bl	80084b0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3708      	adds	r7, #8
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}

08003452 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003452:	b580      	push	{r7, lr}
 8003454:	b082      	sub	sp, #8
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4618      	mov	r0, r3
 8003460:	f004 fbec 	bl	8007c3c <USB_ResetPort>
 8003464:	4603      	mov	r3, r0
}
 8003466:	4618      	mov	r0, r3
 8003468:	3708      	adds	r7, #8
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}

0800346e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800346e:	b480      	push	{r7}
 8003470:	b083      	sub	sp, #12
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
 8003476:	460b      	mov	r3, r1
 8003478:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800347a:	78fb      	ldrb	r3, [r7, #3]
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	212c      	movs	r1, #44	; 0x2c
 8003480:	fb01 f303 	mul.w	r3, r1, r3
 8003484:	4413      	add	r3, r2
 8003486:	3360      	adds	r3, #96	; 0x60
 8003488:	781b      	ldrb	r3, [r3, #0]
}
 800348a:	4618      	mov	r0, r3
 800348c:	370c      	adds	r7, #12
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr

08003496 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003496:	b480      	push	{r7}
 8003498:	b083      	sub	sp, #12
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
 800349e:	460b      	mov	r3, r1
 80034a0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80034a2:	78fb      	ldrb	r3, [r7, #3]
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	212c      	movs	r1, #44	; 0x2c
 80034a8:	fb01 f303 	mul.w	r3, r1, r3
 80034ac:	4413      	add	r3, r2
 80034ae:	3350      	adds	r3, #80	; 0x50
 80034b0:	681b      	ldr	r3, [r3, #0]
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr

080034be <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80034be:	b580      	push	{r7, lr}
 80034c0:	b082      	sub	sp, #8
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f004 fc30 	bl	8007d30 <USB_GetCurrentFrame>
 80034d0:	4603      	mov	r3, r0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3708      	adds	r7, #8
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80034da:	b580      	push	{r7, lr}
 80034dc:	b082      	sub	sp, #8
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4618      	mov	r0, r3
 80034e8:	f004 fc0b 	bl	8007d02 <USB_GetHostSpeed>
 80034ec:	4603      	mov	r3, r0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3708      	adds	r7, #8
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b086      	sub	sp, #24
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
 80034fe:	460b      	mov	r3, r1
 8003500:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800350c:	78fb      	ldrb	r3, [r7, #3]
 800350e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	015a      	lsls	r2, r3, #5
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	4413      	add	r3, r2
 8003518:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f003 0304 	and.w	r3, r3, #4
 8003522:	2b04      	cmp	r3, #4
 8003524:	d11a      	bne.n	800355c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	015a      	lsls	r2, r3, #5
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	4413      	add	r3, r2
 800352e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003532:	461a      	mov	r2, r3
 8003534:	2304      	movs	r3, #4
 8003536:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	212c      	movs	r1, #44	; 0x2c
 800353e:	fb01 f303 	mul.w	r3, r1, r3
 8003542:	4413      	add	r3, r2
 8003544:	3361      	adds	r3, #97	; 0x61
 8003546:	2206      	movs	r2, #6
 8003548:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68fa      	ldr	r2, [r7, #12]
 8003550:	b2d2      	uxtb	r2, r2
 8003552:	4611      	mov	r1, r2
 8003554:	4618      	mov	r0, r3
 8003556:	f004 fe72 	bl	800823e <USB_HC_Halt>
 800355a:	e0af      	b.n	80036bc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	015a      	lsls	r2, r3, #5
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	4413      	add	r3, r2
 8003564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800356e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003572:	d11b      	bne.n	80035ac <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	015a      	lsls	r2, r3, #5
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	4413      	add	r3, r2
 800357c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003580:	461a      	mov	r2, r3
 8003582:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003586:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	212c      	movs	r1, #44	; 0x2c
 800358e:	fb01 f303 	mul.w	r3, r1, r3
 8003592:	4413      	add	r3, r2
 8003594:	3361      	adds	r3, #97	; 0x61
 8003596:	2207      	movs	r2, #7
 8003598:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	b2d2      	uxtb	r2, r2
 80035a2:	4611      	mov	r1, r2
 80035a4:	4618      	mov	r0, r3
 80035a6:	f004 fe4a 	bl	800823e <USB_HC_Halt>
 80035aa:	e087      	b.n	80036bc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	015a      	lsls	r2, r3, #5
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	4413      	add	r3, r2
 80035b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f003 0320 	and.w	r3, r3, #32
 80035be:	2b20      	cmp	r3, #32
 80035c0:	d109      	bne.n	80035d6 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	015a      	lsls	r2, r3, #5
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	4413      	add	r3, r2
 80035ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ce:	461a      	mov	r2, r3
 80035d0:	2320      	movs	r3, #32
 80035d2:	6093      	str	r3, [r2, #8]
 80035d4:	e072      	b.n	80036bc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	015a      	lsls	r2, r3, #5
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	4413      	add	r3, r2
 80035de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f003 0308 	and.w	r3, r3, #8
 80035e8:	2b08      	cmp	r3, #8
 80035ea:	d11a      	bne.n	8003622 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	015a      	lsls	r2, r3, #5
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	4413      	add	r3, r2
 80035f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035f8:	461a      	mov	r2, r3
 80035fa:	2308      	movs	r3, #8
 80035fc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	212c      	movs	r1, #44	; 0x2c
 8003604:	fb01 f303 	mul.w	r3, r1, r3
 8003608:	4413      	add	r3, r2
 800360a:	3361      	adds	r3, #97	; 0x61
 800360c:	2205      	movs	r2, #5
 800360e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	b2d2      	uxtb	r2, r2
 8003618:	4611      	mov	r1, r2
 800361a:	4618      	mov	r0, r3
 800361c:	f004 fe0f 	bl	800823e <USB_HC_Halt>
 8003620:	e04c      	b.n	80036bc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	015a      	lsls	r2, r3, #5
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	4413      	add	r3, r2
 800362a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003634:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003638:	d11b      	bne.n	8003672 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	015a      	lsls	r2, r3, #5
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	4413      	add	r3, r2
 8003642:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003646:	461a      	mov	r2, r3
 8003648:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800364c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	212c      	movs	r1, #44	; 0x2c
 8003654:	fb01 f303 	mul.w	r3, r1, r3
 8003658:	4413      	add	r3, r2
 800365a:	3361      	adds	r3, #97	; 0x61
 800365c:	2208      	movs	r2, #8
 800365e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	b2d2      	uxtb	r2, r2
 8003668:	4611      	mov	r1, r2
 800366a:	4618      	mov	r0, r3
 800366c:	f004 fde7 	bl	800823e <USB_HC_Halt>
 8003670:	e024      	b.n	80036bc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	015a      	lsls	r2, r3, #5
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	4413      	add	r3, r2
 800367a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003684:	2b80      	cmp	r3, #128	; 0x80
 8003686:	d119      	bne.n	80036bc <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	015a      	lsls	r2, r3, #5
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	4413      	add	r3, r2
 8003690:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003694:	461a      	mov	r2, r3
 8003696:	2380      	movs	r3, #128	; 0x80
 8003698:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	212c      	movs	r1, #44	; 0x2c
 80036a0:	fb01 f303 	mul.w	r3, r1, r3
 80036a4:	4413      	add	r3, r2
 80036a6:	3361      	adds	r3, #97	; 0x61
 80036a8:	2206      	movs	r2, #6
 80036aa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	b2d2      	uxtb	r2, r2
 80036b4:	4611      	mov	r1, r2
 80036b6:	4618      	mov	r0, r3
 80036b8:	f004 fdc1 	bl	800823e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	015a      	lsls	r2, r3, #5
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	4413      	add	r3, r2
 80036c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036d2:	d112      	bne.n	80036fa <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	b2d2      	uxtb	r2, r2
 80036dc:	4611      	mov	r1, r2
 80036de:	4618      	mov	r0, r3
 80036e0:	f004 fdad 	bl	800823e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	015a      	lsls	r2, r3, #5
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	4413      	add	r3, r2
 80036ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036f0:	461a      	mov	r2, r3
 80036f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036f6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80036f8:	e24e      	b.n	8003b98 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	015a      	lsls	r2, r3, #5
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	4413      	add	r3, r2
 8003702:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f003 0301 	and.w	r3, r3, #1
 800370c:	2b01      	cmp	r3, #1
 800370e:	f040 80df 	bne.w	80038d0 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d019      	beq.n	800374e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	212c      	movs	r1, #44	; 0x2c
 8003720:	fb01 f303 	mul.w	r3, r1, r3
 8003724:	4413      	add	r3, r2
 8003726:	3348      	adds	r3, #72	; 0x48
 8003728:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	0159      	lsls	r1, r3, #5
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	440b      	add	r3, r1
 8003732:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800373c:	1ad2      	subs	r2, r2, r3
 800373e:	6879      	ldr	r1, [r7, #4]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	202c      	movs	r0, #44	; 0x2c
 8003744:	fb00 f303 	mul.w	r3, r0, r3
 8003748:	440b      	add	r3, r1
 800374a:	3350      	adds	r3, #80	; 0x50
 800374c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	212c      	movs	r1, #44	; 0x2c
 8003754:	fb01 f303 	mul.w	r3, r1, r3
 8003758:	4413      	add	r3, r2
 800375a:	3361      	adds	r3, #97	; 0x61
 800375c:	2201      	movs	r2, #1
 800375e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	212c      	movs	r1, #44	; 0x2c
 8003766:	fb01 f303 	mul.w	r3, r1, r3
 800376a:	4413      	add	r3, r2
 800376c:	335c      	adds	r3, #92	; 0x5c
 800376e:	2200      	movs	r2, #0
 8003770:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	015a      	lsls	r2, r3, #5
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	4413      	add	r3, r2
 800377a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800377e:	461a      	mov	r2, r3
 8003780:	2301      	movs	r3, #1
 8003782:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	212c      	movs	r1, #44	; 0x2c
 800378a:	fb01 f303 	mul.w	r3, r1, r3
 800378e:	4413      	add	r3, r2
 8003790:	333f      	adds	r3, #63	; 0x3f
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d009      	beq.n	80037ac <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	212c      	movs	r1, #44	; 0x2c
 800379e:	fb01 f303 	mul.w	r3, r1, r3
 80037a2:	4413      	add	r3, r2
 80037a4:	333f      	adds	r3, #63	; 0x3f
 80037a6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d111      	bne.n	80037d0 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	b2d2      	uxtb	r2, r2
 80037b4:	4611      	mov	r1, r2
 80037b6:	4618      	mov	r0, r3
 80037b8:	f004 fd41 	bl	800823e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	015a      	lsls	r2, r3, #5
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	4413      	add	r3, r2
 80037c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037c8:	461a      	mov	r2, r3
 80037ca:	2310      	movs	r3, #16
 80037cc:	6093      	str	r3, [r2, #8]
 80037ce:	e03a      	b.n	8003846 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	212c      	movs	r1, #44	; 0x2c
 80037d6:	fb01 f303 	mul.w	r3, r1, r3
 80037da:	4413      	add	r3, r2
 80037dc:	333f      	adds	r3, #63	; 0x3f
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	2b03      	cmp	r3, #3
 80037e2:	d009      	beq.n	80037f8 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	212c      	movs	r1, #44	; 0x2c
 80037ea:	fb01 f303 	mul.w	r3, r1, r3
 80037ee:	4413      	add	r3, r2
 80037f0:	333f      	adds	r3, #63	; 0x3f
 80037f2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d126      	bne.n	8003846 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	015a      	lsls	r2, r3, #5
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	4413      	add	r3, r2
 8003800:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	0151      	lsls	r1, r2, #5
 800380a:	693a      	ldr	r2, [r7, #16]
 800380c:	440a      	add	r2, r1
 800380e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003812:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003816:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	212c      	movs	r1, #44	; 0x2c
 800381e:	fb01 f303 	mul.w	r3, r1, r3
 8003822:	4413      	add	r3, r2
 8003824:	3360      	adds	r3, #96	; 0x60
 8003826:	2201      	movs	r2, #1
 8003828:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	b2d9      	uxtb	r1, r3
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	202c      	movs	r0, #44	; 0x2c
 8003834:	fb00 f303 	mul.w	r3, r0, r3
 8003838:	4413      	add	r3, r2
 800383a:	3360      	adds	r3, #96	; 0x60
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	461a      	mov	r2, r3
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f00c ffaf 	bl	80107a4 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	2b01      	cmp	r3, #1
 800384c:	d12b      	bne.n	80038a6 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	212c      	movs	r1, #44	; 0x2c
 8003854:	fb01 f303 	mul.w	r3, r1, r3
 8003858:	4413      	add	r3, r2
 800385a:	3348      	adds	r3, #72	; 0x48
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	6879      	ldr	r1, [r7, #4]
 8003860:	68fa      	ldr	r2, [r7, #12]
 8003862:	202c      	movs	r0, #44	; 0x2c
 8003864:	fb00 f202 	mul.w	r2, r0, r2
 8003868:	440a      	add	r2, r1
 800386a:	3240      	adds	r2, #64	; 0x40
 800386c:	8812      	ldrh	r2, [r2, #0]
 800386e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	2b00      	cmp	r3, #0
 8003878:	f000 818e 	beq.w	8003b98 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	212c      	movs	r1, #44	; 0x2c
 8003882:	fb01 f303 	mul.w	r3, r1, r3
 8003886:	4413      	add	r3, r2
 8003888:	3354      	adds	r3, #84	; 0x54
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	f083 0301 	eor.w	r3, r3, #1
 8003890:	b2d8      	uxtb	r0, r3
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	212c      	movs	r1, #44	; 0x2c
 8003898:	fb01 f303 	mul.w	r3, r1, r3
 800389c:	4413      	add	r3, r2
 800389e:	3354      	adds	r3, #84	; 0x54
 80038a0:	4602      	mov	r2, r0
 80038a2:	701a      	strb	r2, [r3, #0]
}
 80038a4:	e178      	b.n	8003b98 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	212c      	movs	r1, #44	; 0x2c
 80038ac:	fb01 f303 	mul.w	r3, r1, r3
 80038b0:	4413      	add	r3, r2
 80038b2:	3354      	adds	r3, #84	; 0x54
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	f083 0301 	eor.w	r3, r3, #1
 80038ba:	b2d8      	uxtb	r0, r3
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	212c      	movs	r1, #44	; 0x2c
 80038c2:	fb01 f303 	mul.w	r3, r1, r3
 80038c6:	4413      	add	r3, r2
 80038c8:	3354      	adds	r3, #84	; 0x54
 80038ca:	4602      	mov	r2, r0
 80038cc:	701a      	strb	r2, [r3, #0]
}
 80038ce:	e163      	b.n	8003b98 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	015a      	lsls	r2, r3, #5
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	4413      	add	r3, r2
 80038d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f003 0302 	and.w	r3, r3, #2
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	f040 80f6 	bne.w	8003ad4 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	212c      	movs	r1, #44	; 0x2c
 80038ee:	fb01 f303 	mul.w	r3, r1, r3
 80038f2:	4413      	add	r3, r2
 80038f4:	3361      	adds	r3, #97	; 0x61
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d109      	bne.n	8003910 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	212c      	movs	r1, #44	; 0x2c
 8003902:	fb01 f303 	mul.w	r3, r1, r3
 8003906:	4413      	add	r3, r2
 8003908:	3360      	adds	r3, #96	; 0x60
 800390a:	2201      	movs	r2, #1
 800390c:	701a      	strb	r2, [r3, #0]
 800390e:	e0c9      	b.n	8003aa4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	212c      	movs	r1, #44	; 0x2c
 8003916:	fb01 f303 	mul.w	r3, r1, r3
 800391a:	4413      	add	r3, r2
 800391c:	3361      	adds	r3, #97	; 0x61
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	2b05      	cmp	r3, #5
 8003922:	d109      	bne.n	8003938 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	212c      	movs	r1, #44	; 0x2c
 800392a:	fb01 f303 	mul.w	r3, r1, r3
 800392e:	4413      	add	r3, r2
 8003930:	3360      	adds	r3, #96	; 0x60
 8003932:	2205      	movs	r2, #5
 8003934:	701a      	strb	r2, [r3, #0]
 8003936:	e0b5      	b.n	8003aa4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	212c      	movs	r1, #44	; 0x2c
 800393e:	fb01 f303 	mul.w	r3, r1, r3
 8003942:	4413      	add	r3, r2
 8003944:	3361      	adds	r3, #97	; 0x61
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	2b06      	cmp	r3, #6
 800394a:	d009      	beq.n	8003960 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	212c      	movs	r1, #44	; 0x2c
 8003952:	fb01 f303 	mul.w	r3, r1, r3
 8003956:	4413      	add	r3, r2
 8003958:	3361      	adds	r3, #97	; 0x61
 800395a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800395c:	2b08      	cmp	r3, #8
 800395e:	d150      	bne.n	8003a02 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	212c      	movs	r1, #44	; 0x2c
 8003966:	fb01 f303 	mul.w	r3, r1, r3
 800396a:	4413      	add	r3, r2
 800396c:	335c      	adds	r3, #92	; 0x5c
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	1c5a      	adds	r2, r3, #1
 8003972:	6879      	ldr	r1, [r7, #4]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	202c      	movs	r0, #44	; 0x2c
 8003978:	fb00 f303 	mul.w	r3, r0, r3
 800397c:	440b      	add	r3, r1
 800397e:	335c      	adds	r3, #92	; 0x5c
 8003980:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	212c      	movs	r1, #44	; 0x2c
 8003988:	fb01 f303 	mul.w	r3, r1, r3
 800398c:	4413      	add	r3, r2
 800398e:	335c      	adds	r3, #92	; 0x5c
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2b02      	cmp	r3, #2
 8003994:	d912      	bls.n	80039bc <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	212c      	movs	r1, #44	; 0x2c
 800399c:	fb01 f303 	mul.w	r3, r1, r3
 80039a0:	4413      	add	r3, r2
 80039a2:	335c      	adds	r3, #92	; 0x5c
 80039a4:	2200      	movs	r2, #0
 80039a6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	212c      	movs	r1, #44	; 0x2c
 80039ae:	fb01 f303 	mul.w	r3, r1, r3
 80039b2:	4413      	add	r3, r2
 80039b4:	3360      	adds	r3, #96	; 0x60
 80039b6:	2204      	movs	r2, #4
 80039b8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80039ba:	e073      	b.n	8003aa4 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	212c      	movs	r1, #44	; 0x2c
 80039c2:	fb01 f303 	mul.w	r3, r1, r3
 80039c6:	4413      	add	r3, r2
 80039c8:	3360      	adds	r3, #96	; 0x60
 80039ca:	2202      	movs	r2, #2
 80039cc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	015a      	lsls	r2, r3, #5
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	4413      	add	r3, r2
 80039d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80039e4:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80039ec:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	015a      	lsls	r2, r3, #5
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	4413      	add	r3, r2
 80039f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039fa:	461a      	mov	r2, r3
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003a00:	e050      	b.n	8003aa4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	212c      	movs	r1, #44	; 0x2c
 8003a08:	fb01 f303 	mul.w	r3, r1, r3
 8003a0c:	4413      	add	r3, r2
 8003a0e:	3361      	adds	r3, #97	; 0x61
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	2b03      	cmp	r3, #3
 8003a14:	d122      	bne.n	8003a5c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	212c      	movs	r1, #44	; 0x2c
 8003a1c:	fb01 f303 	mul.w	r3, r1, r3
 8003a20:	4413      	add	r3, r2
 8003a22:	3360      	adds	r3, #96	; 0x60
 8003a24:	2202      	movs	r2, #2
 8003a26:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	015a      	lsls	r2, r3, #5
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	4413      	add	r3, r2
 8003a30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003a3e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a46:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	015a      	lsls	r2, r3, #5
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	4413      	add	r3, r2
 8003a50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a54:	461a      	mov	r2, r3
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	6013      	str	r3, [r2, #0]
 8003a5a:	e023      	b.n	8003aa4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	212c      	movs	r1, #44	; 0x2c
 8003a62:	fb01 f303 	mul.w	r3, r1, r3
 8003a66:	4413      	add	r3, r2
 8003a68:	3361      	adds	r3, #97	; 0x61
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	2b07      	cmp	r3, #7
 8003a6e:	d119      	bne.n	8003aa4 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	212c      	movs	r1, #44	; 0x2c
 8003a76:	fb01 f303 	mul.w	r3, r1, r3
 8003a7a:	4413      	add	r3, r2
 8003a7c:	335c      	adds	r3, #92	; 0x5c
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	1c5a      	adds	r2, r3, #1
 8003a82:	6879      	ldr	r1, [r7, #4]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	202c      	movs	r0, #44	; 0x2c
 8003a88:	fb00 f303 	mul.w	r3, r0, r3
 8003a8c:	440b      	add	r3, r1
 8003a8e:	335c      	adds	r3, #92	; 0x5c
 8003a90:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	212c      	movs	r1, #44	; 0x2c
 8003a98:	fb01 f303 	mul.w	r3, r1, r3
 8003a9c:	4413      	add	r3, r2
 8003a9e:	3360      	adds	r3, #96	; 0x60
 8003aa0:	2204      	movs	r2, #4
 8003aa2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	015a      	lsls	r2, r3, #5
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	4413      	add	r3, r2
 8003aac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	2302      	movs	r3, #2
 8003ab4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	b2d9      	uxtb	r1, r3
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	202c      	movs	r0, #44	; 0x2c
 8003ac0:	fb00 f303 	mul.w	r3, r0, r3
 8003ac4:	4413      	add	r3, r2
 8003ac6:	3360      	adds	r3, #96	; 0x60
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	461a      	mov	r2, r3
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f00c fe69 	bl	80107a4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003ad2:	e061      	b.n	8003b98 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	015a      	lsls	r2, r3, #5
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	4413      	add	r3, r2
 8003adc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f003 0310 	and.w	r3, r3, #16
 8003ae6:	2b10      	cmp	r3, #16
 8003ae8:	d156      	bne.n	8003b98 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	212c      	movs	r1, #44	; 0x2c
 8003af0:	fb01 f303 	mul.w	r3, r1, r3
 8003af4:	4413      	add	r3, r2
 8003af6:	333f      	adds	r3, #63	; 0x3f
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	2b03      	cmp	r3, #3
 8003afc:	d111      	bne.n	8003b22 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	212c      	movs	r1, #44	; 0x2c
 8003b04:	fb01 f303 	mul.w	r3, r1, r3
 8003b08:	4413      	add	r3, r2
 8003b0a:	335c      	adds	r3, #92	; 0x5c
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	b2d2      	uxtb	r2, r2
 8003b18:	4611      	mov	r1, r2
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f004 fb8f 	bl	800823e <USB_HC_Halt>
 8003b20:	e031      	b.n	8003b86 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	212c      	movs	r1, #44	; 0x2c
 8003b28:	fb01 f303 	mul.w	r3, r1, r3
 8003b2c:	4413      	add	r3, r2
 8003b2e:	333f      	adds	r3, #63	; 0x3f
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d009      	beq.n	8003b4a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	212c      	movs	r1, #44	; 0x2c
 8003b3c:	fb01 f303 	mul.w	r3, r1, r3
 8003b40:	4413      	add	r3, r2
 8003b42:	333f      	adds	r3, #63	; 0x3f
 8003b44:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d11d      	bne.n	8003b86 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	212c      	movs	r1, #44	; 0x2c
 8003b50:	fb01 f303 	mul.w	r3, r1, r3
 8003b54:	4413      	add	r3, r2
 8003b56:	335c      	adds	r3, #92	; 0x5c
 8003b58:	2200      	movs	r2, #0
 8003b5a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	691b      	ldr	r3, [r3, #16]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d110      	bne.n	8003b86 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	212c      	movs	r1, #44	; 0x2c
 8003b6a:	fb01 f303 	mul.w	r3, r1, r3
 8003b6e:	4413      	add	r3, r2
 8003b70:	3361      	adds	r3, #97	; 0x61
 8003b72:	2203      	movs	r2, #3
 8003b74:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68fa      	ldr	r2, [r7, #12]
 8003b7c:	b2d2      	uxtb	r2, r2
 8003b7e:	4611      	mov	r1, r2
 8003b80:	4618      	mov	r0, r3
 8003b82:	f004 fb5c 	bl	800823e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	015a      	lsls	r2, r3, #5
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b92:	461a      	mov	r2, r3
 8003b94:	2310      	movs	r3, #16
 8003b96:	6093      	str	r3, [r2, #8]
}
 8003b98:	bf00      	nop
 8003b9a:	3718      	adds	r7, #24
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b088      	sub	sp, #32
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	460b      	mov	r3, r1
 8003baa:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003bb6:	78fb      	ldrb	r3, [r7, #3]
 8003bb8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	015a      	lsls	r2, r3, #5
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	4413      	add	r3, r2
 8003bc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f003 0304 	and.w	r3, r3, #4
 8003bcc:	2b04      	cmp	r3, #4
 8003bce:	d11a      	bne.n	8003c06 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	015a      	lsls	r2, r3, #5
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bdc:	461a      	mov	r2, r3
 8003bde:	2304      	movs	r3, #4
 8003be0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	212c      	movs	r1, #44	; 0x2c
 8003be8:	fb01 f303 	mul.w	r3, r1, r3
 8003bec:	4413      	add	r3, r2
 8003bee:	3361      	adds	r3, #97	; 0x61
 8003bf0:	2206      	movs	r2, #6
 8003bf2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	697a      	ldr	r2, [r7, #20]
 8003bfa:	b2d2      	uxtb	r2, r2
 8003bfc:	4611      	mov	r1, r2
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f004 fb1d 	bl	800823e <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8003c04:	e331      	b.n	800426a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	015a      	lsls	r2, r3, #5
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	f003 0320 	and.w	r3, r3, #32
 8003c18:	2b20      	cmp	r3, #32
 8003c1a:	d12e      	bne.n	8003c7a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	015a      	lsls	r2, r3, #5
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	4413      	add	r3, r2
 8003c24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c28:	461a      	mov	r2, r3
 8003c2a:	2320      	movs	r3, #32
 8003c2c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	212c      	movs	r1, #44	; 0x2c
 8003c34:	fb01 f303 	mul.w	r3, r1, r3
 8003c38:	4413      	add	r3, r2
 8003c3a:	333d      	adds	r3, #61	; 0x3d
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	f040 8313 	bne.w	800426a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	212c      	movs	r1, #44	; 0x2c
 8003c4a:	fb01 f303 	mul.w	r3, r1, r3
 8003c4e:	4413      	add	r3, r2
 8003c50:	333d      	adds	r3, #61	; 0x3d
 8003c52:	2200      	movs	r2, #0
 8003c54:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	212c      	movs	r1, #44	; 0x2c
 8003c5c:	fb01 f303 	mul.w	r3, r1, r3
 8003c60:	4413      	add	r3, r2
 8003c62:	3360      	adds	r3, #96	; 0x60
 8003c64:	2202      	movs	r2, #2
 8003c66:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	697a      	ldr	r2, [r7, #20]
 8003c6e:	b2d2      	uxtb	r2, r2
 8003c70:	4611      	mov	r1, r2
 8003c72:	4618      	mov	r0, r3
 8003c74:	f004 fae3 	bl	800823e <USB_HC_Halt>
}
 8003c78:	e2f7      	b.n	800426a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	015a      	lsls	r2, r3, #5
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	4413      	add	r3, r2
 8003c82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c90:	d112      	bne.n	8003cb8 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	015a      	lsls	r2, r3, #5
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	4413      	add	r3, r2
 8003c9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ca4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	697a      	ldr	r2, [r7, #20]
 8003cac:	b2d2      	uxtb	r2, r2
 8003cae:	4611      	mov	r1, r2
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f004 fac4 	bl	800823e <USB_HC_Halt>
}
 8003cb6:	e2d8      	b.n	800426a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	015a      	lsls	r2, r3, #5
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f003 0301 	and.w	r3, r3, #1
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d140      	bne.n	8003d50 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	212c      	movs	r1, #44	; 0x2c
 8003cd4:	fb01 f303 	mul.w	r3, r1, r3
 8003cd8:	4413      	add	r3, r2
 8003cda:	335c      	adds	r3, #92	; 0x5c
 8003cdc:	2200      	movs	r2, #0
 8003cde:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	015a      	lsls	r2, r3, #5
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf2:	2b40      	cmp	r3, #64	; 0x40
 8003cf4:	d111      	bne.n	8003d1a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	212c      	movs	r1, #44	; 0x2c
 8003cfc:	fb01 f303 	mul.w	r3, r1, r3
 8003d00:	4413      	add	r3, r2
 8003d02:	333d      	adds	r3, #61	; 0x3d
 8003d04:	2201      	movs	r2, #1
 8003d06:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	015a      	lsls	r2, r3, #5
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	4413      	add	r3, r2
 8003d10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d14:	461a      	mov	r2, r3
 8003d16:	2340      	movs	r3, #64	; 0x40
 8003d18:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	015a      	lsls	r2, r3, #5
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	4413      	add	r3, r2
 8003d22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d26:	461a      	mov	r2, r3
 8003d28:	2301      	movs	r3, #1
 8003d2a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	212c      	movs	r1, #44	; 0x2c
 8003d32:	fb01 f303 	mul.w	r3, r1, r3
 8003d36:	4413      	add	r3, r2
 8003d38:	3361      	adds	r3, #97	; 0x61
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	697a      	ldr	r2, [r7, #20]
 8003d44:	b2d2      	uxtb	r2, r2
 8003d46:	4611      	mov	r1, r2
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f004 fa78 	bl	800823e <USB_HC_Halt>
}
 8003d4e:	e28c      	b.n	800426a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	015a      	lsls	r2, r3, #5
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	4413      	add	r3, r2
 8003d58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d62:	2b40      	cmp	r3, #64	; 0x40
 8003d64:	d12c      	bne.n	8003dc0 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	212c      	movs	r1, #44	; 0x2c
 8003d6c:	fb01 f303 	mul.w	r3, r1, r3
 8003d70:	4413      	add	r3, r2
 8003d72:	3361      	adds	r3, #97	; 0x61
 8003d74:	2204      	movs	r2, #4
 8003d76:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	212c      	movs	r1, #44	; 0x2c
 8003d7e:	fb01 f303 	mul.w	r3, r1, r3
 8003d82:	4413      	add	r3, r2
 8003d84:	333d      	adds	r3, #61	; 0x3d
 8003d86:	2201      	movs	r2, #1
 8003d88:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	212c      	movs	r1, #44	; 0x2c
 8003d90:	fb01 f303 	mul.w	r3, r1, r3
 8003d94:	4413      	add	r3, r2
 8003d96:	335c      	adds	r3, #92	; 0x5c
 8003d98:	2200      	movs	r2, #0
 8003d9a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	697a      	ldr	r2, [r7, #20]
 8003da2:	b2d2      	uxtb	r2, r2
 8003da4:	4611      	mov	r1, r2
 8003da6:	4618      	mov	r0, r3
 8003da8:	f004 fa49 	bl	800823e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	015a      	lsls	r2, r3, #5
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	4413      	add	r3, r2
 8003db4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003db8:	461a      	mov	r2, r3
 8003dba:	2340      	movs	r3, #64	; 0x40
 8003dbc:	6093      	str	r3, [r2, #8]
}
 8003dbe:	e254      	b.n	800426a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	015a      	lsls	r2, r3, #5
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f003 0308 	and.w	r3, r3, #8
 8003dd2:	2b08      	cmp	r3, #8
 8003dd4:	d11a      	bne.n	8003e0c <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	015a      	lsls	r2, r3, #5
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	4413      	add	r3, r2
 8003dde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003de2:	461a      	mov	r2, r3
 8003de4:	2308      	movs	r3, #8
 8003de6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	212c      	movs	r1, #44	; 0x2c
 8003dee:	fb01 f303 	mul.w	r3, r1, r3
 8003df2:	4413      	add	r3, r2
 8003df4:	3361      	adds	r3, #97	; 0x61
 8003df6:	2205      	movs	r2, #5
 8003df8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	b2d2      	uxtb	r2, r2
 8003e02:	4611      	mov	r1, r2
 8003e04:	4618      	mov	r0, r3
 8003e06:	f004 fa1a 	bl	800823e <USB_HC_Halt>
}
 8003e0a:	e22e      	b.n	800426a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	015a      	lsls	r2, r3, #5
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	4413      	add	r3, r2
 8003e14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f003 0310 	and.w	r3, r3, #16
 8003e1e:	2b10      	cmp	r3, #16
 8003e20:	d140      	bne.n	8003ea4 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	212c      	movs	r1, #44	; 0x2c
 8003e28:	fb01 f303 	mul.w	r3, r1, r3
 8003e2c:	4413      	add	r3, r2
 8003e2e:	335c      	adds	r3, #92	; 0x5c
 8003e30:	2200      	movs	r2, #0
 8003e32:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	212c      	movs	r1, #44	; 0x2c
 8003e3a:	fb01 f303 	mul.w	r3, r1, r3
 8003e3e:	4413      	add	r3, r2
 8003e40:	3361      	adds	r3, #97	; 0x61
 8003e42:	2203      	movs	r2, #3
 8003e44:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	212c      	movs	r1, #44	; 0x2c
 8003e4c:	fb01 f303 	mul.w	r3, r1, r3
 8003e50:	4413      	add	r3, r2
 8003e52:	333d      	adds	r3, #61	; 0x3d
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d112      	bne.n	8003e80 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	212c      	movs	r1, #44	; 0x2c
 8003e60:	fb01 f303 	mul.w	r3, r1, r3
 8003e64:	4413      	add	r3, r2
 8003e66:	333c      	adds	r3, #60	; 0x3c
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d108      	bne.n	8003e80 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	212c      	movs	r1, #44	; 0x2c
 8003e74:	fb01 f303 	mul.w	r3, r1, r3
 8003e78:	4413      	add	r3, r2
 8003e7a:	333d      	adds	r3, #61	; 0x3d
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	697a      	ldr	r2, [r7, #20]
 8003e86:	b2d2      	uxtb	r2, r2
 8003e88:	4611      	mov	r1, r2
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f004 f9d7 	bl	800823e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	015a      	lsls	r2, r3, #5
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	4413      	add	r3, r2
 8003e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	2310      	movs	r3, #16
 8003ea0:	6093      	str	r3, [r2, #8]
}
 8003ea2:	e1e2      	b.n	800426a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	015a      	lsls	r2, r3, #5
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	4413      	add	r3, r2
 8003eac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eb6:	2b80      	cmp	r3, #128	; 0x80
 8003eb8:	d164      	bne.n	8003f84 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d111      	bne.n	8003ee6 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	212c      	movs	r1, #44	; 0x2c
 8003ec8:	fb01 f303 	mul.w	r3, r1, r3
 8003ecc:	4413      	add	r3, r2
 8003ece:	3361      	adds	r3, #97	; 0x61
 8003ed0:	2206      	movs	r2, #6
 8003ed2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	697a      	ldr	r2, [r7, #20]
 8003eda:	b2d2      	uxtb	r2, r2
 8003edc:	4611      	mov	r1, r2
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f004 f9ad 	bl	800823e <USB_HC_Halt>
 8003ee4:	e044      	b.n	8003f70 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	212c      	movs	r1, #44	; 0x2c
 8003eec:	fb01 f303 	mul.w	r3, r1, r3
 8003ef0:	4413      	add	r3, r2
 8003ef2:	335c      	adds	r3, #92	; 0x5c
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	1c5a      	adds	r2, r3, #1
 8003ef8:	6879      	ldr	r1, [r7, #4]
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	202c      	movs	r0, #44	; 0x2c
 8003efe:	fb00 f303 	mul.w	r3, r0, r3
 8003f02:	440b      	add	r3, r1
 8003f04:	335c      	adds	r3, #92	; 0x5c
 8003f06:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	212c      	movs	r1, #44	; 0x2c
 8003f0e:	fb01 f303 	mul.w	r3, r1, r3
 8003f12:	4413      	add	r3, r2
 8003f14:	335c      	adds	r3, #92	; 0x5c
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d920      	bls.n	8003f5e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	212c      	movs	r1, #44	; 0x2c
 8003f22:	fb01 f303 	mul.w	r3, r1, r3
 8003f26:	4413      	add	r3, r2
 8003f28:	335c      	adds	r3, #92	; 0x5c
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	212c      	movs	r1, #44	; 0x2c
 8003f34:	fb01 f303 	mul.w	r3, r1, r3
 8003f38:	4413      	add	r3, r2
 8003f3a:	3360      	adds	r3, #96	; 0x60
 8003f3c:	2204      	movs	r2, #4
 8003f3e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	b2d9      	uxtb	r1, r3
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	202c      	movs	r0, #44	; 0x2c
 8003f4a:	fb00 f303 	mul.w	r3, r0, r3
 8003f4e:	4413      	add	r3, r2
 8003f50:	3360      	adds	r3, #96	; 0x60
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	461a      	mov	r2, r3
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f00c fc24 	bl	80107a4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003f5c:	e008      	b.n	8003f70 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	212c      	movs	r1, #44	; 0x2c
 8003f64:	fb01 f303 	mul.w	r3, r1, r3
 8003f68:	4413      	add	r3, r2
 8003f6a:	3360      	adds	r3, #96	; 0x60
 8003f6c:	2202      	movs	r2, #2
 8003f6e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	015a      	lsls	r2, r3, #5
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	4413      	add	r3, r2
 8003f78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	2380      	movs	r3, #128	; 0x80
 8003f80:	6093      	str	r3, [r2, #8]
}
 8003f82:	e172      	b.n	800426a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	015a      	lsls	r2, r3, #5
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f9a:	d11b      	bne.n	8003fd4 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	212c      	movs	r1, #44	; 0x2c
 8003fa2:	fb01 f303 	mul.w	r3, r1, r3
 8003fa6:	4413      	add	r3, r2
 8003fa8:	3361      	adds	r3, #97	; 0x61
 8003faa:	2208      	movs	r2, #8
 8003fac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	b2d2      	uxtb	r2, r2
 8003fb6:	4611      	mov	r1, r2
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f004 f940 	bl	800823e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	015a      	lsls	r2, r3, #5
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	4413      	add	r3, r2
 8003fc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fca:	461a      	mov	r2, r3
 8003fcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fd0:	6093      	str	r3, [r2, #8]
}
 8003fd2:	e14a      	b.n	800426a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	015a      	lsls	r2, r3, #5
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	4413      	add	r3, r2
 8003fdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	f040 813f 	bne.w	800426a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	212c      	movs	r1, #44	; 0x2c
 8003ff2:	fb01 f303 	mul.w	r3, r1, r3
 8003ff6:	4413      	add	r3, r2
 8003ff8:	3361      	adds	r3, #97	; 0x61
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d17d      	bne.n	80040fc <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	212c      	movs	r1, #44	; 0x2c
 8004006:	fb01 f303 	mul.w	r3, r1, r3
 800400a:	4413      	add	r3, r2
 800400c:	3360      	adds	r3, #96	; 0x60
 800400e:	2201      	movs	r2, #1
 8004010:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	212c      	movs	r1, #44	; 0x2c
 8004018:	fb01 f303 	mul.w	r3, r1, r3
 800401c:	4413      	add	r3, r2
 800401e:	333f      	adds	r3, #63	; 0x3f
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	2b02      	cmp	r3, #2
 8004024:	d00a      	beq.n	800403c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	212c      	movs	r1, #44	; 0x2c
 800402c:	fb01 f303 	mul.w	r3, r1, r3
 8004030:	4413      	add	r3, r2
 8004032:	333f      	adds	r3, #63	; 0x3f
 8004034:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004036:	2b03      	cmp	r3, #3
 8004038:	f040 8100 	bne.w	800423c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d113      	bne.n	800406c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	212c      	movs	r1, #44	; 0x2c
 800404a:	fb01 f303 	mul.w	r3, r1, r3
 800404e:	4413      	add	r3, r2
 8004050:	3355      	adds	r3, #85	; 0x55
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	f083 0301 	eor.w	r3, r3, #1
 8004058:	b2d8      	uxtb	r0, r3
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	212c      	movs	r1, #44	; 0x2c
 8004060:	fb01 f303 	mul.w	r3, r1, r3
 8004064:	4413      	add	r3, r2
 8004066:	3355      	adds	r3, #85	; 0x55
 8004068:	4602      	mov	r2, r0
 800406a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	2b01      	cmp	r3, #1
 8004072:	f040 80e3 	bne.w	800423c <HCD_HC_OUT_IRQHandler+0x69c>
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	212c      	movs	r1, #44	; 0x2c
 800407c:	fb01 f303 	mul.w	r3, r1, r3
 8004080:	4413      	add	r3, r2
 8004082:	334c      	adds	r3, #76	; 0x4c
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2b00      	cmp	r3, #0
 8004088:	f000 80d8 	beq.w	800423c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	212c      	movs	r1, #44	; 0x2c
 8004092:	fb01 f303 	mul.w	r3, r1, r3
 8004096:	4413      	add	r3, r2
 8004098:	334c      	adds	r3, #76	; 0x4c
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	6879      	ldr	r1, [r7, #4]
 800409e:	697a      	ldr	r2, [r7, #20]
 80040a0:	202c      	movs	r0, #44	; 0x2c
 80040a2:	fb00 f202 	mul.w	r2, r0, r2
 80040a6:	440a      	add	r2, r1
 80040a8:	3240      	adds	r2, #64	; 0x40
 80040aa:	8812      	ldrh	r2, [r2, #0]
 80040ac:	4413      	add	r3, r2
 80040ae:	3b01      	subs	r3, #1
 80040b0:	6879      	ldr	r1, [r7, #4]
 80040b2:	697a      	ldr	r2, [r7, #20]
 80040b4:	202c      	movs	r0, #44	; 0x2c
 80040b6:	fb00 f202 	mul.w	r2, r0, r2
 80040ba:	440a      	add	r2, r1
 80040bc:	3240      	adds	r2, #64	; 0x40
 80040be:	8812      	ldrh	r2, [r2, #0]
 80040c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80040c4:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	f003 0301 	and.w	r3, r3, #1
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	f000 80b5 	beq.w	800423c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	212c      	movs	r1, #44	; 0x2c
 80040d8:	fb01 f303 	mul.w	r3, r1, r3
 80040dc:	4413      	add	r3, r2
 80040de:	3355      	adds	r3, #85	; 0x55
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	f083 0301 	eor.w	r3, r3, #1
 80040e6:	b2d8      	uxtb	r0, r3
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	212c      	movs	r1, #44	; 0x2c
 80040ee:	fb01 f303 	mul.w	r3, r1, r3
 80040f2:	4413      	add	r3, r2
 80040f4:	3355      	adds	r3, #85	; 0x55
 80040f6:	4602      	mov	r2, r0
 80040f8:	701a      	strb	r2, [r3, #0]
 80040fa:	e09f      	b.n	800423c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	212c      	movs	r1, #44	; 0x2c
 8004102:	fb01 f303 	mul.w	r3, r1, r3
 8004106:	4413      	add	r3, r2
 8004108:	3361      	adds	r3, #97	; 0x61
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	2b03      	cmp	r3, #3
 800410e:	d109      	bne.n	8004124 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	212c      	movs	r1, #44	; 0x2c
 8004116:	fb01 f303 	mul.w	r3, r1, r3
 800411a:	4413      	add	r3, r2
 800411c:	3360      	adds	r3, #96	; 0x60
 800411e:	2202      	movs	r2, #2
 8004120:	701a      	strb	r2, [r3, #0]
 8004122:	e08b      	b.n	800423c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	212c      	movs	r1, #44	; 0x2c
 800412a:	fb01 f303 	mul.w	r3, r1, r3
 800412e:	4413      	add	r3, r2
 8004130:	3361      	adds	r3, #97	; 0x61
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	2b04      	cmp	r3, #4
 8004136:	d109      	bne.n	800414c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	212c      	movs	r1, #44	; 0x2c
 800413e:	fb01 f303 	mul.w	r3, r1, r3
 8004142:	4413      	add	r3, r2
 8004144:	3360      	adds	r3, #96	; 0x60
 8004146:	2202      	movs	r2, #2
 8004148:	701a      	strb	r2, [r3, #0]
 800414a:	e077      	b.n	800423c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	212c      	movs	r1, #44	; 0x2c
 8004152:	fb01 f303 	mul.w	r3, r1, r3
 8004156:	4413      	add	r3, r2
 8004158:	3361      	adds	r3, #97	; 0x61
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	2b05      	cmp	r3, #5
 800415e:	d109      	bne.n	8004174 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	212c      	movs	r1, #44	; 0x2c
 8004166:	fb01 f303 	mul.w	r3, r1, r3
 800416a:	4413      	add	r3, r2
 800416c:	3360      	adds	r3, #96	; 0x60
 800416e:	2205      	movs	r2, #5
 8004170:	701a      	strb	r2, [r3, #0]
 8004172:	e063      	b.n	800423c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	212c      	movs	r1, #44	; 0x2c
 800417a:	fb01 f303 	mul.w	r3, r1, r3
 800417e:	4413      	add	r3, r2
 8004180:	3361      	adds	r3, #97	; 0x61
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	2b06      	cmp	r3, #6
 8004186:	d009      	beq.n	800419c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	212c      	movs	r1, #44	; 0x2c
 800418e:	fb01 f303 	mul.w	r3, r1, r3
 8004192:	4413      	add	r3, r2
 8004194:	3361      	adds	r3, #97	; 0x61
 8004196:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004198:	2b08      	cmp	r3, #8
 800419a:	d14f      	bne.n	800423c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	212c      	movs	r1, #44	; 0x2c
 80041a2:	fb01 f303 	mul.w	r3, r1, r3
 80041a6:	4413      	add	r3, r2
 80041a8:	335c      	adds	r3, #92	; 0x5c
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	1c5a      	adds	r2, r3, #1
 80041ae:	6879      	ldr	r1, [r7, #4]
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	202c      	movs	r0, #44	; 0x2c
 80041b4:	fb00 f303 	mul.w	r3, r0, r3
 80041b8:	440b      	add	r3, r1
 80041ba:	335c      	adds	r3, #92	; 0x5c
 80041bc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	212c      	movs	r1, #44	; 0x2c
 80041c4:	fb01 f303 	mul.w	r3, r1, r3
 80041c8:	4413      	add	r3, r2
 80041ca:	335c      	adds	r3, #92	; 0x5c
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d912      	bls.n	80041f8 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	212c      	movs	r1, #44	; 0x2c
 80041d8:	fb01 f303 	mul.w	r3, r1, r3
 80041dc:	4413      	add	r3, r2
 80041de:	335c      	adds	r3, #92	; 0x5c
 80041e0:	2200      	movs	r2, #0
 80041e2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	212c      	movs	r1, #44	; 0x2c
 80041ea:	fb01 f303 	mul.w	r3, r1, r3
 80041ee:	4413      	add	r3, r2
 80041f0:	3360      	adds	r3, #96	; 0x60
 80041f2:	2204      	movs	r2, #4
 80041f4:	701a      	strb	r2, [r3, #0]
 80041f6:	e021      	b.n	800423c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	212c      	movs	r1, #44	; 0x2c
 80041fe:	fb01 f303 	mul.w	r3, r1, r3
 8004202:	4413      	add	r3, r2
 8004204:	3360      	adds	r3, #96	; 0x60
 8004206:	2202      	movs	r2, #2
 8004208:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	015a      	lsls	r2, r3, #5
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	4413      	add	r3, r2
 8004212:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004220:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004228:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	015a      	lsls	r2, r3, #5
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	4413      	add	r3, r2
 8004232:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004236:	461a      	mov	r2, r3
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	015a      	lsls	r2, r3, #5
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	4413      	add	r3, r2
 8004244:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004248:	461a      	mov	r2, r3
 800424a:	2302      	movs	r3, #2
 800424c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	b2d9      	uxtb	r1, r3
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	202c      	movs	r0, #44	; 0x2c
 8004258:	fb00 f303 	mul.w	r3, r0, r3
 800425c:	4413      	add	r3, r2
 800425e:	3360      	adds	r3, #96	; 0x60
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	461a      	mov	r2, r3
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f00c fa9d 	bl	80107a4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800426a:	bf00      	nop
 800426c:	3720      	adds	r7, #32
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}

08004272 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004272:	b580      	push	{r7, lr}
 8004274:	b08a      	sub	sp, #40	; 0x28
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004282:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	f003 030f 	and.w	r3, r3, #15
 8004292:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	0c5b      	lsrs	r3, r3, #17
 8004298:	f003 030f 	and.w	r3, r3, #15
 800429c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	091b      	lsrs	r3, r3, #4
 80042a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042a6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d004      	beq.n	80042b8 <HCD_RXQLVL_IRQHandler+0x46>
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	2b05      	cmp	r3, #5
 80042b2:	f000 80a9 	beq.w	8004408 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80042b6:	e0aa      	b.n	800440e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	f000 80a6 	beq.w	800440c <HCD_RXQLVL_IRQHandler+0x19a>
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	212c      	movs	r1, #44	; 0x2c
 80042c6:	fb01 f303 	mul.w	r3, r1, r3
 80042ca:	4413      	add	r3, r2
 80042cc:	3344      	adds	r3, #68	; 0x44
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	f000 809b 	beq.w	800440c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	212c      	movs	r1, #44	; 0x2c
 80042dc:	fb01 f303 	mul.w	r3, r1, r3
 80042e0:	4413      	add	r3, r2
 80042e2:	3350      	adds	r3, #80	; 0x50
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	441a      	add	r2, r3
 80042ea:	6879      	ldr	r1, [r7, #4]
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	202c      	movs	r0, #44	; 0x2c
 80042f0:	fb00 f303 	mul.w	r3, r0, r3
 80042f4:	440b      	add	r3, r1
 80042f6:	334c      	adds	r3, #76	; 0x4c
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d87a      	bhi.n	80043f4 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6818      	ldr	r0, [r3, #0]
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	69bb      	ldr	r3, [r7, #24]
 8004306:	212c      	movs	r1, #44	; 0x2c
 8004308:	fb01 f303 	mul.w	r3, r1, r3
 800430c:	4413      	add	r3, r2
 800430e:	3344      	adds	r3, #68	; 0x44
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	693a      	ldr	r2, [r7, #16]
 8004314:	b292      	uxth	r2, r2
 8004316:	4619      	mov	r1, r3
 8004318:	f003 fae8 	bl	80078ec <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	212c      	movs	r1, #44	; 0x2c
 8004322:	fb01 f303 	mul.w	r3, r1, r3
 8004326:	4413      	add	r3, r2
 8004328:	3344      	adds	r3, #68	; 0x44
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	441a      	add	r2, r3
 8004330:	6879      	ldr	r1, [r7, #4]
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	202c      	movs	r0, #44	; 0x2c
 8004336:	fb00 f303 	mul.w	r3, r0, r3
 800433a:	440b      	add	r3, r1
 800433c:	3344      	adds	r3, #68	; 0x44
 800433e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	212c      	movs	r1, #44	; 0x2c
 8004346:	fb01 f303 	mul.w	r3, r1, r3
 800434a:	4413      	add	r3, r2
 800434c:	3350      	adds	r3, #80	; 0x50
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	441a      	add	r2, r3
 8004354:	6879      	ldr	r1, [r7, #4]
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	202c      	movs	r0, #44	; 0x2c
 800435a:	fb00 f303 	mul.w	r3, r0, r3
 800435e:	440b      	add	r3, r1
 8004360:	3350      	adds	r3, #80	; 0x50
 8004362:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	015a      	lsls	r2, r3, #5
 8004368:	6a3b      	ldr	r3, [r7, #32]
 800436a:	4413      	add	r3, r2
 800436c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	0cdb      	lsrs	r3, r3, #19
 8004374:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004378:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	212c      	movs	r1, #44	; 0x2c
 8004380:	fb01 f303 	mul.w	r3, r1, r3
 8004384:	4413      	add	r3, r2
 8004386:	3340      	adds	r3, #64	; 0x40
 8004388:	881b      	ldrh	r3, [r3, #0]
 800438a:	461a      	mov	r2, r3
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	4293      	cmp	r3, r2
 8004390:	d13c      	bne.n	800440c <HCD_RXQLVL_IRQHandler+0x19a>
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d039      	beq.n	800440c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	015a      	lsls	r2, r3, #5
 800439c:	6a3b      	ldr	r3, [r7, #32]
 800439e:	4413      	add	r3, r2
 80043a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80043ae:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80043b6:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	015a      	lsls	r2, r3, #5
 80043bc:	6a3b      	ldr	r3, [r7, #32]
 80043be:	4413      	add	r3, r2
 80043c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043c4:	461a      	mov	r2, r3
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	212c      	movs	r1, #44	; 0x2c
 80043d0:	fb01 f303 	mul.w	r3, r1, r3
 80043d4:	4413      	add	r3, r2
 80043d6:	3354      	adds	r3, #84	; 0x54
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	f083 0301 	eor.w	r3, r3, #1
 80043de:	b2d8      	uxtb	r0, r3
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	212c      	movs	r1, #44	; 0x2c
 80043e6:	fb01 f303 	mul.w	r3, r1, r3
 80043ea:	4413      	add	r3, r2
 80043ec:	3354      	adds	r3, #84	; 0x54
 80043ee:	4602      	mov	r2, r0
 80043f0:	701a      	strb	r2, [r3, #0]
      break;
 80043f2:	e00b      	b.n	800440c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	212c      	movs	r1, #44	; 0x2c
 80043fa:	fb01 f303 	mul.w	r3, r1, r3
 80043fe:	4413      	add	r3, r2
 8004400:	3360      	adds	r3, #96	; 0x60
 8004402:	2204      	movs	r2, #4
 8004404:	701a      	strb	r2, [r3, #0]
      break;
 8004406:	e001      	b.n	800440c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004408:	bf00      	nop
 800440a:	e000      	b.n	800440e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800440c:	bf00      	nop
  }
}
 800440e:	bf00      	nop
 8004410:	3728      	adds	r7, #40	; 0x28
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}

08004416 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004416:	b580      	push	{r7, lr}
 8004418:	b086      	sub	sp, #24
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004442:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f003 0302 	and.w	r3, r3, #2
 800444a:	2b02      	cmp	r3, #2
 800444c:	d10b      	bne.n	8004466 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f003 0301 	and.w	r3, r3, #1
 8004454:	2b01      	cmp	r3, #1
 8004456:	d102      	bne.n	800445e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f00c f987 	bl	801076c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	f043 0302 	orr.w	r3, r3, #2
 8004464:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f003 0308 	and.w	r3, r3, #8
 800446c:	2b08      	cmp	r3, #8
 800446e:	d132      	bne.n	80044d6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	f043 0308 	orr.w	r3, r3, #8
 8004476:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f003 0304 	and.w	r3, r3, #4
 800447e:	2b04      	cmp	r3, #4
 8004480:	d126      	bne.n	80044d0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	699b      	ldr	r3, [r3, #24]
 8004486:	2b02      	cmp	r3, #2
 8004488:	d113      	bne.n	80044b2 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004490:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004494:	d106      	bne.n	80044a4 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2102      	movs	r1, #2
 800449c:	4618      	mov	r0, r3
 800449e:	f003 fb93 	bl	8007bc8 <USB_InitFSLSPClkSel>
 80044a2:	e011      	b.n	80044c8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2101      	movs	r1, #1
 80044aa:	4618      	mov	r0, r3
 80044ac:	f003 fb8c 	bl	8007bc8 <USB_InitFSLSPClkSel>
 80044b0:	e00a      	b.n	80044c8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d106      	bne.n	80044c8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044c0:	461a      	mov	r2, r3
 80044c2:	f64e 2360 	movw	r3, #60000	; 0xea60
 80044c6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f00c f979 	bl	80107c0 <HAL_HCD_PortEnabled_Callback>
 80044ce:	e002      	b.n	80044d6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f00c f983 	bl	80107dc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f003 0320 	and.w	r3, r3, #32
 80044dc:	2b20      	cmp	r3, #32
 80044de:	d103      	bne.n	80044e8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	f043 0320 	orr.w	r3, r3, #32
 80044e6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80044ee:	461a      	mov	r2, r3
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	6013      	str	r3, [r2, #0]
}
 80044f4:	bf00      	nop
 80044f6:	3718      	adds	r7, #24
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}

080044fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d101      	bne.n	800450e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e12b      	b.n	8004766 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004514:	b2db      	uxtb	r3, r3
 8004516:	2b00      	cmp	r3, #0
 8004518:	d106      	bne.n	8004528 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f7fd f98c 	bl	8001840 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2224      	movs	r2, #36	; 0x24
 800452c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f022 0201 	bic.w	r2, r2, #1
 800453e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800454e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800455e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004560:	f002 fb78 	bl	8006c54 <HAL_RCC_GetPCLK1Freq>
 8004564:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	4a81      	ldr	r2, [pc, #516]	; (8004770 <HAL_I2C_Init+0x274>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d807      	bhi.n	8004580 <HAL_I2C_Init+0x84>
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	4a80      	ldr	r2, [pc, #512]	; (8004774 <HAL_I2C_Init+0x278>)
 8004574:	4293      	cmp	r3, r2
 8004576:	bf94      	ite	ls
 8004578:	2301      	movls	r3, #1
 800457a:	2300      	movhi	r3, #0
 800457c:	b2db      	uxtb	r3, r3
 800457e:	e006      	b.n	800458e <HAL_I2C_Init+0x92>
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	4a7d      	ldr	r2, [pc, #500]	; (8004778 <HAL_I2C_Init+0x27c>)
 8004584:	4293      	cmp	r3, r2
 8004586:	bf94      	ite	ls
 8004588:	2301      	movls	r3, #1
 800458a:	2300      	movhi	r3, #0
 800458c:	b2db      	uxtb	r3, r3
 800458e:	2b00      	cmp	r3, #0
 8004590:	d001      	beq.n	8004596 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e0e7      	b.n	8004766 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	4a78      	ldr	r2, [pc, #480]	; (800477c <HAL_I2C_Init+0x280>)
 800459a:	fba2 2303 	umull	r2, r3, r2, r3
 800459e:	0c9b      	lsrs	r3, r3, #18
 80045a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68ba      	ldr	r2, [r7, #8]
 80045b2:	430a      	orrs	r2, r1
 80045b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	6a1b      	ldr	r3, [r3, #32]
 80045bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	4a6a      	ldr	r2, [pc, #424]	; (8004770 <HAL_I2C_Init+0x274>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d802      	bhi.n	80045d0 <HAL_I2C_Init+0xd4>
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	3301      	adds	r3, #1
 80045ce:	e009      	b.n	80045e4 <HAL_I2C_Init+0xe8>
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80045d6:	fb02 f303 	mul.w	r3, r2, r3
 80045da:	4a69      	ldr	r2, [pc, #420]	; (8004780 <HAL_I2C_Init+0x284>)
 80045dc:	fba2 2303 	umull	r2, r3, r2, r3
 80045e0:	099b      	lsrs	r3, r3, #6
 80045e2:	3301      	adds	r3, #1
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	6812      	ldr	r2, [r2, #0]
 80045e8:	430b      	orrs	r3, r1
 80045ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	69db      	ldr	r3, [r3, #28]
 80045f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80045f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	495c      	ldr	r1, [pc, #368]	; (8004770 <HAL_I2C_Init+0x274>)
 8004600:	428b      	cmp	r3, r1
 8004602:	d819      	bhi.n	8004638 <HAL_I2C_Init+0x13c>
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	1e59      	subs	r1, r3, #1
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	005b      	lsls	r3, r3, #1
 800460e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004612:	1c59      	adds	r1, r3, #1
 8004614:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004618:	400b      	ands	r3, r1
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00a      	beq.n	8004634 <HAL_I2C_Init+0x138>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	1e59      	subs	r1, r3, #1
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	005b      	lsls	r3, r3, #1
 8004628:	fbb1 f3f3 	udiv	r3, r1, r3
 800462c:	3301      	adds	r3, #1
 800462e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004632:	e051      	b.n	80046d8 <HAL_I2C_Init+0x1dc>
 8004634:	2304      	movs	r3, #4
 8004636:	e04f      	b.n	80046d8 <HAL_I2C_Init+0x1dc>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d111      	bne.n	8004664 <HAL_I2C_Init+0x168>
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	1e58      	subs	r0, r3, #1
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6859      	ldr	r1, [r3, #4]
 8004648:	460b      	mov	r3, r1
 800464a:	005b      	lsls	r3, r3, #1
 800464c:	440b      	add	r3, r1
 800464e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004652:	3301      	adds	r3, #1
 8004654:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004658:	2b00      	cmp	r3, #0
 800465a:	bf0c      	ite	eq
 800465c:	2301      	moveq	r3, #1
 800465e:	2300      	movne	r3, #0
 8004660:	b2db      	uxtb	r3, r3
 8004662:	e012      	b.n	800468a <HAL_I2C_Init+0x18e>
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	1e58      	subs	r0, r3, #1
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6859      	ldr	r1, [r3, #4]
 800466c:	460b      	mov	r3, r1
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	440b      	add	r3, r1
 8004672:	0099      	lsls	r1, r3, #2
 8004674:	440b      	add	r3, r1
 8004676:	fbb0 f3f3 	udiv	r3, r0, r3
 800467a:	3301      	adds	r3, #1
 800467c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004680:	2b00      	cmp	r3, #0
 8004682:	bf0c      	ite	eq
 8004684:	2301      	moveq	r3, #1
 8004686:	2300      	movne	r3, #0
 8004688:	b2db      	uxtb	r3, r3
 800468a:	2b00      	cmp	r3, #0
 800468c:	d001      	beq.n	8004692 <HAL_I2C_Init+0x196>
 800468e:	2301      	movs	r3, #1
 8004690:	e022      	b.n	80046d8 <HAL_I2C_Init+0x1dc>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d10e      	bne.n	80046b8 <HAL_I2C_Init+0x1bc>
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	1e58      	subs	r0, r3, #1
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6859      	ldr	r1, [r3, #4]
 80046a2:	460b      	mov	r3, r1
 80046a4:	005b      	lsls	r3, r3, #1
 80046a6:	440b      	add	r3, r1
 80046a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80046ac:	3301      	adds	r3, #1
 80046ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046b6:	e00f      	b.n	80046d8 <HAL_I2C_Init+0x1dc>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	1e58      	subs	r0, r3, #1
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6859      	ldr	r1, [r3, #4]
 80046c0:	460b      	mov	r3, r1
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	440b      	add	r3, r1
 80046c6:	0099      	lsls	r1, r3, #2
 80046c8:	440b      	add	r3, r1
 80046ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80046ce:	3301      	adds	r3, #1
 80046d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046d8:	6879      	ldr	r1, [r7, #4]
 80046da:	6809      	ldr	r1, [r1, #0]
 80046dc:	4313      	orrs	r3, r2
 80046de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	69da      	ldr	r2, [r3, #28]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a1b      	ldr	r3, [r3, #32]
 80046f2:	431a      	orrs	r2, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	430a      	orrs	r2, r1
 80046fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004706:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	6911      	ldr	r1, [r2, #16]
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	68d2      	ldr	r2, [r2, #12]
 8004712:	4311      	orrs	r1, r2
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	6812      	ldr	r2, [r2, #0]
 8004718:	430b      	orrs	r3, r1
 800471a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	695a      	ldr	r2, [r3, #20]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	699b      	ldr	r3, [r3, #24]
 800472e:	431a      	orrs	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	430a      	orrs	r2, r1
 8004736:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f042 0201 	orr.w	r2, r2, #1
 8004746:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2220      	movs	r2, #32
 8004752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3710      	adds	r7, #16
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	000186a0 	.word	0x000186a0
 8004774:	001e847f 	.word	0x001e847f
 8004778:	003d08ff 	.word	0x003d08ff
 800477c:	431bde83 	.word	0x431bde83
 8004780:	10624dd3 	.word	0x10624dd3

08004784 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b088      	sub	sp, #32
 8004788:	af02      	add	r7, sp, #8
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	607a      	str	r2, [r7, #4]
 800478e:	461a      	mov	r2, r3
 8004790:	460b      	mov	r3, r1
 8004792:	817b      	strh	r3, [r7, #10]
 8004794:	4613      	mov	r3, r2
 8004796:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004798:	f7fd fb78 	bl	8001e8c <HAL_GetTick>
 800479c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	2b20      	cmp	r3, #32
 80047a8:	f040 80e0 	bne.w	800496c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	9300      	str	r3, [sp, #0]
 80047b0:	2319      	movs	r3, #25
 80047b2:	2201      	movs	r2, #1
 80047b4:	4970      	ldr	r1, [pc, #448]	; (8004978 <HAL_I2C_Master_Transmit+0x1f4>)
 80047b6:	68f8      	ldr	r0, [r7, #12]
 80047b8:	f000 fc58 	bl	800506c <I2C_WaitOnFlagUntilTimeout>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d001      	beq.n	80047c6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80047c2:	2302      	movs	r3, #2
 80047c4:	e0d3      	b.n	800496e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d101      	bne.n	80047d4 <HAL_I2C_Master_Transmit+0x50>
 80047d0:	2302      	movs	r3, #2
 80047d2:	e0cc      	b.n	800496e <HAL_I2C_Master_Transmit+0x1ea>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0301 	and.w	r3, r3, #1
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d007      	beq.n	80047fa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f042 0201 	orr.w	r2, r2, #1
 80047f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004808:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2221      	movs	r2, #33	; 0x21
 800480e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2210      	movs	r2, #16
 8004816:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2200      	movs	r2, #0
 800481e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	893a      	ldrh	r2, [r7, #8]
 800482a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004830:	b29a      	uxth	r2, r3
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	4a50      	ldr	r2, [pc, #320]	; (800497c <HAL_I2C_Master_Transmit+0x1f8>)
 800483a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800483c:	8979      	ldrh	r1, [r7, #10]
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	6a3a      	ldr	r2, [r7, #32]
 8004842:	68f8      	ldr	r0, [r7, #12]
 8004844:	f000 fac2 	bl	8004dcc <I2C_MasterRequestWrite>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d001      	beq.n	8004852 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e08d      	b.n	800496e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004852:	2300      	movs	r3, #0
 8004854:	613b      	str	r3, [r7, #16]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	695b      	ldr	r3, [r3, #20]
 800485c:	613b      	str	r3, [r7, #16]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	699b      	ldr	r3, [r3, #24]
 8004864:	613b      	str	r3, [r7, #16]
 8004866:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004868:	e066      	b.n	8004938 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800486a:	697a      	ldr	r2, [r7, #20]
 800486c:	6a39      	ldr	r1, [r7, #32]
 800486e:	68f8      	ldr	r0, [r7, #12]
 8004870:	f000 fcd2 	bl	8005218 <I2C_WaitOnTXEFlagUntilTimeout>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00d      	beq.n	8004896 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487e:	2b04      	cmp	r3, #4
 8004880:	d107      	bne.n	8004892 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004890:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e06b      	b.n	800496e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489a:	781a      	ldrb	r2, [r3, #0]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a6:	1c5a      	adds	r2, r3, #1
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	3b01      	subs	r3, #1
 80048b4:	b29a      	uxth	r2, r3
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048be:	3b01      	subs	r3, #1
 80048c0:	b29a      	uxth	r2, r3
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	695b      	ldr	r3, [r3, #20]
 80048cc:	f003 0304 	and.w	r3, r3, #4
 80048d0:	2b04      	cmp	r3, #4
 80048d2:	d11b      	bne.n	800490c <HAL_I2C_Master_Transmit+0x188>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d017      	beq.n	800490c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e0:	781a      	ldrb	r2, [r3, #0]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ec:	1c5a      	adds	r2, r3, #1
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	3b01      	subs	r3, #1
 80048fa:	b29a      	uxth	r2, r3
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004904:	3b01      	subs	r3, #1
 8004906:	b29a      	uxth	r2, r3
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800490c:	697a      	ldr	r2, [r7, #20]
 800490e:	6a39      	ldr	r1, [r7, #32]
 8004910:	68f8      	ldr	r0, [r7, #12]
 8004912:	f000 fcc2 	bl	800529a <I2C_WaitOnBTFFlagUntilTimeout>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d00d      	beq.n	8004938 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004920:	2b04      	cmp	r3, #4
 8004922:	d107      	bne.n	8004934 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004932:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e01a      	b.n	800496e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800493c:	2b00      	cmp	r3, #0
 800493e:	d194      	bne.n	800486a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800494e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2220      	movs	r2, #32
 8004954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2200      	movs	r2, #0
 800495c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2200      	movs	r2, #0
 8004964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004968:	2300      	movs	r3, #0
 800496a:	e000      	b.n	800496e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800496c:	2302      	movs	r3, #2
  }
}
 800496e:	4618      	mov	r0, r3
 8004970:	3718      	adds	r7, #24
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	00100002 	.word	0x00100002
 800497c:	ffff0000 	.word	0xffff0000

08004980 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b08c      	sub	sp, #48	; 0x30
 8004984:	af02      	add	r7, sp, #8
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	607a      	str	r2, [r7, #4]
 800498a:	461a      	mov	r2, r3
 800498c:	460b      	mov	r3, r1
 800498e:	817b      	strh	r3, [r7, #10]
 8004990:	4613      	mov	r3, r2
 8004992:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004994:	f7fd fa7a 	bl	8001e8c <HAL_GetTick>
 8004998:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	2b20      	cmp	r3, #32
 80049a4:	f040 820b 	bne.w	8004dbe <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80049a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049aa:	9300      	str	r3, [sp, #0]
 80049ac:	2319      	movs	r3, #25
 80049ae:	2201      	movs	r2, #1
 80049b0:	497c      	ldr	r1, [pc, #496]	; (8004ba4 <HAL_I2C_Master_Receive+0x224>)
 80049b2:	68f8      	ldr	r0, [r7, #12]
 80049b4:	f000 fb5a 	bl	800506c <I2C_WaitOnFlagUntilTimeout>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d001      	beq.n	80049c2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80049be:	2302      	movs	r3, #2
 80049c0:	e1fe      	b.n	8004dc0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d101      	bne.n	80049d0 <HAL_I2C_Master_Receive+0x50>
 80049cc:	2302      	movs	r3, #2
 80049ce:	e1f7      	b.n	8004dc0 <HAL_I2C_Master_Receive+0x440>
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0301 	and.w	r3, r3, #1
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d007      	beq.n	80049f6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f042 0201 	orr.w	r2, r2, #1
 80049f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a04:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2222      	movs	r2, #34	; 0x22
 8004a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2210      	movs	r2, #16
 8004a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	893a      	ldrh	r2, [r7, #8]
 8004a26:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a2c:	b29a      	uxth	r2, r3
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	4a5c      	ldr	r2, [pc, #368]	; (8004ba8 <HAL_I2C_Master_Receive+0x228>)
 8004a36:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004a38:	8979      	ldrh	r1, [r7, #10]
 8004a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a3e:	68f8      	ldr	r0, [r7, #12]
 8004a40:	f000 fa46 	bl	8004ed0 <I2C_MasterRequestRead>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d001      	beq.n	8004a4e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e1b8      	b.n	8004dc0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d113      	bne.n	8004a7e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a56:	2300      	movs	r3, #0
 8004a58:	623b      	str	r3, [r7, #32]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	695b      	ldr	r3, [r3, #20]
 8004a60:	623b      	str	r3, [r7, #32]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	699b      	ldr	r3, [r3, #24]
 8004a68:	623b      	str	r3, [r7, #32]
 8004a6a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a7a:	601a      	str	r2, [r3, #0]
 8004a7c:	e18c      	b.n	8004d98 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d11b      	bne.n	8004abe <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a96:	2300      	movs	r3, #0
 8004a98:	61fb      	str	r3, [r7, #28]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	695b      	ldr	r3, [r3, #20]
 8004aa0:	61fb      	str	r3, [r7, #28]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	699b      	ldr	r3, [r3, #24]
 8004aa8:	61fb      	str	r3, [r7, #28]
 8004aaa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aba:	601a      	str	r2, [r3, #0]
 8004abc:	e16c      	b.n	8004d98 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ac2:	2b02      	cmp	r3, #2
 8004ac4:	d11b      	bne.n	8004afe <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ad4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ae4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	61bb      	str	r3, [r7, #24]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	695b      	ldr	r3, [r3, #20]
 8004af0:	61bb      	str	r3, [r7, #24]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	699b      	ldr	r3, [r3, #24]
 8004af8:	61bb      	str	r3, [r7, #24]
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	e14c      	b.n	8004d98 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b0c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b0e:	2300      	movs	r3, #0
 8004b10:	617b      	str	r3, [r7, #20]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	695b      	ldr	r3, [r3, #20]
 8004b18:	617b      	str	r3, [r7, #20]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	699b      	ldr	r3, [r3, #24]
 8004b20:	617b      	str	r3, [r7, #20]
 8004b22:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004b24:	e138      	b.n	8004d98 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b2a:	2b03      	cmp	r3, #3
 8004b2c:	f200 80f1 	bhi.w	8004d12 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d123      	bne.n	8004b80 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b3c:	68f8      	ldr	r0, [r7, #12]
 8004b3e:	f000 fbed 	bl	800531c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d001      	beq.n	8004b4c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e139      	b.n	8004dc0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	691a      	ldr	r2, [r3, #16]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b56:	b2d2      	uxtb	r2, r2
 8004b58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5e:	1c5a      	adds	r2, r3, #1
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b68:	3b01      	subs	r3, #1
 8004b6a:	b29a      	uxth	r2, r3
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	3b01      	subs	r3, #1
 8004b78:	b29a      	uxth	r2, r3
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b7e:	e10b      	b.n	8004d98 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b84:	2b02      	cmp	r3, #2
 8004b86:	d14e      	bne.n	8004c26 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8a:	9300      	str	r3, [sp, #0]
 8004b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b8e:	2200      	movs	r2, #0
 8004b90:	4906      	ldr	r1, [pc, #24]	; (8004bac <HAL_I2C_Master_Receive+0x22c>)
 8004b92:	68f8      	ldr	r0, [r7, #12]
 8004b94:	f000 fa6a 	bl	800506c <I2C_WaitOnFlagUntilTimeout>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d008      	beq.n	8004bb0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e10e      	b.n	8004dc0 <HAL_I2C_Master_Receive+0x440>
 8004ba2:	bf00      	nop
 8004ba4:	00100002 	.word	0x00100002
 8004ba8:	ffff0000 	.word	0xffff0000
 8004bac:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bbe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	691a      	ldr	r2, [r3, #16]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bca:	b2d2      	uxtb	r2, r2
 8004bcc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd2:	1c5a      	adds	r2, r3, #1
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bdc:	3b01      	subs	r3, #1
 8004bde:	b29a      	uxth	r2, r3
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	3b01      	subs	r3, #1
 8004bec:	b29a      	uxth	r2, r3
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	691a      	ldr	r2, [r3, #16]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfc:	b2d2      	uxtb	r2, r2
 8004bfe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c04:	1c5a      	adds	r2, r3, #1
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	b29a      	uxth	r2, r3
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	3b01      	subs	r3, #1
 8004c1e:	b29a      	uxth	r2, r3
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c24:	e0b8      	b.n	8004d98 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c28:	9300      	str	r3, [sp, #0]
 8004c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	4966      	ldr	r1, [pc, #408]	; (8004dc8 <HAL_I2C_Master_Receive+0x448>)
 8004c30:	68f8      	ldr	r0, [r7, #12]
 8004c32:	f000 fa1b 	bl	800506c <I2C_WaitOnFlagUntilTimeout>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d001      	beq.n	8004c40 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e0bf      	b.n	8004dc0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	691a      	ldr	r2, [r3, #16]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5a:	b2d2      	uxtb	r2, r2
 8004c5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c62:	1c5a      	adds	r2, r3, #1
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	b29a      	uxth	r2, r3
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c84:	9300      	str	r3, [sp, #0]
 8004c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c88:	2200      	movs	r2, #0
 8004c8a:	494f      	ldr	r1, [pc, #316]	; (8004dc8 <HAL_I2C_Master_Receive+0x448>)
 8004c8c:	68f8      	ldr	r0, [r7, #12]
 8004c8e:	f000 f9ed 	bl	800506c <I2C_WaitOnFlagUntilTimeout>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d001      	beq.n	8004c9c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e091      	b.n	8004dc0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004caa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	691a      	ldr	r2, [r3, #16]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb6:	b2d2      	uxtb	r2, r2
 8004cb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbe:	1c5a      	adds	r2, r3, #1
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cc8:	3b01      	subs	r3, #1
 8004cca:	b29a      	uxth	r2, r3
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	3b01      	subs	r3, #1
 8004cd8:	b29a      	uxth	r2, r3
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	691a      	ldr	r2, [r3, #16]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce8:	b2d2      	uxtb	r2, r2
 8004cea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf0:	1c5a      	adds	r2, r3, #1
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	b29a      	uxth	r2, r3
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	3b01      	subs	r3, #1
 8004d0a:	b29a      	uxth	r2, r3
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d10:	e042      	b.n	8004d98 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d16:	68f8      	ldr	r0, [r7, #12]
 8004d18:	f000 fb00 	bl	800531c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d001      	beq.n	8004d26 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e04c      	b.n	8004dc0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	691a      	ldr	r2, [r3, #16]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d30:	b2d2      	uxtb	r2, r2
 8004d32:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d38:	1c5a      	adds	r2, r3, #1
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d42:	3b01      	subs	r3, #1
 8004d44:	b29a      	uxth	r2, r3
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	3b01      	subs	r3, #1
 8004d52:	b29a      	uxth	r2, r3
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	695b      	ldr	r3, [r3, #20]
 8004d5e:	f003 0304 	and.w	r3, r3, #4
 8004d62:	2b04      	cmp	r3, #4
 8004d64:	d118      	bne.n	8004d98 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	691a      	ldr	r2, [r3, #16]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d70:	b2d2      	uxtb	r2, r2
 8004d72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d78:	1c5a      	adds	r2, r3, #1
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d82:	3b01      	subs	r3, #1
 8004d84:	b29a      	uxth	r2, r3
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	3b01      	subs	r3, #1
 8004d92:	b29a      	uxth	r2, r3
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	f47f aec2 	bne.w	8004b26 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2220      	movs	r2, #32
 8004da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	e000      	b.n	8004dc0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004dbe:	2302      	movs	r3, #2
  }
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3728      	adds	r7, #40	; 0x28
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	00010004 	.word	0x00010004

08004dcc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b088      	sub	sp, #32
 8004dd0:	af02      	add	r7, sp, #8
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	607a      	str	r2, [r7, #4]
 8004dd6:	603b      	str	r3, [r7, #0]
 8004dd8:	460b      	mov	r3, r1
 8004dda:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	2b08      	cmp	r3, #8
 8004de6:	d006      	beq.n	8004df6 <I2C_MasterRequestWrite+0x2a>
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d003      	beq.n	8004df6 <I2C_MasterRequestWrite+0x2a>
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004df4:	d108      	bne.n	8004e08 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e04:	601a      	str	r2, [r3, #0]
 8004e06:	e00b      	b.n	8004e20 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e0c:	2b12      	cmp	r3, #18
 8004e0e:	d107      	bne.n	8004e20 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e1e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	9300      	str	r3, [sp, #0]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e2c:	68f8      	ldr	r0, [r7, #12]
 8004e2e:	f000 f91d 	bl	800506c <I2C_WaitOnFlagUntilTimeout>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d00d      	beq.n	8004e54 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e46:	d103      	bne.n	8004e50 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e4e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	e035      	b.n	8004ec0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e5c:	d108      	bne.n	8004e70 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e5e:	897b      	ldrh	r3, [r7, #10]
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	461a      	mov	r2, r3
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004e6c:	611a      	str	r2, [r3, #16]
 8004e6e:	e01b      	b.n	8004ea8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004e70:	897b      	ldrh	r3, [r7, #10]
 8004e72:	11db      	asrs	r3, r3, #7
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	f003 0306 	and.w	r3, r3, #6
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	f063 030f 	orn	r3, r3, #15
 8004e80:	b2da      	uxtb	r2, r3
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	490e      	ldr	r1, [pc, #56]	; (8004ec8 <I2C_MasterRequestWrite+0xfc>)
 8004e8e:	68f8      	ldr	r0, [r7, #12]
 8004e90:	f000 f943 	bl	800511a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d001      	beq.n	8004e9e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e010      	b.n	8004ec0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004e9e:	897b      	ldrh	r3, [r7, #10]
 8004ea0:	b2da      	uxtb	r2, r3
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	4907      	ldr	r1, [pc, #28]	; (8004ecc <I2C_MasterRequestWrite+0x100>)
 8004eae:	68f8      	ldr	r0, [r7, #12]
 8004eb0:	f000 f933 	bl	800511a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d001      	beq.n	8004ebe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e000      	b.n	8004ec0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3718      	adds	r7, #24
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	00010008 	.word	0x00010008
 8004ecc:	00010002 	.word	0x00010002

08004ed0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b088      	sub	sp, #32
 8004ed4:	af02      	add	r7, sp, #8
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	607a      	str	r2, [r7, #4]
 8004eda:	603b      	str	r3, [r7, #0]
 8004edc:	460b      	mov	r3, r1
 8004ede:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ef4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	2b08      	cmp	r3, #8
 8004efa:	d006      	beq.n	8004f0a <I2C_MasterRequestRead+0x3a>
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d003      	beq.n	8004f0a <I2C_MasterRequestRead+0x3a>
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f08:	d108      	bne.n	8004f1c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f18:	601a      	str	r2, [r3, #0]
 8004f1a:	e00b      	b.n	8004f34 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f20:	2b11      	cmp	r3, #17
 8004f22:	d107      	bne.n	8004f34 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f32:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	9300      	str	r3, [sp, #0]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f40:	68f8      	ldr	r0, [r7, #12]
 8004f42:	f000 f893 	bl	800506c <I2C_WaitOnFlagUntilTimeout>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d00d      	beq.n	8004f68 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f5a:	d103      	bne.n	8004f64 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f62:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004f64:	2303      	movs	r3, #3
 8004f66:	e079      	b.n	800505c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	691b      	ldr	r3, [r3, #16]
 8004f6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f70:	d108      	bne.n	8004f84 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004f72:	897b      	ldrh	r3, [r7, #10]
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	f043 0301 	orr.w	r3, r3, #1
 8004f7a:	b2da      	uxtb	r2, r3
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	611a      	str	r2, [r3, #16]
 8004f82:	e05f      	b.n	8005044 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004f84:	897b      	ldrh	r3, [r7, #10]
 8004f86:	11db      	asrs	r3, r3, #7
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	f003 0306 	and.w	r3, r3, #6
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	f063 030f 	orn	r3, r3, #15
 8004f94:	b2da      	uxtb	r2, r3
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	4930      	ldr	r1, [pc, #192]	; (8005064 <I2C_MasterRequestRead+0x194>)
 8004fa2:	68f8      	ldr	r0, [r7, #12]
 8004fa4:	f000 f8b9 	bl	800511a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d001      	beq.n	8004fb2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e054      	b.n	800505c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004fb2:	897b      	ldrh	r3, [r7, #10]
 8004fb4:	b2da      	uxtb	r2, r3
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	4929      	ldr	r1, [pc, #164]	; (8005068 <I2C_MasterRequestRead+0x198>)
 8004fc2:	68f8      	ldr	r0, [r7, #12]
 8004fc4:	f000 f8a9 	bl	800511a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d001      	beq.n	8004fd2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e044      	b.n	800505c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	613b      	str	r3, [r7, #16]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	695b      	ldr	r3, [r3, #20]
 8004fdc:	613b      	str	r3, [r7, #16]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	699b      	ldr	r3, [r3, #24]
 8004fe4:	613b      	str	r3, [r7, #16]
 8004fe6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ff6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	9300      	str	r3, [sp, #0]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005004:	68f8      	ldr	r0, [r7, #12]
 8005006:	f000 f831 	bl	800506c <I2C_WaitOnFlagUntilTimeout>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d00d      	beq.n	800502c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800501a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800501e:	d103      	bne.n	8005028 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005026:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005028:	2303      	movs	r3, #3
 800502a:	e017      	b.n	800505c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800502c:	897b      	ldrh	r3, [r7, #10]
 800502e:	11db      	asrs	r3, r3, #7
 8005030:	b2db      	uxtb	r3, r3
 8005032:	f003 0306 	and.w	r3, r3, #6
 8005036:	b2db      	uxtb	r3, r3
 8005038:	f063 030e 	orn	r3, r3, #14
 800503c:	b2da      	uxtb	r2, r3
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	4907      	ldr	r1, [pc, #28]	; (8005068 <I2C_MasterRequestRead+0x198>)
 800504a:	68f8      	ldr	r0, [r7, #12]
 800504c:	f000 f865 	bl	800511a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005050:	4603      	mov	r3, r0
 8005052:	2b00      	cmp	r3, #0
 8005054:	d001      	beq.n	800505a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e000      	b.n	800505c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800505a:	2300      	movs	r3, #0
}
 800505c:	4618      	mov	r0, r3
 800505e:	3718      	adds	r7, #24
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}
 8005064:	00010008 	.word	0x00010008
 8005068:	00010002 	.word	0x00010002

0800506c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	603b      	str	r3, [r7, #0]
 8005078:	4613      	mov	r3, r2
 800507a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800507c:	e025      	b.n	80050ca <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005084:	d021      	beq.n	80050ca <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005086:	f7fc ff01 	bl	8001e8c <HAL_GetTick>
 800508a:	4602      	mov	r2, r0
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	683a      	ldr	r2, [r7, #0]
 8005092:	429a      	cmp	r2, r3
 8005094:	d302      	bcc.n	800509c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d116      	bne.n	80050ca <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2200      	movs	r2, #0
 80050a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2220      	movs	r2, #32
 80050a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b6:	f043 0220 	orr.w	r2, r3, #32
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e023      	b.n	8005112 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	0c1b      	lsrs	r3, r3, #16
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d10d      	bne.n	80050f0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	695b      	ldr	r3, [r3, #20]
 80050da:	43da      	mvns	r2, r3
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	4013      	ands	r3, r2
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	bf0c      	ite	eq
 80050e6:	2301      	moveq	r3, #1
 80050e8:	2300      	movne	r3, #0
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	461a      	mov	r2, r3
 80050ee:	e00c      	b.n	800510a <I2C_WaitOnFlagUntilTimeout+0x9e>
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	699b      	ldr	r3, [r3, #24]
 80050f6:	43da      	mvns	r2, r3
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	4013      	ands	r3, r2
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	2b00      	cmp	r3, #0
 8005100:	bf0c      	ite	eq
 8005102:	2301      	moveq	r3, #1
 8005104:	2300      	movne	r3, #0
 8005106:	b2db      	uxtb	r3, r3
 8005108:	461a      	mov	r2, r3
 800510a:	79fb      	ldrb	r3, [r7, #7]
 800510c:	429a      	cmp	r2, r3
 800510e:	d0b6      	beq.n	800507e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3710      	adds	r7, #16
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}

0800511a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800511a:	b580      	push	{r7, lr}
 800511c:	b084      	sub	sp, #16
 800511e:	af00      	add	r7, sp, #0
 8005120:	60f8      	str	r0, [r7, #12]
 8005122:	60b9      	str	r1, [r7, #8]
 8005124:	607a      	str	r2, [r7, #4]
 8005126:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005128:	e051      	b.n	80051ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	695b      	ldr	r3, [r3, #20]
 8005130:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005134:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005138:	d123      	bne.n	8005182 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005148:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005152:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2200      	movs	r2, #0
 8005158:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2220      	movs	r2, #32
 800515e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2200      	movs	r2, #0
 8005166:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516e:	f043 0204 	orr.w	r2, r3, #4
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2200      	movs	r2, #0
 800517a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e046      	b.n	8005210 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005188:	d021      	beq.n	80051ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800518a:	f7fc fe7f 	bl	8001e8c <HAL_GetTick>
 800518e:	4602      	mov	r2, r0
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	1ad3      	subs	r3, r2, r3
 8005194:	687a      	ldr	r2, [r7, #4]
 8005196:	429a      	cmp	r2, r3
 8005198:	d302      	bcc.n	80051a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d116      	bne.n	80051ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2200      	movs	r2, #0
 80051a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2220      	movs	r2, #32
 80051aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ba:	f043 0220 	orr.w	r2, r3, #32
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e020      	b.n	8005210 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	0c1b      	lsrs	r3, r3, #16
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d10c      	bne.n	80051f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	695b      	ldr	r3, [r3, #20]
 80051de:	43da      	mvns	r2, r3
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	4013      	ands	r3, r2
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	bf14      	ite	ne
 80051ea:	2301      	movne	r3, #1
 80051ec:	2300      	moveq	r3, #0
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	e00b      	b.n	800520a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	699b      	ldr	r3, [r3, #24]
 80051f8:	43da      	mvns	r2, r3
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	4013      	ands	r3, r2
 80051fe:	b29b      	uxth	r3, r3
 8005200:	2b00      	cmp	r3, #0
 8005202:	bf14      	ite	ne
 8005204:	2301      	movne	r3, #1
 8005206:	2300      	moveq	r3, #0
 8005208:	b2db      	uxtb	r3, r3
 800520a:	2b00      	cmp	r3, #0
 800520c:	d18d      	bne.n	800512a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800520e:	2300      	movs	r3, #0
}
 8005210:	4618      	mov	r0, r3
 8005212:	3710      	adds	r7, #16
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005224:	e02d      	b.n	8005282 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005226:	68f8      	ldr	r0, [r7, #12]
 8005228:	f000 f8ce 	bl	80053c8 <I2C_IsAcknowledgeFailed>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d001      	beq.n	8005236 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e02d      	b.n	8005292 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800523c:	d021      	beq.n	8005282 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800523e:	f7fc fe25 	bl	8001e8c <HAL_GetTick>
 8005242:	4602      	mov	r2, r0
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	68ba      	ldr	r2, [r7, #8]
 800524a:	429a      	cmp	r2, r3
 800524c:	d302      	bcc.n	8005254 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d116      	bne.n	8005282 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2200      	movs	r2, #0
 8005258:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2220      	movs	r2, #32
 800525e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526e:	f043 0220 	orr.w	r2, r3, #32
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e007      	b.n	8005292 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	695b      	ldr	r3, [r3, #20]
 8005288:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800528c:	2b80      	cmp	r3, #128	; 0x80
 800528e:	d1ca      	bne.n	8005226 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005290:	2300      	movs	r3, #0
}
 8005292:	4618      	mov	r0, r3
 8005294:	3710      	adds	r7, #16
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}

0800529a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800529a:	b580      	push	{r7, lr}
 800529c:	b084      	sub	sp, #16
 800529e:	af00      	add	r7, sp, #0
 80052a0:	60f8      	str	r0, [r7, #12]
 80052a2:	60b9      	str	r1, [r7, #8]
 80052a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80052a6:	e02d      	b.n	8005304 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80052a8:	68f8      	ldr	r0, [r7, #12]
 80052aa:	f000 f88d 	bl	80053c8 <I2C_IsAcknowledgeFailed>
 80052ae:	4603      	mov	r3, r0
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d001      	beq.n	80052b8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e02d      	b.n	8005314 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052be:	d021      	beq.n	8005304 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052c0:	f7fc fde4 	bl	8001e8c <HAL_GetTick>
 80052c4:	4602      	mov	r2, r0
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	68ba      	ldr	r2, [r7, #8]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d302      	bcc.n	80052d6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d116      	bne.n	8005304 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2200      	movs	r2, #0
 80052da:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2220      	movs	r2, #32
 80052e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f0:	f043 0220 	orr.w	r2, r3, #32
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2200      	movs	r2, #0
 80052fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	e007      	b.n	8005314 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	695b      	ldr	r3, [r3, #20]
 800530a:	f003 0304 	and.w	r3, r3, #4
 800530e:	2b04      	cmp	r3, #4
 8005310:	d1ca      	bne.n	80052a8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005312:	2300      	movs	r3, #0
}
 8005314:	4618      	mov	r0, r3
 8005316:	3710      	adds	r7, #16
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005328:	e042      	b.n	80053b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	695b      	ldr	r3, [r3, #20]
 8005330:	f003 0310 	and.w	r3, r3, #16
 8005334:	2b10      	cmp	r3, #16
 8005336:	d119      	bne.n	800536c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f06f 0210 	mvn.w	r2, #16
 8005340:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2200      	movs	r2, #0
 8005346:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2220      	movs	r2, #32
 800534c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2200      	movs	r2, #0
 8005354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2200      	movs	r2, #0
 8005364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e029      	b.n	80053c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800536c:	f7fc fd8e 	bl	8001e8c <HAL_GetTick>
 8005370:	4602      	mov	r2, r0
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	68ba      	ldr	r2, [r7, #8]
 8005378:	429a      	cmp	r2, r3
 800537a:	d302      	bcc.n	8005382 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d116      	bne.n	80053b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2200      	movs	r2, #0
 8005386:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2220      	movs	r2, #32
 800538c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2200      	movs	r2, #0
 8005394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539c:	f043 0220 	orr.w	r2, r3, #32
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	e007      	b.n	80053c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	695b      	ldr	r3, [r3, #20]
 80053b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ba:	2b40      	cmp	r3, #64	; 0x40
 80053bc:	d1b5      	bne.n	800532a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80053be:	2300      	movs	r3, #0
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3710      	adds	r7, #16
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	695b      	ldr	r3, [r3, #20]
 80053d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053de:	d11b      	bne.n	8005418 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80053e8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2220      	movs	r2, #32
 80053f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005404:	f043 0204 	orr.w	r2, r3, #4
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e000      	b.n	800541a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005418:	2300      	movs	r3, #0
}
 800541a:	4618      	mov	r0, r3
 800541c:	370c      	adds	r7, #12
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr
	...

08005428 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b088      	sub	sp, #32
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d101      	bne.n	800543a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e128      	b.n	800568c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005440:	b2db      	uxtb	r3, r3
 8005442:	2b00      	cmp	r3, #0
 8005444:	d109      	bne.n	800545a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a90      	ldr	r2, [pc, #576]	; (8005694 <HAL_I2S_Init+0x26c>)
 8005452:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f7fc fa3b 	bl	80018d0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2202      	movs	r2, #2
 800545e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	69db      	ldr	r3, [r3, #28]
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	6812      	ldr	r2, [r2, #0]
 800546c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005470:	f023 030f 	bic.w	r3, r3, #15
 8005474:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2202      	movs	r2, #2
 800547c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	695b      	ldr	r3, [r3, #20]
 8005482:	2b02      	cmp	r3, #2
 8005484:	d060      	beq.n	8005548 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d102      	bne.n	8005494 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800548e:	2310      	movs	r3, #16
 8005490:	617b      	str	r3, [r7, #20]
 8005492:	e001      	b.n	8005498 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005494:	2320      	movs	r3, #32
 8005496:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	2b20      	cmp	r3, #32
 800549e:	d802      	bhi.n	80054a6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	005b      	lsls	r3, r3, #1
 80054a4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80054a6:	2001      	movs	r0, #1
 80054a8:	f001 fcf6 	bl	8006e98 <HAL_RCCEx_GetPeriphCLKFreq>
 80054ac:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054b6:	d125      	bne.n	8005504 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d010      	beq.n	80054e2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	68fa      	ldr	r2, [r7, #12]
 80054c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80054ca:	4613      	mov	r3, r2
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	4413      	add	r3, r2
 80054d0:	005b      	lsls	r3, r3, #1
 80054d2:	461a      	mov	r2, r3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	695b      	ldr	r3, [r3, #20]
 80054d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054dc:	3305      	adds	r3, #5
 80054de:	613b      	str	r3, [r7, #16]
 80054e0:	e01f      	b.n	8005522 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	00db      	lsls	r3, r3, #3
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80054ec:	4613      	mov	r3, r2
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	4413      	add	r3, r2
 80054f2:	005b      	lsls	r3, r3, #1
 80054f4:	461a      	mov	r2, r3
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	695b      	ldr	r3, [r3, #20]
 80054fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80054fe:	3305      	adds	r3, #5
 8005500:	613b      	str	r3, [r7, #16]
 8005502:	e00e      	b.n	8005522 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	fbb2 f2f3 	udiv	r2, r2, r3
 800550c:	4613      	mov	r3, r2
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	4413      	add	r3, r2
 8005512:	005b      	lsls	r3, r3, #1
 8005514:	461a      	mov	r2, r3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	695b      	ldr	r3, [r3, #20]
 800551a:	fbb2 f3f3 	udiv	r3, r2, r3
 800551e:	3305      	adds	r3, #5
 8005520:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	4a5c      	ldr	r2, [pc, #368]	; (8005698 <HAL_I2S_Init+0x270>)
 8005526:	fba2 2303 	umull	r2, r3, r2, r3
 800552a:	08db      	lsrs	r3, r3, #3
 800552c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	f003 0301 	and.w	r3, r3, #1
 8005534:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005536:	693a      	ldr	r2, [r7, #16]
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	1ad3      	subs	r3, r2, r3
 800553c:	085b      	lsrs	r3, r3, #1
 800553e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	021b      	lsls	r3, r3, #8
 8005544:	61bb      	str	r3, [r7, #24]
 8005546:	e003      	b.n	8005550 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005548:	2302      	movs	r3, #2
 800554a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800554c:	2300      	movs	r3, #0
 800554e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	2b01      	cmp	r3, #1
 8005554:	d902      	bls.n	800555c <HAL_I2S_Init+0x134>
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	2bff      	cmp	r3, #255	; 0xff
 800555a:	d907      	bls.n	800556c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005560:	f043 0210 	orr.w	r2, r3, #16
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e08f      	b.n	800568c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	691a      	ldr	r2, [r3, #16]
 8005570:	69bb      	ldr	r3, [r7, #24]
 8005572:	ea42 0103 	orr.w	r1, r2, r3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	69fa      	ldr	r2, [r7, #28]
 800557c:	430a      	orrs	r2, r1
 800557e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	69db      	ldr	r3, [r3, #28]
 8005586:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800558a:	f023 030f 	bic.w	r3, r3, #15
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	6851      	ldr	r1, [r2, #4]
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	6892      	ldr	r2, [r2, #8]
 8005596:	4311      	orrs	r1, r2
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	68d2      	ldr	r2, [r2, #12]
 800559c:	4311      	orrs	r1, r2
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	6992      	ldr	r2, [r2, #24]
 80055a2:	430a      	orrs	r2, r1
 80055a4:	431a      	orrs	r2, r3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055ae:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6a1b      	ldr	r3, [r3, #32]
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d161      	bne.n	800567c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4a38      	ldr	r2, [pc, #224]	; (800569c <HAL_I2S_Init+0x274>)
 80055bc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a37      	ldr	r2, [pc, #220]	; (80056a0 <HAL_I2S_Init+0x278>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d101      	bne.n	80055cc <HAL_I2S_Init+0x1a4>
 80055c8:	4b36      	ldr	r3, [pc, #216]	; (80056a4 <HAL_I2S_Init+0x27c>)
 80055ca:	e001      	b.n	80055d0 <HAL_I2S_Init+0x1a8>
 80055cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80055d0:	69db      	ldr	r3, [r3, #28]
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	6812      	ldr	r2, [r2, #0]
 80055d6:	4932      	ldr	r1, [pc, #200]	; (80056a0 <HAL_I2S_Init+0x278>)
 80055d8:	428a      	cmp	r2, r1
 80055da:	d101      	bne.n	80055e0 <HAL_I2S_Init+0x1b8>
 80055dc:	4a31      	ldr	r2, [pc, #196]	; (80056a4 <HAL_I2S_Init+0x27c>)
 80055de:	e001      	b.n	80055e4 <HAL_I2S_Init+0x1bc>
 80055e0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80055e4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80055e8:	f023 030f 	bic.w	r3, r3, #15
 80055ec:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a2b      	ldr	r2, [pc, #172]	; (80056a0 <HAL_I2S_Init+0x278>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d101      	bne.n	80055fc <HAL_I2S_Init+0x1d4>
 80055f8:	4b2a      	ldr	r3, [pc, #168]	; (80056a4 <HAL_I2S_Init+0x27c>)
 80055fa:	e001      	b.n	8005600 <HAL_I2S_Init+0x1d8>
 80055fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005600:	2202      	movs	r2, #2
 8005602:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a25      	ldr	r2, [pc, #148]	; (80056a0 <HAL_I2S_Init+0x278>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d101      	bne.n	8005612 <HAL_I2S_Init+0x1ea>
 800560e:	4b25      	ldr	r3, [pc, #148]	; (80056a4 <HAL_I2S_Init+0x27c>)
 8005610:	e001      	b.n	8005616 <HAL_I2S_Init+0x1ee>
 8005612:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005616:	69db      	ldr	r3, [r3, #28]
 8005618:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005622:	d003      	beq.n	800562c <HAL_I2S_Init+0x204>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d103      	bne.n	8005634 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800562c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005630:	613b      	str	r3, [r7, #16]
 8005632:	e001      	b.n	8005638 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005634:	2300      	movs	r3, #0
 8005636:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005642:	4313      	orrs	r3, r2
 8005644:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800564c:	4313      	orrs	r3, r2
 800564e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	699b      	ldr	r3, [r3, #24]
 8005654:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005656:	4313      	orrs	r3, r2
 8005658:	b29a      	uxth	r2, r3
 800565a:	897b      	ldrh	r3, [r7, #10]
 800565c:	4313      	orrs	r3, r2
 800565e:	b29b      	uxth	r3, r3
 8005660:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005664:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a0d      	ldr	r2, [pc, #52]	; (80056a0 <HAL_I2S_Init+0x278>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d101      	bne.n	8005674 <HAL_I2S_Init+0x24c>
 8005670:	4b0c      	ldr	r3, [pc, #48]	; (80056a4 <HAL_I2S_Init+0x27c>)
 8005672:	e001      	b.n	8005678 <HAL_I2S_Init+0x250>
 8005674:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005678:	897a      	ldrh	r2, [r7, #10]
 800567a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2201      	movs	r2, #1
 8005686:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800568a:	2300      	movs	r3, #0
}
 800568c:	4618      	mov	r0, r3
 800568e:	3720      	adds	r7, #32
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}
 8005694:	08005d39 	.word	0x08005d39
 8005698:	cccccccd 	.word	0xcccccccd
 800569c:	08005ec1 	.word	0x08005ec1
 80056a0:	40003800 	.word	0x40003800
 80056a4:	40003400 	.word	0x40003400

080056a8 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b086      	sub	sp, #24
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	4613      	mov	r3, r2
 80056b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d002      	beq.n	80056c2 <HAL_I2S_Transmit_DMA+0x1a>
 80056bc:	88fb      	ldrh	r3, [r7, #6]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d101      	bne.n	80056c6 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e08e      	b.n	80057e4 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d101      	bne.n	80056d6 <HAL_I2S_Transmit_DMA+0x2e>
 80056d2:	2302      	movs	r3, #2
 80056d4:	e086      	b.n	80057e4 <HAL_I2S_Transmit_DMA+0x13c>
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2201      	movs	r2, #1
 80056da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d005      	beq.n	80056f6 <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 80056f2:	2302      	movs	r3, #2
 80056f4:	e076      	b.n	80057e4 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2203      	movs	r2, #3
 80056fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2200      	movs	r2, #0
 8005702:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	68ba      	ldr	r2, [r7, #8]
 8005708:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	69db      	ldr	r3, [r3, #28]
 8005710:	f003 0307 	and.w	r3, r3, #7
 8005714:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	2b03      	cmp	r3, #3
 800571a:	d002      	beq.n	8005722 <HAL_I2S_Transmit_DMA+0x7a>
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	2b05      	cmp	r3, #5
 8005720:	d10a      	bne.n	8005738 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8005722:	88fb      	ldrh	r3, [r7, #6]
 8005724:	005b      	lsls	r3, r3, #1
 8005726:	b29a      	uxth	r2, r3
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 800572c:	88fb      	ldrh	r3, [r7, #6]
 800572e:	005b      	lsls	r3, r3, #1
 8005730:	b29a      	uxth	r2, r3
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005736:	e005      	b.n	8005744 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	88fa      	ldrh	r2, [r7, #6]
 800573c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	88fa      	ldrh	r2, [r7, #6]
 8005742:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005748:	4a28      	ldr	r2, [pc, #160]	; (80057ec <HAL_I2S_Transmit_DMA+0x144>)
 800574a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005750:	4a27      	ldr	r2, [pc, #156]	; (80057f0 <HAL_I2S_Transmit_DMA+0x148>)
 8005752:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005758:	4a26      	ldr	r2, [pc, #152]	; (80057f4 <HAL_I2S_Transmit_DMA+0x14c>)
 800575a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005764:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800576c:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005772:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005774:	f7fc fd7a 	bl	800226c <HAL_DMA_Start_IT>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00f      	beq.n	800579e <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005782:	f043 0208 	orr.w	r2, r3, #8
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2201      	movs	r2, #1
 800578e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	e022      	b.n	80057e4 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	69db      	ldr	r3, [r3, #28]
 80057a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d107      	bne.n	80057bc <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	69da      	ldr	r2, [r3, #28]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80057ba:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	f003 0302 	and.w	r3, r3, #2
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d107      	bne.n	80057da <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	685a      	ldr	r2, [r3, #4]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f042 0202 	orr.w	r2, r2, #2
 80057d8:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2200      	movs	r2, #0
 80057de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 80057e2:	2300      	movs	r3, #0
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3718      	adds	r7, #24
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	08005c17 	.word	0x08005c17
 80057f0:	08005bd5 	.word	0x08005bd5
 80057f4:	08005c33 	.word	0x08005c33

080057f8 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b088      	sub	sp, #32
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005800:	2300      	movs	r3, #0
 8005802:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800580c:	d004      	beq.n	8005818 <HAL_I2S_DMAStop+0x20>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	2b00      	cmp	r3, #0
 8005814:	f040 80d1 	bne.w	80059ba <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800581c:	2b00      	cmp	r3, #0
 800581e:	d00f      	beq.n	8005840 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005824:	4618      	mov	r0, r3
 8005826:	f7fc fd79 	bl	800231c <HAL_DMA_Abort>
 800582a:	4603      	mov	r3, r0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d007      	beq.n	8005840 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005834:	f043 0208 	orr.w	r2, r3, #8
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8005840:	2364      	movs	r3, #100	; 0x64
 8005842:	2201      	movs	r2, #1
 8005844:	2102      	movs	r1, #2
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 fb00 	bl	8005e4c <I2S_WaitFlagStateUntilTimeout>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00b      	beq.n	800586a <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005856:	f043 0201 	orr.w	r2, r3, #1
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2201      	movs	r2, #1
 8005862:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800586a:	2364      	movs	r3, #100	; 0x64
 800586c:	2200      	movs	r2, #0
 800586e:	2180      	movs	r1, #128	; 0x80
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f000 faeb 	bl	8005e4c <I2S_WaitFlagStateUntilTimeout>
 8005876:	4603      	mov	r3, r0
 8005878:	2b00      	cmp	r3, #0
 800587a:	d00b      	beq.n	8005894 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005880:	f043 0201 	orr.w	r2, r3, #1
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	69da      	ldr	r2, [r3, #28]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058a2:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80058a4:	2300      	movs	r3, #0
 80058a6:	617b      	str	r3, [r7, #20]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	617b      	str	r3, [r7, #20]
 80058b0:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	685a      	ldr	r2, [r3, #4]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f022 0202 	bic.w	r2, r2, #2
 80058c0:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	2b05      	cmp	r3, #5
 80058cc:	f040 8165 	bne.w	8005b9a <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d00f      	beq.n	80058f8 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058dc:	4618      	mov	r0, r3
 80058de:	f7fc fd1d 	bl	800231c <HAL_DMA_Abort>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d007      	beq.n	80058f8 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ec:	f043 0208 	orr.w	r2, r3, #8
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a8a      	ldr	r2, [pc, #552]	; (8005b28 <HAL_I2S_DMAStop+0x330>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d101      	bne.n	8005906 <HAL_I2S_DMAStop+0x10e>
 8005902:	4b8a      	ldr	r3, [pc, #552]	; (8005b2c <HAL_I2S_DMAStop+0x334>)
 8005904:	e001      	b.n	800590a <HAL_I2S_DMAStop+0x112>
 8005906:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800590a:	69da      	ldr	r2, [r3, #28]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4985      	ldr	r1, [pc, #532]	; (8005b28 <HAL_I2S_DMAStop+0x330>)
 8005912:	428b      	cmp	r3, r1
 8005914:	d101      	bne.n	800591a <HAL_I2S_DMAStop+0x122>
 8005916:	4b85      	ldr	r3, [pc, #532]	; (8005b2c <HAL_I2S_DMAStop+0x334>)
 8005918:	e001      	b.n	800591e <HAL_I2S_DMAStop+0x126>
 800591a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800591e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005922:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8005924:	2300      	movs	r3, #0
 8005926:	613b      	str	r3, [r7, #16]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a7e      	ldr	r2, [pc, #504]	; (8005b28 <HAL_I2S_DMAStop+0x330>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d101      	bne.n	8005936 <HAL_I2S_DMAStop+0x13e>
 8005932:	4b7e      	ldr	r3, [pc, #504]	; (8005b2c <HAL_I2S_DMAStop+0x334>)
 8005934:	e001      	b.n	800593a <HAL_I2S_DMAStop+0x142>
 8005936:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	613b      	str	r3, [r7, #16]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a79      	ldr	r2, [pc, #484]	; (8005b28 <HAL_I2S_DMAStop+0x330>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d101      	bne.n	800594c <HAL_I2S_DMAStop+0x154>
 8005948:	4b78      	ldr	r3, [pc, #480]	; (8005b2c <HAL_I2S_DMAStop+0x334>)
 800594a:	e001      	b.n	8005950 <HAL_I2S_DMAStop+0x158>
 800594c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	613b      	str	r3, [r7, #16]
 8005954:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a73      	ldr	r2, [pc, #460]	; (8005b28 <HAL_I2S_DMAStop+0x330>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d101      	bne.n	8005964 <HAL_I2S_DMAStop+0x16c>
 8005960:	4b72      	ldr	r3, [pc, #456]	; (8005b2c <HAL_I2S_DMAStop+0x334>)
 8005962:	e001      	b.n	8005968 <HAL_I2S_DMAStop+0x170>
 8005964:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005968:	685a      	ldr	r2, [r3, #4]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	496e      	ldr	r1, [pc, #440]	; (8005b28 <HAL_I2S_DMAStop+0x330>)
 8005970:	428b      	cmp	r3, r1
 8005972:	d101      	bne.n	8005978 <HAL_I2S_DMAStop+0x180>
 8005974:	4b6d      	ldr	r3, [pc, #436]	; (8005b2c <HAL_I2S_DMAStop+0x334>)
 8005976:	e001      	b.n	800597c <HAL_I2S_DMAStop+0x184>
 8005978:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800597c:	f022 0201 	bic.w	r2, r2, #1
 8005980:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d10c      	bne.n	80059a4 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800598e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2201      	movs	r2, #1
 800599a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80059a2:	e0fa      	b.n	8005b9a <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a5f      	ldr	r2, [pc, #380]	; (8005b28 <HAL_I2S_DMAStop+0x330>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d101      	bne.n	80059b2 <HAL_I2S_DMAStop+0x1ba>
 80059ae:	4b5f      	ldr	r3, [pc, #380]	; (8005b2c <HAL_I2S_DMAStop+0x334>)
 80059b0:	e001      	b.n	80059b6 <HAL_I2S_DMAStop+0x1be>
 80059b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80059b6:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80059b8:	e0ef      	b.n	8005b9a <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059c2:	d005      	beq.n	80059d0 <HAL_I2S_DMAStop+0x1d8>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059cc:	f040 80e5 	bne.w	8005b9a <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d00f      	beq.n	80059f8 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059dc:	4618      	mov	r0, r3
 80059de:	f7fc fc9d 	bl	800231c <HAL_DMA_Abort>
 80059e2:	4603      	mov	r3, r0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d007      	beq.n	80059f8 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059ec:	f043 0208 	orr.w	r2, r3, #8
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	2b05      	cmp	r3, #5
 8005a02:	f040 809a 	bne.w	8005b3a <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d00f      	beq.n	8005a2e <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a12:	4618      	mov	r0, r3
 8005a14:	f7fc fc82 	bl	800231c <HAL_DMA_Abort>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d007      	beq.n	8005a2e <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a22:	f043 0208 	orr.w	r2, r3, #8
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 8005a2e:	f7fc fa2d 	bl	8001e8c <HAL_GetTick>
 8005a32:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8005a34:	e012      	b.n	8005a5c <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8005a36:	f7fc fa29 	bl	8001e8c <HAL_GetTick>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	2b64      	cmp	r3, #100	; 0x64
 8005a42:	d90b      	bls.n	8005a5c <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a48:	f043 0201 	orr.w	r2, r3, #1
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a31      	ldr	r2, [pc, #196]	; (8005b28 <HAL_I2S_DMAStop+0x330>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d101      	bne.n	8005a6a <HAL_I2S_DMAStop+0x272>
 8005a66:	4b31      	ldr	r3, [pc, #196]	; (8005b2c <HAL_I2S_DMAStop+0x334>)
 8005a68:	e001      	b.n	8005a6e <HAL_I2S_DMAStop+0x276>
 8005a6a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	f003 0302 	and.w	r3, r3, #2
 8005a74:	2b02      	cmp	r3, #2
 8005a76:	d1de      	bne.n	8005a36 <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8005a78:	e012      	b.n	8005aa0 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8005a7a:	f7fc fa07 	bl	8001e8c <HAL_GetTick>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	2b64      	cmp	r3, #100	; 0x64
 8005a86:	d90b      	bls.n	8005aa0 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a8c:	f043 0201 	orr.w	r2, r3, #1
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a20      	ldr	r2, [pc, #128]	; (8005b28 <HAL_I2S_DMAStop+0x330>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d101      	bne.n	8005aae <HAL_I2S_DMAStop+0x2b6>
 8005aaa:	4b20      	ldr	r3, [pc, #128]	; (8005b2c <HAL_I2S_DMAStop+0x334>)
 8005aac:	e001      	b.n	8005ab2 <HAL_I2S_DMAStop+0x2ba>
 8005aae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ab8:	2b80      	cmp	r3, #128	; 0x80
 8005aba:	d0de      	beq.n	8005a7a <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a19      	ldr	r2, [pc, #100]	; (8005b28 <HAL_I2S_DMAStop+0x330>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d101      	bne.n	8005aca <HAL_I2S_DMAStop+0x2d2>
 8005ac6:	4b19      	ldr	r3, [pc, #100]	; (8005b2c <HAL_I2S_DMAStop+0x334>)
 8005ac8:	e001      	b.n	8005ace <HAL_I2S_DMAStop+0x2d6>
 8005aca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ace:	69da      	ldr	r2, [r3, #28]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4914      	ldr	r1, [pc, #80]	; (8005b28 <HAL_I2S_DMAStop+0x330>)
 8005ad6:	428b      	cmp	r3, r1
 8005ad8:	d101      	bne.n	8005ade <HAL_I2S_DMAStop+0x2e6>
 8005ada:	4b14      	ldr	r3, [pc, #80]	; (8005b2c <HAL_I2S_DMAStop+0x334>)
 8005adc:	e001      	b.n	8005ae2 <HAL_I2S_DMAStop+0x2ea>
 8005ade:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ae2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ae6:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8005ae8:	2300      	movs	r3, #0
 8005aea:	60fb      	str	r3, [r7, #12]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a0d      	ldr	r2, [pc, #52]	; (8005b28 <HAL_I2S_DMAStop+0x330>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d101      	bne.n	8005afa <HAL_I2S_DMAStop+0x302>
 8005af6:	4b0d      	ldr	r3, [pc, #52]	; (8005b2c <HAL_I2S_DMAStop+0x334>)
 8005af8:	e001      	b.n	8005afe <HAL_I2S_DMAStop+0x306>
 8005afa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	60fb      	str	r3, [r7, #12]
 8005b02:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a07      	ldr	r2, [pc, #28]	; (8005b28 <HAL_I2S_DMAStop+0x330>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d101      	bne.n	8005b12 <HAL_I2S_DMAStop+0x31a>
 8005b0e:	4b07      	ldr	r3, [pc, #28]	; (8005b2c <HAL_I2S_DMAStop+0x334>)
 8005b10:	e001      	b.n	8005b16 <HAL_I2S_DMAStop+0x31e>
 8005b12:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b16:	685a      	ldr	r2, [r3, #4]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4902      	ldr	r1, [pc, #8]	; (8005b28 <HAL_I2S_DMAStop+0x330>)
 8005b1e:	428b      	cmp	r3, r1
 8005b20:	d106      	bne.n	8005b30 <HAL_I2S_DMAStop+0x338>
 8005b22:	4b02      	ldr	r3, [pc, #8]	; (8005b2c <HAL_I2S_DMAStop+0x334>)
 8005b24:	e006      	b.n	8005b34 <HAL_I2S_DMAStop+0x33c>
 8005b26:	bf00      	nop
 8005b28:	40003800 	.word	0x40003800
 8005b2c:	40003400 	.word	0x40003400
 8005b30:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b34:	f022 0202 	bic.w	r2, r2, #2
 8005b38:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	69da      	ldr	r2, [r3, #28]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b48:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	60bb      	str	r3, [r7, #8]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	60bb      	str	r3, [r7, #8]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	60bb      	str	r3, [r7, #8]
 8005b5e:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	685a      	ldr	r2, [r3, #4]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f022 0201 	bic.w	r2, r2, #1
 8005b6e:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b78:	d10c      	bne.n	8005b94 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b7e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2201      	movs	r2, #1
 8005b8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	77fb      	strb	r3, [r7, #31]
 8005b92:	e002      	b.n	8005b9a <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 8005ba2:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3720      	adds	r7, #32
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}

08005bac <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b083      	sub	sp, #12
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005bb4:	bf00      	nop
 8005bb6:	370c      	adds	r7, #12
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr

08005bc0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b083      	sub	sp, #12
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005bc8:	bf00      	nop
 8005bca:	370c      	adds	r7, #12
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr

08005bd4 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be0:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	69db      	ldr	r3, [r3, #28]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d10e      	bne.n	8005c08 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	685a      	ldr	r2, [r3, #4]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f022 0202 	bic.w	r2, r2, #2
 8005bf8:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8005c08:	68f8      	ldr	r0, [r7, #12]
 8005c0a:	f7fa ffe1 	bl	8000bd0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005c0e:	bf00      	nop
 8005c10:	3710      	adds	r7, #16
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}

08005c16 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005c16:	b580      	push	{r7, lr}
 8005c18:	b084      	sub	sp, #16
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c22:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8005c24:	68f8      	ldr	r0, [r7, #12]
 8005c26:	f7fa ffe5 	bl	8000bf4 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005c2a:	bf00      	nop
 8005c2c:	3710      	adds	r7, #16
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}

08005c32 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8005c32:	b580      	push	{r7, lr}
 8005c34:	b084      	sub	sp, #16
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c3e:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	685a      	ldr	r2, [r3, #4]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f022 0203 	bic.w	r2, r2, #3
 8005c4e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2200      	movs	r2, #0
 8005c54:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c68:	f043 0208 	orr.w	r2, r3, #8
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8005c70:	68f8      	ldr	r0, [r7, #12]
 8005c72:	f7ff ffa5 	bl	8005bc0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005c76:	bf00      	nop
 8005c78:	3710      	adds	r7, #16
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}

08005c7e <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005c7e:	b580      	push	{r7, lr}
 8005c80:	b082      	sub	sp, #8
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8a:	881a      	ldrh	r2, [r3, #0]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c96:	1c9a      	adds	r2, r3, #2
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	3b01      	subs	r3, #1
 8005ca4:	b29a      	uxth	r2, r3
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d10e      	bne.n	8005cd2 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	685a      	ldr	r2, [r3, #4]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005cc2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f7fa ff7f 	bl	8000bd0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005cd2:	bf00      	nop
 8005cd4:	3708      	adds	r7, #8
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}

08005cda <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005cda:	b580      	push	{r7, lr}
 8005cdc:	b082      	sub	sp, #8
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	68da      	ldr	r2, [r3, #12]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cec:	b292      	uxth	r2, r2
 8005cee:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf4:	1c9a      	adds	r2, r3, #2
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	3b01      	subs	r3, #1
 8005d02:	b29a      	uxth	r2, r3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d10e      	bne.n	8005d30 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	685a      	ldr	r2, [r3, #4]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005d20:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2201      	movs	r2, #1
 8005d26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f7ff ff3e 	bl	8005bac <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005d30:	bf00      	nop
 8005d32:	3708      	adds	r7, #8
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b086      	sub	sp, #24
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	2b04      	cmp	r3, #4
 8005d52:	d13a      	bne.n	8005dca <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	f003 0301 	and.w	r3, r3, #1
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d109      	bne.n	8005d72 <I2S_IRQHandler+0x3a>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d68:	2b40      	cmp	r3, #64	; 0x40
 8005d6a:	d102      	bne.n	8005d72 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f7ff ffb4 	bl	8005cda <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d78:	2b40      	cmp	r3, #64	; 0x40
 8005d7a:	d126      	bne.n	8005dca <I2S_IRQHandler+0x92>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	f003 0320 	and.w	r3, r3, #32
 8005d86:	2b20      	cmp	r3, #32
 8005d88:	d11f      	bne.n	8005dca <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	685a      	ldr	r2, [r3, #4]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005d98:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	613b      	str	r3, [r7, #16]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	613b      	str	r3, [r7, #16]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	613b      	str	r3, [r7, #16]
 8005dae:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dbc:	f043 0202 	orr.w	r2, r3, #2
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f7ff fefb 	bl	8005bc0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	2b03      	cmp	r3, #3
 8005dd4:	d136      	bne.n	8005e44 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	f003 0302 	and.w	r3, r3, #2
 8005ddc:	2b02      	cmp	r3, #2
 8005dde:	d109      	bne.n	8005df4 <I2S_IRQHandler+0xbc>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dea:	2b80      	cmp	r3, #128	; 0x80
 8005dec:	d102      	bne.n	8005df4 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f7ff ff45 	bl	8005c7e <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	f003 0308 	and.w	r3, r3, #8
 8005dfa:	2b08      	cmp	r3, #8
 8005dfc:	d122      	bne.n	8005e44 <I2S_IRQHandler+0x10c>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	f003 0320 	and.w	r3, r3, #32
 8005e08:	2b20      	cmp	r3, #32
 8005e0a:	d11b      	bne.n	8005e44 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	685a      	ldr	r2, [r3, #4]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005e1a:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	60fb      	str	r3, [r7, #12]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	60fb      	str	r3, [r7, #12]
 8005e28:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e36:	f043 0204 	orr.w	r2, r3, #4
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f7ff febe 	bl	8005bc0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005e44:	bf00      	nop
 8005e46:	3718      	adds	r7, #24
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b086      	sub	sp, #24
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	603b      	str	r3, [r7, #0]
 8005e58:	4613      	mov	r3, r2
 8005e5a:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8005e5c:	f7fc f816 	bl	8001e8c <HAL_GetTick>
 8005e60:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8005e62:	e018      	b.n	8005e96 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e6a:	d014      	beq.n	8005e96 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8005e6c:	f7fc f80e 	bl	8001e8c <HAL_GetTick>
 8005e70:	4602      	mov	r2, r0
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	1ad3      	subs	r3, r2, r3
 8005e76:	683a      	ldr	r2, [r7, #0]
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d902      	bls.n	8005e82 <I2S_WaitFlagStateUntilTimeout+0x36>
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d109      	bne.n	8005e96 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2201      	movs	r2, #1
 8005e86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8005e92:	2303      	movs	r3, #3
 8005e94:	e00f      	b.n	8005eb6 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	689a      	ldr	r2, [r3, #8]
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	4013      	ands	r3, r2
 8005ea0:	68ba      	ldr	r2, [r7, #8]
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	bf0c      	ite	eq
 8005ea6:	2301      	moveq	r3, #1
 8005ea8:	2300      	movne	r3, #0
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	461a      	mov	r2, r3
 8005eae:	79fb      	ldrb	r3, [r7, #7]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d1d7      	bne.n	8005e64 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3718      	adds	r7, #24
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
	...

08005ec0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b088      	sub	sp, #32
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a92      	ldr	r2, [pc, #584]	; (8006120 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d101      	bne.n	8005ede <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005eda:	4b92      	ldr	r3, [pc, #584]	; (8006124 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005edc:	e001      	b.n	8005ee2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005ede:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a8b      	ldr	r2, [pc, #556]	; (8006120 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d101      	bne.n	8005efc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005ef8:	4b8a      	ldr	r3, [pc, #552]	; (8006124 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005efa:	e001      	b.n	8005f00 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005efc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f0c:	d004      	beq.n	8005f18 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	f040 8099 	bne.w	800604a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	f003 0302 	and.w	r3, r3, #2
 8005f1e:	2b02      	cmp	r3, #2
 8005f20:	d107      	bne.n	8005f32 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d002      	beq.n	8005f32 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f000 f925 	bl	800617c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005f32:	69bb      	ldr	r3, [r7, #24]
 8005f34:	f003 0301 	and.w	r3, r3, #1
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d107      	bne.n	8005f4c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d002      	beq.n	8005f4c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 f9c8 	bl	80062dc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005f4c:	69bb      	ldr	r3, [r7, #24]
 8005f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f52:	2b40      	cmp	r3, #64	; 0x40
 8005f54:	d13a      	bne.n	8005fcc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	f003 0320 	and.w	r3, r3, #32
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d035      	beq.n	8005fcc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a6e      	ldr	r2, [pc, #440]	; (8006120 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d101      	bne.n	8005f6e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005f6a:	4b6e      	ldr	r3, [pc, #440]	; (8006124 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005f6c:	e001      	b.n	8005f72 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005f6e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f72:	685a      	ldr	r2, [r3, #4]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4969      	ldr	r1, [pc, #420]	; (8006120 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005f7a:	428b      	cmp	r3, r1
 8005f7c:	d101      	bne.n	8005f82 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005f7e:	4b69      	ldr	r3, [pc, #420]	; (8006124 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005f80:	e001      	b.n	8005f86 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005f82:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f86:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005f8a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	685a      	ldr	r2, [r3, #4]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005f9a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	60fb      	str	r3, [r7, #12]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	68db      	ldr	r3, [r3, #12]
 8005fa6:	60fb      	str	r3, [r7, #12]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	60fb      	str	r3, [r7, #12]
 8005fb0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fbe:	f043 0202 	orr.w	r2, r3, #2
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f7ff fdfa 	bl	8005bc0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005fcc:	69fb      	ldr	r3, [r7, #28]
 8005fce:	f003 0308 	and.w	r3, r3, #8
 8005fd2:	2b08      	cmp	r3, #8
 8005fd4:	f040 80c3 	bne.w	800615e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	f003 0320 	and.w	r3, r3, #32
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	f000 80bd 	beq.w	800615e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	685a      	ldr	r2, [r3, #4]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005ff2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a49      	ldr	r2, [pc, #292]	; (8006120 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d101      	bne.n	8006002 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005ffe:	4b49      	ldr	r3, [pc, #292]	; (8006124 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006000:	e001      	b.n	8006006 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8006002:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006006:	685a      	ldr	r2, [r3, #4]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4944      	ldr	r1, [pc, #272]	; (8006120 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800600e:	428b      	cmp	r3, r1
 8006010:	d101      	bne.n	8006016 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8006012:	4b44      	ldr	r3, [pc, #272]	; (8006124 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006014:	e001      	b.n	800601a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8006016:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800601a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800601e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006020:	2300      	movs	r3, #0
 8006022:	60bb      	str	r3, [r7, #8]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	60bb      	str	r3, [r7, #8]
 800602c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2201      	movs	r2, #1
 8006032:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800603a:	f043 0204 	orr.w	r2, r3, #4
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f7ff fdbc 	bl	8005bc0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006048:	e089      	b.n	800615e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	f003 0302 	and.w	r3, r3, #2
 8006050:	2b02      	cmp	r3, #2
 8006052:	d107      	bne.n	8006064 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800605a:	2b00      	cmp	r3, #0
 800605c:	d002      	beq.n	8006064 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f000 f8be 	bl	80061e0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	f003 0301 	and.w	r3, r3, #1
 800606a:	2b01      	cmp	r3, #1
 800606c:	d107      	bne.n	800607e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006074:	2b00      	cmp	r3, #0
 8006076:	d002      	beq.n	800607e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f000 f8fd 	bl	8006278 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006084:	2b40      	cmp	r3, #64	; 0x40
 8006086:	d12f      	bne.n	80060e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	f003 0320 	and.w	r3, r3, #32
 800608e:	2b00      	cmp	r3, #0
 8006090:	d02a      	beq.n	80060e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	685a      	ldr	r2, [r3, #4]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80060a0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a1e      	ldr	r2, [pc, #120]	; (8006120 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d101      	bne.n	80060b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80060ac:	4b1d      	ldr	r3, [pc, #116]	; (8006124 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80060ae:	e001      	b.n	80060b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80060b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80060b4:	685a      	ldr	r2, [r3, #4]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4919      	ldr	r1, [pc, #100]	; (8006120 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80060bc:	428b      	cmp	r3, r1
 80060be:	d101      	bne.n	80060c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80060c0:	4b18      	ldr	r3, [pc, #96]	; (8006124 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80060c2:	e001      	b.n	80060c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80060c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80060c8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80060cc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2201      	movs	r2, #1
 80060d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060da:	f043 0202 	orr.w	r2, r3, #2
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f7ff fd6c 	bl	8005bc0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80060e8:	69bb      	ldr	r3, [r7, #24]
 80060ea:	f003 0308 	and.w	r3, r3, #8
 80060ee:	2b08      	cmp	r3, #8
 80060f0:	d136      	bne.n	8006160 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	f003 0320 	and.w	r3, r3, #32
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d031      	beq.n	8006160 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a07      	ldr	r2, [pc, #28]	; (8006120 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d101      	bne.n	800610a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8006106:	4b07      	ldr	r3, [pc, #28]	; (8006124 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006108:	e001      	b.n	800610e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800610a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800610e:	685a      	ldr	r2, [r3, #4]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4902      	ldr	r1, [pc, #8]	; (8006120 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006116:	428b      	cmp	r3, r1
 8006118:	d106      	bne.n	8006128 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800611a:	4b02      	ldr	r3, [pc, #8]	; (8006124 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800611c:	e006      	b.n	800612c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800611e:	bf00      	nop
 8006120:	40003800 	.word	0x40003800
 8006124:	40003400 	.word	0x40003400
 8006128:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800612c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006130:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	685a      	ldr	r2, [r3, #4]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006140:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2201      	movs	r2, #1
 8006146:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800614e:	f043 0204 	orr.w	r2, r3, #4
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f7ff fd32 	bl	8005bc0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800615c:	e000      	b.n	8006160 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800615e:	bf00      	nop
}
 8006160:	bf00      	nop
 8006162:	3720      	adds	r7, #32
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}

08006168 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006168:	b480      	push	{r7}
 800616a:	b083      	sub	sp, #12
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006170:	bf00      	nop
 8006172:	370c      	adds	r7, #12
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr

0800617c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b082      	sub	sp, #8
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006188:	1c99      	adds	r1, r3, #2
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	6251      	str	r1, [r2, #36]	; 0x24
 800618e:	881a      	ldrh	r2, [r3, #0]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800619a:	b29b      	uxth	r3, r3
 800619c:	3b01      	subs	r3, #1
 800619e:	b29a      	uxth	r2, r3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d113      	bne.n	80061d6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	685a      	ldr	r2, [r3, #4]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80061bc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d106      	bne.n	80061d6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f7ff ffc9 	bl	8006168 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80061d6:	bf00      	nop
 80061d8:	3708      	adds	r7, #8
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
	...

080061e0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b082      	sub	sp, #8
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ec:	1c99      	adds	r1, r3, #2
 80061ee:	687a      	ldr	r2, [r7, #4]
 80061f0:	6251      	str	r1, [r2, #36]	; 0x24
 80061f2:	8819      	ldrh	r1, [r3, #0]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a1d      	ldr	r2, [pc, #116]	; (8006270 <I2SEx_TxISR_I2SExt+0x90>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d101      	bne.n	8006202 <I2SEx_TxISR_I2SExt+0x22>
 80061fe:	4b1d      	ldr	r3, [pc, #116]	; (8006274 <I2SEx_TxISR_I2SExt+0x94>)
 8006200:	e001      	b.n	8006206 <I2SEx_TxISR_I2SExt+0x26>
 8006202:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006206:	460a      	mov	r2, r1
 8006208:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800620e:	b29b      	uxth	r3, r3
 8006210:	3b01      	subs	r3, #1
 8006212:	b29a      	uxth	r2, r3
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800621c:	b29b      	uxth	r3, r3
 800621e:	2b00      	cmp	r3, #0
 8006220:	d121      	bne.n	8006266 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a12      	ldr	r2, [pc, #72]	; (8006270 <I2SEx_TxISR_I2SExt+0x90>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d101      	bne.n	8006230 <I2SEx_TxISR_I2SExt+0x50>
 800622c:	4b11      	ldr	r3, [pc, #68]	; (8006274 <I2SEx_TxISR_I2SExt+0x94>)
 800622e:	e001      	b.n	8006234 <I2SEx_TxISR_I2SExt+0x54>
 8006230:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006234:	685a      	ldr	r2, [r3, #4]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	490d      	ldr	r1, [pc, #52]	; (8006270 <I2SEx_TxISR_I2SExt+0x90>)
 800623c:	428b      	cmp	r3, r1
 800623e:	d101      	bne.n	8006244 <I2SEx_TxISR_I2SExt+0x64>
 8006240:	4b0c      	ldr	r3, [pc, #48]	; (8006274 <I2SEx_TxISR_I2SExt+0x94>)
 8006242:	e001      	b.n	8006248 <I2SEx_TxISR_I2SExt+0x68>
 8006244:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006248:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800624c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006252:	b29b      	uxth	r3, r3
 8006254:	2b00      	cmp	r3, #0
 8006256:	d106      	bne.n	8006266 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2201      	movs	r2, #1
 800625c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f7ff ff81 	bl	8006168 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006266:	bf00      	nop
 8006268:	3708      	adds	r7, #8
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}
 800626e:	bf00      	nop
 8006270:	40003800 	.word	0x40003800
 8006274:	40003400 	.word	0x40003400

08006278 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b082      	sub	sp, #8
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	68d8      	ldr	r0, [r3, #12]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800628a:	1c99      	adds	r1, r3, #2
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006290:	b282      	uxth	r2, r0
 8006292:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006298:	b29b      	uxth	r3, r3
 800629a:	3b01      	subs	r3, #1
 800629c:	b29a      	uxth	r2, r3
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d113      	bne.n	80062d4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	685a      	ldr	r2, [r3, #4]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80062ba:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d106      	bne.n	80062d4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2201      	movs	r2, #1
 80062ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f7ff ff4a 	bl	8006168 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80062d4:	bf00      	nop
 80062d6:	3708      	adds	r7, #8
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b082      	sub	sp, #8
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a20      	ldr	r2, [pc, #128]	; (800636c <I2SEx_RxISR_I2SExt+0x90>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d101      	bne.n	80062f2 <I2SEx_RxISR_I2SExt+0x16>
 80062ee:	4b20      	ldr	r3, [pc, #128]	; (8006370 <I2SEx_RxISR_I2SExt+0x94>)
 80062f0:	e001      	b.n	80062f6 <I2SEx_RxISR_I2SExt+0x1a>
 80062f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80062f6:	68d8      	ldr	r0, [r3, #12]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062fc:	1c99      	adds	r1, r3, #2
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006302:	b282      	uxth	r2, r0
 8006304:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800630a:	b29b      	uxth	r3, r3
 800630c:	3b01      	subs	r3, #1
 800630e:	b29a      	uxth	r2, r3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006318:	b29b      	uxth	r3, r3
 800631a:	2b00      	cmp	r3, #0
 800631c:	d121      	bne.n	8006362 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a12      	ldr	r2, [pc, #72]	; (800636c <I2SEx_RxISR_I2SExt+0x90>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d101      	bne.n	800632c <I2SEx_RxISR_I2SExt+0x50>
 8006328:	4b11      	ldr	r3, [pc, #68]	; (8006370 <I2SEx_RxISR_I2SExt+0x94>)
 800632a:	e001      	b.n	8006330 <I2SEx_RxISR_I2SExt+0x54>
 800632c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006330:	685a      	ldr	r2, [r3, #4]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	490d      	ldr	r1, [pc, #52]	; (800636c <I2SEx_RxISR_I2SExt+0x90>)
 8006338:	428b      	cmp	r3, r1
 800633a:	d101      	bne.n	8006340 <I2SEx_RxISR_I2SExt+0x64>
 800633c:	4b0c      	ldr	r3, [pc, #48]	; (8006370 <I2SEx_RxISR_I2SExt+0x94>)
 800633e:	e001      	b.n	8006344 <I2SEx_RxISR_I2SExt+0x68>
 8006340:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006344:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006348:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800634e:	b29b      	uxth	r3, r3
 8006350:	2b00      	cmp	r3, #0
 8006352:	d106      	bne.n	8006362 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f7ff ff03 	bl	8006168 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006362:	bf00      	nop
 8006364:	3708      	adds	r7, #8
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
 800636a:	bf00      	nop
 800636c:	40003800 	.word	0x40003800
 8006370:	40003400 	.word	0x40003400

08006374 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b086      	sub	sp, #24
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d101      	bne.n	8006386 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	e267      	b.n	8006856 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f003 0301 	and.w	r3, r3, #1
 800638e:	2b00      	cmp	r3, #0
 8006390:	d075      	beq.n	800647e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006392:	4b88      	ldr	r3, [pc, #544]	; (80065b4 <HAL_RCC_OscConfig+0x240>)
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	f003 030c 	and.w	r3, r3, #12
 800639a:	2b04      	cmp	r3, #4
 800639c:	d00c      	beq.n	80063b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800639e:	4b85      	ldr	r3, [pc, #532]	; (80065b4 <HAL_RCC_OscConfig+0x240>)
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80063a6:	2b08      	cmp	r3, #8
 80063a8:	d112      	bne.n	80063d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80063aa:	4b82      	ldr	r3, [pc, #520]	; (80065b4 <HAL_RCC_OscConfig+0x240>)
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063b6:	d10b      	bne.n	80063d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063b8:	4b7e      	ldr	r3, [pc, #504]	; (80065b4 <HAL_RCC_OscConfig+0x240>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d05b      	beq.n	800647c <HAL_RCC_OscConfig+0x108>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d157      	bne.n	800647c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	e242      	b.n	8006856 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063d8:	d106      	bne.n	80063e8 <HAL_RCC_OscConfig+0x74>
 80063da:	4b76      	ldr	r3, [pc, #472]	; (80065b4 <HAL_RCC_OscConfig+0x240>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a75      	ldr	r2, [pc, #468]	; (80065b4 <HAL_RCC_OscConfig+0x240>)
 80063e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063e4:	6013      	str	r3, [r2, #0]
 80063e6:	e01d      	b.n	8006424 <HAL_RCC_OscConfig+0xb0>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80063f0:	d10c      	bne.n	800640c <HAL_RCC_OscConfig+0x98>
 80063f2:	4b70      	ldr	r3, [pc, #448]	; (80065b4 <HAL_RCC_OscConfig+0x240>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a6f      	ldr	r2, [pc, #444]	; (80065b4 <HAL_RCC_OscConfig+0x240>)
 80063f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80063fc:	6013      	str	r3, [r2, #0]
 80063fe:	4b6d      	ldr	r3, [pc, #436]	; (80065b4 <HAL_RCC_OscConfig+0x240>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a6c      	ldr	r2, [pc, #432]	; (80065b4 <HAL_RCC_OscConfig+0x240>)
 8006404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006408:	6013      	str	r3, [r2, #0]
 800640a:	e00b      	b.n	8006424 <HAL_RCC_OscConfig+0xb0>
 800640c:	4b69      	ldr	r3, [pc, #420]	; (80065b4 <HAL_RCC_OscConfig+0x240>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a68      	ldr	r2, [pc, #416]	; (80065b4 <HAL_RCC_OscConfig+0x240>)
 8006412:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006416:	6013      	str	r3, [r2, #0]
 8006418:	4b66      	ldr	r3, [pc, #408]	; (80065b4 <HAL_RCC_OscConfig+0x240>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a65      	ldr	r2, [pc, #404]	; (80065b4 <HAL_RCC_OscConfig+0x240>)
 800641e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006422:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d013      	beq.n	8006454 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800642c:	f7fb fd2e 	bl	8001e8c <HAL_GetTick>
 8006430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006432:	e008      	b.n	8006446 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006434:	f7fb fd2a 	bl	8001e8c <HAL_GetTick>
 8006438:	4602      	mov	r2, r0
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	1ad3      	subs	r3, r2, r3
 800643e:	2b64      	cmp	r3, #100	; 0x64
 8006440:	d901      	bls.n	8006446 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006442:	2303      	movs	r3, #3
 8006444:	e207      	b.n	8006856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006446:	4b5b      	ldr	r3, [pc, #364]	; (80065b4 <HAL_RCC_OscConfig+0x240>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800644e:	2b00      	cmp	r3, #0
 8006450:	d0f0      	beq.n	8006434 <HAL_RCC_OscConfig+0xc0>
 8006452:	e014      	b.n	800647e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006454:	f7fb fd1a 	bl	8001e8c <HAL_GetTick>
 8006458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800645a:	e008      	b.n	800646e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800645c:	f7fb fd16 	bl	8001e8c <HAL_GetTick>
 8006460:	4602      	mov	r2, r0
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	1ad3      	subs	r3, r2, r3
 8006466:	2b64      	cmp	r3, #100	; 0x64
 8006468:	d901      	bls.n	800646e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800646a:	2303      	movs	r3, #3
 800646c:	e1f3      	b.n	8006856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800646e:	4b51      	ldr	r3, [pc, #324]	; (80065b4 <HAL_RCC_OscConfig+0x240>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006476:	2b00      	cmp	r3, #0
 8006478:	d1f0      	bne.n	800645c <HAL_RCC_OscConfig+0xe8>
 800647a:	e000      	b.n	800647e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800647c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f003 0302 	and.w	r3, r3, #2
 8006486:	2b00      	cmp	r3, #0
 8006488:	d063      	beq.n	8006552 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800648a:	4b4a      	ldr	r3, [pc, #296]	; (80065b4 <HAL_RCC_OscConfig+0x240>)
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	f003 030c 	and.w	r3, r3, #12
 8006492:	2b00      	cmp	r3, #0
 8006494:	d00b      	beq.n	80064ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006496:	4b47      	ldr	r3, [pc, #284]	; (80065b4 <HAL_RCC_OscConfig+0x240>)
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800649e:	2b08      	cmp	r3, #8
 80064a0:	d11c      	bne.n	80064dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80064a2:	4b44      	ldr	r3, [pc, #272]	; (80065b4 <HAL_RCC_OscConfig+0x240>)
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d116      	bne.n	80064dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064ae:	4b41      	ldr	r3, [pc, #260]	; (80065b4 <HAL_RCC_OscConfig+0x240>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f003 0302 	and.w	r3, r3, #2
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d005      	beq.n	80064c6 <HAL_RCC_OscConfig+0x152>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d001      	beq.n	80064c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e1c7      	b.n	8006856 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064c6:	4b3b      	ldr	r3, [pc, #236]	; (80065b4 <HAL_RCC_OscConfig+0x240>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	691b      	ldr	r3, [r3, #16]
 80064d2:	00db      	lsls	r3, r3, #3
 80064d4:	4937      	ldr	r1, [pc, #220]	; (80065b4 <HAL_RCC_OscConfig+0x240>)
 80064d6:	4313      	orrs	r3, r2
 80064d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064da:	e03a      	b.n	8006552 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d020      	beq.n	8006526 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064e4:	4b34      	ldr	r3, [pc, #208]	; (80065b8 <HAL_RCC_OscConfig+0x244>)
 80064e6:	2201      	movs	r2, #1
 80064e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064ea:	f7fb fccf 	bl	8001e8c <HAL_GetTick>
 80064ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064f0:	e008      	b.n	8006504 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80064f2:	f7fb fccb 	bl	8001e8c <HAL_GetTick>
 80064f6:	4602      	mov	r2, r0
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	1ad3      	subs	r3, r2, r3
 80064fc:	2b02      	cmp	r3, #2
 80064fe:	d901      	bls.n	8006504 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006500:	2303      	movs	r3, #3
 8006502:	e1a8      	b.n	8006856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006504:	4b2b      	ldr	r3, [pc, #172]	; (80065b4 <HAL_RCC_OscConfig+0x240>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 0302 	and.w	r3, r3, #2
 800650c:	2b00      	cmp	r3, #0
 800650e:	d0f0      	beq.n	80064f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006510:	4b28      	ldr	r3, [pc, #160]	; (80065b4 <HAL_RCC_OscConfig+0x240>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	691b      	ldr	r3, [r3, #16]
 800651c:	00db      	lsls	r3, r3, #3
 800651e:	4925      	ldr	r1, [pc, #148]	; (80065b4 <HAL_RCC_OscConfig+0x240>)
 8006520:	4313      	orrs	r3, r2
 8006522:	600b      	str	r3, [r1, #0]
 8006524:	e015      	b.n	8006552 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006526:	4b24      	ldr	r3, [pc, #144]	; (80065b8 <HAL_RCC_OscConfig+0x244>)
 8006528:	2200      	movs	r2, #0
 800652a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800652c:	f7fb fcae 	bl	8001e8c <HAL_GetTick>
 8006530:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006532:	e008      	b.n	8006546 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006534:	f7fb fcaa 	bl	8001e8c <HAL_GetTick>
 8006538:	4602      	mov	r2, r0
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	1ad3      	subs	r3, r2, r3
 800653e:	2b02      	cmp	r3, #2
 8006540:	d901      	bls.n	8006546 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006542:	2303      	movs	r3, #3
 8006544:	e187      	b.n	8006856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006546:	4b1b      	ldr	r3, [pc, #108]	; (80065b4 <HAL_RCC_OscConfig+0x240>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f003 0302 	and.w	r3, r3, #2
 800654e:	2b00      	cmp	r3, #0
 8006550:	d1f0      	bne.n	8006534 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f003 0308 	and.w	r3, r3, #8
 800655a:	2b00      	cmp	r3, #0
 800655c:	d036      	beq.n	80065cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	695b      	ldr	r3, [r3, #20]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d016      	beq.n	8006594 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006566:	4b15      	ldr	r3, [pc, #84]	; (80065bc <HAL_RCC_OscConfig+0x248>)
 8006568:	2201      	movs	r2, #1
 800656a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800656c:	f7fb fc8e 	bl	8001e8c <HAL_GetTick>
 8006570:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006572:	e008      	b.n	8006586 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006574:	f7fb fc8a 	bl	8001e8c <HAL_GetTick>
 8006578:	4602      	mov	r2, r0
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	1ad3      	subs	r3, r2, r3
 800657e:	2b02      	cmp	r3, #2
 8006580:	d901      	bls.n	8006586 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006582:	2303      	movs	r3, #3
 8006584:	e167      	b.n	8006856 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006586:	4b0b      	ldr	r3, [pc, #44]	; (80065b4 <HAL_RCC_OscConfig+0x240>)
 8006588:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800658a:	f003 0302 	and.w	r3, r3, #2
 800658e:	2b00      	cmp	r3, #0
 8006590:	d0f0      	beq.n	8006574 <HAL_RCC_OscConfig+0x200>
 8006592:	e01b      	b.n	80065cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006594:	4b09      	ldr	r3, [pc, #36]	; (80065bc <HAL_RCC_OscConfig+0x248>)
 8006596:	2200      	movs	r2, #0
 8006598:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800659a:	f7fb fc77 	bl	8001e8c <HAL_GetTick>
 800659e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065a0:	e00e      	b.n	80065c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065a2:	f7fb fc73 	bl	8001e8c <HAL_GetTick>
 80065a6:	4602      	mov	r2, r0
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	1ad3      	subs	r3, r2, r3
 80065ac:	2b02      	cmp	r3, #2
 80065ae:	d907      	bls.n	80065c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80065b0:	2303      	movs	r3, #3
 80065b2:	e150      	b.n	8006856 <HAL_RCC_OscConfig+0x4e2>
 80065b4:	40023800 	.word	0x40023800
 80065b8:	42470000 	.word	0x42470000
 80065bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065c0:	4b88      	ldr	r3, [pc, #544]	; (80067e4 <HAL_RCC_OscConfig+0x470>)
 80065c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065c4:	f003 0302 	and.w	r3, r3, #2
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d1ea      	bne.n	80065a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 0304 	and.w	r3, r3, #4
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	f000 8097 	beq.w	8006708 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065da:	2300      	movs	r3, #0
 80065dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065de:	4b81      	ldr	r3, [pc, #516]	; (80067e4 <HAL_RCC_OscConfig+0x470>)
 80065e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d10f      	bne.n	800660a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065ea:	2300      	movs	r3, #0
 80065ec:	60bb      	str	r3, [r7, #8]
 80065ee:	4b7d      	ldr	r3, [pc, #500]	; (80067e4 <HAL_RCC_OscConfig+0x470>)
 80065f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f2:	4a7c      	ldr	r2, [pc, #496]	; (80067e4 <HAL_RCC_OscConfig+0x470>)
 80065f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065f8:	6413      	str	r3, [r2, #64]	; 0x40
 80065fa:	4b7a      	ldr	r3, [pc, #488]	; (80067e4 <HAL_RCC_OscConfig+0x470>)
 80065fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006602:	60bb      	str	r3, [r7, #8]
 8006604:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006606:	2301      	movs	r3, #1
 8006608:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800660a:	4b77      	ldr	r3, [pc, #476]	; (80067e8 <HAL_RCC_OscConfig+0x474>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006612:	2b00      	cmp	r3, #0
 8006614:	d118      	bne.n	8006648 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006616:	4b74      	ldr	r3, [pc, #464]	; (80067e8 <HAL_RCC_OscConfig+0x474>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a73      	ldr	r2, [pc, #460]	; (80067e8 <HAL_RCC_OscConfig+0x474>)
 800661c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006620:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006622:	f7fb fc33 	bl	8001e8c <HAL_GetTick>
 8006626:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006628:	e008      	b.n	800663c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800662a:	f7fb fc2f 	bl	8001e8c <HAL_GetTick>
 800662e:	4602      	mov	r2, r0
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	1ad3      	subs	r3, r2, r3
 8006634:	2b02      	cmp	r3, #2
 8006636:	d901      	bls.n	800663c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006638:	2303      	movs	r3, #3
 800663a:	e10c      	b.n	8006856 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800663c:	4b6a      	ldr	r3, [pc, #424]	; (80067e8 <HAL_RCC_OscConfig+0x474>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006644:	2b00      	cmp	r3, #0
 8006646:	d0f0      	beq.n	800662a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	2b01      	cmp	r3, #1
 800664e:	d106      	bne.n	800665e <HAL_RCC_OscConfig+0x2ea>
 8006650:	4b64      	ldr	r3, [pc, #400]	; (80067e4 <HAL_RCC_OscConfig+0x470>)
 8006652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006654:	4a63      	ldr	r2, [pc, #396]	; (80067e4 <HAL_RCC_OscConfig+0x470>)
 8006656:	f043 0301 	orr.w	r3, r3, #1
 800665a:	6713      	str	r3, [r2, #112]	; 0x70
 800665c:	e01c      	b.n	8006698 <HAL_RCC_OscConfig+0x324>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	2b05      	cmp	r3, #5
 8006664:	d10c      	bne.n	8006680 <HAL_RCC_OscConfig+0x30c>
 8006666:	4b5f      	ldr	r3, [pc, #380]	; (80067e4 <HAL_RCC_OscConfig+0x470>)
 8006668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800666a:	4a5e      	ldr	r2, [pc, #376]	; (80067e4 <HAL_RCC_OscConfig+0x470>)
 800666c:	f043 0304 	orr.w	r3, r3, #4
 8006670:	6713      	str	r3, [r2, #112]	; 0x70
 8006672:	4b5c      	ldr	r3, [pc, #368]	; (80067e4 <HAL_RCC_OscConfig+0x470>)
 8006674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006676:	4a5b      	ldr	r2, [pc, #364]	; (80067e4 <HAL_RCC_OscConfig+0x470>)
 8006678:	f043 0301 	orr.w	r3, r3, #1
 800667c:	6713      	str	r3, [r2, #112]	; 0x70
 800667e:	e00b      	b.n	8006698 <HAL_RCC_OscConfig+0x324>
 8006680:	4b58      	ldr	r3, [pc, #352]	; (80067e4 <HAL_RCC_OscConfig+0x470>)
 8006682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006684:	4a57      	ldr	r2, [pc, #348]	; (80067e4 <HAL_RCC_OscConfig+0x470>)
 8006686:	f023 0301 	bic.w	r3, r3, #1
 800668a:	6713      	str	r3, [r2, #112]	; 0x70
 800668c:	4b55      	ldr	r3, [pc, #340]	; (80067e4 <HAL_RCC_OscConfig+0x470>)
 800668e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006690:	4a54      	ldr	r2, [pc, #336]	; (80067e4 <HAL_RCC_OscConfig+0x470>)
 8006692:	f023 0304 	bic.w	r3, r3, #4
 8006696:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d015      	beq.n	80066cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066a0:	f7fb fbf4 	bl	8001e8c <HAL_GetTick>
 80066a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066a6:	e00a      	b.n	80066be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066a8:	f7fb fbf0 	bl	8001e8c <HAL_GetTick>
 80066ac:	4602      	mov	r2, r0
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	1ad3      	subs	r3, r2, r3
 80066b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d901      	bls.n	80066be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80066ba:	2303      	movs	r3, #3
 80066bc:	e0cb      	b.n	8006856 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066be:	4b49      	ldr	r3, [pc, #292]	; (80067e4 <HAL_RCC_OscConfig+0x470>)
 80066c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066c2:	f003 0302 	and.w	r3, r3, #2
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d0ee      	beq.n	80066a8 <HAL_RCC_OscConfig+0x334>
 80066ca:	e014      	b.n	80066f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066cc:	f7fb fbde 	bl	8001e8c <HAL_GetTick>
 80066d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066d2:	e00a      	b.n	80066ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066d4:	f7fb fbda 	bl	8001e8c <HAL_GetTick>
 80066d8:	4602      	mov	r2, r0
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	1ad3      	subs	r3, r2, r3
 80066de:	f241 3288 	movw	r2, #5000	; 0x1388
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d901      	bls.n	80066ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80066e6:	2303      	movs	r3, #3
 80066e8:	e0b5      	b.n	8006856 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066ea:	4b3e      	ldr	r3, [pc, #248]	; (80067e4 <HAL_RCC_OscConfig+0x470>)
 80066ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ee:	f003 0302 	and.w	r3, r3, #2
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d1ee      	bne.n	80066d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80066f6:	7dfb      	ldrb	r3, [r7, #23]
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d105      	bne.n	8006708 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066fc:	4b39      	ldr	r3, [pc, #228]	; (80067e4 <HAL_RCC_OscConfig+0x470>)
 80066fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006700:	4a38      	ldr	r2, [pc, #224]	; (80067e4 <HAL_RCC_OscConfig+0x470>)
 8006702:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006706:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	699b      	ldr	r3, [r3, #24]
 800670c:	2b00      	cmp	r3, #0
 800670e:	f000 80a1 	beq.w	8006854 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006712:	4b34      	ldr	r3, [pc, #208]	; (80067e4 <HAL_RCC_OscConfig+0x470>)
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	f003 030c 	and.w	r3, r3, #12
 800671a:	2b08      	cmp	r3, #8
 800671c:	d05c      	beq.n	80067d8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	699b      	ldr	r3, [r3, #24]
 8006722:	2b02      	cmp	r3, #2
 8006724:	d141      	bne.n	80067aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006726:	4b31      	ldr	r3, [pc, #196]	; (80067ec <HAL_RCC_OscConfig+0x478>)
 8006728:	2200      	movs	r2, #0
 800672a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800672c:	f7fb fbae 	bl	8001e8c <HAL_GetTick>
 8006730:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006732:	e008      	b.n	8006746 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006734:	f7fb fbaa 	bl	8001e8c <HAL_GetTick>
 8006738:	4602      	mov	r2, r0
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	1ad3      	subs	r3, r2, r3
 800673e:	2b02      	cmp	r3, #2
 8006740:	d901      	bls.n	8006746 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006742:	2303      	movs	r3, #3
 8006744:	e087      	b.n	8006856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006746:	4b27      	ldr	r3, [pc, #156]	; (80067e4 <HAL_RCC_OscConfig+0x470>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800674e:	2b00      	cmp	r3, #0
 8006750:	d1f0      	bne.n	8006734 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	69da      	ldr	r2, [r3, #28]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6a1b      	ldr	r3, [r3, #32]
 800675a:	431a      	orrs	r2, r3
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006760:	019b      	lsls	r3, r3, #6
 8006762:	431a      	orrs	r2, r3
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006768:	085b      	lsrs	r3, r3, #1
 800676a:	3b01      	subs	r3, #1
 800676c:	041b      	lsls	r3, r3, #16
 800676e:	431a      	orrs	r2, r3
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006774:	061b      	lsls	r3, r3, #24
 8006776:	491b      	ldr	r1, [pc, #108]	; (80067e4 <HAL_RCC_OscConfig+0x470>)
 8006778:	4313      	orrs	r3, r2
 800677a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800677c:	4b1b      	ldr	r3, [pc, #108]	; (80067ec <HAL_RCC_OscConfig+0x478>)
 800677e:	2201      	movs	r2, #1
 8006780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006782:	f7fb fb83 	bl	8001e8c <HAL_GetTick>
 8006786:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006788:	e008      	b.n	800679c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800678a:	f7fb fb7f 	bl	8001e8c <HAL_GetTick>
 800678e:	4602      	mov	r2, r0
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	1ad3      	subs	r3, r2, r3
 8006794:	2b02      	cmp	r3, #2
 8006796:	d901      	bls.n	800679c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006798:	2303      	movs	r3, #3
 800679a:	e05c      	b.n	8006856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800679c:	4b11      	ldr	r3, [pc, #68]	; (80067e4 <HAL_RCC_OscConfig+0x470>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d0f0      	beq.n	800678a <HAL_RCC_OscConfig+0x416>
 80067a8:	e054      	b.n	8006854 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067aa:	4b10      	ldr	r3, [pc, #64]	; (80067ec <HAL_RCC_OscConfig+0x478>)
 80067ac:	2200      	movs	r2, #0
 80067ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067b0:	f7fb fb6c 	bl	8001e8c <HAL_GetTick>
 80067b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067b6:	e008      	b.n	80067ca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067b8:	f7fb fb68 	bl	8001e8c <HAL_GetTick>
 80067bc:	4602      	mov	r2, r0
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	1ad3      	subs	r3, r2, r3
 80067c2:	2b02      	cmp	r3, #2
 80067c4:	d901      	bls.n	80067ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80067c6:	2303      	movs	r3, #3
 80067c8:	e045      	b.n	8006856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067ca:	4b06      	ldr	r3, [pc, #24]	; (80067e4 <HAL_RCC_OscConfig+0x470>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d1f0      	bne.n	80067b8 <HAL_RCC_OscConfig+0x444>
 80067d6:	e03d      	b.n	8006854 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	699b      	ldr	r3, [r3, #24]
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d107      	bne.n	80067f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80067e0:	2301      	movs	r3, #1
 80067e2:	e038      	b.n	8006856 <HAL_RCC_OscConfig+0x4e2>
 80067e4:	40023800 	.word	0x40023800
 80067e8:	40007000 	.word	0x40007000
 80067ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80067f0:	4b1b      	ldr	r3, [pc, #108]	; (8006860 <HAL_RCC_OscConfig+0x4ec>)
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	699b      	ldr	r3, [r3, #24]
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d028      	beq.n	8006850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006808:	429a      	cmp	r2, r3
 800680a:	d121      	bne.n	8006850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006816:	429a      	cmp	r2, r3
 8006818:	d11a      	bne.n	8006850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800681a:	68fa      	ldr	r2, [r7, #12]
 800681c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006820:	4013      	ands	r3, r2
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006826:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006828:	4293      	cmp	r3, r2
 800682a:	d111      	bne.n	8006850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006836:	085b      	lsrs	r3, r3, #1
 8006838:	3b01      	subs	r3, #1
 800683a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800683c:	429a      	cmp	r2, r3
 800683e:	d107      	bne.n	8006850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800684a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800684c:	429a      	cmp	r2, r3
 800684e:	d001      	beq.n	8006854 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006850:	2301      	movs	r3, #1
 8006852:	e000      	b.n	8006856 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006854:	2300      	movs	r3, #0
}
 8006856:	4618      	mov	r0, r3
 8006858:	3718      	adds	r7, #24
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	40023800 	.word	0x40023800

08006864 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b084      	sub	sp, #16
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d101      	bne.n	8006878 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	e0cc      	b.n	8006a12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006878:	4b68      	ldr	r3, [pc, #416]	; (8006a1c <HAL_RCC_ClockConfig+0x1b8>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f003 0307 	and.w	r3, r3, #7
 8006880:	683a      	ldr	r2, [r7, #0]
 8006882:	429a      	cmp	r2, r3
 8006884:	d90c      	bls.n	80068a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006886:	4b65      	ldr	r3, [pc, #404]	; (8006a1c <HAL_RCC_ClockConfig+0x1b8>)
 8006888:	683a      	ldr	r2, [r7, #0]
 800688a:	b2d2      	uxtb	r2, r2
 800688c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800688e:	4b63      	ldr	r3, [pc, #396]	; (8006a1c <HAL_RCC_ClockConfig+0x1b8>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f003 0307 	and.w	r3, r3, #7
 8006896:	683a      	ldr	r2, [r7, #0]
 8006898:	429a      	cmp	r2, r3
 800689a:	d001      	beq.n	80068a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	e0b8      	b.n	8006a12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f003 0302 	and.w	r3, r3, #2
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d020      	beq.n	80068ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f003 0304 	and.w	r3, r3, #4
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d005      	beq.n	80068c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80068b8:	4b59      	ldr	r3, [pc, #356]	; (8006a20 <HAL_RCC_ClockConfig+0x1bc>)
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	4a58      	ldr	r2, [pc, #352]	; (8006a20 <HAL_RCC_ClockConfig+0x1bc>)
 80068be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80068c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f003 0308 	and.w	r3, r3, #8
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d005      	beq.n	80068dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80068d0:	4b53      	ldr	r3, [pc, #332]	; (8006a20 <HAL_RCC_ClockConfig+0x1bc>)
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	4a52      	ldr	r2, [pc, #328]	; (8006a20 <HAL_RCC_ClockConfig+0x1bc>)
 80068d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80068da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068dc:	4b50      	ldr	r3, [pc, #320]	; (8006a20 <HAL_RCC_ClockConfig+0x1bc>)
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	494d      	ldr	r1, [pc, #308]	; (8006a20 <HAL_RCC_ClockConfig+0x1bc>)
 80068ea:	4313      	orrs	r3, r2
 80068ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f003 0301 	and.w	r3, r3, #1
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d044      	beq.n	8006984 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	2b01      	cmp	r3, #1
 8006900:	d107      	bne.n	8006912 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006902:	4b47      	ldr	r3, [pc, #284]	; (8006a20 <HAL_RCC_ClockConfig+0x1bc>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800690a:	2b00      	cmp	r3, #0
 800690c:	d119      	bne.n	8006942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	e07f      	b.n	8006a12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	2b02      	cmp	r3, #2
 8006918:	d003      	beq.n	8006922 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800691e:	2b03      	cmp	r3, #3
 8006920:	d107      	bne.n	8006932 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006922:	4b3f      	ldr	r3, [pc, #252]	; (8006a20 <HAL_RCC_ClockConfig+0x1bc>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800692a:	2b00      	cmp	r3, #0
 800692c:	d109      	bne.n	8006942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e06f      	b.n	8006a12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006932:	4b3b      	ldr	r3, [pc, #236]	; (8006a20 <HAL_RCC_ClockConfig+0x1bc>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f003 0302 	and.w	r3, r3, #2
 800693a:	2b00      	cmp	r3, #0
 800693c:	d101      	bne.n	8006942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	e067      	b.n	8006a12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006942:	4b37      	ldr	r3, [pc, #220]	; (8006a20 <HAL_RCC_ClockConfig+0x1bc>)
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	f023 0203 	bic.w	r2, r3, #3
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	4934      	ldr	r1, [pc, #208]	; (8006a20 <HAL_RCC_ClockConfig+0x1bc>)
 8006950:	4313      	orrs	r3, r2
 8006952:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006954:	f7fb fa9a 	bl	8001e8c <HAL_GetTick>
 8006958:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800695a:	e00a      	b.n	8006972 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800695c:	f7fb fa96 	bl	8001e8c <HAL_GetTick>
 8006960:	4602      	mov	r2, r0
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	1ad3      	subs	r3, r2, r3
 8006966:	f241 3288 	movw	r2, #5000	; 0x1388
 800696a:	4293      	cmp	r3, r2
 800696c:	d901      	bls.n	8006972 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800696e:	2303      	movs	r3, #3
 8006970:	e04f      	b.n	8006a12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006972:	4b2b      	ldr	r3, [pc, #172]	; (8006a20 <HAL_RCC_ClockConfig+0x1bc>)
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	f003 020c 	and.w	r2, r3, #12
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	429a      	cmp	r2, r3
 8006982:	d1eb      	bne.n	800695c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006984:	4b25      	ldr	r3, [pc, #148]	; (8006a1c <HAL_RCC_ClockConfig+0x1b8>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f003 0307 	and.w	r3, r3, #7
 800698c:	683a      	ldr	r2, [r7, #0]
 800698e:	429a      	cmp	r2, r3
 8006990:	d20c      	bcs.n	80069ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006992:	4b22      	ldr	r3, [pc, #136]	; (8006a1c <HAL_RCC_ClockConfig+0x1b8>)
 8006994:	683a      	ldr	r2, [r7, #0]
 8006996:	b2d2      	uxtb	r2, r2
 8006998:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800699a:	4b20      	ldr	r3, [pc, #128]	; (8006a1c <HAL_RCC_ClockConfig+0x1b8>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f003 0307 	and.w	r3, r3, #7
 80069a2:	683a      	ldr	r2, [r7, #0]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d001      	beq.n	80069ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	e032      	b.n	8006a12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f003 0304 	and.w	r3, r3, #4
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d008      	beq.n	80069ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80069b8:	4b19      	ldr	r3, [pc, #100]	; (8006a20 <HAL_RCC_ClockConfig+0x1bc>)
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	68db      	ldr	r3, [r3, #12]
 80069c4:	4916      	ldr	r1, [pc, #88]	; (8006a20 <HAL_RCC_ClockConfig+0x1bc>)
 80069c6:	4313      	orrs	r3, r2
 80069c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 0308 	and.w	r3, r3, #8
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d009      	beq.n	80069ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80069d6:	4b12      	ldr	r3, [pc, #72]	; (8006a20 <HAL_RCC_ClockConfig+0x1bc>)
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	691b      	ldr	r3, [r3, #16]
 80069e2:	00db      	lsls	r3, r3, #3
 80069e4:	490e      	ldr	r1, [pc, #56]	; (8006a20 <HAL_RCC_ClockConfig+0x1bc>)
 80069e6:	4313      	orrs	r3, r2
 80069e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80069ea:	f000 f821 	bl	8006a30 <HAL_RCC_GetSysClockFreq>
 80069ee:	4602      	mov	r2, r0
 80069f0:	4b0b      	ldr	r3, [pc, #44]	; (8006a20 <HAL_RCC_ClockConfig+0x1bc>)
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	091b      	lsrs	r3, r3, #4
 80069f6:	f003 030f 	and.w	r3, r3, #15
 80069fa:	490a      	ldr	r1, [pc, #40]	; (8006a24 <HAL_RCC_ClockConfig+0x1c0>)
 80069fc:	5ccb      	ldrb	r3, [r1, r3]
 80069fe:	fa22 f303 	lsr.w	r3, r2, r3
 8006a02:	4a09      	ldr	r2, [pc, #36]	; (8006a28 <HAL_RCC_ClockConfig+0x1c4>)
 8006a04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006a06:	4b09      	ldr	r3, [pc, #36]	; (8006a2c <HAL_RCC_ClockConfig+0x1c8>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f7fb f9fa 	bl	8001e04 <HAL_InitTick>

  return HAL_OK;
 8006a10:	2300      	movs	r3, #0
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3710      	adds	r7, #16
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
 8006a1a:	bf00      	nop
 8006a1c:	40023c00 	.word	0x40023c00
 8006a20:	40023800 	.word	0x40023800
 8006a24:	0801215c 	.word	0x0801215c
 8006a28:	20000050 	.word	0x20000050
 8006a2c:	20000054 	.word	0x20000054

08006a30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a34:	b094      	sub	sp, #80	; 0x50
 8006a36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	647b      	str	r3, [r7, #68]	; 0x44
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a40:	2300      	movs	r3, #0
 8006a42:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006a44:	2300      	movs	r3, #0
 8006a46:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a48:	4b79      	ldr	r3, [pc, #484]	; (8006c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	f003 030c 	and.w	r3, r3, #12
 8006a50:	2b08      	cmp	r3, #8
 8006a52:	d00d      	beq.n	8006a70 <HAL_RCC_GetSysClockFreq+0x40>
 8006a54:	2b08      	cmp	r3, #8
 8006a56:	f200 80e1 	bhi.w	8006c1c <HAL_RCC_GetSysClockFreq+0x1ec>
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d002      	beq.n	8006a64 <HAL_RCC_GetSysClockFreq+0x34>
 8006a5e:	2b04      	cmp	r3, #4
 8006a60:	d003      	beq.n	8006a6a <HAL_RCC_GetSysClockFreq+0x3a>
 8006a62:	e0db      	b.n	8006c1c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006a64:	4b73      	ldr	r3, [pc, #460]	; (8006c34 <HAL_RCC_GetSysClockFreq+0x204>)
 8006a66:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006a68:	e0db      	b.n	8006c22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006a6a:	4b73      	ldr	r3, [pc, #460]	; (8006c38 <HAL_RCC_GetSysClockFreq+0x208>)
 8006a6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006a6e:	e0d8      	b.n	8006c22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006a70:	4b6f      	ldr	r3, [pc, #444]	; (8006c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a78:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006a7a:	4b6d      	ldr	r3, [pc, #436]	; (8006c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d063      	beq.n	8006b4e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a86:	4b6a      	ldr	r3, [pc, #424]	; (8006c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	099b      	lsrs	r3, r3, #6
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a90:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a98:	633b      	str	r3, [r7, #48]	; 0x30
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	637b      	str	r3, [r7, #52]	; 0x34
 8006a9e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006aa2:	4622      	mov	r2, r4
 8006aa4:	462b      	mov	r3, r5
 8006aa6:	f04f 0000 	mov.w	r0, #0
 8006aaa:	f04f 0100 	mov.w	r1, #0
 8006aae:	0159      	lsls	r1, r3, #5
 8006ab0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ab4:	0150      	lsls	r0, r2, #5
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	460b      	mov	r3, r1
 8006aba:	4621      	mov	r1, r4
 8006abc:	1a51      	subs	r1, r2, r1
 8006abe:	6139      	str	r1, [r7, #16]
 8006ac0:	4629      	mov	r1, r5
 8006ac2:	eb63 0301 	sbc.w	r3, r3, r1
 8006ac6:	617b      	str	r3, [r7, #20]
 8006ac8:	f04f 0200 	mov.w	r2, #0
 8006acc:	f04f 0300 	mov.w	r3, #0
 8006ad0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006ad4:	4659      	mov	r1, fp
 8006ad6:	018b      	lsls	r3, r1, #6
 8006ad8:	4651      	mov	r1, sl
 8006ada:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006ade:	4651      	mov	r1, sl
 8006ae0:	018a      	lsls	r2, r1, #6
 8006ae2:	4651      	mov	r1, sl
 8006ae4:	ebb2 0801 	subs.w	r8, r2, r1
 8006ae8:	4659      	mov	r1, fp
 8006aea:	eb63 0901 	sbc.w	r9, r3, r1
 8006aee:	f04f 0200 	mov.w	r2, #0
 8006af2:	f04f 0300 	mov.w	r3, #0
 8006af6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006afa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006afe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006b02:	4690      	mov	r8, r2
 8006b04:	4699      	mov	r9, r3
 8006b06:	4623      	mov	r3, r4
 8006b08:	eb18 0303 	adds.w	r3, r8, r3
 8006b0c:	60bb      	str	r3, [r7, #8]
 8006b0e:	462b      	mov	r3, r5
 8006b10:	eb49 0303 	adc.w	r3, r9, r3
 8006b14:	60fb      	str	r3, [r7, #12]
 8006b16:	f04f 0200 	mov.w	r2, #0
 8006b1a:	f04f 0300 	mov.w	r3, #0
 8006b1e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006b22:	4629      	mov	r1, r5
 8006b24:	024b      	lsls	r3, r1, #9
 8006b26:	4621      	mov	r1, r4
 8006b28:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006b2c:	4621      	mov	r1, r4
 8006b2e:	024a      	lsls	r2, r1, #9
 8006b30:	4610      	mov	r0, r2
 8006b32:	4619      	mov	r1, r3
 8006b34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b36:	2200      	movs	r2, #0
 8006b38:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006b40:	f7f9 fb9e 	bl	8000280 <__aeabi_uldivmod>
 8006b44:	4602      	mov	r2, r0
 8006b46:	460b      	mov	r3, r1
 8006b48:	4613      	mov	r3, r2
 8006b4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b4c:	e058      	b.n	8006c00 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b4e:	4b38      	ldr	r3, [pc, #224]	; (8006c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	099b      	lsrs	r3, r3, #6
 8006b54:	2200      	movs	r2, #0
 8006b56:	4618      	mov	r0, r3
 8006b58:	4611      	mov	r1, r2
 8006b5a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006b5e:	623b      	str	r3, [r7, #32]
 8006b60:	2300      	movs	r3, #0
 8006b62:	627b      	str	r3, [r7, #36]	; 0x24
 8006b64:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006b68:	4642      	mov	r2, r8
 8006b6a:	464b      	mov	r3, r9
 8006b6c:	f04f 0000 	mov.w	r0, #0
 8006b70:	f04f 0100 	mov.w	r1, #0
 8006b74:	0159      	lsls	r1, r3, #5
 8006b76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006b7a:	0150      	lsls	r0, r2, #5
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	460b      	mov	r3, r1
 8006b80:	4641      	mov	r1, r8
 8006b82:	ebb2 0a01 	subs.w	sl, r2, r1
 8006b86:	4649      	mov	r1, r9
 8006b88:	eb63 0b01 	sbc.w	fp, r3, r1
 8006b8c:	f04f 0200 	mov.w	r2, #0
 8006b90:	f04f 0300 	mov.w	r3, #0
 8006b94:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006b98:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006b9c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006ba0:	ebb2 040a 	subs.w	r4, r2, sl
 8006ba4:	eb63 050b 	sbc.w	r5, r3, fp
 8006ba8:	f04f 0200 	mov.w	r2, #0
 8006bac:	f04f 0300 	mov.w	r3, #0
 8006bb0:	00eb      	lsls	r3, r5, #3
 8006bb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006bb6:	00e2      	lsls	r2, r4, #3
 8006bb8:	4614      	mov	r4, r2
 8006bba:	461d      	mov	r5, r3
 8006bbc:	4643      	mov	r3, r8
 8006bbe:	18e3      	adds	r3, r4, r3
 8006bc0:	603b      	str	r3, [r7, #0]
 8006bc2:	464b      	mov	r3, r9
 8006bc4:	eb45 0303 	adc.w	r3, r5, r3
 8006bc8:	607b      	str	r3, [r7, #4]
 8006bca:	f04f 0200 	mov.w	r2, #0
 8006bce:	f04f 0300 	mov.w	r3, #0
 8006bd2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006bd6:	4629      	mov	r1, r5
 8006bd8:	028b      	lsls	r3, r1, #10
 8006bda:	4621      	mov	r1, r4
 8006bdc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006be0:	4621      	mov	r1, r4
 8006be2:	028a      	lsls	r2, r1, #10
 8006be4:	4610      	mov	r0, r2
 8006be6:	4619      	mov	r1, r3
 8006be8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bea:	2200      	movs	r2, #0
 8006bec:	61bb      	str	r3, [r7, #24]
 8006bee:	61fa      	str	r2, [r7, #28]
 8006bf0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006bf4:	f7f9 fb44 	bl	8000280 <__aeabi_uldivmod>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	460b      	mov	r3, r1
 8006bfc:	4613      	mov	r3, r2
 8006bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006c00:	4b0b      	ldr	r3, [pc, #44]	; (8006c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	0c1b      	lsrs	r3, r3, #16
 8006c06:	f003 0303 	and.w	r3, r3, #3
 8006c0a:	3301      	adds	r3, #1
 8006c0c:	005b      	lsls	r3, r3, #1
 8006c0e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006c10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006c12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006c1a:	e002      	b.n	8006c22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006c1c:	4b05      	ldr	r3, [pc, #20]	; (8006c34 <HAL_RCC_GetSysClockFreq+0x204>)
 8006c1e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006c20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006c22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3750      	adds	r7, #80	; 0x50
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c2e:	bf00      	nop
 8006c30:	40023800 	.word	0x40023800
 8006c34:	00f42400 	.word	0x00f42400
 8006c38:	007a1200 	.word	0x007a1200

08006c3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c40:	4b03      	ldr	r3, [pc, #12]	; (8006c50 <HAL_RCC_GetHCLKFreq+0x14>)
 8006c42:	681b      	ldr	r3, [r3, #0]
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr
 8006c4e:	bf00      	nop
 8006c50:	20000050 	.word	0x20000050

08006c54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006c58:	f7ff fff0 	bl	8006c3c <HAL_RCC_GetHCLKFreq>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	4b05      	ldr	r3, [pc, #20]	; (8006c74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	0a9b      	lsrs	r3, r3, #10
 8006c64:	f003 0307 	and.w	r3, r3, #7
 8006c68:	4903      	ldr	r1, [pc, #12]	; (8006c78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c6a:	5ccb      	ldrb	r3, [r1, r3]
 8006c6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	bd80      	pop	{r7, pc}
 8006c74:	40023800 	.word	0x40023800
 8006c78:	0801216c 	.word	0x0801216c

08006c7c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b086      	sub	sp, #24
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006c84:	2300      	movs	r3, #0
 8006c86:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f003 0301 	and.w	r3, r3, #1
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d105      	bne.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d035      	beq.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006ca4:	4b62      	ldr	r3, [pc, #392]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006caa:	f7fb f8ef 	bl	8001e8c <HAL_GetTick>
 8006cae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006cb0:	e008      	b.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006cb2:	f7fb f8eb 	bl	8001e8c <HAL_GetTick>
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	1ad3      	subs	r3, r2, r3
 8006cbc:	2b02      	cmp	r3, #2
 8006cbe:	d901      	bls.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006cc0:	2303      	movs	r3, #3
 8006cc2:	e0b0      	b.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006cc4:	4b5b      	ldr	r3, [pc, #364]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d1f0      	bne.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	019a      	lsls	r2, r3, #6
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	071b      	lsls	r3, r3, #28
 8006cdc:	4955      	ldr	r1, [pc, #340]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006ce4:	4b52      	ldr	r3, [pc, #328]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006cea:	f7fb f8cf 	bl	8001e8c <HAL_GetTick>
 8006cee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006cf0:	e008      	b.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006cf2:	f7fb f8cb 	bl	8001e8c <HAL_GetTick>
 8006cf6:	4602      	mov	r2, r0
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	1ad3      	subs	r3, r2, r3
 8006cfc:	2b02      	cmp	r3, #2
 8006cfe:	d901      	bls.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d00:	2303      	movs	r3, #3
 8006d02:	e090      	b.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006d04:	4b4b      	ldr	r3, [pc, #300]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d0f0      	beq.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f003 0302 	and.w	r3, r3, #2
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	f000 8083 	beq.w	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006d1e:	2300      	movs	r3, #0
 8006d20:	60fb      	str	r3, [r7, #12]
 8006d22:	4b44      	ldr	r3, [pc, #272]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d26:	4a43      	ldr	r2, [pc, #268]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d2c:	6413      	str	r3, [r2, #64]	; 0x40
 8006d2e:	4b41      	ldr	r3, [pc, #260]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d36:	60fb      	str	r3, [r7, #12]
 8006d38:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006d3a:	4b3f      	ldr	r3, [pc, #252]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a3e      	ldr	r2, [pc, #248]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006d40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d44:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006d46:	f7fb f8a1 	bl	8001e8c <HAL_GetTick>
 8006d4a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006d4c:	e008      	b.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006d4e:	f7fb f89d 	bl	8001e8c <HAL_GetTick>
 8006d52:	4602      	mov	r2, r0
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	1ad3      	subs	r3, r2, r3
 8006d58:	2b02      	cmp	r3, #2
 8006d5a:	d901      	bls.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006d5c:	2303      	movs	r3, #3
 8006d5e:	e062      	b.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006d60:	4b35      	ldr	r3, [pc, #212]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d0f0      	beq.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006d6c:	4b31      	ldr	r3, [pc, #196]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d74:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d02f      	beq.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d84:	693a      	ldr	r2, [r7, #16]
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d028      	beq.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006d8a:	4b2a      	ldr	r3, [pc, #168]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d92:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006d94:	4b29      	ldr	r3, [pc, #164]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006d96:	2201      	movs	r2, #1
 8006d98:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006d9a:	4b28      	ldr	r3, [pc, #160]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006da0:	4a24      	ldr	r2, [pc, #144]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006da6:	4b23      	ldr	r3, [pc, #140]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006daa:	f003 0301 	and.w	r3, r3, #1
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d114      	bne.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006db2:	f7fb f86b 	bl	8001e8c <HAL_GetTick>
 8006db6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006db8:	e00a      	b.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006dba:	f7fb f867 	bl	8001e8c <HAL_GetTick>
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	1ad3      	subs	r3, r2, r3
 8006dc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d901      	bls.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006dcc:	2303      	movs	r3, #3
 8006dce:	e02a      	b.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006dd0:	4b18      	ldr	r3, [pc, #96]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dd4:	f003 0302 	and.w	r3, r3, #2
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d0ee      	beq.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	68db      	ldr	r3, [r3, #12]
 8006de0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006de4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006de8:	d10d      	bne.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006dea:	4b12      	ldr	r3, [pc, #72]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	68db      	ldr	r3, [r3, #12]
 8006df6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006dfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dfe:	490d      	ldr	r1, [pc, #52]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e00:	4313      	orrs	r3, r2
 8006e02:	608b      	str	r3, [r1, #8]
 8006e04:	e005      	b.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006e06:	4b0b      	ldr	r3, [pc, #44]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	4a0a      	ldr	r2, [pc, #40]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e0c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006e10:	6093      	str	r3, [r2, #8]
 8006e12:	4b08      	ldr	r3, [pc, #32]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e14:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	68db      	ldr	r3, [r3, #12]
 8006e1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e1e:	4905      	ldr	r1, [pc, #20]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e20:	4313      	orrs	r3, r2
 8006e22:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006e24:	2300      	movs	r3, #0
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	3718      	adds	r7, #24
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}
 8006e2e:	bf00      	nop
 8006e30:	42470068 	.word	0x42470068
 8006e34:	40023800 	.word	0x40023800
 8006e38:	40007000 	.word	0x40007000
 8006e3c:	42470e40 	.word	0x42470e40

08006e40 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b085      	sub	sp, #20
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2203      	movs	r2, #3
 8006e4c:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8006e4e:	4b11      	ldr	r3, [pc, #68]	; (8006e94 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8006e50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e54:	099b      	lsrs	r3, r3, #6
 8006e56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006e5e:	4b0d      	ldr	r3, [pc, #52]	; (8006e94 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8006e60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e64:	0f1b      	lsrs	r3, r3, #28
 8006e66:	f003 0207 	and.w	r2, r3, #7
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	609a      	str	r2, [r3, #8]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8006e6e:	4b09      	ldr	r3, [pc, #36]	; (8006e94 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8006e76:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8006e78:	4b06      	ldr	r3, [pc, #24]	; (8006e94 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8006e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e7c:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	431a      	orrs	r2, r3
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	60da      	str	r2, [r3, #12]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 8006e88:	bf00      	nop
 8006e8a:	3714      	adds	r7, #20
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr
 8006e94:	40023800 	.word	0x40023800

08006e98 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b087      	sub	sp, #28
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006eac:	2300      	movs	r3, #0
 8006eae:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2b01      	cmp	r3, #1
 8006eb4:	d13e      	bne.n	8006f34 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006eb6:	4b23      	ldr	r3, [pc, #140]	; (8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ebe:	60fb      	str	r3, [r7, #12]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d005      	beq.n	8006ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d12f      	bne.n	8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006ecc:	4b1e      	ldr	r3, [pc, #120]	; (8006f48 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006ece:	617b      	str	r3, [r7, #20]
          break;
 8006ed0:	e02f      	b.n	8006f32 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006ed2:	4b1c      	ldr	r3, [pc, #112]	; (8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006eda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ede:	d108      	bne.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006ee0:	4b18      	ldr	r3, [pc, #96]	; (8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ee8:	4a18      	ldr	r2, [pc, #96]	; (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eee:	613b      	str	r3, [r7, #16]
 8006ef0:	e007      	b.n	8006f02 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006ef2:	4b14      	ldr	r3, [pc, #80]	; (8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006efa:	4a15      	ldr	r2, [pc, #84]	; (8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f00:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006f02:	4b10      	ldr	r3, [pc, #64]	; (8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006f04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f08:	099b      	lsrs	r3, r3, #6
 8006f0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	fb02 f303 	mul.w	r3, r2, r3
 8006f14:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006f16:	4b0b      	ldr	r3, [pc, #44]	; (8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006f18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f1c:	0f1b      	lsrs	r3, r3, #28
 8006f1e:	f003 0307 	and.w	r3, r3, #7
 8006f22:	68ba      	ldr	r2, [r7, #8]
 8006f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f28:	617b      	str	r3, [r7, #20]
          break;
 8006f2a:	e002      	b.n	8006f32 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	617b      	str	r3, [r7, #20]
          break;
 8006f30:	bf00      	nop
        }
      }
      break;
 8006f32:	bf00      	nop
    }
  }
  return frequency;
 8006f34:	697b      	ldr	r3, [r7, #20]
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	371c      	adds	r7, #28
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr
 8006f42:	bf00      	nop
 8006f44:	40023800 	.word	0x40023800
 8006f48:	00bb8000 	.word	0x00bb8000
 8006f4c:	007a1200 	.word	0x007a1200
 8006f50:	00f42400 	.word	0x00f42400

08006f54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b082      	sub	sp, #8
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d101      	bne.n	8006f66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
 8006f64:	e041      	b.n	8006fea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d106      	bne.n	8006f80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2200      	movs	r2, #0
 8006f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f7fa fd66 	bl	8001a4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2202      	movs	r2, #2
 8006f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681a      	ldr	r2, [r3, #0]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	3304      	adds	r3, #4
 8006f90:	4619      	mov	r1, r3
 8006f92:	4610      	mov	r0, r2
 8006f94:	f000 fa08 	bl	80073a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2201      	movs	r2, #1
 8006fac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006fe8:	2300      	movs	r3, #0
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3708      	adds	r7, #8
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
	...

08006ff4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b085      	sub	sp, #20
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007002:	b2db      	uxtb	r3, r3
 8007004:	2b01      	cmp	r3, #1
 8007006:	d001      	beq.n	800700c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007008:	2301      	movs	r3, #1
 800700a:	e04e      	b.n	80070aa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2202      	movs	r2, #2
 8007010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	68da      	ldr	r2, [r3, #12]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f042 0201 	orr.w	r2, r2, #1
 8007022:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a23      	ldr	r2, [pc, #140]	; (80070b8 <HAL_TIM_Base_Start_IT+0xc4>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d022      	beq.n	8007074 <HAL_TIM_Base_Start_IT+0x80>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007036:	d01d      	beq.n	8007074 <HAL_TIM_Base_Start_IT+0x80>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a1f      	ldr	r2, [pc, #124]	; (80070bc <HAL_TIM_Base_Start_IT+0xc8>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d018      	beq.n	8007074 <HAL_TIM_Base_Start_IT+0x80>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a1e      	ldr	r2, [pc, #120]	; (80070c0 <HAL_TIM_Base_Start_IT+0xcc>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d013      	beq.n	8007074 <HAL_TIM_Base_Start_IT+0x80>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a1c      	ldr	r2, [pc, #112]	; (80070c4 <HAL_TIM_Base_Start_IT+0xd0>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d00e      	beq.n	8007074 <HAL_TIM_Base_Start_IT+0x80>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a1b      	ldr	r2, [pc, #108]	; (80070c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d009      	beq.n	8007074 <HAL_TIM_Base_Start_IT+0x80>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a19      	ldr	r2, [pc, #100]	; (80070cc <HAL_TIM_Base_Start_IT+0xd8>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d004      	beq.n	8007074 <HAL_TIM_Base_Start_IT+0x80>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a18      	ldr	r2, [pc, #96]	; (80070d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d111      	bne.n	8007098 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	f003 0307 	and.w	r3, r3, #7
 800707e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2b06      	cmp	r3, #6
 8007084:	d010      	beq.n	80070a8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f042 0201 	orr.w	r2, r2, #1
 8007094:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007096:	e007      	b.n	80070a8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	681a      	ldr	r2, [r3, #0]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f042 0201 	orr.w	r2, r2, #1
 80070a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80070a8:	2300      	movs	r3, #0
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3714      	adds	r7, #20
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr
 80070b6:	bf00      	nop
 80070b8:	40010000 	.word	0x40010000
 80070bc:	40000400 	.word	0x40000400
 80070c0:	40000800 	.word	0x40000800
 80070c4:	40000c00 	.word	0x40000c00
 80070c8:	40010400 	.word	0x40010400
 80070cc:	40014000 	.word	0x40014000
 80070d0:	40001800 	.word	0x40001800

080070d4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	68da      	ldr	r2, [r3, #12]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f022 0201 	bic.w	r2, r2, #1
 80070ea:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	6a1a      	ldr	r2, [r3, #32]
 80070f2:	f241 1311 	movw	r3, #4369	; 0x1111
 80070f6:	4013      	ands	r3, r2
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d10f      	bne.n	800711c <HAL_TIM_Base_Stop_IT+0x48>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	6a1a      	ldr	r2, [r3, #32]
 8007102:	f240 4344 	movw	r3, #1092	; 0x444
 8007106:	4013      	ands	r3, r2
 8007108:	2b00      	cmp	r3, #0
 800710a:	d107      	bne.n	800711c <HAL_TIM_Base_Stop_IT+0x48>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	681a      	ldr	r2, [r3, #0]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f022 0201 	bic.w	r2, r2, #1
 800711a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2201      	movs	r2, #1
 8007120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007124:	2300      	movs	r3, #0
}
 8007126:	4618      	mov	r0, r3
 8007128:	370c      	adds	r7, #12
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr

08007132 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007132:	b580      	push	{r7, lr}
 8007134:	b082      	sub	sp, #8
 8007136:	af00      	add	r7, sp, #0
 8007138:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	691b      	ldr	r3, [r3, #16]
 8007140:	f003 0302 	and.w	r3, r3, #2
 8007144:	2b02      	cmp	r3, #2
 8007146:	d122      	bne.n	800718e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	68db      	ldr	r3, [r3, #12]
 800714e:	f003 0302 	and.w	r3, r3, #2
 8007152:	2b02      	cmp	r3, #2
 8007154:	d11b      	bne.n	800718e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f06f 0202 	mvn.w	r2, #2
 800715e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2201      	movs	r2, #1
 8007164:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	699b      	ldr	r3, [r3, #24]
 800716c:	f003 0303 	and.w	r3, r3, #3
 8007170:	2b00      	cmp	r3, #0
 8007172:	d003      	beq.n	800717c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f000 f8f8 	bl	800736a <HAL_TIM_IC_CaptureCallback>
 800717a:	e005      	b.n	8007188 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f000 f8ea 	bl	8007356 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 f8fb 	bl	800737e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2200      	movs	r2, #0
 800718c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	691b      	ldr	r3, [r3, #16]
 8007194:	f003 0304 	and.w	r3, r3, #4
 8007198:	2b04      	cmp	r3, #4
 800719a:	d122      	bne.n	80071e2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	68db      	ldr	r3, [r3, #12]
 80071a2:	f003 0304 	and.w	r3, r3, #4
 80071a6:	2b04      	cmp	r3, #4
 80071a8:	d11b      	bne.n	80071e2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f06f 0204 	mvn.w	r2, #4
 80071b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2202      	movs	r2, #2
 80071b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	699b      	ldr	r3, [r3, #24]
 80071c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d003      	beq.n	80071d0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 f8ce 	bl	800736a <HAL_TIM_IC_CaptureCallback>
 80071ce:	e005      	b.n	80071dc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 f8c0 	bl	8007356 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 f8d1 	bl	800737e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	691b      	ldr	r3, [r3, #16]
 80071e8:	f003 0308 	and.w	r3, r3, #8
 80071ec:	2b08      	cmp	r3, #8
 80071ee:	d122      	bne.n	8007236 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	68db      	ldr	r3, [r3, #12]
 80071f6:	f003 0308 	and.w	r3, r3, #8
 80071fa:	2b08      	cmp	r3, #8
 80071fc:	d11b      	bne.n	8007236 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f06f 0208 	mvn.w	r2, #8
 8007206:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2204      	movs	r2, #4
 800720c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	69db      	ldr	r3, [r3, #28]
 8007214:	f003 0303 	and.w	r3, r3, #3
 8007218:	2b00      	cmp	r3, #0
 800721a:	d003      	beq.n	8007224 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f000 f8a4 	bl	800736a <HAL_TIM_IC_CaptureCallback>
 8007222:	e005      	b.n	8007230 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f000 f896 	bl	8007356 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 f8a7 	bl	800737e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2200      	movs	r2, #0
 8007234:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	691b      	ldr	r3, [r3, #16]
 800723c:	f003 0310 	and.w	r3, r3, #16
 8007240:	2b10      	cmp	r3, #16
 8007242:	d122      	bne.n	800728a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	68db      	ldr	r3, [r3, #12]
 800724a:	f003 0310 	and.w	r3, r3, #16
 800724e:	2b10      	cmp	r3, #16
 8007250:	d11b      	bne.n	800728a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f06f 0210 	mvn.w	r2, #16
 800725a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2208      	movs	r2, #8
 8007260:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	69db      	ldr	r3, [r3, #28]
 8007268:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800726c:	2b00      	cmp	r3, #0
 800726e:	d003      	beq.n	8007278 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f000 f87a 	bl	800736a <HAL_TIM_IC_CaptureCallback>
 8007276:	e005      	b.n	8007284 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f000 f86c 	bl	8007356 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 f87d 	bl	800737e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2200      	movs	r2, #0
 8007288:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	691b      	ldr	r3, [r3, #16]
 8007290:	f003 0301 	and.w	r3, r3, #1
 8007294:	2b01      	cmp	r3, #1
 8007296:	d10e      	bne.n	80072b6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	68db      	ldr	r3, [r3, #12]
 800729e:	f003 0301 	and.w	r3, r3, #1
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d107      	bne.n	80072b6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f06f 0201 	mvn.w	r2, #1
 80072ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 f846 	bl	8007342 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	691b      	ldr	r3, [r3, #16]
 80072bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072c0:	2b80      	cmp	r3, #128	; 0x80
 80072c2:	d10e      	bne.n	80072e2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	68db      	ldr	r3, [r3, #12]
 80072ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072ce:	2b80      	cmp	r3, #128	; 0x80
 80072d0:	d107      	bne.n	80072e2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80072da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 f989 	bl	80075f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	691b      	ldr	r3, [r3, #16]
 80072e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072ec:	2b40      	cmp	r3, #64	; 0x40
 80072ee:	d10e      	bne.n	800730e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	68db      	ldr	r3, [r3, #12]
 80072f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072fa:	2b40      	cmp	r3, #64	; 0x40
 80072fc:	d107      	bne.n	800730e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007306:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f000 f842 	bl	8007392 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	691b      	ldr	r3, [r3, #16]
 8007314:	f003 0320 	and.w	r3, r3, #32
 8007318:	2b20      	cmp	r3, #32
 800731a:	d10e      	bne.n	800733a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	68db      	ldr	r3, [r3, #12]
 8007322:	f003 0320 	and.w	r3, r3, #32
 8007326:	2b20      	cmp	r3, #32
 8007328:	d107      	bne.n	800733a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f06f 0220 	mvn.w	r2, #32
 8007332:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f000 f953 	bl	80075e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800733a:	bf00      	nop
 800733c:	3708      	adds	r7, #8
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}

08007342 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007342:	b480      	push	{r7}
 8007344:	b083      	sub	sp, #12
 8007346:	af00      	add	r7, sp, #0
 8007348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800734a:	bf00      	nop
 800734c:	370c      	adds	r7, #12
 800734e:	46bd      	mov	sp, r7
 8007350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007354:	4770      	bx	lr

08007356 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007356:	b480      	push	{r7}
 8007358:	b083      	sub	sp, #12
 800735a:	af00      	add	r7, sp, #0
 800735c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800735e:	bf00      	nop
 8007360:	370c      	adds	r7, #12
 8007362:	46bd      	mov	sp, r7
 8007364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007368:	4770      	bx	lr

0800736a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800736a:	b480      	push	{r7}
 800736c:	b083      	sub	sp, #12
 800736e:	af00      	add	r7, sp, #0
 8007370:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007372:	bf00      	nop
 8007374:	370c      	adds	r7, #12
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr

0800737e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800737e:	b480      	push	{r7}
 8007380:	b083      	sub	sp, #12
 8007382:	af00      	add	r7, sp, #0
 8007384:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007386:	bf00      	nop
 8007388:	370c      	adds	r7, #12
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr

08007392 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007392:	b480      	push	{r7}
 8007394:	b083      	sub	sp, #12
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800739a:	bf00      	nop
 800739c:	370c      	adds	r7, #12
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr
	...

080073a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b085      	sub	sp, #20
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	4a40      	ldr	r2, [pc, #256]	; (80074bc <TIM_Base_SetConfig+0x114>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d013      	beq.n	80073e8 <TIM_Base_SetConfig+0x40>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073c6:	d00f      	beq.n	80073e8 <TIM_Base_SetConfig+0x40>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	4a3d      	ldr	r2, [pc, #244]	; (80074c0 <TIM_Base_SetConfig+0x118>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d00b      	beq.n	80073e8 <TIM_Base_SetConfig+0x40>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	4a3c      	ldr	r2, [pc, #240]	; (80074c4 <TIM_Base_SetConfig+0x11c>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d007      	beq.n	80073e8 <TIM_Base_SetConfig+0x40>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	4a3b      	ldr	r2, [pc, #236]	; (80074c8 <TIM_Base_SetConfig+0x120>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d003      	beq.n	80073e8 <TIM_Base_SetConfig+0x40>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	4a3a      	ldr	r2, [pc, #232]	; (80074cc <TIM_Base_SetConfig+0x124>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d108      	bne.n	80073fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	68fa      	ldr	r2, [r7, #12]
 80073f6:	4313      	orrs	r3, r2
 80073f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	4a2f      	ldr	r2, [pc, #188]	; (80074bc <TIM_Base_SetConfig+0x114>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d02b      	beq.n	800745a <TIM_Base_SetConfig+0xb2>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007408:	d027      	beq.n	800745a <TIM_Base_SetConfig+0xb2>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	4a2c      	ldr	r2, [pc, #176]	; (80074c0 <TIM_Base_SetConfig+0x118>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d023      	beq.n	800745a <TIM_Base_SetConfig+0xb2>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	4a2b      	ldr	r2, [pc, #172]	; (80074c4 <TIM_Base_SetConfig+0x11c>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d01f      	beq.n	800745a <TIM_Base_SetConfig+0xb2>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4a2a      	ldr	r2, [pc, #168]	; (80074c8 <TIM_Base_SetConfig+0x120>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d01b      	beq.n	800745a <TIM_Base_SetConfig+0xb2>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	4a29      	ldr	r2, [pc, #164]	; (80074cc <TIM_Base_SetConfig+0x124>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d017      	beq.n	800745a <TIM_Base_SetConfig+0xb2>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4a28      	ldr	r2, [pc, #160]	; (80074d0 <TIM_Base_SetConfig+0x128>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d013      	beq.n	800745a <TIM_Base_SetConfig+0xb2>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	4a27      	ldr	r2, [pc, #156]	; (80074d4 <TIM_Base_SetConfig+0x12c>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d00f      	beq.n	800745a <TIM_Base_SetConfig+0xb2>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	4a26      	ldr	r2, [pc, #152]	; (80074d8 <TIM_Base_SetConfig+0x130>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d00b      	beq.n	800745a <TIM_Base_SetConfig+0xb2>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	4a25      	ldr	r2, [pc, #148]	; (80074dc <TIM_Base_SetConfig+0x134>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d007      	beq.n	800745a <TIM_Base_SetConfig+0xb2>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	4a24      	ldr	r2, [pc, #144]	; (80074e0 <TIM_Base_SetConfig+0x138>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d003      	beq.n	800745a <TIM_Base_SetConfig+0xb2>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	4a23      	ldr	r2, [pc, #140]	; (80074e4 <TIM_Base_SetConfig+0x13c>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d108      	bne.n	800746c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007460:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	68db      	ldr	r3, [r3, #12]
 8007466:	68fa      	ldr	r2, [r7, #12]
 8007468:	4313      	orrs	r3, r2
 800746a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	695b      	ldr	r3, [r3, #20]
 8007476:	4313      	orrs	r3, r2
 8007478:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	68fa      	ldr	r2, [r7, #12]
 800747e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	689a      	ldr	r2, [r3, #8]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	4a0a      	ldr	r2, [pc, #40]	; (80074bc <TIM_Base_SetConfig+0x114>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d003      	beq.n	80074a0 <TIM_Base_SetConfig+0xf8>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	4a0c      	ldr	r2, [pc, #48]	; (80074cc <TIM_Base_SetConfig+0x124>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d103      	bne.n	80074a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	691a      	ldr	r2, [r3, #16]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2201      	movs	r2, #1
 80074ac:	615a      	str	r2, [r3, #20]
}
 80074ae:	bf00      	nop
 80074b0:	3714      	adds	r7, #20
 80074b2:	46bd      	mov	sp, r7
 80074b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b8:	4770      	bx	lr
 80074ba:	bf00      	nop
 80074bc:	40010000 	.word	0x40010000
 80074c0:	40000400 	.word	0x40000400
 80074c4:	40000800 	.word	0x40000800
 80074c8:	40000c00 	.word	0x40000c00
 80074cc:	40010400 	.word	0x40010400
 80074d0:	40014000 	.word	0x40014000
 80074d4:	40014400 	.word	0x40014400
 80074d8:	40014800 	.word	0x40014800
 80074dc:	40001800 	.word	0x40001800
 80074e0:	40001c00 	.word	0x40001c00
 80074e4:	40002000 	.word	0x40002000

080074e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b085      	sub	sp, #20
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	d101      	bne.n	8007500 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80074fc:	2302      	movs	r3, #2
 80074fe:	e05a      	b.n	80075b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2201      	movs	r2, #1
 8007504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2202      	movs	r2, #2
 800750c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007526:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	68fa      	ldr	r2, [r7, #12]
 800752e:	4313      	orrs	r3, r2
 8007530:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	68fa      	ldr	r2, [r7, #12]
 8007538:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a21      	ldr	r2, [pc, #132]	; (80075c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d022      	beq.n	800758a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800754c:	d01d      	beq.n	800758a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a1d      	ldr	r2, [pc, #116]	; (80075c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d018      	beq.n	800758a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a1b      	ldr	r2, [pc, #108]	; (80075cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d013      	beq.n	800758a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a1a      	ldr	r2, [pc, #104]	; (80075d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d00e      	beq.n	800758a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a18      	ldr	r2, [pc, #96]	; (80075d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d009      	beq.n	800758a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a17      	ldr	r2, [pc, #92]	; (80075d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d004      	beq.n	800758a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a15      	ldr	r2, [pc, #84]	; (80075dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d10c      	bne.n	80075a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007590:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	68ba      	ldr	r2, [r7, #8]
 8007598:	4313      	orrs	r3, r2
 800759a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	68ba      	ldr	r2, [r7, #8]
 80075a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2201      	movs	r2, #1
 80075a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2200      	movs	r2, #0
 80075b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075b4:	2300      	movs	r3, #0
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3714      	adds	r7, #20
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr
 80075c2:	bf00      	nop
 80075c4:	40010000 	.word	0x40010000
 80075c8:	40000400 	.word	0x40000400
 80075cc:	40000800 	.word	0x40000800
 80075d0:	40000c00 	.word	0x40000c00
 80075d4:	40010400 	.word	0x40010400
 80075d8:	40014000 	.word	0x40014000
 80075dc:	40001800 	.word	0x40001800

080075e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b083      	sub	sp, #12
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80075e8:	bf00      	nop
 80075ea:	370c      	adds	r7, #12
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr

080075f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80075fc:	bf00      	nop
 80075fe:	370c      	adds	r7, #12
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr

08007608 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007608:	b084      	sub	sp, #16
 800760a:	b580      	push	{r7, lr}
 800760c:	b084      	sub	sp, #16
 800760e:	af00      	add	r7, sp, #0
 8007610:	6078      	str	r0, [r7, #4]
 8007612:	f107 001c 	add.w	r0, r7, #28
 8007616:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800761a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800761c:	2b01      	cmp	r3, #1
 800761e:	d122      	bne.n	8007666 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007624:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	68db      	ldr	r3, [r3, #12]
 8007630:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007634:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	68db      	ldr	r3, [r3, #12]
 8007640:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007648:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800764a:	2b01      	cmp	r3, #1
 800764c:	d105      	bne.n	800765a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	68db      	ldr	r3, [r3, #12]
 8007652:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f000 f9c0 	bl	80079e0 <USB_CoreReset>
 8007660:	4603      	mov	r3, r0
 8007662:	73fb      	strb	r3, [r7, #15]
 8007664:	e01a      	b.n	800769c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	68db      	ldr	r3, [r3, #12]
 800766a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 f9b4 	bl	80079e0 <USB_CoreReset>
 8007678:	4603      	mov	r3, r0
 800767a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800767c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800767e:	2b00      	cmp	r3, #0
 8007680:	d106      	bne.n	8007690 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007686:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	639a      	str	r2, [r3, #56]	; 0x38
 800768e:	e005      	b.n	800769c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007694:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800769c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800769e:	2b01      	cmp	r3, #1
 80076a0:	d10b      	bne.n	80076ba <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	689b      	ldr	r3, [r3, #8]
 80076a6:	f043 0206 	orr.w	r2, r3, #6
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	689b      	ldr	r3, [r3, #8]
 80076b2:	f043 0220 	orr.w	r2, r3, #32
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80076ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3710      	adds	r7, #16
 80076c0:	46bd      	mov	sp, r7
 80076c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80076c6:	b004      	add	sp, #16
 80076c8:	4770      	bx	lr

080076ca <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80076ca:	b480      	push	{r7}
 80076cc:	b083      	sub	sp, #12
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	f043 0201 	orr.w	r2, r3, #1
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80076de:	2300      	movs	r3, #0
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	370c      	adds	r7, #12
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr

080076ec <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b083      	sub	sp, #12
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	f023 0201 	bic.w	r2, r3, #1
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007700:	2300      	movs	r3, #0
}
 8007702:	4618      	mov	r0, r3
 8007704:	370c      	adds	r7, #12
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr

0800770e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800770e:	b580      	push	{r7, lr}
 8007710:	b084      	sub	sp, #16
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
 8007716:	460b      	mov	r3, r1
 8007718:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800771a:	2300      	movs	r3, #0
 800771c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	68db      	ldr	r3, [r3, #12]
 8007722:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800772a:	78fb      	ldrb	r3, [r7, #3]
 800772c:	2b01      	cmp	r3, #1
 800772e:	d115      	bne.n	800775c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	68db      	ldr	r3, [r3, #12]
 8007734:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800773c:	2001      	movs	r0, #1
 800773e:	f7fa fbb1 	bl	8001ea4 <HAL_Delay>
      ms++;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	3301      	adds	r3, #1
 8007746:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 f93a 	bl	80079c2 <USB_GetMode>
 800774e:	4603      	mov	r3, r0
 8007750:	2b01      	cmp	r3, #1
 8007752:	d01e      	beq.n	8007792 <USB_SetCurrentMode+0x84>
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2b31      	cmp	r3, #49	; 0x31
 8007758:	d9f0      	bls.n	800773c <USB_SetCurrentMode+0x2e>
 800775a:	e01a      	b.n	8007792 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800775c:	78fb      	ldrb	r3, [r7, #3]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d115      	bne.n	800778e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	68db      	ldr	r3, [r3, #12]
 8007766:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800776e:	2001      	movs	r0, #1
 8007770:	f7fa fb98 	bl	8001ea4 <HAL_Delay>
      ms++;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	3301      	adds	r3, #1
 8007778:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 f921 	bl	80079c2 <USB_GetMode>
 8007780:	4603      	mov	r3, r0
 8007782:	2b00      	cmp	r3, #0
 8007784:	d005      	beq.n	8007792 <USB_SetCurrentMode+0x84>
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2b31      	cmp	r3, #49	; 0x31
 800778a:	d9f0      	bls.n	800776e <USB_SetCurrentMode+0x60>
 800778c:	e001      	b.n	8007792 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	e005      	b.n	800779e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2b32      	cmp	r3, #50	; 0x32
 8007796:	d101      	bne.n	800779c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007798:	2301      	movs	r3, #1
 800779a:	e000      	b.n	800779e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800779c:	2300      	movs	r3, #0
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3710      	adds	r7, #16
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
	...

080077a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b085      	sub	sp, #20
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80077b2:	2300      	movs	r3, #0
 80077b4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	3301      	adds	r3, #1
 80077ba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	4a13      	ldr	r2, [pc, #76]	; (800780c <USB_FlushTxFifo+0x64>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d901      	bls.n	80077c8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80077c4:	2303      	movs	r3, #3
 80077c6:	e01b      	b.n	8007800 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	691b      	ldr	r3, [r3, #16]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	daf2      	bge.n	80077b6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80077d0:	2300      	movs	r3, #0
 80077d2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	019b      	lsls	r3, r3, #6
 80077d8:	f043 0220 	orr.w	r2, r3, #32
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	3301      	adds	r3, #1
 80077e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	4a08      	ldr	r2, [pc, #32]	; (800780c <USB_FlushTxFifo+0x64>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d901      	bls.n	80077f2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80077ee:	2303      	movs	r3, #3
 80077f0:	e006      	b.n	8007800 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	691b      	ldr	r3, [r3, #16]
 80077f6:	f003 0320 	and.w	r3, r3, #32
 80077fa:	2b20      	cmp	r3, #32
 80077fc:	d0f0      	beq.n	80077e0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80077fe:	2300      	movs	r3, #0
}
 8007800:	4618      	mov	r0, r3
 8007802:	3714      	adds	r7, #20
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr
 800780c:	00030d40 	.word	0x00030d40

08007810 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007810:	b480      	push	{r7}
 8007812:	b085      	sub	sp, #20
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007818:	2300      	movs	r3, #0
 800781a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	3301      	adds	r3, #1
 8007820:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	4a11      	ldr	r2, [pc, #68]	; (800786c <USB_FlushRxFifo+0x5c>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d901      	bls.n	800782e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800782a:	2303      	movs	r3, #3
 800782c:	e018      	b.n	8007860 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	691b      	ldr	r3, [r3, #16]
 8007832:	2b00      	cmp	r3, #0
 8007834:	daf2      	bge.n	800781c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007836:	2300      	movs	r3, #0
 8007838:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2210      	movs	r2, #16
 800783e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	3301      	adds	r3, #1
 8007844:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	4a08      	ldr	r2, [pc, #32]	; (800786c <USB_FlushRxFifo+0x5c>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d901      	bls.n	8007852 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800784e:	2303      	movs	r3, #3
 8007850:	e006      	b.n	8007860 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	691b      	ldr	r3, [r3, #16]
 8007856:	f003 0310 	and.w	r3, r3, #16
 800785a:	2b10      	cmp	r3, #16
 800785c:	d0f0      	beq.n	8007840 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800785e:	2300      	movs	r3, #0
}
 8007860:	4618      	mov	r0, r3
 8007862:	3714      	adds	r7, #20
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr
 800786c:	00030d40 	.word	0x00030d40

08007870 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007870:	b480      	push	{r7}
 8007872:	b089      	sub	sp, #36	; 0x24
 8007874:	af00      	add	r7, sp, #0
 8007876:	60f8      	str	r0, [r7, #12]
 8007878:	60b9      	str	r1, [r7, #8]
 800787a:	4611      	mov	r1, r2
 800787c:	461a      	mov	r2, r3
 800787e:	460b      	mov	r3, r1
 8007880:	71fb      	strb	r3, [r7, #7]
 8007882:	4613      	mov	r3, r2
 8007884:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800788e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007892:	2b00      	cmp	r3, #0
 8007894:	d123      	bne.n	80078de <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007896:	88bb      	ldrh	r3, [r7, #4]
 8007898:	3303      	adds	r3, #3
 800789a:	089b      	lsrs	r3, r3, #2
 800789c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800789e:	2300      	movs	r3, #0
 80078a0:	61bb      	str	r3, [r7, #24]
 80078a2:	e018      	b.n	80078d6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80078a4:	79fb      	ldrb	r3, [r7, #7]
 80078a6:	031a      	lsls	r2, r3, #12
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	4413      	add	r3, r2
 80078ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078b0:	461a      	mov	r2, r3
 80078b2:	69fb      	ldr	r3, [r7, #28]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80078b8:	69fb      	ldr	r3, [r7, #28]
 80078ba:	3301      	adds	r3, #1
 80078bc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80078be:	69fb      	ldr	r3, [r7, #28]
 80078c0:	3301      	adds	r3, #1
 80078c2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80078c4:	69fb      	ldr	r3, [r7, #28]
 80078c6:	3301      	adds	r3, #1
 80078c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80078ca:	69fb      	ldr	r3, [r7, #28]
 80078cc:	3301      	adds	r3, #1
 80078ce:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80078d0:	69bb      	ldr	r3, [r7, #24]
 80078d2:	3301      	adds	r3, #1
 80078d4:	61bb      	str	r3, [r7, #24]
 80078d6:	69ba      	ldr	r2, [r7, #24]
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	429a      	cmp	r2, r3
 80078dc:	d3e2      	bcc.n	80078a4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80078de:	2300      	movs	r3, #0
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3724      	adds	r7, #36	; 0x24
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr

080078ec <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b08b      	sub	sp, #44	; 0x2c
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	60f8      	str	r0, [r7, #12]
 80078f4:	60b9      	str	r1, [r7, #8]
 80078f6:	4613      	mov	r3, r2
 80078f8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007902:	88fb      	ldrh	r3, [r7, #6]
 8007904:	089b      	lsrs	r3, r3, #2
 8007906:	b29b      	uxth	r3, r3
 8007908:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800790a:	88fb      	ldrh	r3, [r7, #6]
 800790c:	f003 0303 	and.w	r3, r3, #3
 8007910:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007912:	2300      	movs	r3, #0
 8007914:	623b      	str	r3, [r7, #32]
 8007916:	e014      	b.n	8007942 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007918:	69bb      	ldr	r3, [r7, #24]
 800791a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007922:	601a      	str	r2, [r3, #0]
    pDest++;
 8007924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007926:	3301      	adds	r3, #1
 8007928:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800792a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800792c:	3301      	adds	r3, #1
 800792e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007932:	3301      	adds	r3, #1
 8007934:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007938:	3301      	adds	r3, #1
 800793a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800793c:	6a3b      	ldr	r3, [r7, #32]
 800793e:	3301      	adds	r3, #1
 8007940:	623b      	str	r3, [r7, #32]
 8007942:	6a3a      	ldr	r2, [r7, #32]
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	429a      	cmp	r2, r3
 8007948:	d3e6      	bcc.n	8007918 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800794a:	8bfb      	ldrh	r3, [r7, #30]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d01e      	beq.n	800798e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007950:	2300      	movs	r3, #0
 8007952:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007954:	69bb      	ldr	r3, [r7, #24]
 8007956:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800795a:	461a      	mov	r2, r3
 800795c:	f107 0310 	add.w	r3, r7, #16
 8007960:	6812      	ldr	r2, [r2, #0]
 8007962:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007964:	693a      	ldr	r2, [r7, #16]
 8007966:	6a3b      	ldr	r3, [r7, #32]
 8007968:	b2db      	uxtb	r3, r3
 800796a:	00db      	lsls	r3, r3, #3
 800796c:	fa22 f303 	lsr.w	r3, r2, r3
 8007970:	b2da      	uxtb	r2, r3
 8007972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007974:	701a      	strb	r2, [r3, #0]
      i++;
 8007976:	6a3b      	ldr	r3, [r7, #32]
 8007978:	3301      	adds	r3, #1
 800797a:	623b      	str	r3, [r7, #32]
      pDest++;
 800797c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797e:	3301      	adds	r3, #1
 8007980:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007982:	8bfb      	ldrh	r3, [r7, #30]
 8007984:	3b01      	subs	r3, #1
 8007986:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007988:	8bfb      	ldrh	r3, [r7, #30]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d1ea      	bne.n	8007964 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800798e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007990:	4618      	mov	r0, r3
 8007992:	372c      	adds	r7, #44	; 0x2c
 8007994:	46bd      	mov	sp, r7
 8007996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799a:	4770      	bx	lr

0800799c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800799c:	b480      	push	{r7}
 800799e:	b085      	sub	sp, #20
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	695b      	ldr	r3, [r3, #20]
 80079a8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	699b      	ldr	r3, [r3, #24]
 80079ae:	68fa      	ldr	r2, [r7, #12]
 80079b0:	4013      	ands	r3, r2
 80079b2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80079b4:	68fb      	ldr	r3, [r7, #12]
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3714      	adds	r7, #20
 80079ba:	46bd      	mov	sp, r7
 80079bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c0:	4770      	bx	lr

080079c2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80079c2:	b480      	push	{r7}
 80079c4:	b083      	sub	sp, #12
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	695b      	ldr	r3, [r3, #20]
 80079ce:	f003 0301 	and.w	r3, r3, #1
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	370c      	adds	r7, #12
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr
	...

080079e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b085      	sub	sp, #20
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80079e8:	2300      	movs	r3, #0
 80079ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	3301      	adds	r3, #1
 80079f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	4a13      	ldr	r2, [pc, #76]	; (8007a44 <USB_CoreReset+0x64>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d901      	bls.n	80079fe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80079fa:	2303      	movs	r3, #3
 80079fc:	e01b      	b.n	8007a36 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	691b      	ldr	r3, [r3, #16]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	daf2      	bge.n	80079ec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007a06:	2300      	movs	r3, #0
 8007a08:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	691b      	ldr	r3, [r3, #16]
 8007a0e:	f043 0201 	orr.w	r2, r3, #1
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	3301      	adds	r3, #1
 8007a1a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	4a09      	ldr	r2, [pc, #36]	; (8007a44 <USB_CoreReset+0x64>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d901      	bls.n	8007a28 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007a24:	2303      	movs	r3, #3
 8007a26:	e006      	b.n	8007a36 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	691b      	ldr	r3, [r3, #16]
 8007a2c:	f003 0301 	and.w	r3, r3, #1
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d0f0      	beq.n	8007a16 <USB_CoreReset+0x36>

  return HAL_OK;
 8007a34:	2300      	movs	r3, #0
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3714      	adds	r7, #20
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr
 8007a42:	bf00      	nop
 8007a44:	00030d40 	.word	0x00030d40

08007a48 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007a48:	b084      	sub	sp, #16
 8007a4a:	b580      	push	{r7, lr}
 8007a4c:	b086      	sub	sp, #24
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	6078      	str	r0, [r7, #4]
 8007a52:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007a56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007a68:	461a      	mov	r2, r3
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a72:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a7e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a8a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d018      	beq.n	8007ad0 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d10a      	bne.n	8007aba <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	68fa      	ldr	r2, [r7, #12]
 8007aae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007ab2:	f043 0304 	orr.w	r3, r3, #4
 8007ab6:	6013      	str	r3, [r2, #0]
 8007ab8:	e014      	b.n	8007ae4 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	68fa      	ldr	r2, [r7, #12]
 8007ac4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007ac8:	f023 0304 	bic.w	r3, r3, #4
 8007acc:	6013      	str	r3, [r2, #0]
 8007ace:	e009      	b.n	8007ae4 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	68fa      	ldr	r2, [r7, #12]
 8007ada:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007ade:	f023 0304 	bic.w	r3, r3, #4
 8007ae2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007ae4:	2110      	movs	r1, #16
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f7ff fe5e 	bl	80077a8 <USB_FlushTxFifo>
 8007aec:	4603      	mov	r3, r0
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d001      	beq.n	8007af6 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8007af2:	2301      	movs	r3, #1
 8007af4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f7ff fe8a 	bl	8007810 <USB_FlushRxFifo>
 8007afc:	4603      	mov	r3, r0
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d001      	beq.n	8007b06 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8007b02:	2301      	movs	r3, #1
 8007b04:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007b06:	2300      	movs	r3, #0
 8007b08:	613b      	str	r3, [r7, #16]
 8007b0a:	e015      	b.n	8007b38 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	015a      	lsls	r2, r3, #5
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	4413      	add	r3, r2
 8007b14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b18:	461a      	mov	r2, r3
 8007b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8007b1e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	015a      	lsls	r2, r3, #5
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	4413      	add	r3, r2
 8007b28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b2c:	461a      	mov	r2, r3
 8007b2e:	2300      	movs	r3, #0
 8007b30:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	3301      	adds	r3, #1
 8007b36:	613b      	str	r3, [r7, #16]
 8007b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b3a:	693a      	ldr	r2, [r7, #16]
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d3e5      	bcc.n	8007b0c <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2200      	movs	r2, #0
 8007b44:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f04f 32ff 	mov.w	r2, #4294967295
 8007b4c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d00b      	beq.n	8007b72 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b60:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	4a13      	ldr	r2, [pc, #76]	; (8007bb4 <USB_HostInit+0x16c>)
 8007b66:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	4a13      	ldr	r2, [pc, #76]	; (8007bb8 <USB_HostInit+0x170>)
 8007b6c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007b70:	e009      	b.n	8007b86 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2280      	movs	r2, #128	; 0x80
 8007b76:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	4a10      	ldr	r2, [pc, #64]	; (8007bbc <USB_HostInit+0x174>)
 8007b7c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	4a0f      	ldr	r2, [pc, #60]	; (8007bc0 <USB_HostInit+0x178>)
 8007b82:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d105      	bne.n	8007b98 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	699b      	ldr	r3, [r3, #24]
 8007b90:	f043 0210 	orr.w	r2, r3, #16
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	699a      	ldr	r2, [r3, #24]
 8007b9c:	4b09      	ldr	r3, [pc, #36]	; (8007bc4 <USB_HostInit+0x17c>)
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007ba4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3718      	adds	r7, #24
 8007baa:	46bd      	mov	sp, r7
 8007bac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007bb0:	b004      	add	sp, #16
 8007bb2:	4770      	bx	lr
 8007bb4:	01000200 	.word	0x01000200
 8007bb8:	00e00300 	.word	0x00e00300
 8007bbc:	00600080 	.word	0x00600080
 8007bc0:	004000e0 	.word	0x004000e0
 8007bc4:	a3200008 	.word	0xa3200008

08007bc8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b085      	sub	sp, #20
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	460b      	mov	r3, r1
 8007bd2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	68fa      	ldr	r2, [r7, #12]
 8007be2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007be6:	f023 0303 	bic.w	r3, r3, #3
 8007bea:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007bf2:	681a      	ldr	r2, [r3, #0]
 8007bf4:	78fb      	ldrb	r3, [r7, #3]
 8007bf6:	f003 0303 	and.w	r3, r3, #3
 8007bfa:	68f9      	ldr	r1, [r7, #12]
 8007bfc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007c00:	4313      	orrs	r3, r2
 8007c02:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007c04:	78fb      	ldrb	r3, [r7, #3]
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d107      	bne.n	8007c1a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c10:	461a      	mov	r2, r3
 8007c12:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007c16:	6053      	str	r3, [r2, #4]
 8007c18:	e009      	b.n	8007c2e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007c1a:	78fb      	ldrb	r3, [r7, #3]
 8007c1c:	2b02      	cmp	r3, #2
 8007c1e:	d106      	bne.n	8007c2e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c26:	461a      	mov	r2, r3
 8007c28:	f241 7370 	movw	r3, #6000	; 0x1770
 8007c2c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8007c2e:	2300      	movs	r3, #0
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3714      	adds	r7, #20
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr

08007c3c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b084      	sub	sp, #16
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007c5c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	68fa      	ldr	r2, [r7, #12]
 8007c62:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007c66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c6a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007c6c:	2064      	movs	r0, #100	; 0x64
 8007c6e:	f7fa f919 	bl	8001ea4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	68fa      	ldr	r2, [r7, #12]
 8007c76:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007c7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c7e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007c80:	200a      	movs	r0, #10
 8007c82:	f7fa f90f 	bl	8001ea4 <HAL_Delay>

  return HAL_OK;
 8007c86:	2300      	movs	r3, #0
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3710      	adds	r7, #16
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b085      	sub	sp, #20
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	460b      	mov	r3, r1
 8007c9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007cb4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d109      	bne.n	8007cd4 <USB_DriveVbus+0x44>
 8007cc0:	78fb      	ldrb	r3, [r7, #3]
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d106      	bne.n	8007cd4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	68fa      	ldr	r2, [r7, #12]
 8007cca:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007cce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007cd2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007cda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cde:	d109      	bne.n	8007cf4 <USB_DriveVbus+0x64>
 8007ce0:	78fb      	ldrb	r3, [r7, #3]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d106      	bne.n	8007cf4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	68fa      	ldr	r2, [r7, #12]
 8007cea:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007cee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007cf2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007cf4:	2300      	movs	r3, #0
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3714      	adds	r7, #20
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d00:	4770      	bx	lr

08007d02 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007d02:	b480      	push	{r7}
 8007d04:	b085      	sub	sp, #20
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	0c5b      	lsrs	r3, r3, #17
 8007d20:	f003 0303 	and.w	r3, r3, #3
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3714      	adds	r7, #20
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr

08007d30 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b085      	sub	sp, #20
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d42:	689b      	ldr	r3, [r3, #8]
 8007d44:	b29b      	uxth	r3, r3
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3714      	adds	r7, #20
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d50:	4770      	bx	lr
	...

08007d54 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b088      	sub	sp, #32
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	4608      	mov	r0, r1
 8007d5e:	4611      	mov	r1, r2
 8007d60:	461a      	mov	r2, r3
 8007d62:	4603      	mov	r3, r0
 8007d64:	70fb      	strb	r3, [r7, #3]
 8007d66:	460b      	mov	r3, r1
 8007d68:	70bb      	strb	r3, [r7, #2]
 8007d6a:	4613      	mov	r3, r2
 8007d6c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8007d76:	78fb      	ldrb	r3, [r7, #3]
 8007d78:	015a      	lsls	r2, r3, #5
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	4413      	add	r3, r2
 8007d7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d82:	461a      	mov	r2, r3
 8007d84:	f04f 33ff 	mov.w	r3, #4294967295
 8007d88:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007d8a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007d8e:	2b03      	cmp	r3, #3
 8007d90:	d87e      	bhi.n	8007e90 <USB_HC_Init+0x13c>
 8007d92:	a201      	add	r2, pc, #4	; (adr r2, 8007d98 <USB_HC_Init+0x44>)
 8007d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d98:	08007da9 	.word	0x08007da9
 8007d9c:	08007e53 	.word	0x08007e53
 8007da0:	08007da9 	.word	0x08007da9
 8007da4:	08007e15 	.word	0x08007e15
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007da8:	78fb      	ldrb	r3, [r7, #3]
 8007daa:	015a      	lsls	r2, r3, #5
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	4413      	add	r3, r2
 8007db0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007db4:	461a      	mov	r2, r3
 8007db6:	f240 439d 	movw	r3, #1181	; 0x49d
 8007dba:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007dbc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	da10      	bge.n	8007de6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007dc4:	78fb      	ldrb	r3, [r7, #3]
 8007dc6:	015a      	lsls	r2, r3, #5
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	4413      	add	r3, r2
 8007dcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dd0:	68db      	ldr	r3, [r3, #12]
 8007dd2:	78fa      	ldrb	r2, [r7, #3]
 8007dd4:	0151      	lsls	r1, r2, #5
 8007dd6:	693a      	ldr	r2, [r7, #16]
 8007dd8:	440a      	add	r2, r1
 8007dda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007dde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007de2:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8007de4:	e057      	b.n	8007e96 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d051      	beq.n	8007e96 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007df2:	78fb      	ldrb	r3, [r7, #3]
 8007df4:	015a      	lsls	r2, r3, #5
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	4413      	add	r3, r2
 8007dfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dfe:	68db      	ldr	r3, [r3, #12]
 8007e00:	78fa      	ldrb	r2, [r7, #3]
 8007e02:	0151      	lsls	r1, r2, #5
 8007e04:	693a      	ldr	r2, [r7, #16]
 8007e06:	440a      	add	r2, r1
 8007e08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e0c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007e10:	60d3      	str	r3, [r2, #12]
      break;
 8007e12:	e040      	b.n	8007e96 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007e14:	78fb      	ldrb	r3, [r7, #3]
 8007e16:	015a      	lsls	r2, r3, #5
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	4413      	add	r3, r2
 8007e1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e20:	461a      	mov	r2, r3
 8007e22:	f240 639d 	movw	r3, #1693	; 0x69d
 8007e26:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007e28:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	da34      	bge.n	8007e9a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007e30:	78fb      	ldrb	r3, [r7, #3]
 8007e32:	015a      	lsls	r2, r3, #5
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	4413      	add	r3, r2
 8007e38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e3c:	68db      	ldr	r3, [r3, #12]
 8007e3e:	78fa      	ldrb	r2, [r7, #3]
 8007e40:	0151      	lsls	r1, r2, #5
 8007e42:	693a      	ldr	r2, [r7, #16]
 8007e44:	440a      	add	r2, r1
 8007e46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e4e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007e50:	e023      	b.n	8007e9a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007e52:	78fb      	ldrb	r3, [r7, #3]
 8007e54:	015a      	lsls	r2, r3, #5
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	4413      	add	r3, r2
 8007e5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e5e:	461a      	mov	r2, r3
 8007e60:	f240 2325 	movw	r3, #549	; 0x225
 8007e64:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007e66:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	da17      	bge.n	8007e9e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007e6e:	78fb      	ldrb	r3, [r7, #3]
 8007e70:	015a      	lsls	r2, r3, #5
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	4413      	add	r3, r2
 8007e76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e7a:	68db      	ldr	r3, [r3, #12]
 8007e7c:	78fa      	ldrb	r2, [r7, #3]
 8007e7e:	0151      	lsls	r1, r2, #5
 8007e80:	693a      	ldr	r2, [r7, #16]
 8007e82:	440a      	add	r2, r1
 8007e84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e88:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007e8c:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007e8e:	e006      	b.n	8007e9e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8007e90:	2301      	movs	r3, #1
 8007e92:	77fb      	strb	r3, [r7, #31]
      break;
 8007e94:	e004      	b.n	8007ea0 <USB_HC_Init+0x14c>
      break;
 8007e96:	bf00      	nop
 8007e98:	e002      	b.n	8007ea0 <USB_HC_Init+0x14c>
      break;
 8007e9a:	bf00      	nop
 8007e9c:	e000      	b.n	8007ea0 <USB_HC_Init+0x14c>
      break;
 8007e9e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007ea0:	78fb      	ldrb	r3, [r7, #3]
 8007ea2:	015a      	lsls	r2, r3, #5
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	4413      	add	r3, r2
 8007ea8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007eac:	68db      	ldr	r3, [r3, #12]
 8007eae:	78fa      	ldrb	r2, [r7, #3]
 8007eb0:	0151      	lsls	r1, r2, #5
 8007eb2:	693a      	ldr	r2, [r7, #16]
 8007eb4:	440a      	add	r2, r1
 8007eb6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007eba:	f043 0302 	orr.w	r3, r3, #2
 8007ebe:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ec6:	699a      	ldr	r2, [r3, #24]
 8007ec8:	78fb      	ldrb	r3, [r7, #3]
 8007eca:	f003 030f 	and.w	r3, r3, #15
 8007ece:	2101      	movs	r1, #1
 8007ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8007ed4:	6939      	ldr	r1, [r7, #16]
 8007ed6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007eda:	4313      	orrs	r3, r2
 8007edc:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	699b      	ldr	r3, [r3, #24]
 8007ee2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007eea:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	da03      	bge.n	8007efa <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007ef2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ef6:	61bb      	str	r3, [r7, #24]
 8007ef8:	e001      	b.n	8007efe <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8007efa:	2300      	movs	r3, #0
 8007efc:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f7ff feff 	bl	8007d02 <USB_GetHostSpeed>
 8007f04:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007f06:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007f0a:	2b02      	cmp	r3, #2
 8007f0c:	d106      	bne.n	8007f1c <USB_HC_Init+0x1c8>
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2b02      	cmp	r3, #2
 8007f12:	d003      	beq.n	8007f1c <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007f14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007f18:	617b      	str	r3, [r7, #20]
 8007f1a:	e001      	b.n	8007f20 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007f20:	787b      	ldrb	r3, [r7, #1]
 8007f22:	059b      	lsls	r3, r3, #22
 8007f24:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007f28:	78bb      	ldrb	r3, [r7, #2]
 8007f2a:	02db      	lsls	r3, r3, #11
 8007f2c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007f30:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007f32:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007f36:	049b      	lsls	r3, r3, #18
 8007f38:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007f3c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007f3e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007f40:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007f44:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007f46:	69bb      	ldr	r3, [r7, #24]
 8007f48:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007f4a:	78fb      	ldrb	r3, [r7, #3]
 8007f4c:	0159      	lsls	r1, r3, #5
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	440b      	add	r3, r1
 8007f52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f56:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007f58:	697b      	ldr	r3, [r7, #20]
 8007f5a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007f5c:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007f5e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007f62:	2b03      	cmp	r3, #3
 8007f64:	d003      	beq.n	8007f6e <USB_HC_Init+0x21a>
 8007f66:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007f6a:	2b01      	cmp	r3, #1
 8007f6c:	d10f      	bne.n	8007f8e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007f6e:	78fb      	ldrb	r3, [r7, #3]
 8007f70:	015a      	lsls	r2, r3, #5
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	4413      	add	r3, r2
 8007f76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	78fa      	ldrb	r2, [r7, #3]
 8007f7e:	0151      	lsls	r1, r2, #5
 8007f80:	693a      	ldr	r2, [r7, #16]
 8007f82:	440a      	add	r2, r1
 8007f84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f88:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007f8c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007f8e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3720      	adds	r7, #32
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}

08007f98 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b08c      	sub	sp, #48	; 0x30
 8007f9c:	af02      	add	r7, sp, #8
 8007f9e:	60f8      	str	r0, [r7, #12]
 8007fa0:	60b9      	str	r1, [r7, #8]
 8007fa2:	4613      	mov	r3, r2
 8007fa4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	785b      	ldrb	r3, [r3, #1]
 8007fae:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007fb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007fb4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d02d      	beq.n	800801e <USB_HC_StartXfer+0x86>
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	791b      	ldrb	r3, [r3, #4]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d129      	bne.n	800801e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8007fca:	79fb      	ldrb	r3, [r7, #7]
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d117      	bne.n	8008000 <USB_HC_StartXfer+0x68>
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	79db      	ldrb	r3, [r3, #7]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d003      	beq.n	8007fe0 <USB_HC_StartXfer+0x48>
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	79db      	ldrb	r3, [r3, #7]
 8007fdc:	2b02      	cmp	r3, #2
 8007fde:	d10f      	bne.n	8008000 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007fe0:	69fb      	ldr	r3, [r7, #28]
 8007fe2:	015a      	lsls	r2, r3, #5
 8007fe4:	6a3b      	ldr	r3, [r7, #32]
 8007fe6:	4413      	add	r3, r2
 8007fe8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fec:	68db      	ldr	r3, [r3, #12]
 8007fee:	69fa      	ldr	r2, [r7, #28]
 8007ff0:	0151      	lsls	r1, r2, #5
 8007ff2:	6a3a      	ldr	r2, [r7, #32]
 8007ff4:	440a      	add	r2, r1
 8007ff6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ffe:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8008000:	79fb      	ldrb	r3, [r7, #7]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d10b      	bne.n	800801e <USB_HC_StartXfer+0x86>
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	795b      	ldrb	r3, [r3, #5]
 800800a:	2b01      	cmp	r3, #1
 800800c:	d107      	bne.n	800801e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	785b      	ldrb	r3, [r3, #1]
 8008012:	4619      	mov	r1, r3
 8008014:	68f8      	ldr	r0, [r7, #12]
 8008016:	f000 fa0f 	bl	8008438 <USB_DoPing>
      return HAL_OK;
 800801a:	2300      	movs	r3, #0
 800801c:	e0f8      	b.n	8008210 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	695b      	ldr	r3, [r3, #20]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d018      	beq.n	8008058 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	695b      	ldr	r3, [r3, #20]
 800802a:	68ba      	ldr	r2, [r7, #8]
 800802c:	8912      	ldrh	r2, [r2, #8]
 800802e:	4413      	add	r3, r2
 8008030:	3b01      	subs	r3, #1
 8008032:	68ba      	ldr	r2, [r7, #8]
 8008034:	8912      	ldrh	r2, [r2, #8]
 8008036:	fbb3 f3f2 	udiv	r3, r3, r2
 800803a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800803c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800803e:	8b7b      	ldrh	r3, [r7, #26]
 8008040:	429a      	cmp	r2, r3
 8008042:	d90b      	bls.n	800805c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8008044:	8b7b      	ldrh	r3, [r7, #26]
 8008046:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008048:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800804a:	68ba      	ldr	r2, [r7, #8]
 800804c:	8912      	ldrh	r2, [r2, #8]
 800804e:	fb03 f202 	mul.w	r2, r3, r2
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	611a      	str	r2, [r3, #16]
 8008056:	e001      	b.n	800805c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8008058:	2301      	movs	r3, #1
 800805a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	78db      	ldrb	r3, [r3, #3]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d007      	beq.n	8008074 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008064:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008066:	68ba      	ldr	r2, [r7, #8]
 8008068:	8912      	ldrh	r2, [r2, #8]
 800806a:	fb03 f202 	mul.w	r2, r3, r2
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	611a      	str	r2, [r3, #16]
 8008072:	e003      	b.n	800807c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	695a      	ldr	r2, [r3, #20]
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	691b      	ldr	r3, [r3, #16]
 8008080:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008084:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008086:	04d9      	lsls	r1, r3, #19
 8008088:	4b63      	ldr	r3, [pc, #396]	; (8008218 <USB_HC_StartXfer+0x280>)
 800808a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800808c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	7a9b      	ldrb	r3, [r3, #10]
 8008092:	075b      	lsls	r3, r3, #29
 8008094:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008098:	69f9      	ldr	r1, [r7, #28]
 800809a:	0148      	lsls	r0, r1, #5
 800809c:	6a39      	ldr	r1, [r7, #32]
 800809e:	4401      	add	r1, r0
 80080a0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80080a4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80080a6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80080a8:	79fb      	ldrb	r3, [r7, #7]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d009      	beq.n	80080c2 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	68d9      	ldr	r1, [r3, #12]
 80080b2:	69fb      	ldr	r3, [r7, #28]
 80080b4:	015a      	lsls	r2, r3, #5
 80080b6:	6a3b      	ldr	r3, [r7, #32]
 80080b8:	4413      	add	r3, r2
 80080ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080be:	460a      	mov	r2, r1
 80080c0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80080c2:	6a3b      	ldr	r3, [r7, #32]
 80080c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80080c8:	689b      	ldr	r3, [r3, #8]
 80080ca:	f003 0301 	and.w	r3, r3, #1
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	bf0c      	ite	eq
 80080d2:	2301      	moveq	r3, #1
 80080d4:	2300      	movne	r3, #0
 80080d6:	b2db      	uxtb	r3, r3
 80080d8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80080da:	69fb      	ldr	r3, [r7, #28]
 80080dc:	015a      	lsls	r2, r3, #5
 80080de:	6a3b      	ldr	r3, [r7, #32]
 80080e0:	4413      	add	r3, r2
 80080e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	69fa      	ldr	r2, [r7, #28]
 80080ea:	0151      	lsls	r1, r2, #5
 80080ec:	6a3a      	ldr	r2, [r7, #32]
 80080ee:	440a      	add	r2, r1
 80080f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80080f4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80080f8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80080fa:	69fb      	ldr	r3, [r7, #28]
 80080fc:	015a      	lsls	r2, r3, #5
 80080fe:	6a3b      	ldr	r3, [r7, #32]
 8008100:	4413      	add	r3, r2
 8008102:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008106:	681a      	ldr	r2, [r3, #0]
 8008108:	7e7b      	ldrb	r3, [r7, #25]
 800810a:	075b      	lsls	r3, r3, #29
 800810c:	69f9      	ldr	r1, [r7, #28]
 800810e:	0148      	lsls	r0, r1, #5
 8008110:	6a39      	ldr	r1, [r7, #32]
 8008112:	4401      	add	r1, r0
 8008114:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8008118:	4313      	orrs	r3, r2
 800811a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800811c:	69fb      	ldr	r3, [r7, #28]
 800811e:	015a      	lsls	r2, r3, #5
 8008120:	6a3b      	ldr	r3, [r7, #32]
 8008122:	4413      	add	r3, r2
 8008124:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008132:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	78db      	ldrb	r3, [r3, #3]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d004      	beq.n	8008146 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008142:	613b      	str	r3, [r7, #16]
 8008144:	e003      	b.n	800814e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800814c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008154:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008156:	69fb      	ldr	r3, [r7, #28]
 8008158:	015a      	lsls	r2, r3, #5
 800815a:	6a3b      	ldr	r3, [r7, #32]
 800815c:	4413      	add	r3, r2
 800815e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008162:	461a      	mov	r2, r3
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008168:	79fb      	ldrb	r3, [r7, #7]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d001      	beq.n	8008172 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800816e:	2300      	movs	r3, #0
 8008170:	e04e      	b.n	8008210 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	78db      	ldrb	r3, [r3, #3]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d149      	bne.n	800820e <USB_HC_StartXfer+0x276>
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	695b      	ldr	r3, [r3, #20]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d045      	beq.n	800820e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	79db      	ldrb	r3, [r3, #7]
 8008186:	2b03      	cmp	r3, #3
 8008188:	d830      	bhi.n	80081ec <USB_HC_StartXfer+0x254>
 800818a:	a201      	add	r2, pc, #4	; (adr r2, 8008190 <USB_HC_StartXfer+0x1f8>)
 800818c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008190:	080081a1 	.word	0x080081a1
 8008194:	080081c5 	.word	0x080081c5
 8008198:	080081a1 	.word	0x080081a1
 800819c:	080081c5 	.word	0x080081c5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	695b      	ldr	r3, [r3, #20]
 80081a4:	3303      	adds	r3, #3
 80081a6:	089b      	lsrs	r3, r3, #2
 80081a8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80081aa:	8afa      	ldrh	r2, [r7, #22]
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d91c      	bls.n	80081f0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	699b      	ldr	r3, [r3, #24]
 80081ba:	f043 0220 	orr.w	r2, r3, #32
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	619a      	str	r2, [r3, #24]
        }
        break;
 80081c2:	e015      	b.n	80081f0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	695b      	ldr	r3, [r3, #20]
 80081c8:	3303      	adds	r3, #3
 80081ca:	089b      	lsrs	r3, r3, #2
 80081cc:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80081ce:	8afa      	ldrh	r2, [r7, #22]
 80081d0:	6a3b      	ldr	r3, [r7, #32]
 80081d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081d6:	691b      	ldr	r3, [r3, #16]
 80081d8:	b29b      	uxth	r3, r3
 80081da:	429a      	cmp	r2, r3
 80081dc:	d90a      	bls.n	80081f4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	699b      	ldr	r3, [r3, #24]
 80081e2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	619a      	str	r2, [r3, #24]
        }
        break;
 80081ea:	e003      	b.n	80081f4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80081ec:	bf00      	nop
 80081ee:	e002      	b.n	80081f6 <USB_HC_StartXfer+0x25e>
        break;
 80081f0:	bf00      	nop
 80081f2:	e000      	b.n	80081f6 <USB_HC_StartXfer+0x25e>
        break;
 80081f4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	68d9      	ldr	r1, [r3, #12]
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	785a      	ldrb	r2, [r3, #1]
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	695b      	ldr	r3, [r3, #20]
 8008202:	b29b      	uxth	r3, r3
 8008204:	2000      	movs	r0, #0
 8008206:	9000      	str	r0, [sp, #0]
 8008208:	68f8      	ldr	r0, [r7, #12]
 800820a:	f7ff fb31 	bl	8007870 <USB_WritePacket>
  }

  return HAL_OK;
 800820e:	2300      	movs	r3, #0
}
 8008210:	4618      	mov	r0, r3
 8008212:	3728      	adds	r7, #40	; 0x28
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}
 8008218:	1ff80000 	.word	0x1ff80000

0800821c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800821c:	b480      	push	{r7}
 800821e:	b085      	sub	sp, #20
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800822e:	695b      	ldr	r3, [r3, #20]
 8008230:	b29b      	uxth	r3, r3
}
 8008232:	4618      	mov	r0, r3
 8008234:	3714      	adds	r7, #20
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr

0800823e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800823e:	b480      	push	{r7}
 8008240:	b089      	sub	sp, #36	; 0x24
 8008242:	af00      	add	r7, sp, #0
 8008244:	6078      	str	r0, [r7, #4]
 8008246:	460b      	mov	r3, r1
 8008248:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800824e:	78fb      	ldrb	r3, [r7, #3]
 8008250:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8008252:	2300      	movs	r3, #0
 8008254:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008256:	69bb      	ldr	r3, [r7, #24]
 8008258:	015a      	lsls	r2, r3, #5
 800825a:	69fb      	ldr	r3, [r7, #28]
 800825c:	4413      	add	r3, r2
 800825e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	0c9b      	lsrs	r3, r3, #18
 8008266:	f003 0303 	and.w	r3, r3, #3
 800826a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800826c:	69bb      	ldr	r3, [r7, #24]
 800826e:	015a      	lsls	r2, r3, #5
 8008270:	69fb      	ldr	r3, [r7, #28]
 8008272:	4413      	add	r3, r2
 8008274:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	0fdb      	lsrs	r3, r3, #31
 800827c:	f003 0301 	and.w	r3, r3, #1
 8008280:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	689b      	ldr	r3, [r3, #8]
 8008286:	f003 0320 	and.w	r3, r3, #32
 800828a:	2b20      	cmp	r3, #32
 800828c:	d104      	bne.n	8008298 <USB_HC_Halt+0x5a>
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d101      	bne.n	8008298 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8008294:	2300      	movs	r3, #0
 8008296:	e0c8      	b.n	800842a <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d002      	beq.n	80082a4 <USB_HC_Halt+0x66>
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	2b02      	cmp	r3, #2
 80082a2:	d163      	bne.n	800836c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80082a4:	69bb      	ldr	r3, [r7, #24]
 80082a6:	015a      	lsls	r2, r3, #5
 80082a8:	69fb      	ldr	r3, [r7, #28]
 80082aa:	4413      	add	r3, r2
 80082ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	69ba      	ldr	r2, [r7, #24]
 80082b4:	0151      	lsls	r1, r2, #5
 80082b6:	69fa      	ldr	r2, [r7, #28]
 80082b8:	440a      	add	r2, r1
 80082ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80082c2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	689b      	ldr	r3, [r3, #8]
 80082c8:	f003 0320 	and.w	r3, r3, #32
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	f040 80ab 	bne.w	8008428 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082d6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d133      	bne.n	8008346 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80082de:	69bb      	ldr	r3, [r7, #24]
 80082e0:	015a      	lsls	r2, r3, #5
 80082e2:	69fb      	ldr	r3, [r7, #28]
 80082e4:	4413      	add	r3, r2
 80082e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	69ba      	ldr	r2, [r7, #24]
 80082ee:	0151      	lsls	r1, r2, #5
 80082f0:	69fa      	ldr	r2, [r7, #28]
 80082f2:	440a      	add	r2, r1
 80082f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80082fc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80082fe:	69bb      	ldr	r3, [r7, #24]
 8008300:	015a      	lsls	r2, r3, #5
 8008302:	69fb      	ldr	r3, [r7, #28]
 8008304:	4413      	add	r3, r2
 8008306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	69ba      	ldr	r2, [r7, #24]
 800830e:	0151      	lsls	r1, r2, #5
 8008310:	69fa      	ldr	r2, [r7, #28]
 8008312:	440a      	add	r2, r1
 8008314:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008318:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800831c:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	3301      	adds	r3, #1
 8008322:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800832a:	d81d      	bhi.n	8008368 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800832c:	69bb      	ldr	r3, [r7, #24]
 800832e:	015a      	lsls	r2, r3, #5
 8008330:	69fb      	ldr	r3, [r7, #28]
 8008332:	4413      	add	r3, r2
 8008334:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800833e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008342:	d0ec      	beq.n	800831e <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008344:	e070      	b.n	8008428 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008346:	69bb      	ldr	r3, [r7, #24]
 8008348:	015a      	lsls	r2, r3, #5
 800834a:	69fb      	ldr	r3, [r7, #28]
 800834c:	4413      	add	r3, r2
 800834e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	69ba      	ldr	r2, [r7, #24]
 8008356:	0151      	lsls	r1, r2, #5
 8008358:	69fa      	ldr	r2, [r7, #28]
 800835a:	440a      	add	r2, r1
 800835c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008360:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008364:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008366:	e05f      	b.n	8008428 <USB_HC_Halt+0x1ea>
            break;
 8008368:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800836a:	e05d      	b.n	8008428 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800836c:	69bb      	ldr	r3, [r7, #24]
 800836e:	015a      	lsls	r2, r3, #5
 8008370:	69fb      	ldr	r3, [r7, #28]
 8008372:	4413      	add	r3, r2
 8008374:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	69ba      	ldr	r2, [r7, #24]
 800837c:	0151      	lsls	r1, r2, #5
 800837e:	69fa      	ldr	r2, [r7, #28]
 8008380:	440a      	add	r2, r1
 8008382:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008386:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800838a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800838c:	69fb      	ldr	r3, [r7, #28]
 800838e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008392:	691b      	ldr	r3, [r3, #16]
 8008394:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008398:	2b00      	cmp	r3, #0
 800839a:	d133      	bne.n	8008404 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800839c:	69bb      	ldr	r3, [r7, #24]
 800839e:	015a      	lsls	r2, r3, #5
 80083a0:	69fb      	ldr	r3, [r7, #28]
 80083a2:	4413      	add	r3, r2
 80083a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	69ba      	ldr	r2, [r7, #24]
 80083ac:	0151      	lsls	r1, r2, #5
 80083ae:	69fa      	ldr	r2, [r7, #28]
 80083b0:	440a      	add	r2, r1
 80083b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80083b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80083ba:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80083bc:	69bb      	ldr	r3, [r7, #24]
 80083be:	015a      	lsls	r2, r3, #5
 80083c0:	69fb      	ldr	r3, [r7, #28]
 80083c2:	4413      	add	r3, r2
 80083c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	69ba      	ldr	r2, [r7, #24]
 80083cc:	0151      	lsls	r1, r2, #5
 80083ce:	69fa      	ldr	r2, [r7, #28]
 80083d0:	440a      	add	r2, r1
 80083d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80083d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80083da:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	3301      	adds	r3, #1
 80083e0:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80083e8:	d81d      	bhi.n	8008426 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80083ea:	69bb      	ldr	r3, [r7, #24]
 80083ec:	015a      	lsls	r2, r3, #5
 80083ee:	69fb      	ldr	r3, [r7, #28]
 80083f0:	4413      	add	r3, r2
 80083f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80083fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008400:	d0ec      	beq.n	80083dc <USB_HC_Halt+0x19e>
 8008402:	e011      	b.n	8008428 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008404:	69bb      	ldr	r3, [r7, #24]
 8008406:	015a      	lsls	r2, r3, #5
 8008408:	69fb      	ldr	r3, [r7, #28]
 800840a:	4413      	add	r3, r2
 800840c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	69ba      	ldr	r2, [r7, #24]
 8008414:	0151      	lsls	r1, r2, #5
 8008416:	69fa      	ldr	r2, [r7, #28]
 8008418:	440a      	add	r2, r1
 800841a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800841e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008422:	6013      	str	r3, [r2, #0]
 8008424:	e000      	b.n	8008428 <USB_HC_Halt+0x1ea>
          break;
 8008426:	bf00      	nop
    }
  }

  return HAL_OK;
 8008428:	2300      	movs	r3, #0
}
 800842a:	4618      	mov	r0, r3
 800842c:	3724      	adds	r7, #36	; 0x24
 800842e:	46bd      	mov	sp, r7
 8008430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008434:	4770      	bx	lr
	...

08008438 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008438:	b480      	push	{r7}
 800843a:	b087      	sub	sp, #28
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
 8008440:	460b      	mov	r3, r1
 8008442:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008448:	78fb      	ldrb	r3, [r7, #3]
 800844a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800844c:	2301      	movs	r3, #1
 800844e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	04da      	lsls	r2, r3, #19
 8008454:	4b15      	ldr	r3, [pc, #84]	; (80084ac <USB_DoPing+0x74>)
 8008456:	4013      	ands	r3, r2
 8008458:	693a      	ldr	r2, [r7, #16]
 800845a:	0151      	lsls	r1, r2, #5
 800845c:	697a      	ldr	r2, [r7, #20]
 800845e:	440a      	add	r2, r1
 8008460:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008464:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008468:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	015a      	lsls	r2, r3, #5
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	4413      	add	r3, r2
 8008472:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008480:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008488:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	015a      	lsls	r2, r3, #5
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	4413      	add	r3, r2
 8008492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008496:	461a      	mov	r2, r3
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800849c:	2300      	movs	r3, #0
}
 800849e:	4618      	mov	r0, r3
 80084a0:	371c      	adds	r7, #28
 80084a2:	46bd      	mov	sp, r7
 80084a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a8:	4770      	bx	lr
 80084aa:	bf00      	nop
 80084ac:	1ff80000 	.word	0x1ff80000

080084b0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b088      	sub	sp, #32
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80084b8:	2300      	movs	r3, #0
 80084ba:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80084c0:	2300      	movs	r3, #0
 80084c2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f7ff f911 	bl	80076ec <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80084ca:	2110      	movs	r1, #16
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f7ff f96b 	bl	80077a8 <USB_FlushTxFifo>
 80084d2:	4603      	mov	r3, r0
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d001      	beq.n	80084dc <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80084d8:	2301      	movs	r3, #1
 80084da:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f7ff f997 	bl	8007810 <USB_FlushRxFifo>
 80084e2:	4603      	mov	r3, r0
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d001      	beq.n	80084ec <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80084e8:	2301      	movs	r3, #1
 80084ea:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80084ec:	2300      	movs	r3, #0
 80084ee:	61bb      	str	r3, [r7, #24]
 80084f0:	e01f      	b.n	8008532 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80084f2:	69bb      	ldr	r3, [r7, #24]
 80084f4:	015a      	lsls	r2, r3, #5
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	4413      	add	r3, r2
 80084fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008508:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008510:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008518:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800851a:	69bb      	ldr	r3, [r7, #24]
 800851c:	015a      	lsls	r2, r3, #5
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	4413      	add	r3, r2
 8008522:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008526:	461a      	mov	r2, r3
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800852c:	69bb      	ldr	r3, [r7, #24]
 800852e:	3301      	adds	r3, #1
 8008530:	61bb      	str	r3, [r7, #24]
 8008532:	69bb      	ldr	r3, [r7, #24]
 8008534:	2b0f      	cmp	r3, #15
 8008536:	d9dc      	bls.n	80084f2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008538:	2300      	movs	r3, #0
 800853a:	61bb      	str	r3, [r7, #24]
 800853c:	e034      	b.n	80085a8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800853e:	69bb      	ldr	r3, [r7, #24]
 8008540:	015a      	lsls	r2, r3, #5
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	4413      	add	r3, r2
 8008546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008554:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800855c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008564:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008566:	69bb      	ldr	r3, [r7, #24]
 8008568:	015a      	lsls	r2, r3, #5
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	4413      	add	r3, r2
 800856e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008572:	461a      	mov	r2, r3
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	3301      	adds	r3, #1
 800857c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008584:	d80c      	bhi.n	80085a0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008586:	69bb      	ldr	r3, [r7, #24]
 8008588:	015a      	lsls	r2, r3, #5
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	4413      	add	r3, r2
 800858e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008598:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800859c:	d0ec      	beq.n	8008578 <USB_StopHost+0xc8>
 800859e:	e000      	b.n	80085a2 <USB_StopHost+0xf2>
        break;
 80085a0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80085a2:	69bb      	ldr	r3, [r7, #24]
 80085a4:	3301      	adds	r3, #1
 80085a6:	61bb      	str	r3, [r7, #24]
 80085a8:	69bb      	ldr	r3, [r7, #24]
 80085aa:	2b0f      	cmp	r3, #15
 80085ac:	d9c7      	bls.n	800853e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80085b4:	461a      	mov	r2, r3
 80085b6:	f04f 33ff 	mov.w	r3, #4294967295
 80085ba:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f04f 32ff 	mov.w	r2, #4294967295
 80085c2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f7ff f880 	bl	80076ca <USB_EnableGlobalInt>

  return ret;
 80085ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3720      	adds	r7, #32
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}

080085d4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 80085d8:	4904      	ldr	r1, [pc, #16]	; (80085ec <MX_FATFS_Init+0x18>)
 80085da:	4805      	ldr	r0, [pc, #20]	; (80085f0 <MX_FATFS_Init+0x1c>)
 80085dc:	f007 ff22 	bl	8010424 <FATFS_LinkDriver>
 80085e0:	4603      	mov	r3, r0
 80085e2:	461a      	mov	r2, r3
 80085e4:	4b03      	ldr	r3, [pc, #12]	; (80085f4 <MX_FATFS_Init+0x20>)
 80085e6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80085e8:	bf00      	nop
 80085ea:	bd80      	pop	{r7, pc}
 80085ec:	2000351c 	.word	0x2000351c
 80085f0:	0801217c 	.word	0x0801217c
 80085f4:	20003518 	.word	0x20003518

080085f8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80085f8:	b480      	push	{r7}
 80085fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80085fc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80085fe:	4618      	mov	r0, r3
 8008600:	46bd      	mov	sp, r7
 8008602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008606:	4770      	bx	lr

08008608 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8008608:	b480      	push	{r7}
 800860a:	b083      	sub	sp, #12
 800860c:	af00      	add	r7, sp, #0
 800860e:	4603      	mov	r3, r0
 8008610:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8008612:	2300      	movs	r3, #0
}
 8008614:	4618      	mov	r0, r3
 8008616:	370c      	adds	r7, #12
 8008618:	46bd      	mov	sp, r7
 800861a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861e:	4770      	bx	lr

08008620 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b084      	sub	sp, #16
 8008624:	af00      	add	r7, sp, #0
 8008626:	4603      	mov	r3, r0
 8008628:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 800862a:	2301      	movs	r3, #1
 800862c:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800862e:	79fb      	ldrb	r3, [r7, #7]
 8008630:	4619      	mov	r1, r3
 8008632:	4808      	ldr	r0, [pc, #32]	; (8008654 <USBH_status+0x34>)
 8008634:	f000 fe32 	bl	800929c <USBH_MSC_UnitIsReady>
 8008638:	4603      	mov	r3, r0
 800863a:	2b00      	cmp	r3, #0
 800863c:	d002      	beq.n	8008644 <USBH_status+0x24>
  {
    res = RES_OK;
 800863e:	2300      	movs	r3, #0
 8008640:	73fb      	strb	r3, [r7, #15]
 8008642:	e001      	b.n	8008648 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8008644:	2301      	movs	r3, #1
 8008646:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8008648:	7bfb      	ldrb	r3, [r7, #15]
}
 800864a:	4618      	mov	r0, r3
 800864c:	3710      	adds	r7, #16
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}
 8008652:	bf00      	nop
 8008654:	20004a70 	.word	0x20004a70

08008658 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b094      	sub	sp, #80	; 0x50
 800865c:	af02      	add	r7, sp, #8
 800865e:	60b9      	str	r1, [r7, #8]
 8008660:	607a      	str	r2, [r7, #4]
 8008662:	603b      	str	r3, [r7, #0]
 8008664:	4603      	mov	r3, r0
 8008666:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008668:	2301      	movs	r3, #1
 800866a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800866e:	7bf9      	ldrb	r1, [r7, #15]
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	9300      	str	r3, [sp, #0]
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	687a      	ldr	r2, [r7, #4]
 8008678:	4813      	ldr	r0, [pc, #76]	; (80086c8 <USBH_read+0x70>)
 800867a:	f000 fe59 	bl	8009330 <USBH_MSC_Read>
 800867e:	4603      	mov	r3, r0
 8008680:	2b00      	cmp	r3, #0
 8008682:	d103      	bne.n	800868c <USBH_read+0x34>
  {
    res = RES_OK;
 8008684:	2300      	movs	r3, #0
 8008686:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800868a:	e017      	b.n	80086bc <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800868c:	f107 0210 	add.w	r2, r7, #16
 8008690:	7bfb      	ldrb	r3, [r7, #15]
 8008692:	4619      	mov	r1, r3
 8008694:	480c      	ldr	r0, [pc, #48]	; (80086c8 <USBH_read+0x70>)
 8008696:	f000 fe27 	bl	80092e8 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800869a:	7f7b      	ldrb	r3, [r7, #29]
 800869c:	2b3a      	cmp	r3, #58	; 0x3a
 800869e:	d005      	beq.n	80086ac <USBH_read+0x54>
 80086a0:	2b3a      	cmp	r3, #58	; 0x3a
 80086a2:	dc07      	bgt.n	80086b4 <USBH_read+0x5c>
 80086a4:	2b04      	cmp	r3, #4
 80086a6:	d001      	beq.n	80086ac <USBH_read+0x54>
 80086a8:	2b28      	cmp	r3, #40	; 0x28
 80086aa:	d103      	bne.n	80086b4 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 80086ac:	2303      	movs	r3, #3
 80086ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80086b2:	e003      	b.n	80086bc <USBH_read+0x64>

    default:
      res = RES_ERROR;
 80086b4:	2301      	movs	r3, #1
 80086b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80086ba:	bf00      	nop
    }
  }

  return res;
 80086bc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	3748      	adds	r7, #72	; 0x48
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}
 80086c8:	20004a70 	.word	0x20004a70

080086cc <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b094      	sub	sp, #80	; 0x50
 80086d0:	af02      	add	r7, sp, #8
 80086d2:	60b9      	str	r1, [r7, #8]
 80086d4:	607a      	str	r2, [r7, #4]
 80086d6:	603b      	str	r3, [r7, #0]
 80086d8:	4603      	mov	r3, r0
 80086da:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80086dc:	2301      	movs	r3, #1
 80086de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 80086e2:	7bf9      	ldrb	r1, [r7, #15]
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	9300      	str	r3, [sp, #0]
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	687a      	ldr	r2, [r7, #4]
 80086ec:	4817      	ldr	r0, [pc, #92]	; (800874c <USBH_write+0x80>)
 80086ee:	f000 fe88 	bl	8009402 <USBH_MSC_Write>
 80086f2:	4603      	mov	r3, r0
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d103      	bne.n	8008700 <USBH_write+0x34>
  {
    res = RES_OK;
 80086f8:	2300      	movs	r3, #0
 80086fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80086fe:	e01f      	b.n	8008740 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8008700:	f107 0210 	add.w	r2, r7, #16
 8008704:	7bfb      	ldrb	r3, [r7, #15]
 8008706:	4619      	mov	r1, r3
 8008708:	4810      	ldr	r0, [pc, #64]	; (800874c <USBH_write+0x80>)
 800870a:	f000 fded 	bl	80092e8 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800870e:	7f7b      	ldrb	r3, [r7, #29]
 8008710:	2b3a      	cmp	r3, #58	; 0x3a
 8008712:	d00d      	beq.n	8008730 <USBH_write+0x64>
 8008714:	2b3a      	cmp	r3, #58	; 0x3a
 8008716:	dc0f      	bgt.n	8008738 <USBH_write+0x6c>
 8008718:	2b28      	cmp	r3, #40	; 0x28
 800871a:	d009      	beq.n	8008730 <USBH_write+0x64>
 800871c:	2b28      	cmp	r3, #40	; 0x28
 800871e:	dc0b      	bgt.n	8008738 <USBH_write+0x6c>
 8008720:	2b04      	cmp	r3, #4
 8008722:	d005      	beq.n	8008730 <USBH_write+0x64>
 8008724:	2b27      	cmp	r3, #39	; 0x27
 8008726:	d107      	bne.n	8008738 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8008728:	2302      	movs	r3, #2
 800872a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800872e:	e007      	b.n	8008740 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8008730:	2303      	movs	r3, #3
 8008732:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008736:	e003      	b.n	8008740 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8008738:	2301      	movs	r3, #1
 800873a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800873e:	bf00      	nop
    }
  }

  return res;
 8008740:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008744:	4618      	mov	r0, r3
 8008746:	3748      	adds	r7, #72	; 0x48
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}
 800874c:	20004a70 	.word	0x20004a70

08008750 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b090      	sub	sp, #64	; 0x40
 8008754:	af00      	add	r7, sp, #0
 8008756:	4603      	mov	r3, r0
 8008758:	603a      	str	r2, [r7, #0]
 800875a:	71fb      	strb	r3, [r7, #7]
 800875c:	460b      	mov	r3, r1
 800875e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008760:	2301      	movs	r3, #1
 8008762:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8008766:	79bb      	ldrb	r3, [r7, #6]
 8008768:	2b03      	cmp	r3, #3
 800876a:	d852      	bhi.n	8008812 <USBH_ioctl+0xc2>
 800876c:	a201      	add	r2, pc, #4	; (adr r2, 8008774 <USBH_ioctl+0x24>)
 800876e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008772:	bf00      	nop
 8008774:	08008785 	.word	0x08008785
 8008778:	0800878d 	.word	0x0800878d
 800877c:	080087b7 	.word	0x080087b7
 8008780:	080087e3 	.word	0x080087e3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8008784:	2300      	movs	r3, #0
 8008786:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800878a:	e045      	b.n	8008818 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800878c:	f107 0208 	add.w	r2, r7, #8
 8008790:	79fb      	ldrb	r3, [r7, #7]
 8008792:	4619      	mov	r1, r3
 8008794:	4823      	ldr	r0, [pc, #140]	; (8008824 <USBH_ioctl+0xd4>)
 8008796:	f000 fda7 	bl	80092e8 <USBH_MSC_GetLUNInfo>
 800879a:	4603      	mov	r3, r0
 800879c:	2b00      	cmp	r3, #0
 800879e:	d106      	bne.n	80087ae <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 80087a0:	68fa      	ldr	r2, [r7, #12]
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80087a6:	2300      	movs	r3, #0
 80087a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80087ac:	e034      	b.n	8008818 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80087ae:	2301      	movs	r3, #1
 80087b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80087b4:	e030      	b.n	8008818 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80087b6:	f107 0208 	add.w	r2, r7, #8
 80087ba:	79fb      	ldrb	r3, [r7, #7]
 80087bc:	4619      	mov	r1, r3
 80087be:	4819      	ldr	r0, [pc, #100]	; (8008824 <USBH_ioctl+0xd4>)
 80087c0:	f000 fd92 	bl	80092e8 <USBH_MSC_GetLUNInfo>
 80087c4:	4603      	mov	r3, r0
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d107      	bne.n	80087da <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 80087ca:	8a3b      	ldrh	r3, [r7, #16]
 80087cc:	461a      	mov	r2, r3
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80087d2:	2300      	movs	r3, #0
 80087d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80087d8:	e01e      	b.n	8008818 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80087da:	2301      	movs	r3, #1
 80087dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80087e0:	e01a      	b.n	8008818 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80087e2:	f107 0208 	add.w	r2, r7, #8
 80087e6:	79fb      	ldrb	r3, [r7, #7]
 80087e8:	4619      	mov	r1, r3
 80087ea:	480e      	ldr	r0, [pc, #56]	; (8008824 <USBH_ioctl+0xd4>)
 80087ec:	f000 fd7c 	bl	80092e8 <USBH_MSC_GetLUNInfo>
 80087f0:	4603      	mov	r3, r0
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d109      	bne.n	800880a <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 80087f6:	8a3b      	ldrh	r3, [r7, #16]
 80087f8:	0a5b      	lsrs	r3, r3, #9
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	461a      	mov	r2, r3
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008802:	2300      	movs	r3, #0
 8008804:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008808:	e006      	b.n	8008818 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800880a:	2301      	movs	r3, #1
 800880c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008810:	e002      	b.n	8008818 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8008812:	2304      	movs	r3, #4
 8008814:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8008818:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800881c:	4618      	mov	r0, r3
 800881e:	3740      	adds	r7, #64	; 0x40
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}
 8008824:	20004a70 	.word	0x20004a70

08008828 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008828:	b590      	push	{r4, r7, lr}
 800882a:	b089      	sub	sp, #36	; 0x24
 800882c:	af04      	add	r7, sp, #16
 800882e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008836:	7919      	ldrb	r1, [r3, #4]
 8008838:	2350      	movs	r3, #80	; 0x50
 800883a:	2206      	movs	r2, #6
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f001 fc6b 	bl	800a118 <USBH_FindInterface>
 8008842:	4603      	mov	r3, r0
 8008844:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8008846:	7bfb      	ldrb	r3, [r7, #15]
 8008848:	2bff      	cmp	r3, #255	; 0xff
 800884a:	d002      	beq.n	8008852 <USBH_MSC_InterfaceInit+0x2a>
 800884c:	7bfb      	ldrb	r3, [r7, #15]
 800884e:	2b01      	cmp	r3, #1
 8008850:	d901      	bls.n	8008856 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008852:	2302      	movs	r3, #2
 8008854:	e106      	b.n	8008a64 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 8008856:	7bfb      	ldrb	r3, [r7, #15]
 8008858:	4619      	mov	r1, r3
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f001 fc40 	bl	800a0e0 <USBH_SelectInterface>
 8008860:	4603      	mov	r3, r0
 8008862:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008864:	7bbb      	ldrb	r3, [r7, #14]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d001      	beq.n	800886e <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 800886a:	2302      	movs	r3, #2
 800886c:	e0fa      	b.n	8008a64 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8008874:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008878:	f008 f9e6 	bl	8010c48 <malloc>
 800887c:	4603      	mov	r3, r0
 800887e:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008886:	69db      	ldr	r3, [r3, #28]
 8008888:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d101      	bne.n	8008894 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8008890:	2302      	movs	r3, #2
 8008892:	e0e7      	b.n	8008a64 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8008894:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008898:	2100      	movs	r1, #0
 800889a:	68b8      	ldr	r0, [r7, #8]
 800889c:	f008 f9f2 	bl	8010c84 <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80088a0:	7bfb      	ldrb	r3, [r7, #15]
 80088a2:	687a      	ldr	r2, [r7, #4]
 80088a4:	211a      	movs	r1, #26
 80088a6:	fb01 f303 	mul.w	r3, r1, r3
 80088aa:	4413      	add	r3, r2
 80088ac:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80088b0:	781b      	ldrb	r3, [r3, #0]
 80088b2:	b25b      	sxtb	r3, r3
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	da16      	bge.n	80088e6 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80088b8:	7bfb      	ldrb	r3, [r7, #15]
 80088ba:	687a      	ldr	r2, [r7, #4]
 80088bc:	211a      	movs	r1, #26
 80088be:	fb01 f303 	mul.w	r3, r1, r3
 80088c2:	4413      	add	r3, r2
 80088c4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80088c8:	781a      	ldrb	r2, [r3, #0]
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80088ce:	7bfb      	ldrb	r3, [r7, #15]
 80088d0:	687a      	ldr	r2, [r7, #4]
 80088d2:	211a      	movs	r1, #26
 80088d4:	fb01 f303 	mul.w	r3, r1, r3
 80088d8:	4413      	add	r3, r2
 80088da:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80088de:	881a      	ldrh	r2, [r3, #0]
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	815a      	strh	r2, [r3, #10]
 80088e4:	e015      	b.n	8008912 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80088e6:	7bfb      	ldrb	r3, [r7, #15]
 80088e8:	687a      	ldr	r2, [r7, #4]
 80088ea:	211a      	movs	r1, #26
 80088ec:	fb01 f303 	mul.w	r3, r1, r3
 80088f0:	4413      	add	r3, r2
 80088f2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80088f6:	781a      	ldrb	r2, [r3, #0]
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80088fc:	7bfb      	ldrb	r3, [r7, #15]
 80088fe:	687a      	ldr	r2, [r7, #4]
 8008900:	211a      	movs	r1, #26
 8008902:	fb01 f303 	mul.w	r3, r1, r3
 8008906:	4413      	add	r3, r2
 8008908:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800890c:	881a      	ldrh	r2, [r3, #0]
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8008912:	7bfb      	ldrb	r3, [r7, #15]
 8008914:	687a      	ldr	r2, [r7, #4]
 8008916:	211a      	movs	r1, #26
 8008918:	fb01 f303 	mul.w	r3, r1, r3
 800891c:	4413      	add	r3, r2
 800891e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008922:	781b      	ldrb	r3, [r3, #0]
 8008924:	b25b      	sxtb	r3, r3
 8008926:	2b00      	cmp	r3, #0
 8008928:	da16      	bge.n	8008958 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800892a:	7bfb      	ldrb	r3, [r7, #15]
 800892c:	687a      	ldr	r2, [r7, #4]
 800892e:	211a      	movs	r1, #26
 8008930:	fb01 f303 	mul.w	r3, r1, r3
 8008934:	4413      	add	r3, r2
 8008936:	f203 3356 	addw	r3, r3, #854	; 0x356
 800893a:	781a      	ldrb	r2, [r3, #0]
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008940:	7bfb      	ldrb	r3, [r7, #15]
 8008942:	687a      	ldr	r2, [r7, #4]
 8008944:	211a      	movs	r1, #26
 8008946:	fb01 f303 	mul.w	r3, r1, r3
 800894a:	4413      	add	r3, r2
 800894c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008950:	881a      	ldrh	r2, [r3, #0]
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	815a      	strh	r2, [r3, #10]
 8008956:	e015      	b.n	8008984 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8008958:	7bfb      	ldrb	r3, [r7, #15]
 800895a:	687a      	ldr	r2, [r7, #4]
 800895c:	211a      	movs	r1, #26
 800895e:	fb01 f303 	mul.w	r3, r1, r3
 8008962:	4413      	add	r3, r2
 8008964:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008968:	781a      	ldrb	r2, [r3, #0]
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800896e:	7bfb      	ldrb	r3, [r7, #15]
 8008970:	687a      	ldr	r2, [r7, #4]
 8008972:	211a      	movs	r1, #26
 8008974:	fb01 f303 	mul.w	r3, r1, r3
 8008978:	4413      	add	r3, r2
 800897a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800897e:	881a      	ldrh	r2, [r3, #0]
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	2200      	movs	r2, #0
 8008988:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	2200      	movs	r2, #0
 800898e:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	2200      	movs	r2, #0
 8008994:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	799b      	ldrb	r3, [r3, #6]
 800899a:	4619      	mov	r1, r3
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f002 fed6 	bl	800b74e <USBH_AllocPipe>
 80089a2:	4603      	mov	r3, r0
 80089a4:	461a      	mov	r2, r3
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	79db      	ldrb	r3, [r3, #7]
 80089ae:	4619      	mov	r1, r3
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f002 fecc 	bl	800b74e <USBH_AllocPipe>
 80089b6:	4603      	mov	r3, r0
 80089b8:	461a      	mov	r2, r3
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f000 fdc4 	bl	800954c <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	799b      	ldrb	r3, [r3, #6]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d01e      	beq.n	8008a0a <USBH_MSC_InterfaceInit+0x1e2>
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	891b      	ldrh	r3, [r3, #8]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d01a      	beq.n	8008a0a <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	7959      	ldrb	r1, [r3, #5]
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	7998      	ldrb	r0, [r3, #6]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80089e8:	68ba      	ldr	r2, [r7, #8]
 80089ea:	8912      	ldrh	r2, [r2, #8]
 80089ec:	9202      	str	r2, [sp, #8]
 80089ee:	2202      	movs	r2, #2
 80089f0:	9201      	str	r2, [sp, #4]
 80089f2:	9300      	str	r3, [sp, #0]
 80089f4:	4623      	mov	r3, r4
 80089f6:	4602      	mov	r2, r0
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f002 fe79 	bl	800b6f0 <USBH_OpenPipe>
 80089fe:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	79db      	ldrb	r3, [r3, #7]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d02c      	beq.n	8008a62 <USBH_MSC_InterfaceInit+0x23a>
 8008a08:	e001      	b.n	8008a0e <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 8008a0a:	2303      	movs	r3, #3
 8008a0c:	e02a      	b.n	8008a64 <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	895b      	ldrh	r3, [r3, #10]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d025      	beq.n	8008a62 <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	7919      	ldrb	r1, [r3, #4]
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	79d8      	ldrb	r0, [r3, #7]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008a2a:	68ba      	ldr	r2, [r7, #8]
 8008a2c:	8952      	ldrh	r2, [r2, #10]
 8008a2e:	9202      	str	r2, [sp, #8]
 8008a30:	2202      	movs	r2, #2
 8008a32:	9201      	str	r2, [sp, #4]
 8008a34:	9300      	str	r3, [sp, #0]
 8008a36:	4623      	mov	r3, r4
 8008a38:	4602      	mov	r2, r0
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f002 fe58 	bl	800b6f0 <USBH_OpenPipe>
 8008a40:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	791b      	ldrb	r3, [r3, #4]
 8008a46:	2200      	movs	r2, #0
 8008a48:	4619      	mov	r1, r3
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f008 f83b 	bl	8010ac6 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	795b      	ldrb	r3, [r3, #5]
 8008a54:	2200      	movs	r2, #0
 8008a56:	4619      	mov	r1, r3
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f008 f834 	bl	8010ac6 <USBH_LL_SetToggle>

  return USBH_OK;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	e000      	b.n	8008a64 <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 8008a62:	2303      	movs	r3, #3
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	3714      	adds	r7, #20
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd90      	pop	{r4, r7, pc}

08008a6c <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b084      	sub	sp, #16
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008a7a:	69db      	ldr	r3, [r3, #28]
 8008a7c:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	795b      	ldrb	r3, [r3, #5]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d00e      	beq.n	8008aa4 <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	795b      	ldrb	r3, [r3, #5]
 8008a8a:	4619      	mov	r1, r3
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f002 fe4e 	bl	800b72e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	795b      	ldrb	r3, [r3, #5]
 8008a96:	4619      	mov	r1, r3
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f002 fe79 	bl	800b790 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	791b      	ldrb	r3, [r3, #4]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d00e      	beq.n	8008aca <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	791b      	ldrb	r3, [r3, #4]
 8008ab0:	4619      	mov	r1, r3
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f002 fe3b 	bl	800b72e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	791b      	ldrb	r3, [r3, #4]
 8008abc:	4619      	mov	r1, r3
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f002 fe66 	bl	800b790 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ad0:	69db      	ldr	r3, [r3, #28]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d00b      	beq.n	8008aee <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008adc:	69db      	ldr	r3, [r3, #28]
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f008 f8ba 	bl	8010c58 <free>
    phost->pActiveClass->pData = 0U;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008aea:	2200      	movs	r2, #0
 8008aec:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008aee:	2300      	movs	r3, #0
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3710      	adds	r7, #16
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}

08008af8 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b084      	sub	sp, #16
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b06:	69db      	ldr	r3, [r3, #28]
 8008b08:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	7b9b      	ldrb	r3, [r3, #14]
 8008b12:	2b03      	cmp	r3, #3
 8008b14:	d041      	beq.n	8008b9a <USBH_MSC_ClassRequest+0xa2>
 8008b16:	2b03      	cmp	r3, #3
 8008b18:	dc4b      	bgt.n	8008bb2 <USBH_MSC_ClassRequest+0xba>
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d001      	beq.n	8008b22 <USBH_MSC_ClassRequest+0x2a>
 8008b1e:	2b02      	cmp	r3, #2
 8008b20:	d147      	bne.n	8008bb2 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	4619      	mov	r1, r3
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f000 fcf1 	bl	800950e <USBH_MSC_BOT_REQ_GetMaxLUN>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8008b30:	7bfb      	ldrb	r3, [r7, #15]
 8008b32:	2b03      	cmp	r3, #3
 8008b34:	d104      	bne.n	8008b40 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8008b40:	7bfb      	ldrb	r3, [r7, #15]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d137      	bne.n	8008bb6 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	781b      	ldrb	r3, [r3, #0]
 8008b4a:	2b02      	cmp	r3, #2
 8008b4c:	d804      	bhi.n	8008b58 <USBH_MSC_ClassRequest+0x60>
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	781b      	ldrb	r3, [r3, #0]
 8008b52:	3301      	adds	r3, #1
 8008b54:	b2da      	uxtb	r2, r3
 8008b56:	e000      	b.n	8008b5a <USBH_MSC_ClassRequest+0x62>
 8008b58:	2202      	movs	r2, #2
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8008b5e:	2300      	movs	r3, #0
 8008b60:	73bb      	strb	r3, [r7, #14]
 8008b62:	e014      	b.n	8008b8e <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8008b64:	7bbb      	ldrb	r3, [r7, #14]
 8008b66:	68ba      	ldr	r2, [r7, #8]
 8008b68:	2134      	movs	r1, #52	; 0x34
 8008b6a:	fb01 f303 	mul.w	r3, r1, r3
 8008b6e:	4413      	add	r3, r2
 8008b70:	3392      	adds	r3, #146	; 0x92
 8008b72:	2202      	movs	r2, #2
 8008b74:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8008b76:	7bbb      	ldrb	r3, [r7, #14]
 8008b78:	68ba      	ldr	r2, [r7, #8]
 8008b7a:	2134      	movs	r1, #52	; 0x34
 8008b7c:	fb01 f303 	mul.w	r3, r1, r3
 8008b80:	4413      	add	r3, r2
 8008b82:	33c1      	adds	r3, #193	; 0xc1
 8008b84:	2200      	movs	r2, #0
 8008b86:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8008b88:	7bbb      	ldrb	r3, [r7, #14]
 8008b8a:	3301      	adds	r3, #1
 8008b8c:	73bb      	strb	r3, [r7, #14]
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	781b      	ldrb	r3, [r3, #0]
 8008b92:	7bba      	ldrb	r2, [r7, #14]
 8008b94:	429a      	cmp	r2, r3
 8008b96:	d3e5      	bcc.n	8008b64 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 8008b98:	e00d      	b.n	8008bb6 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8008b9a:	2100      	movs	r1, #0
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f002 f888 	bl	800acb2 <USBH_ClrFeature>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d108      	bne.n	8008bba <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	7bda      	ldrb	r2, [r3, #15]
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	739a      	strb	r2, [r3, #14]
      }
      break;
 8008bb0:	e003      	b.n	8008bba <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 8008bb2:	bf00      	nop
 8008bb4:	e002      	b.n	8008bbc <USBH_MSC_ClassRequest+0xc4>
      break;
 8008bb6:	bf00      	nop
 8008bb8:	e000      	b.n	8008bbc <USBH_MSC_ClassRequest+0xc4>
      break;
 8008bba:	bf00      	nop
  }

  return status;
 8008bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3710      	adds	r7, #16
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}
	...

08008bc8 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b086      	sub	sp, #24
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008bd6:	69db      	ldr	r3, [r3, #28]
 8008bd8:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8008bda:	2301      	movs	r3, #1
 8008bdc:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8008bde:	2301      	movs	r3, #1
 8008be0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8008be2:	2301      	movs	r3, #1
 8008be4:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8008be6:	693b      	ldr	r3, [r7, #16]
 8008be8:	7b1b      	ldrb	r3, [r3, #12]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d003      	beq.n	8008bf6 <USBH_MSC_Process+0x2e>
 8008bee:	2b01      	cmp	r3, #1
 8008bf0:	f000 8271 	beq.w	80090d6 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8008bf4:	e272      	b.n	80090dc <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8008bfc:	693b      	ldr	r3, [r7, #16]
 8008bfe:	781b      	ldrb	r3, [r3, #0]
 8008c00:	b29b      	uxth	r3, r3
 8008c02:	429a      	cmp	r2, r3
 8008c04:	f080 824f 	bcs.w	80090a6 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008c0e:	4619      	mov	r1, r3
 8008c10:	693a      	ldr	r2, [r7, #16]
 8008c12:	2334      	movs	r3, #52	; 0x34
 8008c14:	fb01 f303 	mul.w	r3, r1, r3
 8008c18:	4413      	add	r3, r2
 8008c1a:	3391      	adds	r3, #145	; 0x91
 8008c1c:	2201      	movs	r2, #1
 8008c1e:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008c26:	4619      	mov	r1, r3
 8008c28:	693a      	ldr	r2, [r7, #16]
 8008c2a:	2334      	movs	r3, #52	; 0x34
 8008c2c:	fb01 f303 	mul.w	r3, r1, r3
 8008c30:	4413      	add	r3, r2
 8008c32:	3390      	adds	r3, #144	; 0x90
 8008c34:	781b      	ldrb	r3, [r3, #0]
 8008c36:	2b08      	cmp	r3, #8
 8008c38:	f200 8243 	bhi.w	80090c2 <USBH_MSC_Process+0x4fa>
 8008c3c:	a201      	add	r2, pc, #4	; (adr r2, 8008c44 <USBH_MSC_Process+0x7c>)
 8008c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c42:	bf00      	nop
 8008c44:	08008c69 	.word	0x08008c69
 8008c48:	080090c3 	.word	0x080090c3
 8008c4c:	08008d31 	.word	0x08008d31
 8008c50:	08008eb5 	.word	0x08008eb5
 8008c54:	08008c8f 	.word	0x08008c8f
 8008c58:	08008f81 	.word	0x08008f81
 8008c5c:	080090c3 	.word	0x080090c3
 8008c60:	080090c3 	.word	0x080090c3
 8008c64:	08009095 	.word	0x08009095
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008c6e:	4619      	mov	r1, r3
 8008c70:	693a      	ldr	r2, [r7, #16]
 8008c72:	2334      	movs	r3, #52	; 0x34
 8008c74:	fb01 f303 	mul.w	r3, r1, r3
 8008c78:	4413      	add	r3, r2
 8008c7a:	3390      	adds	r3, #144	; 0x90
 8008c7c:	2204      	movs	r2, #4
 8008c7e:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8008c8c:	e222      	b.n	80090d4 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008c94:	b2d9      	uxtb	r1, r3
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008c9c:	461a      	mov	r2, r3
 8008c9e:	2334      	movs	r3, #52	; 0x34
 8008ca0:	fb02 f303 	mul.w	r3, r2, r3
 8008ca4:	3398      	adds	r3, #152	; 0x98
 8008ca6:	693a      	ldr	r2, [r7, #16]
 8008ca8:	4413      	add	r3, r2
 8008caa:	3307      	adds	r3, #7
 8008cac:	461a      	mov	r2, r3
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f000 ff6a 	bl	8009b88 <USBH_MSC_SCSI_Inquiry>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8008cb8:	7bfb      	ldrb	r3, [r7, #15]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d10b      	bne.n	8008cd6 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008cc4:	4619      	mov	r1, r3
 8008cc6:	693a      	ldr	r2, [r7, #16]
 8008cc8:	2334      	movs	r3, #52	; 0x34
 8008cca:	fb01 f303 	mul.w	r3, r1, r3
 8008cce:	4413      	add	r3, r2
 8008cd0:	3390      	adds	r3, #144	; 0x90
 8008cd2:	2202      	movs	r2, #2
 8008cd4:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8008cd6:	7bfb      	ldrb	r3, [r7, #15]
 8008cd8:	2b02      	cmp	r3, #2
 8008cda:	d10c      	bne.n	8008cf6 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008ce2:	4619      	mov	r1, r3
 8008ce4:	693a      	ldr	r2, [r7, #16]
 8008ce6:	2334      	movs	r3, #52	; 0x34
 8008ce8:	fb01 f303 	mul.w	r3, r1, r3
 8008cec:	4413      	add	r3, r2
 8008cee:	3390      	adds	r3, #144	; 0x90
 8008cf0:	2205      	movs	r2, #5
 8008cf2:	701a      	strb	r2, [r3, #0]
            break;
 8008cf4:	e1e7      	b.n	80090c6 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008cf6:	7bfb      	ldrb	r3, [r7, #15]
 8008cf8:	2b04      	cmp	r3, #4
 8008cfa:	f040 81e4 	bne.w	80090c6 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008d04:	4619      	mov	r1, r3
 8008d06:	693a      	ldr	r2, [r7, #16]
 8008d08:	2334      	movs	r3, #52	; 0x34
 8008d0a:	fb01 f303 	mul.w	r3, r1, r3
 8008d0e:	4413      	add	r3, r2
 8008d10:	3390      	adds	r3, #144	; 0x90
 8008d12:	2201      	movs	r2, #1
 8008d14:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008d1c:	4619      	mov	r1, r3
 8008d1e:	693a      	ldr	r2, [r7, #16]
 8008d20:	2334      	movs	r3, #52	; 0x34
 8008d22:	fb01 f303 	mul.w	r3, r1, r3
 8008d26:	4413      	add	r3, r2
 8008d28:	3391      	adds	r3, #145	; 0x91
 8008d2a:	2202      	movs	r2, #2
 8008d2c:	701a      	strb	r2, [r3, #0]
            break;
 8008d2e:	e1ca      	b.n	80090c6 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008d36:	b2db      	uxtb	r3, r3
 8008d38:	4619      	mov	r1, r3
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f000 fe66 	bl	8009a0c <USBH_MSC_SCSI_TestUnitReady>
 8008d40:	4603      	mov	r3, r0
 8008d42:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8008d44:	7bbb      	ldrb	r3, [r7, #14]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d149      	bne.n	8008dde <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8008d4a:	693b      	ldr	r3, [r7, #16]
 8008d4c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008d50:	4619      	mov	r1, r3
 8008d52:	693a      	ldr	r2, [r7, #16]
 8008d54:	2334      	movs	r3, #52	; 0x34
 8008d56:	fb01 f303 	mul.w	r3, r1, r3
 8008d5a:	4413      	add	r3, r2
 8008d5c:	3392      	adds	r3, #146	; 0x92
 8008d5e:	781b      	ldrb	r3, [r3, #0]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d00c      	beq.n	8008d7e <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8008d64:	693b      	ldr	r3, [r7, #16]
 8008d66:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008d6a:	4619      	mov	r1, r3
 8008d6c:	693a      	ldr	r2, [r7, #16]
 8008d6e:	2334      	movs	r3, #52	; 0x34
 8008d70:	fb01 f303 	mul.w	r3, r1, r3
 8008d74:	4413      	add	r3, r2
 8008d76:	33c1      	adds	r3, #193	; 0xc1
 8008d78:	2201      	movs	r2, #1
 8008d7a:	701a      	strb	r2, [r3, #0]
 8008d7c:	e00b      	b.n	8008d96 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008d84:	4619      	mov	r1, r3
 8008d86:	693a      	ldr	r2, [r7, #16]
 8008d88:	2334      	movs	r3, #52	; 0x34
 8008d8a:	fb01 f303 	mul.w	r3, r1, r3
 8008d8e:	4413      	add	r3, r2
 8008d90:	33c1      	adds	r3, #193	; 0xc1
 8008d92:	2200      	movs	r2, #0
 8008d94:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008d9c:	4619      	mov	r1, r3
 8008d9e:	693a      	ldr	r2, [r7, #16]
 8008da0:	2334      	movs	r3, #52	; 0x34
 8008da2:	fb01 f303 	mul.w	r3, r1, r3
 8008da6:	4413      	add	r3, r2
 8008da8:	3390      	adds	r3, #144	; 0x90
 8008daa:	2203      	movs	r2, #3
 8008dac:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8008dae:	693b      	ldr	r3, [r7, #16]
 8008db0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008db4:	4619      	mov	r1, r3
 8008db6:	693a      	ldr	r2, [r7, #16]
 8008db8:	2334      	movs	r3, #52	; 0x34
 8008dba:	fb01 f303 	mul.w	r3, r1, r3
 8008dbe:	4413      	add	r3, r2
 8008dc0:	3391      	adds	r3, #145	; 0x91
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008dcc:	4619      	mov	r1, r3
 8008dce:	693a      	ldr	r2, [r7, #16]
 8008dd0:	2334      	movs	r3, #52	; 0x34
 8008dd2:	fb01 f303 	mul.w	r3, r1, r3
 8008dd6:	4413      	add	r3, r2
 8008dd8:	3392      	adds	r3, #146	; 0x92
 8008dda:	2200      	movs	r2, #0
 8008ddc:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 8008dde:	7bbb      	ldrb	r3, [r7, #14]
 8008de0:	2b02      	cmp	r3, #2
 8008de2:	d14a      	bne.n	8008e7a <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008dea:	4619      	mov	r1, r3
 8008dec:	693a      	ldr	r2, [r7, #16]
 8008dee:	2334      	movs	r3, #52	; 0x34
 8008df0:	fb01 f303 	mul.w	r3, r1, r3
 8008df4:	4413      	add	r3, r2
 8008df6:	3392      	adds	r3, #146	; 0x92
 8008df8:	781b      	ldrb	r3, [r3, #0]
 8008dfa:	2b02      	cmp	r3, #2
 8008dfc:	d00c      	beq.n	8008e18 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008e04:	4619      	mov	r1, r3
 8008e06:	693a      	ldr	r2, [r7, #16]
 8008e08:	2334      	movs	r3, #52	; 0x34
 8008e0a:	fb01 f303 	mul.w	r3, r1, r3
 8008e0e:	4413      	add	r3, r2
 8008e10:	33c1      	adds	r3, #193	; 0xc1
 8008e12:	2201      	movs	r2, #1
 8008e14:	701a      	strb	r2, [r3, #0]
 8008e16:	e00b      	b.n	8008e30 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008e1e:	4619      	mov	r1, r3
 8008e20:	693a      	ldr	r2, [r7, #16]
 8008e22:	2334      	movs	r3, #52	; 0x34
 8008e24:	fb01 f303 	mul.w	r3, r1, r3
 8008e28:	4413      	add	r3, r2
 8008e2a:	33c1      	adds	r3, #193	; 0xc1
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008e30:	693b      	ldr	r3, [r7, #16]
 8008e32:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008e36:	4619      	mov	r1, r3
 8008e38:	693a      	ldr	r2, [r7, #16]
 8008e3a:	2334      	movs	r3, #52	; 0x34
 8008e3c:	fb01 f303 	mul.w	r3, r1, r3
 8008e40:	4413      	add	r3, r2
 8008e42:	3390      	adds	r3, #144	; 0x90
 8008e44:	2205      	movs	r2, #5
 8008e46:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008e4e:	4619      	mov	r1, r3
 8008e50:	693a      	ldr	r2, [r7, #16]
 8008e52:	2334      	movs	r3, #52	; 0x34
 8008e54:	fb01 f303 	mul.w	r3, r1, r3
 8008e58:	4413      	add	r3, r2
 8008e5a:	3391      	adds	r3, #145	; 0x91
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8008e60:	693b      	ldr	r3, [r7, #16]
 8008e62:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008e66:	4619      	mov	r1, r3
 8008e68:	693a      	ldr	r2, [r7, #16]
 8008e6a:	2334      	movs	r3, #52	; 0x34
 8008e6c:	fb01 f303 	mul.w	r3, r1, r3
 8008e70:	4413      	add	r3, r2
 8008e72:	3392      	adds	r3, #146	; 0x92
 8008e74:	2202      	movs	r2, #2
 8008e76:	701a      	strb	r2, [r3, #0]
            break;
 8008e78:	e127      	b.n	80090ca <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8008e7a:	7bbb      	ldrb	r3, [r7, #14]
 8008e7c:	2b04      	cmp	r3, #4
 8008e7e:	f040 8124 	bne.w	80090ca <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008e82:	693b      	ldr	r3, [r7, #16]
 8008e84:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008e88:	4619      	mov	r1, r3
 8008e8a:	693a      	ldr	r2, [r7, #16]
 8008e8c:	2334      	movs	r3, #52	; 0x34
 8008e8e:	fb01 f303 	mul.w	r3, r1, r3
 8008e92:	4413      	add	r3, r2
 8008e94:	3390      	adds	r3, #144	; 0x90
 8008e96:	2201      	movs	r2, #1
 8008e98:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008e9a:	693b      	ldr	r3, [r7, #16]
 8008e9c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008ea0:	4619      	mov	r1, r3
 8008ea2:	693a      	ldr	r2, [r7, #16]
 8008ea4:	2334      	movs	r3, #52	; 0x34
 8008ea6:	fb01 f303 	mul.w	r3, r1, r3
 8008eaa:	4413      	add	r3, r2
 8008eac:	3391      	adds	r3, #145	; 0x91
 8008eae:	2202      	movs	r2, #2
 8008eb0:	701a      	strb	r2, [r3, #0]
            break;
 8008eb2:	e10a      	b.n	80090ca <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008eba:	b2d9      	uxtb	r1, r3
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008ec2:	461a      	mov	r2, r3
 8008ec4:	2334      	movs	r3, #52	; 0x34
 8008ec6:	fb02 f303 	mul.w	r3, r2, r3
 8008eca:	3390      	adds	r3, #144	; 0x90
 8008ecc:	693a      	ldr	r2, [r7, #16]
 8008ece:	4413      	add	r3, r2
 8008ed0:	3304      	adds	r3, #4
 8008ed2:	461a      	mov	r2, r3
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f000 fddc 	bl	8009a92 <USBH_MSC_SCSI_ReadCapacity>
 8008eda:	4603      	mov	r3, r0
 8008edc:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8008ede:	7bfb      	ldrb	r3, [r7, #15]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d120      	bne.n	8008f26 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008eea:	4619      	mov	r1, r3
 8008eec:	693a      	ldr	r2, [r7, #16]
 8008eee:	2334      	movs	r3, #52	; 0x34
 8008ef0:	fb01 f303 	mul.w	r3, r1, r3
 8008ef4:	4413      	add	r3, r2
 8008ef6:	3390      	adds	r3, #144	; 0x90
 8008ef8:	2201      	movs	r2, #1
 8008efa:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8008efc:	693b      	ldr	r3, [r7, #16]
 8008efe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f02:	4619      	mov	r1, r3
 8008f04:	693a      	ldr	r2, [r7, #16]
 8008f06:	2334      	movs	r3, #52	; 0x34
 8008f08:	fb01 f303 	mul.w	r3, r1, r3
 8008f0c:	4413      	add	r3, r2
 8008f0e:	3391      	adds	r3, #145	; 0x91
 8008f10:	2200      	movs	r2, #0
 8008f12:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8008f14:	693b      	ldr	r3, [r7, #16]
 8008f16:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f1a:	3301      	adds	r3, #1
 8008f1c:	b29a      	uxth	r2, r3
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8008f24:	e0d3      	b.n	80090ce <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 8008f26:	7bfb      	ldrb	r3, [r7, #15]
 8008f28:	2b02      	cmp	r3, #2
 8008f2a:	d10c      	bne.n	8008f46 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f32:	4619      	mov	r1, r3
 8008f34:	693a      	ldr	r2, [r7, #16]
 8008f36:	2334      	movs	r3, #52	; 0x34
 8008f38:	fb01 f303 	mul.w	r3, r1, r3
 8008f3c:	4413      	add	r3, r2
 8008f3e:	3390      	adds	r3, #144	; 0x90
 8008f40:	2205      	movs	r2, #5
 8008f42:	701a      	strb	r2, [r3, #0]
            break;
 8008f44:	e0c3      	b.n	80090ce <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008f46:	7bfb      	ldrb	r3, [r7, #15]
 8008f48:	2b04      	cmp	r3, #4
 8008f4a:	f040 80c0 	bne.w	80090ce <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008f4e:	693b      	ldr	r3, [r7, #16]
 8008f50:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f54:	4619      	mov	r1, r3
 8008f56:	693a      	ldr	r2, [r7, #16]
 8008f58:	2334      	movs	r3, #52	; 0x34
 8008f5a:	fb01 f303 	mul.w	r3, r1, r3
 8008f5e:	4413      	add	r3, r2
 8008f60:	3390      	adds	r3, #144	; 0x90
 8008f62:	2201      	movs	r2, #1
 8008f64:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f6c:	4619      	mov	r1, r3
 8008f6e:	693a      	ldr	r2, [r7, #16]
 8008f70:	2334      	movs	r3, #52	; 0x34
 8008f72:	fb01 f303 	mul.w	r3, r1, r3
 8008f76:	4413      	add	r3, r2
 8008f78:	3391      	adds	r3, #145	; 0x91
 8008f7a:	2202      	movs	r2, #2
 8008f7c:	701a      	strb	r2, [r3, #0]
            break;
 8008f7e:	e0a6      	b.n	80090ce <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f86:	b2d9      	uxtb	r1, r3
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f8e:	461a      	mov	r2, r3
 8008f90:	2334      	movs	r3, #52	; 0x34
 8008f92:	fb02 f303 	mul.w	r3, r2, r3
 8008f96:	3398      	adds	r3, #152	; 0x98
 8008f98:	693a      	ldr	r2, [r7, #16]
 8008f9a:	4413      	add	r3, r2
 8008f9c:	3304      	adds	r3, #4
 8008f9e:	461a      	mov	r2, r3
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f000 fe96 	bl	8009cd2 <USBH_MSC_SCSI_RequestSense>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8008faa:	7bfb      	ldrb	r3, [r7, #15]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d145      	bne.n	800903c <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008fb6:	4619      	mov	r1, r3
 8008fb8:	693a      	ldr	r2, [r7, #16]
 8008fba:	2334      	movs	r3, #52	; 0x34
 8008fbc:	fb01 f303 	mul.w	r3, r1, r3
 8008fc0:	4413      	add	r3, r2
 8008fc2:	339c      	adds	r3, #156	; 0x9c
 8008fc4:	781b      	ldrb	r3, [r3, #0]
 8008fc6:	2b06      	cmp	r3, #6
 8008fc8:	d00c      	beq.n	8008fe4 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008fd0:	4619      	mov	r1, r3
 8008fd2:	693a      	ldr	r2, [r7, #16]
 8008fd4:	2334      	movs	r3, #52	; 0x34
 8008fd6:	fb01 f303 	mul.w	r3, r1, r3
 8008fda:	4413      	add	r3, r2
 8008fdc:	339c      	adds	r3, #156	; 0x9c
 8008fde:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8008fe0:	2b02      	cmp	r3, #2
 8008fe2:	d117      	bne.n	8009014 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8008fea:	693b      	ldr	r3, [r7, #16]
 8008fec:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8008ff0:	1ad3      	subs	r3, r2, r3
 8008ff2:	f242 720f 	movw	r2, #9999	; 0x270f
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d80c      	bhi.n	8009014 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009000:	4619      	mov	r1, r3
 8009002:	693a      	ldr	r2, [r7, #16]
 8009004:	2334      	movs	r3, #52	; 0x34
 8009006:	fb01 f303 	mul.w	r3, r1, r3
 800900a:	4413      	add	r3, r2
 800900c:	3390      	adds	r3, #144	; 0x90
 800900e:	2202      	movs	r2, #2
 8009010:	701a      	strb	r2, [r3, #0]
                  break;
 8009012:	e05f      	b.n	80090d4 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009014:	693b      	ldr	r3, [r7, #16]
 8009016:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800901a:	4619      	mov	r1, r3
 800901c:	693a      	ldr	r2, [r7, #16]
 800901e:	2334      	movs	r3, #52	; 0x34
 8009020:	fb01 f303 	mul.w	r3, r1, r3
 8009024:	4413      	add	r3, r2
 8009026:	3390      	adds	r3, #144	; 0x90
 8009028:	2201      	movs	r2, #1
 800902a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800902c:	693b      	ldr	r3, [r7, #16]
 800902e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009032:	3301      	adds	r3, #1
 8009034:	b29a      	uxth	r2, r3
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 800903c:	7bfb      	ldrb	r3, [r7, #15]
 800903e:	2b02      	cmp	r3, #2
 8009040:	d10c      	bne.n	800905c <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009048:	4619      	mov	r1, r3
 800904a:	693a      	ldr	r2, [r7, #16]
 800904c:	2334      	movs	r3, #52	; 0x34
 800904e:	fb01 f303 	mul.w	r3, r1, r3
 8009052:	4413      	add	r3, r2
 8009054:	3390      	adds	r3, #144	; 0x90
 8009056:	2208      	movs	r2, #8
 8009058:	701a      	strb	r2, [r3, #0]
            break;
 800905a:	e03a      	b.n	80090d2 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800905c:	7bfb      	ldrb	r3, [r7, #15]
 800905e:	2b04      	cmp	r3, #4
 8009060:	d137      	bne.n	80090d2 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009068:	4619      	mov	r1, r3
 800906a:	693a      	ldr	r2, [r7, #16]
 800906c:	2334      	movs	r3, #52	; 0x34
 800906e:	fb01 f303 	mul.w	r3, r1, r3
 8009072:	4413      	add	r3, r2
 8009074:	3390      	adds	r3, #144	; 0x90
 8009076:	2201      	movs	r2, #1
 8009078:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800907a:	693b      	ldr	r3, [r7, #16]
 800907c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009080:	4619      	mov	r1, r3
 8009082:	693a      	ldr	r2, [r7, #16]
 8009084:	2334      	movs	r3, #52	; 0x34
 8009086:	fb01 f303 	mul.w	r3, r1, r3
 800908a:	4413      	add	r3, r2
 800908c:	3391      	adds	r3, #145	; 0x91
 800908e:	2202      	movs	r2, #2
 8009090:	701a      	strb	r2, [r3, #0]
            break;
 8009092:	e01e      	b.n	80090d2 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800909a:	3301      	adds	r3, #1
 800909c:	b29a      	uxth	r2, r3
 800909e:	693b      	ldr	r3, [r7, #16]
 80090a0:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 80090a4:	e016      	b.n	80090d4 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	2200      	movs	r2, #0
 80090aa:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 80090ae:	693b      	ldr	r3, [r7, #16]
 80090b0:	2201      	movs	r2, #1
 80090b2:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80090ba:	2102      	movs	r1, #2
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	4798      	blx	r3
      break;
 80090c0:	e00c      	b.n	80090dc <USBH_MSC_Process+0x514>
            break;
 80090c2:	bf00      	nop
 80090c4:	e00a      	b.n	80090dc <USBH_MSC_Process+0x514>
            break;
 80090c6:	bf00      	nop
 80090c8:	e008      	b.n	80090dc <USBH_MSC_Process+0x514>
            break;
 80090ca:	bf00      	nop
 80090cc:	e006      	b.n	80090dc <USBH_MSC_Process+0x514>
            break;
 80090ce:	bf00      	nop
 80090d0:	e004      	b.n	80090dc <USBH_MSC_Process+0x514>
            break;
 80090d2:	bf00      	nop
      break;
 80090d4:	e002      	b.n	80090dc <USBH_MSC_Process+0x514>
      error = USBH_OK;
 80090d6:	2300      	movs	r3, #0
 80090d8:	75fb      	strb	r3, [r7, #23]
      break;
 80090da:	bf00      	nop
  }
  return error;
 80090dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3718      	adds	r7, #24
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}
 80090e6:	bf00      	nop

080090e8 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b083      	sub	sp, #12
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80090f0:	2300      	movs	r3, #0
}
 80090f2:	4618      	mov	r0, r3
 80090f4:	370c      	adds	r7, #12
 80090f6:	46bd      	mov	sp, r7
 80090f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fc:	4770      	bx	lr

080090fe <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80090fe:	b580      	push	{r7, lr}
 8009100:	b088      	sub	sp, #32
 8009102:	af02      	add	r7, sp, #8
 8009104:	6078      	str	r0, [r7, #4]
 8009106:	460b      	mov	r3, r1
 8009108:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009110:	69db      	ldr	r3, [r3, #28]
 8009112:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8009114:	2301      	movs	r3, #1
 8009116:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8009118:	2301      	movs	r3, #1
 800911a:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800911c:	78fb      	ldrb	r3, [r7, #3]
 800911e:	693a      	ldr	r2, [r7, #16]
 8009120:	2134      	movs	r1, #52	; 0x34
 8009122:	fb01 f303 	mul.w	r3, r1, r3
 8009126:	4413      	add	r3, r2
 8009128:	3390      	adds	r3, #144	; 0x90
 800912a:	781b      	ldrb	r3, [r3, #0]
 800912c:	2b07      	cmp	r3, #7
 800912e:	d03c      	beq.n	80091aa <USBH_MSC_RdWrProcess+0xac>
 8009130:	2b07      	cmp	r3, #7
 8009132:	f300 80a7 	bgt.w	8009284 <USBH_MSC_RdWrProcess+0x186>
 8009136:	2b05      	cmp	r3, #5
 8009138:	d06c      	beq.n	8009214 <USBH_MSC_RdWrProcess+0x116>
 800913a:	2b06      	cmp	r3, #6
 800913c:	f040 80a2 	bne.w	8009284 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8009140:	78f9      	ldrb	r1, [r7, #3]
 8009142:	2300      	movs	r3, #0
 8009144:	9300      	str	r3, [sp, #0]
 8009146:	2300      	movs	r3, #0
 8009148:	2200      	movs	r2, #0
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f000 fea5 	bl	8009e9a <USBH_MSC_SCSI_Read>
 8009150:	4603      	mov	r3, r0
 8009152:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8009154:	7bfb      	ldrb	r3, [r7, #15]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d10b      	bne.n	8009172 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800915a:	78fb      	ldrb	r3, [r7, #3]
 800915c:	693a      	ldr	r2, [r7, #16]
 800915e:	2134      	movs	r1, #52	; 0x34
 8009160:	fb01 f303 	mul.w	r3, r1, r3
 8009164:	4413      	add	r3, r2
 8009166:	3390      	adds	r3, #144	; 0x90
 8009168:	2201      	movs	r2, #1
 800916a:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800916c:	2300      	movs	r3, #0
 800916e:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009170:	e08a      	b.n	8009288 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 8009172:	7bfb      	ldrb	r3, [r7, #15]
 8009174:	2b02      	cmp	r3, #2
 8009176:	d109      	bne.n	800918c <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8009178:	78fb      	ldrb	r3, [r7, #3]
 800917a:	693a      	ldr	r2, [r7, #16]
 800917c:	2134      	movs	r1, #52	; 0x34
 800917e:	fb01 f303 	mul.w	r3, r1, r3
 8009182:	4413      	add	r3, r2
 8009184:	3390      	adds	r3, #144	; 0x90
 8009186:	2205      	movs	r2, #5
 8009188:	701a      	strb	r2, [r3, #0]
      break;
 800918a:	e07d      	b.n	8009288 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800918c:	7bfb      	ldrb	r3, [r7, #15]
 800918e:	2b04      	cmp	r3, #4
 8009190:	d17a      	bne.n	8009288 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8009192:	78fb      	ldrb	r3, [r7, #3]
 8009194:	693a      	ldr	r2, [r7, #16]
 8009196:	2134      	movs	r1, #52	; 0x34
 8009198:	fb01 f303 	mul.w	r3, r1, r3
 800919c:	4413      	add	r3, r2
 800919e:	3390      	adds	r3, #144	; 0x90
 80091a0:	2208      	movs	r2, #8
 80091a2:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80091a4:	2302      	movs	r3, #2
 80091a6:	75fb      	strb	r3, [r7, #23]
      break;
 80091a8:	e06e      	b.n	8009288 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 80091aa:	78f9      	ldrb	r1, [r7, #3]
 80091ac:	2300      	movs	r3, #0
 80091ae:	9300      	str	r3, [sp, #0]
 80091b0:	2300      	movs	r3, #0
 80091b2:	2200      	movs	r2, #0
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f000 fe05 	bl	8009dc4 <USBH_MSC_SCSI_Write>
 80091ba:	4603      	mov	r3, r0
 80091bc:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 80091be:	7bfb      	ldrb	r3, [r7, #15]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d10b      	bne.n	80091dc <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80091c4:	78fb      	ldrb	r3, [r7, #3]
 80091c6:	693a      	ldr	r2, [r7, #16]
 80091c8:	2134      	movs	r1, #52	; 0x34
 80091ca:	fb01 f303 	mul.w	r3, r1, r3
 80091ce:	4413      	add	r3, r2
 80091d0:	3390      	adds	r3, #144	; 0x90
 80091d2:	2201      	movs	r2, #1
 80091d4:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 80091d6:	2300      	movs	r3, #0
 80091d8:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80091da:	e057      	b.n	800928c <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 80091dc:	7bfb      	ldrb	r3, [r7, #15]
 80091de:	2b02      	cmp	r3, #2
 80091e0:	d109      	bne.n	80091f6 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 80091e2:	78fb      	ldrb	r3, [r7, #3]
 80091e4:	693a      	ldr	r2, [r7, #16]
 80091e6:	2134      	movs	r1, #52	; 0x34
 80091e8:	fb01 f303 	mul.w	r3, r1, r3
 80091ec:	4413      	add	r3, r2
 80091ee:	3390      	adds	r3, #144	; 0x90
 80091f0:	2205      	movs	r2, #5
 80091f2:	701a      	strb	r2, [r3, #0]
      break;
 80091f4:	e04a      	b.n	800928c <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80091f6:	7bfb      	ldrb	r3, [r7, #15]
 80091f8:	2b04      	cmp	r3, #4
 80091fa:	d147      	bne.n	800928c <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80091fc:	78fb      	ldrb	r3, [r7, #3]
 80091fe:	693a      	ldr	r2, [r7, #16]
 8009200:	2134      	movs	r1, #52	; 0x34
 8009202:	fb01 f303 	mul.w	r3, r1, r3
 8009206:	4413      	add	r3, r2
 8009208:	3390      	adds	r3, #144	; 0x90
 800920a:	2208      	movs	r2, #8
 800920c:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800920e:	2302      	movs	r3, #2
 8009210:	75fb      	strb	r3, [r7, #23]
      break;
 8009212:	e03b      	b.n	800928c <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8009214:	78fb      	ldrb	r3, [r7, #3]
 8009216:	2234      	movs	r2, #52	; 0x34
 8009218:	fb02 f303 	mul.w	r3, r2, r3
 800921c:	3398      	adds	r3, #152	; 0x98
 800921e:	693a      	ldr	r2, [r7, #16]
 8009220:	4413      	add	r3, r2
 8009222:	1d1a      	adds	r2, r3, #4
 8009224:	78fb      	ldrb	r3, [r7, #3]
 8009226:	4619      	mov	r1, r3
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f000 fd52 	bl	8009cd2 <USBH_MSC_SCSI_RequestSense>
 800922e:	4603      	mov	r3, r0
 8009230:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8009232:	7bfb      	ldrb	r3, [r7, #15]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d113      	bne.n	8009260 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009238:	78fb      	ldrb	r3, [r7, #3]
 800923a:	693a      	ldr	r2, [r7, #16]
 800923c:	2134      	movs	r1, #52	; 0x34
 800923e:	fb01 f303 	mul.w	r3, r1, r3
 8009242:	4413      	add	r3, r2
 8009244:	3390      	adds	r3, #144	; 0x90
 8009246:	2201      	movs	r2, #1
 8009248:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800924a:	78fb      	ldrb	r3, [r7, #3]
 800924c:	693a      	ldr	r2, [r7, #16]
 800924e:	2134      	movs	r1, #52	; 0x34
 8009250:	fb01 f303 	mul.w	r3, r1, r3
 8009254:	4413      	add	r3, r2
 8009256:	3391      	adds	r3, #145	; 0x91
 8009258:	2202      	movs	r2, #2
 800925a:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 800925c:	2302      	movs	r3, #2
 800925e:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 8009260:	7bfb      	ldrb	r3, [r7, #15]
 8009262:	2b02      	cmp	r3, #2
 8009264:	d014      	beq.n	8009290 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009266:	7bfb      	ldrb	r3, [r7, #15]
 8009268:	2b04      	cmp	r3, #4
 800926a:	d111      	bne.n	8009290 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800926c:	78fb      	ldrb	r3, [r7, #3]
 800926e:	693a      	ldr	r2, [r7, #16]
 8009270:	2134      	movs	r1, #52	; 0x34
 8009272:	fb01 f303 	mul.w	r3, r1, r3
 8009276:	4413      	add	r3, r2
 8009278:	3390      	adds	r3, #144	; 0x90
 800927a:	2208      	movs	r2, #8
 800927c:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800927e:	2302      	movs	r3, #2
 8009280:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009282:	e005      	b.n	8009290 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 8009284:	bf00      	nop
 8009286:	e004      	b.n	8009292 <USBH_MSC_RdWrProcess+0x194>
      break;
 8009288:	bf00      	nop
 800928a:	e002      	b.n	8009292 <USBH_MSC_RdWrProcess+0x194>
      break;
 800928c:	bf00      	nop
 800928e:	e000      	b.n	8009292 <USBH_MSC_RdWrProcess+0x194>
      break;
 8009290:	bf00      	nop

  }
  return error;
 8009292:	7dfb      	ldrb	r3, [r7, #23]
}
 8009294:	4618      	mov	r0, r3
 8009296:	3718      	adds	r7, #24
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}

0800929c <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800929c:	b480      	push	{r7}
 800929e:	b085      	sub	sp, #20
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
 80092a4:	460b      	mov	r3, r1
 80092a6:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80092ae:	69db      	ldr	r3, [r3, #28]
 80092b0:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	781b      	ldrb	r3, [r3, #0]
 80092b6:	b2db      	uxtb	r3, r3
 80092b8:	2b0b      	cmp	r3, #11
 80092ba:	d10c      	bne.n	80092d6 <USBH_MSC_UnitIsReady+0x3a>
 80092bc:	78fb      	ldrb	r3, [r7, #3]
 80092be:	68ba      	ldr	r2, [r7, #8]
 80092c0:	2134      	movs	r1, #52	; 0x34
 80092c2:	fb01 f303 	mul.w	r3, r1, r3
 80092c6:	4413      	add	r3, r2
 80092c8:	3391      	adds	r3, #145	; 0x91
 80092ca:	781b      	ldrb	r3, [r3, #0]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d102      	bne.n	80092d6 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 80092d0:	2301      	movs	r3, #1
 80092d2:	73fb      	strb	r3, [r7, #15]
 80092d4:	e001      	b.n	80092da <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 80092d6:	2300      	movs	r3, #0
 80092d8:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 80092da:	7bfb      	ldrb	r3, [r7, #15]
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3714      	adds	r7, #20
 80092e0:	46bd      	mov	sp, r7
 80092e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e6:	4770      	bx	lr

080092e8 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b086      	sub	sp, #24
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	60f8      	str	r0, [r7, #12]
 80092f0:	460b      	mov	r3, r1
 80092f2:	607a      	str	r2, [r7, #4]
 80092f4:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80092fc:	69db      	ldr	r3, [r3, #28]
 80092fe:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	781b      	ldrb	r3, [r3, #0]
 8009304:	b2db      	uxtb	r3, r3
 8009306:	2b0b      	cmp	r3, #11
 8009308:	d10d      	bne.n	8009326 <USBH_MSC_GetLUNInfo+0x3e>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800930a:	7afb      	ldrb	r3, [r7, #11]
 800930c:	2234      	movs	r2, #52	; 0x34
 800930e:	fb02 f303 	mul.w	r3, r2, r3
 8009312:	3390      	adds	r3, #144	; 0x90
 8009314:	697a      	ldr	r2, [r7, #20]
 8009316:	4413      	add	r3, r2
 8009318:	2234      	movs	r2, #52	; 0x34
 800931a:	4619      	mov	r1, r3
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f007 fca3 	bl	8010c68 <memcpy>
    return USBH_OK;
 8009322:	2300      	movs	r3, #0
 8009324:	e000      	b.n	8009328 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8009326:	2302      	movs	r3, #2
  }
}
 8009328:	4618      	mov	r0, r3
 800932a:	3718      	adds	r7, #24
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}

08009330 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b088      	sub	sp, #32
 8009334:	af02      	add	r7, sp, #8
 8009336:	60f8      	str	r0, [r7, #12]
 8009338:	607a      	str	r2, [r7, #4]
 800933a:	603b      	str	r3, [r7, #0]
 800933c:	460b      	mov	r3, r1
 800933e:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009346:	69db      	ldr	r3, [r3, #28]
 8009348:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009350:	b2db      	uxtb	r3, r3
 8009352:	2b00      	cmp	r3, #0
 8009354:	d00e      	beq.n	8009374 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	781b      	ldrb	r3, [r3, #0]
 800935a:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800935c:	2b0b      	cmp	r3, #11
 800935e:	d109      	bne.n	8009374 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8009360:	7afb      	ldrb	r3, [r7, #11]
 8009362:	697a      	ldr	r2, [r7, #20]
 8009364:	2134      	movs	r1, #52	; 0x34
 8009366:	fb01 f303 	mul.w	r3, r1, r3
 800936a:	4413      	add	r3, r2
 800936c:	3390      	adds	r3, #144	; 0x90
 800936e:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8009370:	2b01      	cmp	r3, #1
 8009372:	d001      	beq.n	8009378 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8009374:	2302      	movs	r3, #2
 8009376:	e040      	b.n	80093fa <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	2206      	movs	r2, #6
 800937c:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800937e:	7afb      	ldrb	r3, [r7, #11]
 8009380:	697a      	ldr	r2, [r7, #20]
 8009382:	2134      	movs	r1, #52	; 0x34
 8009384:	fb01 f303 	mul.w	r3, r1, r3
 8009388:	4413      	add	r3, r2
 800938a:	3390      	adds	r3, #144	; 0x90
 800938c:	2206      	movs	r2, #6
 800938e:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8009390:	7afb      	ldrb	r3, [r7, #11]
 8009392:	b29a      	uxth	r2, r3
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800939a:	7af9      	ldrb	r1, [r7, #11]
 800939c:	6a3b      	ldr	r3, [r7, #32]
 800939e:	9300      	str	r3, [sp, #0]
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	687a      	ldr	r2, [r7, #4]
 80093a4:	68f8      	ldr	r0, [r7, #12]
 80093a6:	f000 fd78 	bl	8009e9a <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80093b0:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80093b2:	e016      	b.n	80093e2 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	1ad2      	subs	r2, r2, r3
 80093be:	6a3b      	ldr	r3, [r7, #32]
 80093c0:	f242 7110 	movw	r1, #10000	; 0x2710
 80093c4:	fb01 f303 	mul.w	r3, r1, r3
 80093c8:	429a      	cmp	r2, r3
 80093ca:	d805      	bhi.n	80093d8 <USBH_MSC_Read+0xa8>
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80093d2:	b2db      	uxtb	r3, r3
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d104      	bne.n	80093e2 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	2201      	movs	r2, #1
 80093dc:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 80093de:	2302      	movs	r3, #2
 80093e0:	e00b      	b.n	80093fa <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80093e2:	7afb      	ldrb	r3, [r7, #11]
 80093e4:	4619      	mov	r1, r3
 80093e6:	68f8      	ldr	r0, [r7, #12]
 80093e8:	f7ff fe89 	bl	80090fe <USBH_MSC_RdWrProcess>
 80093ec:	4603      	mov	r3, r0
 80093ee:	2b01      	cmp	r3, #1
 80093f0:	d0e0      	beq.n	80093b4 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	2201      	movs	r2, #1
 80093f6:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 80093f8:	2300      	movs	r3, #0
}
 80093fa:	4618      	mov	r0, r3
 80093fc:	3718      	adds	r7, #24
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}

08009402 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8009402:	b580      	push	{r7, lr}
 8009404:	b088      	sub	sp, #32
 8009406:	af02      	add	r7, sp, #8
 8009408:	60f8      	str	r0, [r7, #12]
 800940a:	607a      	str	r2, [r7, #4]
 800940c:	603b      	str	r3, [r7, #0]
 800940e:	460b      	mov	r3, r1
 8009410:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009418:	69db      	ldr	r3, [r3, #28]
 800941a:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009422:	b2db      	uxtb	r3, r3
 8009424:	2b00      	cmp	r3, #0
 8009426:	d00e      	beq.n	8009446 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	781b      	ldrb	r3, [r3, #0]
 800942c:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800942e:	2b0b      	cmp	r3, #11
 8009430:	d109      	bne.n	8009446 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8009432:	7afb      	ldrb	r3, [r7, #11]
 8009434:	697a      	ldr	r2, [r7, #20]
 8009436:	2134      	movs	r1, #52	; 0x34
 8009438:	fb01 f303 	mul.w	r3, r1, r3
 800943c:	4413      	add	r3, r2
 800943e:	3390      	adds	r3, #144	; 0x90
 8009440:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8009442:	2b01      	cmp	r3, #1
 8009444:	d001      	beq.n	800944a <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8009446:	2302      	movs	r3, #2
 8009448:	e040      	b.n	80094cc <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800944a:	697b      	ldr	r3, [r7, #20]
 800944c:	2207      	movs	r2, #7
 800944e:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8009450:	7afb      	ldrb	r3, [r7, #11]
 8009452:	697a      	ldr	r2, [r7, #20]
 8009454:	2134      	movs	r1, #52	; 0x34
 8009456:	fb01 f303 	mul.w	r3, r1, r3
 800945a:	4413      	add	r3, r2
 800945c:	3390      	adds	r3, #144	; 0x90
 800945e:	2207      	movs	r2, #7
 8009460:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8009462:	7afb      	ldrb	r3, [r7, #11]
 8009464:	b29a      	uxth	r2, r3
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800946c:	7af9      	ldrb	r1, [r7, #11]
 800946e:	6a3b      	ldr	r3, [r7, #32]
 8009470:	9300      	str	r3, [sp, #0]
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	687a      	ldr	r2, [r7, #4]
 8009476:	68f8      	ldr	r0, [r7, #12]
 8009478:	f000 fca4 	bl	8009dc4 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009482:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009484:	e016      	b.n	80094b4 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800948c:	693b      	ldr	r3, [r7, #16]
 800948e:	1ad2      	subs	r2, r2, r3
 8009490:	6a3b      	ldr	r3, [r7, #32]
 8009492:	f242 7110 	movw	r1, #10000	; 0x2710
 8009496:	fb01 f303 	mul.w	r3, r1, r3
 800949a:	429a      	cmp	r2, r3
 800949c:	d805      	bhi.n	80094aa <USBH_MSC_Write+0xa8>
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80094a4:	b2db      	uxtb	r3, r3
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d104      	bne.n	80094b4 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 80094aa:	697b      	ldr	r3, [r7, #20]
 80094ac:	2201      	movs	r2, #1
 80094ae:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 80094b0:	2302      	movs	r3, #2
 80094b2:	e00b      	b.n	80094cc <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80094b4:	7afb      	ldrb	r3, [r7, #11]
 80094b6:	4619      	mov	r1, r3
 80094b8:	68f8      	ldr	r0, [r7, #12]
 80094ba:	f7ff fe20 	bl	80090fe <USBH_MSC_RdWrProcess>
 80094be:	4603      	mov	r3, r0
 80094c0:	2b01      	cmp	r3, #1
 80094c2:	d0e0      	beq.n	8009486 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80094c4:	697b      	ldr	r3, [r7, #20]
 80094c6:	2201      	movs	r2, #1
 80094c8:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 80094ca:	2300      	movs	r3, #0
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3718      	adds	r7, #24
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}

080094d4 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b082      	sub	sp, #8
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2221      	movs	r2, #33	; 0x21
 80094e0:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	22ff      	movs	r2, #255	; 0xff
 80094e6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2200      	movs	r2, #0
 80094ec:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2200      	movs	r2, #0
 80094f2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2200      	movs	r2, #0
 80094f8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 80094fa:	2200      	movs	r2, #0
 80094fc:	2100      	movs	r1, #0
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f001 fea4 	bl	800b24c <USBH_CtlReq>
 8009504:	4603      	mov	r3, r0
}
 8009506:	4618      	mov	r0, r3
 8009508:	3708      	adds	r7, #8
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}

0800950e <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800950e:	b580      	push	{r7, lr}
 8009510:	b082      	sub	sp, #8
 8009512:	af00      	add	r7, sp, #0
 8009514:	6078      	str	r0, [r7, #4]
 8009516:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	22a1      	movs	r2, #161	; 0xa1
 800951c:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	22fe      	movs	r2, #254	; 0xfe
 8009522:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2200      	movs	r2, #0
 8009528:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2200      	movs	r2, #0
 800952e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2201      	movs	r2, #1
 8009534:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8009536:	2201      	movs	r2, #1
 8009538:	6839      	ldr	r1, [r7, #0]
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f001 fe86 	bl	800b24c <USBH_CtlReq>
 8009540:	4603      	mov	r3, r0
}
 8009542:	4618      	mov	r0, r3
 8009544:	3708      	adds	r7, #8
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}
	...

0800954c <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800954c:	b480      	push	{r7}
 800954e:	b085      	sub	sp, #20
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800955a:	69db      	ldr	r3, [r3, #28]
 800955c:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	4a09      	ldr	r2, [pc, #36]	; (8009588 <USBH_MSC_BOT_Init+0x3c>)
 8009562:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	4a09      	ldr	r2, [pc, #36]	; (800958c <USBH_MSC_BOT_Init+0x40>)
 8009568:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	2201      	movs	r2, #1
 800956e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	2201      	movs	r2, #1
 8009576:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800957a:	2300      	movs	r3, #0
}
 800957c:	4618      	mov	r0, r3
 800957e:	3714      	adds	r7, #20
 8009580:	46bd      	mov	sp, r7
 8009582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009586:	4770      	bx	lr
 8009588:	43425355 	.word	0x43425355
 800958c:	20304050 	.word	0x20304050

08009590 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b088      	sub	sp, #32
 8009594:	af02      	add	r7, sp, #8
 8009596:	6078      	str	r0, [r7, #4]
 8009598:	460b      	mov	r3, r1
 800959a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800959c:	2301      	movs	r3, #1
 800959e:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 80095a0:	2301      	movs	r3, #1
 80095a2:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 80095a4:	2301      	movs	r3, #1
 80095a6:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80095a8:	2300      	movs	r3, #0
 80095aa:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80095b2:	69db      	ldr	r3, [r3, #28]
 80095b4:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 80095b6:	2300      	movs	r3, #0
 80095b8:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 80095ba:	693b      	ldr	r3, [r7, #16]
 80095bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80095c0:	3b01      	subs	r3, #1
 80095c2:	2b0a      	cmp	r3, #10
 80095c4:	f200 819e 	bhi.w	8009904 <USBH_MSC_BOT_Process+0x374>
 80095c8:	a201      	add	r2, pc, #4	; (adr r2, 80095d0 <USBH_MSC_BOT_Process+0x40>)
 80095ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095ce:	bf00      	nop
 80095d0:	080095fd 	.word	0x080095fd
 80095d4:	08009625 	.word	0x08009625
 80095d8:	0800968f 	.word	0x0800968f
 80095dc:	080096ad 	.word	0x080096ad
 80095e0:	08009731 	.word	0x08009731
 80095e4:	08009753 	.word	0x08009753
 80095e8:	080097eb 	.word	0x080097eb
 80095ec:	08009807 	.word	0x08009807
 80095f0:	08009859 	.word	0x08009859
 80095f4:	08009889 	.word	0x08009889
 80095f8:	080098eb 	.word	0x080098eb
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	78fa      	ldrb	r2, [r7, #3]
 8009600:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	2202      	movs	r2, #2
 8009608:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800960c:	693b      	ldr	r3, [r7, #16]
 800960e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8009612:	693b      	ldr	r3, [r7, #16]
 8009614:	795b      	ldrb	r3, [r3, #5]
 8009616:	2201      	movs	r2, #1
 8009618:	9200      	str	r2, [sp, #0]
 800961a:	221f      	movs	r2, #31
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f002 f824 	bl	800b66a <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8009622:	e17e      	b.n	8009922 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8009624:	693b      	ldr	r3, [r7, #16]
 8009626:	795b      	ldrb	r3, [r3, #5]
 8009628:	4619      	mov	r1, r3
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f007 fa2a 	bl	8010a84 <USBH_LL_GetURBState>
 8009630:	4603      	mov	r3, r0
 8009632:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009634:	7d3b      	ldrb	r3, [r7, #20]
 8009636:	2b01      	cmp	r3, #1
 8009638:	d118      	bne.n	800966c <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800963a:	693b      	ldr	r3, [r7, #16]
 800963c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800963e:	2b00      	cmp	r3, #0
 8009640:	d00f      	beq.n	8009662 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8009642:	693b      	ldr	r3, [r7, #16]
 8009644:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8009648:	b25b      	sxtb	r3, r3
 800964a:	2b00      	cmp	r3, #0
 800964c:	da04      	bge.n	8009658 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800964e:	693b      	ldr	r3, [r7, #16]
 8009650:	2203      	movs	r2, #3
 8009652:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009656:	e157      	b.n	8009908 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	2205      	movs	r2, #5
 800965c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009660:	e152      	b.n	8009908 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8009662:	693b      	ldr	r3, [r7, #16]
 8009664:	2207      	movs	r2, #7
 8009666:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800966a:	e14d      	b.n	8009908 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 800966c:	7d3b      	ldrb	r3, [r7, #20]
 800966e:	2b02      	cmp	r3, #2
 8009670:	d104      	bne.n	800967c <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	2201      	movs	r2, #1
 8009676:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800967a:	e145      	b.n	8009908 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 800967c:	7d3b      	ldrb	r3, [r7, #20]
 800967e:	2b05      	cmp	r3, #5
 8009680:	f040 8142 	bne.w	8009908 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	220a      	movs	r2, #10
 8009688:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800968c:	e13c      	b.n	8009908 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800968e:	693b      	ldr	r3, [r7, #16]
 8009690:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009694:	693b      	ldr	r3, [r7, #16]
 8009696:	895a      	ldrh	r2, [r3, #10]
 8009698:	693b      	ldr	r3, [r7, #16]
 800969a:	791b      	ldrb	r3, [r3, #4]
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f002 f809 	bl	800b6b4 <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 80096a2:	693b      	ldr	r3, [r7, #16]
 80096a4:	2204      	movs	r2, #4
 80096a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 80096aa:	e13a      	b.n	8009922 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	791b      	ldrb	r3, [r3, #4]
 80096b0:	4619      	mov	r1, r3
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f007 f9e6 	bl	8010a84 <USBH_LL_GetURBState>
 80096b8:	4603      	mov	r3, r0
 80096ba:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80096bc:	7d3b      	ldrb	r3, [r7, #20]
 80096be:	2b01      	cmp	r3, #1
 80096c0:	d12d      	bne.n	800971e <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096c6:	693a      	ldr	r2, [r7, #16]
 80096c8:	8952      	ldrh	r2, [r2, #10]
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d910      	bls.n	80096f0 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 80096ce:	693b      	ldr	r3, [r7, #16]
 80096d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096d4:	693a      	ldr	r2, [r7, #16]
 80096d6:	8952      	ldrh	r2, [r2, #10]
 80096d8:	441a      	add	r2, r3
 80096da:	693b      	ldr	r3, [r7, #16]
 80096dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 80096e0:	693b      	ldr	r3, [r7, #16]
 80096e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096e4:	693a      	ldr	r2, [r7, #16]
 80096e6:	8952      	ldrh	r2, [r2, #10]
 80096e8:	1a9a      	subs	r2, r3, r2
 80096ea:	693b      	ldr	r3, [r7, #16]
 80096ec:	65da      	str	r2, [r3, #92]	; 0x5c
 80096ee:	e002      	b.n	80096f6 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 80096f0:	693b      	ldr	r3, [r7, #16]
 80096f2:	2200      	movs	r2, #0
 80096f4:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 80096f6:	693b      	ldr	r3, [r7, #16]
 80096f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d00a      	beq.n	8009714 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 80096fe:	693b      	ldr	r3, [r7, #16]
 8009700:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009704:	693b      	ldr	r3, [r7, #16]
 8009706:	895a      	ldrh	r2, [r3, #10]
 8009708:	693b      	ldr	r3, [r7, #16]
 800970a:	791b      	ldrb	r3, [r3, #4]
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f001 ffd1 	bl	800b6b4 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8009712:	e0fb      	b.n	800990c <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8009714:	693b      	ldr	r3, [r7, #16]
 8009716:	2207      	movs	r2, #7
 8009718:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800971c:	e0f6      	b.n	800990c <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800971e:	7d3b      	ldrb	r3, [r7, #20]
 8009720:	2b05      	cmp	r3, #5
 8009722:	f040 80f3 	bne.w	800990c <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	2209      	movs	r2, #9
 800972a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800972e:	e0ed      	b.n	800990c <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8009730:	693b      	ldr	r3, [r7, #16]
 8009732:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009736:	693b      	ldr	r3, [r7, #16]
 8009738:	891a      	ldrh	r2, [r3, #8]
 800973a:	693b      	ldr	r3, [r7, #16]
 800973c:	795b      	ldrb	r3, [r3, #5]
 800973e:	2001      	movs	r0, #1
 8009740:	9000      	str	r0, [sp, #0]
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f001 ff91 	bl	800b66a <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	2206      	movs	r2, #6
 800974c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009750:	e0e7      	b.n	8009922 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	795b      	ldrb	r3, [r3, #5]
 8009756:	4619      	mov	r1, r3
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	f007 f993 	bl	8010a84 <USBH_LL_GetURBState>
 800975e:	4603      	mov	r3, r0
 8009760:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009762:	7d3b      	ldrb	r3, [r7, #20]
 8009764:	2b01      	cmp	r3, #1
 8009766:	d12f      	bne.n	80097c8 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8009768:	693b      	ldr	r3, [r7, #16]
 800976a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800976c:	693a      	ldr	r2, [r7, #16]
 800976e:	8912      	ldrh	r2, [r2, #8]
 8009770:	4293      	cmp	r3, r2
 8009772:	d910      	bls.n	8009796 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8009774:	693b      	ldr	r3, [r7, #16]
 8009776:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800977a:	693a      	ldr	r2, [r7, #16]
 800977c:	8912      	ldrh	r2, [r2, #8]
 800977e:	441a      	add	r2, r3
 8009780:	693b      	ldr	r3, [r7, #16]
 8009782:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8009786:	693b      	ldr	r3, [r7, #16]
 8009788:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800978a:	693a      	ldr	r2, [r7, #16]
 800978c:	8912      	ldrh	r2, [r2, #8]
 800978e:	1a9a      	subs	r2, r3, r2
 8009790:	693b      	ldr	r3, [r7, #16]
 8009792:	65da      	str	r2, [r3, #92]	; 0x5c
 8009794:	e002      	b.n	800979c <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8009796:	693b      	ldr	r3, [r7, #16]
 8009798:	2200      	movs	r2, #0
 800979a:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800979c:	693b      	ldr	r3, [r7, #16]
 800979e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d00c      	beq.n	80097be <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80097aa:	693b      	ldr	r3, [r7, #16]
 80097ac:	891a      	ldrh	r2, [r3, #8]
 80097ae:	693b      	ldr	r3, [r7, #16]
 80097b0:	795b      	ldrb	r3, [r3, #5]
 80097b2:	2001      	movs	r0, #1
 80097b4:	9000      	str	r0, [sp, #0]
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f001 ff57 	bl	800b66a <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 80097bc:	e0a8      	b.n	8009910 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 80097be:	693b      	ldr	r3, [r7, #16]
 80097c0:	2207      	movs	r2, #7
 80097c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80097c6:	e0a3      	b.n	8009910 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 80097c8:	7d3b      	ldrb	r3, [r7, #20]
 80097ca:	2b02      	cmp	r3, #2
 80097cc:	d104      	bne.n	80097d8 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 80097ce:	693b      	ldr	r3, [r7, #16]
 80097d0:	2205      	movs	r2, #5
 80097d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80097d6:	e09b      	b.n	8009910 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 80097d8:	7d3b      	ldrb	r3, [r7, #20]
 80097da:	2b05      	cmp	r3, #5
 80097dc:	f040 8098 	bne.w	8009910 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 80097e0:	693b      	ldr	r3, [r7, #16]
 80097e2:	220a      	movs	r2, #10
 80097e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80097e8:	e092      	b.n	8009910 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 80097ea:	693b      	ldr	r3, [r7, #16]
 80097ec:	f103 0178 	add.w	r1, r3, #120	; 0x78
 80097f0:	693b      	ldr	r3, [r7, #16]
 80097f2:	791b      	ldrb	r3, [r3, #4]
 80097f4:	220d      	movs	r2, #13
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f001 ff5c 	bl	800b6b4 <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 80097fc:	693b      	ldr	r3, [r7, #16]
 80097fe:	2208      	movs	r2, #8
 8009800:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009804:	e08d      	b.n	8009922 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8009806:	693b      	ldr	r3, [r7, #16]
 8009808:	791b      	ldrb	r3, [r3, #4]
 800980a:	4619      	mov	r1, r3
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f007 f939 	bl	8010a84 <USBH_LL_GetURBState>
 8009812:	4603      	mov	r3, r0
 8009814:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8009816:	7d3b      	ldrb	r3, [r7, #20]
 8009818:	2b01      	cmp	r3, #1
 800981a:	d115      	bne.n	8009848 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800981c:	693b      	ldr	r3, [r7, #16]
 800981e:	2201      	movs	r2, #1
 8009820:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8009824:	693b      	ldr	r3, [r7, #16]
 8009826:	2201      	movs	r2, #1
 8009828:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f000 f8a9 	bl	8009984 <USBH_MSC_DecodeCSW>
 8009832:	4603      	mov	r3, r0
 8009834:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8009836:	7d7b      	ldrb	r3, [r7, #21]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d102      	bne.n	8009842 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 800983c:	2300      	movs	r3, #0
 800983e:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8009840:	e068      	b.n	8009914 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 8009842:	2302      	movs	r3, #2
 8009844:	75fb      	strb	r3, [r7, #23]
      break;
 8009846:	e065      	b.n	8009914 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 8009848:	7d3b      	ldrb	r3, [r7, #20]
 800984a:	2b05      	cmp	r3, #5
 800984c:	d162      	bne.n	8009914 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800984e:	693b      	ldr	r3, [r7, #16]
 8009850:	2209      	movs	r2, #9
 8009852:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009856:	e05d      	b.n	8009914 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8009858:	78fb      	ldrb	r3, [r7, #3]
 800985a:	2200      	movs	r2, #0
 800985c:	4619      	mov	r1, r3
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f000 f864 	bl	800992c <USBH_MSC_BOT_Abort>
 8009864:	4603      	mov	r3, r0
 8009866:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009868:	7dbb      	ldrb	r3, [r7, #22]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d104      	bne.n	8009878 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	2207      	movs	r2, #7
 8009872:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8009876:	e04f      	b.n	8009918 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 8009878:	7dbb      	ldrb	r3, [r7, #22]
 800987a:	2b04      	cmp	r3, #4
 800987c:	d14c      	bne.n	8009918 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	220b      	movs	r2, #11
 8009882:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009886:	e047      	b.n	8009918 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8009888:	78fb      	ldrb	r3, [r7, #3]
 800988a:	2201      	movs	r2, #1
 800988c:	4619      	mov	r1, r3
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f000 f84c 	bl	800992c <USBH_MSC_BOT_Abort>
 8009894:	4603      	mov	r3, r0
 8009896:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009898:	7dbb      	ldrb	r3, [r7, #22]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d11d      	bne.n	80098da <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	795b      	ldrb	r3, [r3, #5]
 80098a2:	4619      	mov	r1, r3
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f007 f93e 	bl	8010b26 <USBH_LL_GetToggle>
 80098aa:	4603      	mov	r3, r0
 80098ac:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 80098ae:	693b      	ldr	r3, [r7, #16]
 80098b0:	7959      	ldrb	r1, [r3, #5]
 80098b2:	7bfb      	ldrb	r3, [r7, #15]
 80098b4:	f1c3 0301 	rsb	r3, r3, #1
 80098b8:	b2db      	uxtb	r3, r3
 80098ba:	461a      	mov	r2, r3
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f007 f902 	bl	8010ac6 <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 80098c2:	693b      	ldr	r3, [r7, #16]
 80098c4:	791b      	ldrb	r3, [r3, #4]
 80098c6:	2200      	movs	r2, #0
 80098c8:	4619      	mov	r1, r3
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f007 f8fb 	bl	8010ac6 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	2209      	movs	r2, #9
 80098d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 80098d8:	e020      	b.n	800991c <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 80098da:	7dbb      	ldrb	r3, [r7, #22]
 80098dc:	2b04      	cmp	r3, #4
 80098de:	d11d      	bne.n	800991c <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	220b      	movs	r2, #11
 80098e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80098e8:	e018      	b.n	800991c <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f7ff fdf2 	bl	80094d4 <USBH_MSC_BOT_REQ_Reset>
 80098f0:	4603      	mov	r3, r0
 80098f2:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 80098f4:	7dfb      	ldrb	r3, [r7, #23]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d112      	bne.n	8009920 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	2201      	movs	r2, #1
 80098fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 8009902:	e00d      	b.n	8009920 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 8009904:	bf00      	nop
 8009906:	e00c      	b.n	8009922 <USBH_MSC_BOT_Process+0x392>
      break;
 8009908:	bf00      	nop
 800990a:	e00a      	b.n	8009922 <USBH_MSC_BOT_Process+0x392>
      break;
 800990c:	bf00      	nop
 800990e:	e008      	b.n	8009922 <USBH_MSC_BOT_Process+0x392>
      break;
 8009910:	bf00      	nop
 8009912:	e006      	b.n	8009922 <USBH_MSC_BOT_Process+0x392>
      break;
 8009914:	bf00      	nop
 8009916:	e004      	b.n	8009922 <USBH_MSC_BOT_Process+0x392>
      break;
 8009918:	bf00      	nop
 800991a:	e002      	b.n	8009922 <USBH_MSC_BOT_Process+0x392>
      break;
 800991c:	bf00      	nop
 800991e:	e000      	b.n	8009922 <USBH_MSC_BOT_Process+0x392>
      break;
 8009920:	bf00      	nop
  }
  return status;
 8009922:	7dfb      	ldrb	r3, [r7, #23]
}
 8009924:	4618      	mov	r0, r3
 8009926:	3718      	adds	r7, #24
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}

0800992c <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b084      	sub	sp, #16
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
 8009934:	460b      	mov	r3, r1
 8009936:	70fb      	strb	r3, [r7, #3]
 8009938:	4613      	mov	r3, r2
 800993a:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800993c:	2302      	movs	r3, #2
 800993e:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009946:	69db      	ldr	r3, [r3, #28]
 8009948:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800994a:	78bb      	ldrb	r3, [r7, #2]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d002      	beq.n	8009956 <USBH_MSC_BOT_Abort+0x2a>
 8009950:	2b01      	cmp	r3, #1
 8009952:	d009      	beq.n	8009968 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8009954:	e011      	b.n	800997a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	79db      	ldrb	r3, [r3, #7]
 800995a:	4619      	mov	r1, r3
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f001 f9a8 	bl	800acb2 <USBH_ClrFeature>
 8009962:	4603      	mov	r3, r0
 8009964:	73fb      	strb	r3, [r7, #15]
      break;
 8009966:	e008      	b.n	800997a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	799b      	ldrb	r3, [r3, #6]
 800996c:	4619      	mov	r1, r3
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f001 f99f 	bl	800acb2 <USBH_ClrFeature>
 8009974:	4603      	mov	r3, r0
 8009976:	73fb      	strb	r3, [r7, #15]
      break;
 8009978:	bf00      	nop
  }
  return status;
 800997a:	7bfb      	ldrb	r3, [r7, #15]
}
 800997c:	4618      	mov	r0, r3
 800997e:	3710      	adds	r7, #16
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}

08009984 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b084      	sub	sp, #16
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009992:	69db      	ldr	r3, [r3, #28]
 8009994:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8009996:	2301      	movs	r3, #1
 8009998:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	791b      	ldrb	r3, [r3, #4]
 800999e:	4619      	mov	r1, r3
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f006 ffdd 	bl	8010960 <USBH_LL_GetLastXferSize>
 80099a6:	4603      	mov	r3, r0
 80099a8:	2b0d      	cmp	r3, #13
 80099aa:	d002      	beq.n	80099b2 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 80099ac:	2302      	movs	r3, #2
 80099ae:	73fb      	strb	r3, [r7, #15]
 80099b0:	e024      	b.n	80099fc <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80099b6:	4a14      	ldr	r2, [pc, #80]	; (8009a08 <USBH_MSC_DecodeCSW+0x84>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d11d      	bne.n	80099f8 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099c4:	429a      	cmp	r2, r3
 80099c6:	d119      	bne.n	80099fc <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d102      	bne.n	80099d8 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 80099d2:	2300      	movs	r3, #0
 80099d4:	73fb      	strb	r3, [r7, #15]
 80099d6:	e011      	b.n	80099fc <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80099de:	2b01      	cmp	r3, #1
 80099e0:	d102      	bne.n	80099e8 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 80099e2:	2301      	movs	r3, #1
 80099e4:	73fb      	strb	r3, [r7, #15]
 80099e6:	e009      	b.n	80099fc <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80099ee:	2b02      	cmp	r3, #2
 80099f0:	d104      	bne.n	80099fc <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 80099f2:	2302      	movs	r3, #2
 80099f4:	73fb      	strb	r3, [r7, #15]
 80099f6:	e001      	b.n	80099fc <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 80099f8:	2302      	movs	r3, #2
 80099fa:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 80099fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3710      	adds	r7, #16
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}
 8009a06:	bf00      	nop
 8009a08:	53425355 	.word	0x53425355

08009a0c <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b084      	sub	sp, #16
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
 8009a14:	460b      	mov	r3, r1
 8009a16:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009a18:	2302      	movs	r3, #2
 8009a1a:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a22:	69db      	ldr	r3, [r3, #28]
 8009a24:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009a2c:	2b01      	cmp	r3, #1
 8009a2e:	d002      	beq.n	8009a36 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8009a30:	2b02      	cmp	r3, #2
 8009a32:	d021      	beq.n	8009a78 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8009a34:	e028      	b.n	8009a88 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	2200      	movs	r2, #0
 8009a3a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	220a      	movs	r2, #10
 8009a48:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	3363      	adds	r3, #99	; 0x63
 8009a50:	2210      	movs	r2, #16
 8009a52:	2100      	movs	r1, #0
 8009a54:	4618      	mov	r0, r3
 8009a56:	f007 f915 	bl	8010c84 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	2201      	movs	r2, #1
 8009a66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	2202      	movs	r2, #2
 8009a6e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 8009a72:	2301      	movs	r3, #1
 8009a74:	73fb      	strb	r3, [r7, #15]
      break;
 8009a76:	e007      	b.n	8009a88 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009a78:	78fb      	ldrb	r3, [r7, #3]
 8009a7a:	4619      	mov	r1, r3
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f7ff fd87 	bl	8009590 <USBH_MSC_BOT_Process>
 8009a82:	4603      	mov	r3, r0
 8009a84:	73fb      	strb	r3, [r7, #15]
      break;
 8009a86:	bf00      	nop
  }

  return error;
 8009a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	3710      	adds	r7, #16
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}

08009a92 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8009a92:	b580      	push	{r7, lr}
 8009a94:	b086      	sub	sp, #24
 8009a96:	af00      	add	r7, sp, #0
 8009a98:	60f8      	str	r0, [r7, #12]
 8009a9a:	460b      	mov	r3, r1
 8009a9c:	607a      	str	r2, [r7, #4]
 8009a9e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009aaa:	69db      	ldr	r3, [r3, #28]
 8009aac:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009aae:	693b      	ldr	r3, [r7, #16]
 8009ab0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009ab4:	2b01      	cmp	r3, #1
 8009ab6:	d002      	beq.n	8009abe <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8009ab8:	2b02      	cmp	r3, #2
 8009aba:	d027      	beq.n	8009b0c <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8009abc:	e05f      	b.n	8009b7e <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8009abe:	693b      	ldr	r3, [r7, #16]
 8009ac0:	2208      	movs	r2, #8
 8009ac2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009ac4:	693b      	ldr	r3, [r7, #16]
 8009ac6:	2280      	movs	r2, #128	; 0x80
 8009ac8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009acc:	693b      	ldr	r3, [r7, #16]
 8009ace:	220a      	movs	r2, #10
 8009ad0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009ad4:	693b      	ldr	r3, [r7, #16]
 8009ad6:	3363      	adds	r3, #99	; 0x63
 8009ad8:	2210      	movs	r2, #16
 8009ada:	2100      	movs	r1, #0
 8009adc:	4618      	mov	r0, r3
 8009ade:	f007 f8d1 	bl	8010c84 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8009ae2:	693b      	ldr	r3, [r7, #16]
 8009ae4:	2225      	movs	r2, #37	; 0x25
 8009ae6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009aea:	693b      	ldr	r3, [r7, #16]
 8009aec:	2201      	movs	r2, #1
 8009aee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	2202      	movs	r2, #2
 8009af6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009afa:	693b      	ldr	r3, [r7, #16]
 8009afc:	f103 0210 	add.w	r2, r3, #16
 8009b00:	693b      	ldr	r3, [r7, #16]
 8009b02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009b06:	2301      	movs	r3, #1
 8009b08:	75fb      	strb	r3, [r7, #23]
      break;
 8009b0a:	e038      	b.n	8009b7e <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009b0c:	7afb      	ldrb	r3, [r7, #11]
 8009b0e:	4619      	mov	r1, r3
 8009b10:	68f8      	ldr	r0, [r7, #12]
 8009b12:	f7ff fd3d 	bl	8009590 <USBH_MSC_BOT_Process>
 8009b16:	4603      	mov	r3, r0
 8009b18:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009b1a:	7dfb      	ldrb	r3, [r7, #23]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d12d      	bne.n	8009b7c <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009b20:	693b      	ldr	r3, [r7, #16]
 8009b22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b26:	3303      	adds	r3, #3
 8009b28:	781b      	ldrb	r3, [r3, #0]
 8009b2a:	461a      	mov	r2, r3
 8009b2c:	693b      	ldr	r3, [r7, #16]
 8009b2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b32:	3302      	adds	r3, #2
 8009b34:	781b      	ldrb	r3, [r3, #0]
 8009b36:	021b      	lsls	r3, r3, #8
 8009b38:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8009b3a:	693b      	ldr	r3, [r7, #16]
 8009b3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b40:	3301      	adds	r3, #1
 8009b42:	781b      	ldrb	r3, [r3, #0]
 8009b44:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009b46:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8009b48:	693b      	ldr	r3, [r7, #16]
 8009b4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b4e:	781b      	ldrb	r3, [r3, #0]
 8009b50:	061b      	lsls	r3, r3, #24
 8009b52:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8009b58:	693b      	ldr	r3, [r7, #16]
 8009b5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b5e:	3307      	adds	r3, #7
 8009b60:	781b      	ldrb	r3, [r3, #0]
 8009b62:	b29a      	uxth	r2, r3
 8009b64:	693b      	ldr	r3, [r7, #16]
 8009b66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b6a:	3306      	adds	r3, #6
 8009b6c:	781b      	ldrb	r3, [r3, #0]
 8009b6e:	b29b      	uxth	r3, r3
 8009b70:	021b      	lsls	r3, r3, #8
 8009b72:	b29b      	uxth	r3, r3
 8009b74:	4313      	orrs	r3, r2
 8009b76:	b29a      	uxth	r2, r3
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	809a      	strh	r2, [r3, #4]
      break;
 8009b7c:	bf00      	nop
  }

  return error;
 8009b7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	3718      	adds	r7, #24
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}

08009b88 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b086      	sub	sp, #24
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	60f8      	str	r0, [r7, #12]
 8009b90:	460b      	mov	r3, r1
 8009b92:	607a      	str	r2, [r7, #4]
 8009b94:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8009b96:	2302      	movs	r3, #2
 8009b98:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009ba0:	69db      	ldr	r3, [r3, #28]
 8009ba2:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009baa:	2b01      	cmp	r3, #1
 8009bac:	d002      	beq.n	8009bb4 <USBH_MSC_SCSI_Inquiry+0x2c>
 8009bae:	2b02      	cmp	r3, #2
 8009bb0:	d03d      	beq.n	8009c2e <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 8009bb2:	e089      	b.n	8009cc8 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8009bb4:	693b      	ldr	r3, [r7, #16]
 8009bb6:	2224      	movs	r2, #36	; 0x24
 8009bb8:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009bba:	693b      	ldr	r3, [r7, #16]
 8009bbc:	2280      	movs	r2, #128	; 0x80
 8009bbe:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	220a      	movs	r2, #10
 8009bc6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8009bca:	693b      	ldr	r3, [r7, #16]
 8009bcc:	3363      	adds	r3, #99	; 0x63
 8009bce:	220a      	movs	r2, #10
 8009bd0:	2100      	movs	r1, #0
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f007 f856 	bl	8010c84 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8009bd8:	693b      	ldr	r3, [r7, #16]
 8009bda:	2212      	movs	r2, #18
 8009bdc:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8009be0:	7afb      	ldrb	r3, [r7, #11]
 8009be2:	015b      	lsls	r3, r3, #5
 8009be4:	b2da      	uxtb	r2, r3
 8009be6:	693b      	ldr	r3, [r7, #16]
 8009be8:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8009bec:	693b      	ldr	r3, [r7, #16]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8009bf4:	693b      	ldr	r3, [r7, #16]
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8009bfc:	693b      	ldr	r3, [r7, #16]
 8009bfe:	2224      	movs	r2, #36	; 0x24
 8009c00:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8009c04:	693b      	ldr	r3, [r7, #16]
 8009c06:	2200      	movs	r2, #0
 8009c08:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009c0c:	693b      	ldr	r3, [r7, #16]
 8009c0e:	2201      	movs	r2, #1
 8009c10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	2202      	movs	r2, #2
 8009c18:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009c1c:	693b      	ldr	r3, [r7, #16]
 8009c1e:	f103 0210 	add.w	r2, r3, #16
 8009c22:	693b      	ldr	r3, [r7, #16]
 8009c24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009c28:	2301      	movs	r3, #1
 8009c2a:	75fb      	strb	r3, [r7, #23]
      break;
 8009c2c:	e04c      	b.n	8009cc8 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009c2e:	7afb      	ldrb	r3, [r7, #11]
 8009c30:	4619      	mov	r1, r3
 8009c32:	68f8      	ldr	r0, [r7, #12]
 8009c34:	f7ff fcac 	bl	8009590 <USBH_MSC_BOT_Process>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009c3c:	7dfb      	ldrb	r3, [r7, #23]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d141      	bne.n	8009cc6 <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8009c42:	2222      	movs	r2, #34	; 0x22
 8009c44:	2100      	movs	r1, #0
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f007 f81c 	bl	8010c84 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8009c4c:	693b      	ldr	r3, [r7, #16]
 8009c4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c52:	781b      	ldrb	r3, [r3, #0]
 8009c54:	f003 031f 	and.w	r3, r3, #31
 8009c58:	b2da      	uxtb	r2, r3
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8009c5e:	693b      	ldr	r3, [r7, #16]
 8009c60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c64:	781b      	ldrb	r3, [r3, #0]
 8009c66:	095b      	lsrs	r3, r3, #5
 8009c68:	b2da      	uxtb	r2, r3
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8009c6e:	693b      	ldr	r3, [r7, #16]
 8009c70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c74:	3301      	adds	r3, #1
 8009c76:	781b      	ldrb	r3, [r3, #0]
 8009c78:	b25b      	sxtb	r3, r3
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	da03      	bge.n	8009c86 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2201      	movs	r2, #1
 8009c82:	709a      	strb	r2, [r3, #2]
 8009c84:	e002      	b.n	8009c8c <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	1cd8      	adds	r0, r3, #3
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c96:	3308      	adds	r3, #8
 8009c98:	2208      	movs	r2, #8
 8009c9a:	4619      	mov	r1, r3
 8009c9c:	f006 ffe4 	bl	8010c68 <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f103 000c 	add.w	r0, r3, #12
 8009ca6:	693b      	ldr	r3, [r7, #16]
 8009ca8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009cac:	3310      	adds	r3, #16
 8009cae:	2210      	movs	r2, #16
 8009cb0:	4619      	mov	r1, r3
 8009cb2:	f006 ffd9 	bl	8010c68 <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	331d      	adds	r3, #29
 8009cba:	693a      	ldr	r2, [r7, #16]
 8009cbc:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8009cc0:	3220      	adds	r2, #32
 8009cc2:	6812      	ldr	r2, [r2, #0]
 8009cc4:	601a      	str	r2, [r3, #0]
      break;
 8009cc6:	bf00      	nop
  }

  return error;
 8009cc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	3718      	adds	r7, #24
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}

08009cd2 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8009cd2:	b580      	push	{r7, lr}
 8009cd4:	b086      	sub	sp, #24
 8009cd6:	af00      	add	r7, sp, #0
 8009cd8:	60f8      	str	r0, [r7, #12]
 8009cda:	460b      	mov	r3, r1
 8009cdc:	607a      	str	r2, [r7, #4]
 8009cde:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009ce0:	2302      	movs	r3, #2
 8009ce2:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009cea:	69db      	ldr	r3, [r3, #28]
 8009cec:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009cee:	693b      	ldr	r3, [r7, #16]
 8009cf0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009cf4:	2b01      	cmp	r3, #1
 8009cf6:	d002      	beq.n	8009cfe <USBH_MSC_SCSI_RequestSense+0x2c>
 8009cf8:	2b02      	cmp	r3, #2
 8009cfa:	d03d      	beq.n	8009d78 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 8009cfc:	e05d      	b.n	8009dba <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8009cfe:	693b      	ldr	r3, [r7, #16]
 8009d00:	220e      	movs	r2, #14
 8009d02:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009d04:	693b      	ldr	r3, [r7, #16]
 8009d06:	2280      	movs	r2, #128	; 0x80
 8009d08:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009d0c:	693b      	ldr	r3, [r7, #16]
 8009d0e:	220a      	movs	r2, #10
 8009d10:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009d14:	693b      	ldr	r3, [r7, #16]
 8009d16:	3363      	adds	r3, #99	; 0x63
 8009d18:	2210      	movs	r2, #16
 8009d1a:	2100      	movs	r1, #0
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f006 ffb1 	bl	8010c84 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8009d22:	693b      	ldr	r3, [r7, #16]
 8009d24:	2203      	movs	r2, #3
 8009d26:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8009d2a:	7afb      	ldrb	r3, [r7, #11]
 8009d2c:	015b      	lsls	r3, r3, #5
 8009d2e:	b2da      	uxtb	r2, r3
 8009d30:	693b      	ldr	r3, [r7, #16]
 8009d32:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8009d36:	693b      	ldr	r3, [r7, #16]
 8009d38:	2200      	movs	r2, #0
 8009d3a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8009d3e:	693b      	ldr	r3, [r7, #16]
 8009d40:	2200      	movs	r2, #0
 8009d42:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8009d46:	693b      	ldr	r3, [r7, #16]
 8009d48:	220e      	movs	r2, #14
 8009d4a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8009d4e:	693b      	ldr	r3, [r7, #16]
 8009d50:	2200      	movs	r2, #0
 8009d52:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009d56:	693b      	ldr	r3, [r7, #16]
 8009d58:	2201      	movs	r2, #1
 8009d5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009d5e:	693b      	ldr	r3, [r7, #16]
 8009d60:	2202      	movs	r2, #2
 8009d62:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009d66:	693b      	ldr	r3, [r7, #16]
 8009d68:	f103 0210 	add.w	r2, r3, #16
 8009d6c:	693b      	ldr	r3, [r7, #16]
 8009d6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009d72:	2301      	movs	r3, #1
 8009d74:	75fb      	strb	r3, [r7, #23]
      break;
 8009d76:	e020      	b.n	8009dba <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009d78:	7afb      	ldrb	r3, [r7, #11]
 8009d7a:	4619      	mov	r1, r3
 8009d7c:	68f8      	ldr	r0, [r7, #12]
 8009d7e:	f7ff fc07 	bl	8009590 <USBH_MSC_BOT_Process>
 8009d82:	4603      	mov	r3, r0
 8009d84:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009d86:	7dfb      	ldrb	r3, [r7, #23]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d115      	bne.n	8009db8 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8009d8c:	693b      	ldr	r3, [r7, #16]
 8009d8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d92:	3302      	adds	r3, #2
 8009d94:	781b      	ldrb	r3, [r3, #0]
 8009d96:	f003 030f 	and.w	r3, r3, #15
 8009d9a:	b2da      	uxtb	r2, r3
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8009da0:	693b      	ldr	r3, [r7, #16]
 8009da2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009da6:	7b1a      	ldrb	r2, [r3, #12]
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8009dac:	693b      	ldr	r3, [r7, #16]
 8009dae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009db2:	7b5a      	ldrb	r2, [r3, #13]
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	709a      	strb	r2, [r3, #2]
      break;
 8009db8:	bf00      	nop
  }

  return error;
 8009dba:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	3718      	adds	r7, #24
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}

08009dc4 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b086      	sub	sp, #24
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	60f8      	str	r0, [r7, #12]
 8009dcc:	607a      	str	r2, [r7, #4]
 8009dce:	603b      	str	r3, [r7, #0]
 8009dd0:	460b      	mov	r3, r1
 8009dd2:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009dd4:	2302      	movs	r3, #2
 8009dd6:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009dde:	69db      	ldr	r3, [r3, #28]
 8009de0:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009de2:	693b      	ldr	r3, [r7, #16]
 8009de4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009de8:	2b01      	cmp	r3, #1
 8009dea:	d002      	beq.n	8009df2 <USBH_MSC_SCSI_Write+0x2e>
 8009dec:	2b02      	cmp	r3, #2
 8009dee:	d047      	beq.n	8009e80 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8009df0:	e04e      	b.n	8009e90 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8009df2:	693b      	ldr	r3, [r7, #16]
 8009df4:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8009df8:	461a      	mov	r2, r3
 8009dfa:	6a3b      	ldr	r3, [r7, #32]
 8009dfc:	fb03 f202 	mul.w	r2, r3, r2
 8009e00:	693b      	ldr	r3, [r7, #16]
 8009e02:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	2200      	movs	r2, #0
 8009e08:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009e0c:	693b      	ldr	r3, [r7, #16]
 8009e0e:	220a      	movs	r2, #10
 8009e10:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009e14:	693b      	ldr	r3, [r7, #16]
 8009e16:	3363      	adds	r3, #99	; 0x63
 8009e18:	2210      	movs	r2, #16
 8009e1a:	2100      	movs	r1, #0
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	f006 ff31 	bl	8010c84 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 8009e22:	693b      	ldr	r3, [r7, #16]
 8009e24:	222a      	movs	r2, #42	; 0x2a
 8009e26:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8009e2a:	79fa      	ldrb	r2, [r7, #7]
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8009e32:	79ba      	ldrb	r2, [r7, #6]
 8009e34:	693b      	ldr	r3, [r7, #16]
 8009e36:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8009e3a:	797a      	ldrb	r2, [r7, #5]
 8009e3c:	693b      	ldr	r3, [r7, #16]
 8009e3e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8009e42:	1d3b      	adds	r3, r7, #4
 8009e44:	781a      	ldrb	r2, [r3, #0]
 8009e46:	693b      	ldr	r3, [r7, #16]
 8009e48:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8009e4c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8009e56:	f107 0320 	add.w	r3, r7, #32
 8009e5a:	781a      	ldrb	r2, [r3, #0]
 8009e5c:	693b      	ldr	r3, [r7, #16]
 8009e5e:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009e62:	693b      	ldr	r3, [r7, #16]
 8009e64:	2201      	movs	r2, #1
 8009e66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009e6a:	693b      	ldr	r3, [r7, #16]
 8009e6c:	2202      	movs	r2, #2
 8009e6e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8009e72:	693b      	ldr	r3, [r7, #16]
 8009e74:	683a      	ldr	r2, [r7, #0]
 8009e76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	75fb      	strb	r3, [r7, #23]
      break;
 8009e7e:	e007      	b.n	8009e90 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009e80:	7afb      	ldrb	r3, [r7, #11]
 8009e82:	4619      	mov	r1, r3
 8009e84:	68f8      	ldr	r0, [r7, #12]
 8009e86:	f7ff fb83 	bl	8009590 <USBH_MSC_BOT_Process>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	75fb      	strb	r3, [r7, #23]
      break;
 8009e8e:	bf00      	nop
  }

  return error;
 8009e90:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	3718      	adds	r7, #24
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}

08009e9a <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 8009e9a:	b580      	push	{r7, lr}
 8009e9c:	b086      	sub	sp, #24
 8009e9e:	af00      	add	r7, sp, #0
 8009ea0:	60f8      	str	r0, [r7, #12]
 8009ea2:	607a      	str	r2, [r7, #4]
 8009ea4:	603b      	str	r3, [r7, #0]
 8009ea6:	460b      	mov	r3, r1
 8009ea8:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009eaa:	2302      	movs	r3, #2
 8009eac:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009eb4:	69db      	ldr	r3, [r3, #28]
 8009eb6:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009eb8:	693b      	ldr	r3, [r7, #16]
 8009eba:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009ebe:	2b01      	cmp	r3, #1
 8009ec0:	d002      	beq.n	8009ec8 <USBH_MSC_SCSI_Read+0x2e>
 8009ec2:	2b02      	cmp	r3, #2
 8009ec4:	d047      	beq.n	8009f56 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8009ec6:	e04e      	b.n	8009f66 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8009ec8:	693b      	ldr	r3, [r7, #16]
 8009eca:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8009ece:	461a      	mov	r2, r3
 8009ed0:	6a3b      	ldr	r3, [r7, #32]
 8009ed2:	fb03 f202 	mul.w	r2, r3, r2
 8009ed6:	693b      	ldr	r3, [r7, #16]
 8009ed8:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009eda:	693b      	ldr	r3, [r7, #16]
 8009edc:	2280      	movs	r2, #128	; 0x80
 8009ede:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009ee2:	693b      	ldr	r3, [r7, #16]
 8009ee4:	220a      	movs	r2, #10
 8009ee6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009eea:	693b      	ldr	r3, [r7, #16]
 8009eec:	3363      	adds	r3, #99	; 0x63
 8009eee:	2210      	movs	r2, #16
 8009ef0:	2100      	movs	r1, #0
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f006 fec6 	bl	8010c84 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8009ef8:	693b      	ldr	r3, [r7, #16]
 8009efa:	2228      	movs	r2, #40	; 0x28
 8009efc:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8009f00:	79fa      	ldrb	r2, [r7, #7]
 8009f02:	693b      	ldr	r3, [r7, #16]
 8009f04:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8009f08:	79ba      	ldrb	r2, [r7, #6]
 8009f0a:	693b      	ldr	r3, [r7, #16]
 8009f0c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8009f10:	797a      	ldrb	r2, [r7, #5]
 8009f12:	693b      	ldr	r3, [r7, #16]
 8009f14:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8009f18:	1d3b      	adds	r3, r7, #4
 8009f1a:	781a      	ldrb	r2, [r3, #0]
 8009f1c:	693b      	ldr	r3, [r7, #16]
 8009f1e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8009f22:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009f26:	693b      	ldr	r3, [r7, #16]
 8009f28:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8009f2c:	f107 0320 	add.w	r3, r7, #32
 8009f30:	781a      	ldrb	r2, [r3, #0]
 8009f32:	693b      	ldr	r3, [r7, #16]
 8009f34:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009f38:	693b      	ldr	r3, [r7, #16]
 8009f3a:	2201      	movs	r2, #1
 8009f3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	2202      	movs	r2, #2
 8009f44:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	683a      	ldr	r2, [r7, #0]
 8009f4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009f50:	2301      	movs	r3, #1
 8009f52:	75fb      	strb	r3, [r7, #23]
      break;
 8009f54:	e007      	b.n	8009f66 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009f56:	7afb      	ldrb	r3, [r7, #11]
 8009f58:	4619      	mov	r1, r3
 8009f5a:	68f8      	ldr	r0, [r7, #12]
 8009f5c:	f7ff fb18 	bl	8009590 <USBH_MSC_BOT_Process>
 8009f60:	4603      	mov	r3, r0
 8009f62:	75fb      	strb	r3, [r7, #23]
      break;
 8009f64:	bf00      	nop
  }

  return error;
 8009f66:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3718      	adds	r7, #24
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}

08009f70 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b084      	sub	sp, #16
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	60f8      	str	r0, [r7, #12]
 8009f78:	60b9      	str	r1, [r7, #8]
 8009f7a:	4613      	mov	r3, r2
 8009f7c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d101      	bne.n	8009f88 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009f84:	2302      	movs	r3, #2
 8009f86:	e029      	b.n	8009fdc <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	79fa      	ldrb	r2, [r7, #7]
 8009f8c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	2200      	movs	r2, #0
 8009f94:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8009fa0:	68f8      	ldr	r0, [r7, #12]
 8009fa2:	f000 f81f 	bl	8009fe4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	2200      	movs	r2, #0
 8009fba:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d003      	beq.n	8009fd4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	68ba      	ldr	r2, [r7, #8]
 8009fd0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8009fd4:	68f8      	ldr	r0, [r7, #12]
 8009fd6:	f006 fc0f 	bl	80107f8 <USBH_LL_Init>

  return USBH_OK;
 8009fda:	2300      	movs	r3, #0
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	3710      	adds	r7, #16
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}

08009fe4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009fe4:	b480      	push	{r7}
 8009fe6:	b085      	sub	sp, #20
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009fec:	2300      	movs	r3, #0
 8009fee:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	60fb      	str	r3, [r7, #12]
 8009ff4:	e009      	b.n	800a00a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8009ff6:	687a      	ldr	r2, [r7, #4]
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	33e0      	adds	r3, #224	; 0xe0
 8009ffc:	009b      	lsls	r3, r3, #2
 8009ffe:	4413      	add	r3, r2
 800a000:	2200      	movs	r2, #0
 800a002:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	3301      	adds	r3, #1
 800a008:	60fb      	str	r3, [r7, #12]
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	2b0f      	cmp	r3, #15
 800a00e:	d9f2      	bls.n	8009ff6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a010:	2300      	movs	r3, #0
 800a012:	60fb      	str	r3, [r7, #12]
 800a014:	e009      	b.n	800a02a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800a016:	687a      	ldr	r2, [r7, #4]
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	4413      	add	r3, r2
 800a01c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a020:	2200      	movs	r2, #0
 800a022:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	3301      	adds	r3, #1
 800a028:	60fb      	str	r3, [r7, #12]
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a030:	d3f1      	bcc.n	800a016 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2200      	movs	r2, #0
 800a036:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2200      	movs	r2, #0
 800a03c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2201      	movs	r2, #1
 800a042:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2200      	movs	r2, #0
 800a048:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2201      	movs	r2, #1
 800a050:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2240      	movs	r2, #64	; 0x40
 800a056:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2200      	movs	r2, #0
 800a05c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2200      	movs	r2, #0
 800a062:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2201      	movs	r2, #1
 800a06a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2200      	movs	r2, #0
 800a072:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2200      	movs	r2, #0
 800a07a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800a07e:	2300      	movs	r3, #0
}
 800a080:	4618      	mov	r0, r3
 800a082:	3714      	adds	r7, #20
 800a084:	46bd      	mov	sp, r7
 800a086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08a:	4770      	bx	lr

0800a08c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a08c:	b480      	push	{r7}
 800a08e:	b085      	sub	sp, #20
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
 800a094:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a096:	2300      	movs	r3, #0
 800a098:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d016      	beq.n	800a0ce <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d10e      	bne.n	800a0c8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a0b0:	1c59      	adds	r1, r3, #1
 800a0b2:	687a      	ldr	r2, [r7, #4]
 800a0b4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800a0b8:	687a      	ldr	r2, [r7, #4]
 800a0ba:	33de      	adds	r3, #222	; 0xde
 800a0bc:	6839      	ldr	r1, [r7, #0]
 800a0be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	73fb      	strb	r3, [r7, #15]
 800a0c6:	e004      	b.n	800a0d2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a0c8:	2302      	movs	r3, #2
 800a0ca:	73fb      	strb	r3, [r7, #15]
 800a0cc:	e001      	b.n	800a0d2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a0ce:	2302      	movs	r3, #2
 800a0d0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a0d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	3714      	adds	r7, #20
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0de:	4770      	bx	lr

0800a0e0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a0e0:	b480      	push	{r7}
 800a0e2:	b085      	sub	sp, #20
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
 800a0e8:	460b      	mov	r3, r1
 800a0ea:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800a0f6:	78fa      	ldrb	r2, [r7, #3]
 800a0f8:	429a      	cmp	r2, r3
 800a0fa:	d204      	bcs.n	800a106 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	78fa      	ldrb	r2, [r7, #3]
 800a100:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800a104:	e001      	b.n	800a10a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a106:	2302      	movs	r3, #2
 800a108:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a10a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	3714      	adds	r7, #20
 800a110:	46bd      	mov	sp, r7
 800a112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a116:	4770      	bx	lr

0800a118 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a118:	b480      	push	{r7}
 800a11a:	b087      	sub	sp, #28
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
 800a120:	4608      	mov	r0, r1
 800a122:	4611      	mov	r1, r2
 800a124:	461a      	mov	r2, r3
 800a126:	4603      	mov	r3, r0
 800a128:	70fb      	strb	r3, [r7, #3]
 800a12a:	460b      	mov	r3, r1
 800a12c:	70bb      	strb	r3, [r7, #2]
 800a12e:	4613      	mov	r3, r2
 800a130:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a132:	2300      	movs	r3, #0
 800a134:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a136:	2300      	movs	r3, #0
 800a138:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a140:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a142:	e025      	b.n	800a190 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a144:	7dfb      	ldrb	r3, [r7, #23]
 800a146:	221a      	movs	r2, #26
 800a148:	fb02 f303 	mul.w	r3, r2, r3
 800a14c:	3308      	adds	r3, #8
 800a14e:	68fa      	ldr	r2, [r7, #12]
 800a150:	4413      	add	r3, r2
 800a152:	3302      	adds	r3, #2
 800a154:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a156:	693b      	ldr	r3, [r7, #16]
 800a158:	795b      	ldrb	r3, [r3, #5]
 800a15a:	78fa      	ldrb	r2, [r7, #3]
 800a15c:	429a      	cmp	r2, r3
 800a15e:	d002      	beq.n	800a166 <USBH_FindInterface+0x4e>
 800a160:	78fb      	ldrb	r3, [r7, #3]
 800a162:	2bff      	cmp	r3, #255	; 0xff
 800a164:	d111      	bne.n	800a18a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a16a:	78ba      	ldrb	r2, [r7, #2]
 800a16c:	429a      	cmp	r2, r3
 800a16e:	d002      	beq.n	800a176 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a170:	78bb      	ldrb	r3, [r7, #2]
 800a172:	2bff      	cmp	r3, #255	; 0xff
 800a174:	d109      	bne.n	800a18a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a176:	693b      	ldr	r3, [r7, #16]
 800a178:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a17a:	787a      	ldrb	r2, [r7, #1]
 800a17c:	429a      	cmp	r2, r3
 800a17e:	d002      	beq.n	800a186 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a180:	787b      	ldrb	r3, [r7, #1]
 800a182:	2bff      	cmp	r3, #255	; 0xff
 800a184:	d101      	bne.n	800a18a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a186:	7dfb      	ldrb	r3, [r7, #23]
 800a188:	e006      	b.n	800a198 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a18a:	7dfb      	ldrb	r3, [r7, #23]
 800a18c:	3301      	adds	r3, #1
 800a18e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a190:	7dfb      	ldrb	r3, [r7, #23]
 800a192:	2b01      	cmp	r3, #1
 800a194:	d9d6      	bls.n	800a144 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a196:	23ff      	movs	r3, #255	; 0xff
}
 800a198:	4618      	mov	r0, r3
 800a19a:	371c      	adds	r7, #28
 800a19c:	46bd      	mov	sp, r7
 800a19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a2:	4770      	bx	lr

0800a1a4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b082      	sub	sp, #8
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	f006 fb5f 	bl	8010870 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800a1b2:	2101      	movs	r1, #1
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f006 fc78 	bl	8010aaa <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a1ba:	2300      	movs	r3, #0
}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	3708      	adds	r7, #8
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}

0800a1c4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b088      	sub	sp, #32
 800a1c8:	af04      	add	r7, sp, #16
 800a1ca:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a1cc:	2302      	movs	r3, #2
 800a1ce:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a1da:	b2db      	uxtb	r3, r3
 800a1dc:	2b01      	cmp	r3, #1
 800a1de:	d102      	bne.n	800a1e6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2203      	movs	r2, #3
 800a1e4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	781b      	ldrb	r3, [r3, #0]
 800a1ea:	b2db      	uxtb	r3, r3
 800a1ec:	2b0b      	cmp	r3, #11
 800a1ee:	f200 81be 	bhi.w	800a56e <USBH_Process+0x3aa>
 800a1f2:	a201      	add	r2, pc, #4	; (adr r2, 800a1f8 <USBH_Process+0x34>)
 800a1f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1f8:	0800a229 	.word	0x0800a229
 800a1fc:	0800a25b 	.word	0x0800a25b
 800a200:	0800a2c3 	.word	0x0800a2c3
 800a204:	0800a509 	.word	0x0800a509
 800a208:	0800a56f 	.word	0x0800a56f
 800a20c:	0800a367 	.word	0x0800a367
 800a210:	0800a4af 	.word	0x0800a4af
 800a214:	0800a39d 	.word	0x0800a39d
 800a218:	0800a3bd 	.word	0x0800a3bd
 800a21c:	0800a3dd 	.word	0x0800a3dd
 800a220:	0800a421 	.word	0x0800a421
 800a224:	0800a4f1 	.word	0x0800a4f1
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a22e:	b2db      	uxtb	r3, r3
 800a230:	2b00      	cmp	r3, #0
 800a232:	f000 819e 	beq.w	800a572 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	2201      	movs	r2, #1
 800a23a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a23c:	20c8      	movs	r0, #200	; 0xc8
 800a23e:	f006 fca2 	bl	8010b86 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f006 fb71 	bl	801092a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2200      	movs	r2, #0
 800a24c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2200      	movs	r2, #0
 800a254:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a258:	e18b      	b.n	800a572 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800a260:	2b01      	cmp	r3, #1
 800a262:	d107      	bne.n	800a274 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2200      	movs	r2, #0
 800a268:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2202      	movs	r2, #2
 800a270:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a272:	e18d      	b.n	800a590 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a27a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a27e:	d914      	bls.n	800a2aa <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a286:	3301      	adds	r3, #1
 800a288:	b2da      	uxtb	r2, r3
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a296:	2b03      	cmp	r3, #3
 800a298:	d903      	bls.n	800a2a2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	220d      	movs	r2, #13
 800a29e:	701a      	strb	r2, [r3, #0]
      break;
 800a2a0:	e176      	b.n	800a590 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	701a      	strb	r2, [r3, #0]
      break;
 800a2a8:	e172      	b.n	800a590 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a2b0:	f103 020a 	add.w	r2, r3, #10
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800a2ba:	200a      	movs	r0, #10
 800a2bc:	f006 fc63 	bl	8010b86 <USBH_Delay>
      break;
 800a2c0:	e166      	b.n	800a590 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d005      	beq.n	800a2d8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a2d2:	2104      	movs	r1, #4
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a2d8:	2064      	movs	r0, #100	; 0x64
 800a2da:	f006 fc54 	bl	8010b86 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f006 fafc 	bl	80108dc <USBH_LL_GetSpeed>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	461a      	mov	r2, r3
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2205      	movs	r2, #5
 800a2f2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a2f4:	2100      	movs	r1, #0
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f001 fa29 	bl	800b74e <USBH_AllocPipe>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	461a      	mov	r2, r3
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a304:	2180      	movs	r1, #128	; 0x80
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	f001 fa21 	bl	800b74e <USBH_AllocPipe>
 800a30c:	4603      	mov	r3, r0
 800a30e:	461a      	mov	r2, r3
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	7919      	ldrb	r1, [r3, #4]
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a324:	687a      	ldr	r2, [r7, #4]
 800a326:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a328:	b292      	uxth	r2, r2
 800a32a:	9202      	str	r2, [sp, #8]
 800a32c:	2200      	movs	r2, #0
 800a32e:	9201      	str	r2, [sp, #4]
 800a330:	9300      	str	r3, [sp, #0]
 800a332:	4603      	mov	r3, r0
 800a334:	2280      	movs	r2, #128	; 0x80
 800a336:	6878      	ldr	r0, [r7, #4]
 800a338:	f001 f9da 	bl	800b6f0 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	7959      	ldrb	r1, [r3, #5]
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a34c:	687a      	ldr	r2, [r7, #4]
 800a34e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a350:	b292      	uxth	r2, r2
 800a352:	9202      	str	r2, [sp, #8]
 800a354:	2200      	movs	r2, #0
 800a356:	9201      	str	r2, [sp, #4]
 800a358:	9300      	str	r3, [sp, #0]
 800a35a:	4603      	mov	r3, r0
 800a35c:	2200      	movs	r2, #0
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f001 f9c6 	bl	800b6f0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a364:	e114      	b.n	800a590 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f000 f918 	bl	800a59c <USBH_HandleEnum>
 800a36c:	4603      	mov	r3, r0
 800a36e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a370:	7bbb      	ldrb	r3, [r7, #14]
 800a372:	b2db      	uxtb	r3, r3
 800a374:	2b00      	cmp	r3, #0
 800a376:	f040 80fe 	bne.w	800a576 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2200      	movs	r2, #0
 800a37e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800a388:	2b01      	cmp	r3, #1
 800a38a:	d103      	bne.n	800a394 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2208      	movs	r2, #8
 800a390:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a392:	e0f0      	b.n	800a576 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2207      	movs	r2, #7
 800a398:	701a      	strb	r2, [r3, #0]
      break;
 800a39a:	e0ec      	b.n	800a576 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	f000 80e9 	beq.w	800a57a <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a3ae:	2101      	movs	r1, #1
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2208      	movs	r2, #8
 800a3b8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800a3ba:	e0de      	b.n	800a57a <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800a3c2:	b29b      	uxth	r3, r3
 800a3c4:	4619      	mov	r1, r3
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f000 fc2c 	bl	800ac24 <USBH_SetCfg>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	f040 80d5 	bne.w	800a57e <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2209      	movs	r2, #9
 800a3d8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a3da:	e0d0      	b.n	800a57e <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800a3e2:	f003 0320 	and.w	r3, r3, #32
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d016      	beq.n	800a418 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800a3ea:	2101      	movs	r1, #1
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	f000 fc3c 	bl	800ac6a <USBH_SetFeature>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a3f6:	7bbb      	ldrb	r3, [r7, #14]
 800a3f8:	b2db      	uxtb	r3, r3
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d103      	bne.n	800a406 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	220a      	movs	r2, #10
 800a402:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a404:	e0bd      	b.n	800a582 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800a406:	7bbb      	ldrb	r3, [r7, #14]
 800a408:	b2db      	uxtb	r3, r3
 800a40a:	2b03      	cmp	r3, #3
 800a40c:	f040 80b9 	bne.w	800a582 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	220a      	movs	r2, #10
 800a414:	701a      	strb	r2, [r3, #0]
      break;
 800a416:	e0b4      	b.n	800a582 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	220a      	movs	r2, #10
 800a41c:	701a      	strb	r2, [r3, #0]
      break;
 800a41e:	e0b0      	b.n	800a582 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a426:	2b00      	cmp	r3, #0
 800a428:	f000 80ad 	beq.w	800a586 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2200      	movs	r2, #0
 800a430:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a434:	2300      	movs	r3, #0
 800a436:	73fb      	strb	r3, [r7, #15]
 800a438:	e016      	b.n	800a468 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a43a:	7bfa      	ldrb	r2, [r7, #15]
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	32de      	adds	r2, #222	; 0xde
 800a440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a444:	791a      	ldrb	r2, [r3, #4]
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800a44c:	429a      	cmp	r2, r3
 800a44e:	d108      	bne.n	800a462 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a450:	7bfa      	ldrb	r2, [r7, #15]
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	32de      	adds	r2, #222	; 0xde
 800a456:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800a460:	e005      	b.n	800a46e <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a462:	7bfb      	ldrb	r3, [r7, #15]
 800a464:	3301      	adds	r3, #1
 800a466:	73fb      	strb	r3, [r7, #15]
 800a468:	7bfb      	ldrb	r3, [r7, #15]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d0e5      	beq.n	800a43a <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a474:	2b00      	cmp	r3, #0
 800a476:	d016      	beq.n	800a4a6 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a47e:	689b      	ldr	r3, [r3, #8]
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	4798      	blx	r3
 800a484:	4603      	mov	r3, r0
 800a486:	2b00      	cmp	r3, #0
 800a488:	d109      	bne.n	800a49e <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2206      	movs	r2, #6
 800a48e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a496:	2103      	movs	r1, #3
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a49c:	e073      	b.n	800a586 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	220d      	movs	r2, #13
 800a4a2:	701a      	strb	r2, [r3, #0]
      break;
 800a4a4:	e06f      	b.n	800a586 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	220d      	movs	r2, #13
 800a4aa:	701a      	strb	r2, [r3, #0]
      break;
 800a4ac:	e06b      	b.n	800a586 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d017      	beq.n	800a4e8 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a4be:	691b      	ldr	r3, [r3, #16]
 800a4c0:	6878      	ldr	r0, [r7, #4]
 800a4c2:	4798      	blx	r3
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a4c8:	7bbb      	ldrb	r3, [r7, #14]
 800a4ca:	b2db      	uxtb	r3, r3
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d103      	bne.n	800a4d8 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	220b      	movs	r2, #11
 800a4d4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a4d6:	e058      	b.n	800a58a <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800a4d8:	7bbb      	ldrb	r3, [r7, #14]
 800a4da:	b2db      	uxtb	r3, r3
 800a4dc:	2b02      	cmp	r3, #2
 800a4de:	d154      	bne.n	800a58a <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	220d      	movs	r2, #13
 800a4e4:	701a      	strb	r2, [r3, #0]
      break;
 800a4e6:	e050      	b.n	800a58a <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	220d      	movs	r2, #13
 800a4ec:	701a      	strb	r2, [r3, #0]
      break;
 800a4ee:	e04c      	b.n	800a58a <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d049      	beq.n	800a58e <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a500:	695b      	ldr	r3, [r3, #20]
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	4798      	blx	r3
      }
      break;
 800a506:	e042      	b.n	800a58e <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2200      	movs	r2, #0
 800a50c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	f7ff fd67 	bl	8009fe4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d009      	beq.n	800a534 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a526:	68db      	ldr	r3, [r3, #12]
 800a528:	6878      	ldr	r0, [r7, #4]
 800a52a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2200      	movs	r2, #0
 800a530:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d005      	beq.n	800a54a <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a544:	2105      	movs	r1, #5
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800a550:	b2db      	uxtb	r3, r3
 800a552:	2b01      	cmp	r3, #1
 800a554:	d107      	bne.n	800a566 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	2200      	movs	r2, #0
 800a55a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	f7ff fe20 	bl	800a1a4 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a564:	e014      	b.n	800a590 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f006 f982 	bl	8010870 <USBH_LL_Start>
      break;
 800a56c:	e010      	b.n	800a590 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800a56e:	bf00      	nop
 800a570:	e00e      	b.n	800a590 <USBH_Process+0x3cc>
      break;
 800a572:	bf00      	nop
 800a574:	e00c      	b.n	800a590 <USBH_Process+0x3cc>
      break;
 800a576:	bf00      	nop
 800a578:	e00a      	b.n	800a590 <USBH_Process+0x3cc>
    break;
 800a57a:	bf00      	nop
 800a57c:	e008      	b.n	800a590 <USBH_Process+0x3cc>
      break;
 800a57e:	bf00      	nop
 800a580:	e006      	b.n	800a590 <USBH_Process+0x3cc>
      break;
 800a582:	bf00      	nop
 800a584:	e004      	b.n	800a590 <USBH_Process+0x3cc>
      break;
 800a586:	bf00      	nop
 800a588:	e002      	b.n	800a590 <USBH_Process+0x3cc>
      break;
 800a58a:	bf00      	nop
 800a58c:	e000      	b.n	800a590 <USBH_Process+0x3cc>
      break;
 800a58e:	bf00      	nop
  }
  return USBH_OK;
 800a590:	2300      	movs	r3, #0
}
 800a592:	4618      	mov	r0, r3
 800a594:	3710      	adds	r7, #16
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}
 800a59a:	bf00      	nop

0800a59c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b088      	sub	sp, #32
 800a5a0:	af04      	add	r7, sp, #16
 800a5a2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a5a8:	2301      	movs	r3, #1
 800a5aa:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	785b      	ldrb	r3, [r3, #1]
 800a5b0:	2b07      	cmp	r3, #7
 800a5b2:	f200 81c1 	bhi.w	800a938 <USBH_HandleEnum+0x39c>
 800a5b6:	a201      	add	r2, pc, #4	; (adr r2, 800a5bc <USBH_HandleEnum+0x20>)
 800a5b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5bc:	0800a5dd 	.word	0x0800a5dd
 800a5c0:	0800a69b 	.word	0x0800a69b
 800a5c4:	0800a705 	.word	0x0800a705
 800a5c8:	0800a793 	.word	0x0800a793
 800a5cc:	0800a7fd 	.word	0x0800a7fd
 800a5d0:	0800a86d 	.word	0x0800a86d
 800a5d4:	0800a8b3 	.word	0x0800a8b3
 800a5d8:	0800a8f9 	.word	0x0800a8f9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a5dc:	2108      	movs	r1, #8
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f000 fa50 	bl	800aa84 <USBH_Get_DevDesc>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a5e8:	7bbb      	ldrb	r3, [r7, #14]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d130      	bne.n	800a650 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2201      	movs	r2, #1
 800a5fc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	7919      	ldrb	r1, [r3, #4]
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a60e:	687a      	ldr	r2, [r7, #4]
 800a610:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a612:	b292      	uxth	r2, r2
 800a614:	9202      	str	r2, [sp, #8]
 800a616:	2200      	movs	r2, #0
 800a618:	9201      	str	r2, [sp, #4]
 800a61a:	9300      	str	r3, [sp, #0]
 800a61c:	4603      	mov	r3, r0
 800a61e:	2280      	movs	r2, #128	; 0x80
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	f001 f865 	bl	800b6f0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	7959      	ldrb	r1, [r3, #5]
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a636:	687a      	ldr	r2, [r7, #4]
 800a638:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a63a:	b292      	uxth	r2, r2
 800a63c:	9202      	str	r2, [sp, #8]
 800a63e:	2200      	movs	r2, #0
 800a640:	9201      	str	r2, [sp, #4]
 800a642:	9300      	str	r3, [sp, #0]
 800a644:	4603      	mov	r3, r0
 800a646:	2200      	movs	r2, #0
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f001 f851 	bl	800b6f0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a64e:	e175      	b.n	800a93c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a650:	7bbb      	ldrb	r3, [r7, #14]
 800a652:	2b03      	cmp	r3, #3
 800a654:	f040 8172 	bne.w	800a93c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a65e:	3301      	adds	r3, #1
 800a660:	b2da      	uxtb	r2, r3
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a66e:	2b03      	cmp	r3, #3
 800a670:	d903      	bls.n	800a67a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	220d      	movs	r2, #13
 800a676:	701a      	strb	r2, [r3, #0]
      break;
 800a678:	e160      	b.n	800a93c <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	795b      	ldrb	r3, [r3, #5]
 800a67e:	4619      	mov	r1, r3
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f001 f885 	bl	800b790 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	791b      	ldrb	r3, [r3, #4]
 800a68a:	4619      	mov	r1, r3
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	f001 f87f 	bl	800b790 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	2200      	movs	r2, #0
 800a696:	701a      	strb	r2, [r3, #0]
      break;
 800a698:	e150      	b.n	800a93c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a69a:	2112      	movs	r1, #18
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	f000 f9f1 	bl	800aa84 <USBH_Get_DevDesc>
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a6a6:	7bbb      	ldrb	r3, [r7, #14]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d103      	bne.n	800a6b4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2202      	movs	r2, #2
 800a6b0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a6b2:	e145      	b.n	800a940 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a6b4:	7bbb      	ldrb	r3, [r7, #14]
 800a6b6:	2b03      	cmp	r3, #3
 800a6b8:	f040 8142 	bne.w	800a940 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a6c2:	3301      	adds	r3, #1
 800a6c4:	b2da      	uxtb	r2, r3
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a6d2:	2b03      	cmp	r3, #3
 800a6d4:	d903      	bls.n	800a6de <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	220d      	movs	r2, #13
 800a6da:	701a      	strb	r2, [r3, #0]
      break;
 800a6dc:	e130      	b.n	800a940 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	795b      	ldrb	r3, [r3, #5]
 800a6e2:	4619      	mov	r1, r3
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f001 f853 	bl	800b790 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	791b      	ldrb	r3, [r3, #4]
 800a6ee:	4619      	mov	r1, r3
 800a6f0:	6878      	ldr	r0, [r7, #4]
 800a6f2:	f001 f84d 	bl	800b790 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2200      	movs	r2, #0
 800a700:	701a      	strb	r2, [r3, #0]
      break;
 800a702:	e11d      	b.n	800a940 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a704:	2101      	movs	r1, #1
 800a706:	6878      	ldr	r0, [r7, #4]
 800a708:	f000 fa68 	bl	800abdc <USBH_SetAddress>
 800a70c:	4603      	mov	r3, r0
 800a70e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a710:	7bbb      	ldrb	r3, [r7, #14]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d132      	bne.n	800a77c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800a716:	2002      	movs	r0, #2
 800a718:	f006 fa35 	bl	8010b86 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2201      	movs	r2, #1
 800a720:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2203      	movs	r2, #3
 800a728:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	7919      	ldrb	r1, [r3, #4]
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a73a:	687a      	ldr	r2, [r7, #4]
 800a73c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a73e:	b292      	uxth	r2, r2
 800a740:	9202      	str	r2, [sp, #8]
 800a742:	2200      	movs	r2, #0
 800a744:	9201      	str	r2, [sp, #4]
 800a746:	9300      	str	r3, [sp, #0]
 800a748:	4603      	mov	r3, r0
 800a74a:	2280      	movs	r2, #128	; 0x80
 800a74c:	6878      	ldr	r0, [r7, #4]
 800a74e:	f000 ffcf 	bl	800b6f0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	7959      	ldrb	r1, [r3, #5]
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a762:	687a      	ldr	r2, [r7, #4]
 800a764:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a766:	b292      	uxth	r2, r2
 800a768:	9202      	str	r2, [sp, #8]
 800a76a:	2200      	movs	r2, #0
 800a76c:	9201      	str	r2, [sp, #4]
 800a76e:	9300      	str	r3, [sp, #0]
 800a770:	4603      	mov	r3, r0
 800a772:	2200      	movs	r2, #0
 800a774:	6878      	ldr	r0, [r7, #4]
 800a776:	f000 ffbb 	bl	800b6f0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a77a:	e0e3      	b.n	800a944 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a77c:	7bbb      	ldrb	r3, [r7, #14]
 800a77e:	2b03      	cmp	r3, #3
 800a780:	f040 80e0 	bne.w	800a944 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	220d      	movs	r2, #13
 800a788:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2200      	movs	r2, #0
 800a78e:	705a      	strb	r2, [r3, #1]
      break;
 800a790:	e0d8      	b.n	800a944 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a792:	2109      	movs	r1, #9
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f000 f99d 	bl	800aad4 <USBH_Get_CfgDesc>
 800a79a:	4603      	mov	r3, r0
 800a79c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a79e:	7bbb      	ldrb	r3, [r7, #14]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d103      	bne.n	800a7ac <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2204      	movs	r2, #4
 800a7a8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a7aa:	e0cd      	b.n	800a948 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a7ac:	7bbb      	ldrb	r3, [r7, #14]
 800a7ae:	2b03      	cmp	r3, #3
 800a7b0:	f040 80ca 	bne.w	800a948 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a7ba:	3301      	adds	r3, #1
 800a7bc:	b2da      	uxtb	r2, r3
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a7ca:	2b03      	cmp	r3, #3
 800a7cc:	d903      	bls.n	800a7d6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	220d      	movs	r2, #13
 800a7d2:	701a      	strb	r2, [r3, #0]
      break;
 800a7d4:	e0b8      	b.n	800a948 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	795b      	ldrb	r3, [r3, #5]
 800a7da:	4619      	mov	r1, r3
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f000 ffd7 	bl	800b790 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	791b      	ldrb	r3, [r3, #4]
 800a7e6:	4619      	mov	r1, r3
 800a7e8:	6878      	ldr	r0, [r7, #4]
 800a7ea:	f000 ffd1 	bl	800b790 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	701a      	strb	r2, [r3, #0]
      break;
 800a7fa:	e0a5      	b.n	800a948 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800a802:	4619      	mov	r1, r3
 800a804:	6878      	ldr	r0, [r7, #4]
 800a806:	f000 f965 	bl	800aad4 <USBH_Get_CfgDesc>
 800a80a:	4603      	mov	r3, r0
 800a80c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a80e:	7bbb      	ldrb	r3, [r7, #14]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d103      	bne.n	800a81c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2205      	movs	r2, #5
 800a818:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a81a:	e097      	b.n	800a94c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a81c:	7bbb      	ldrb	r3, [r7, #14]
 800a81e:	2b03      	cmp	r3, #3
 800a820:	f040 8094 	bne.w	800a94c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a82a:	3301      	adds	r3, #1
 800a82c:	b2da      	uxtb	r2, r3
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a83a:	2b03      	cmp	r3, #3
 800a83c:	d903      	bls.n	800a846 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	220d      	movs	r2, #13
 800a842:	701a      	strb	r2, [r3, #0]
      break;
 800a844:	e082      	b.n	800a94c <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	795b      	ldrb	r3, [r3, #5]
 800a84a:	4619      	mov	r1, r3
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	f000 ff9f 	bl	800b790 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	791b      	ldrb	r3, [r3, #4]
 800a856:	4619      	mov	r1, r3
 800a858:	6878      	ldr	r0, [r7, #4]
 800a85a:	f000 ff99 	bl	800b790 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	2200      	movs	r2, #0
 800a862:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2200      	movs	r2, #0
 800a868:	701a      	strb	r2, [r3, #0]
      break;
 800a86a:	e06f      	b.n	800a94c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800a872:	2b00      	cmp	r3, #0
 800a874:	d019      	beq.n	800a8aa <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a882:	23ff      	movs	r3, #255	; 0xff
 800a884:	6878      	ldr	r0, [r7, #4]
 800a886:	f000 f949 	bl	800ab1c <USBH_Get_StringDesc>
 800a88a:	4603      	mov	r3, r0
 800a88c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a88e:	7bbb      	ldrb	r3, [r7, #14]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d103      	bne.n	800a89c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2206      	movs	r2, #6
 800a898:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a89a:	e059      	b.n	800a950 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a89c:	7bbb      	ldrb	r3, [r7, #14]
 800a89e:	2b03      	cmp	r3, #3
 800a8a0:	d156      	bne.n	800a950 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2206      	movs	r2, #6
 800a8a6:	705a      	strb	r2, [r3, #1]
      break;
 800a8a8:	e052      	b.n	800a950 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2206      	movs	r2, #6
 800a8ae:	705a      	strb	r2, [r3, #1]
      break;
 800a8b0:	e04e      	b.n	800a950 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d019      	beq.n	800a8f0 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a8c8:	23ff      	movs	r3, #255	; 0xff
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	f000 f926 	bl	800ab1c <USBH_Get_StringDesc>
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a8d4:	7bbb      	ldrb	r3, [r7, #14]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d103      	bne.n	800a8e2 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2207      	movs	r2, #7
 800a8de:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a8e0:	e038      	b.n	800a954 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a8e2:	7bbb      	ldrb	r3, [r7, #14]
 800a8e4:	2b03      	cmp	r3, #3
 800a8e6:	d135      	bne.n	800a954 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2207      	movs	r2, #7
 800a8ec:	705a      	strb	r2, [r3, #1]
      break;
 800a8ee:	e031      	b.n	800a954 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2207      	movs	r2, #7
 800a8f4:	705a      	strb	r2, [r3, #1]
      break;
 800a8f6:	e02d      	b.n	800a954 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d017      	beq.n	800a932 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a90e:	23ff      	movs	r3, #255	; 0xff
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f000 f903 	bl	800ab1c <USBH_Get_StringDesc>
 800a916:	4603      	mov	r3, r0
 800a918:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a91a:	7bbb      	ldrb	r3, [r7, #14]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d102      	bne.n	800a926 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a920:	2300      	movs	r3, #0
 800a922:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a924:	e018      	b.n	800a958 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a926:	7bbb      	ldrb	r3, [r7, #14]
 800a928:	2b03      	cmp	r3, #3
 800a92a:	d115      	bne.n	800a958 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800a92c:	2300      	movs	r3, #0
 800a92e:	73fb      	strb	r3, [r7, #15]
      break;
 800a930:	e012      	b.n	800a958 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800a932:	2300      	movs	r3, #0
 800a934:	73fb      	strb	r3, [r7, #15]
      break;
 800a936:	e00f      	b.n	800a958 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800a938:	bf00      	nop
 800a93a:	e00e      	b.n	800a95a <USBH_HandleEnum+0x3be>
      break;
 800a93c:	bf00      	nop
 800a93e:	e00c      	b.n	800a95a <USBH_HandleEnum+0x3be>
      break;
 800a940:	bf00      	nop
 800a942:	e00a      	b.n	800a95a <USBH_HandleEnum+0x3be>
      break;
 800a944:	bf00      	nop
 800a946:	e008      	b.n	800a95a <USBH_HandleEnum+0x3be>
      break;
 800a948:	bf00      	nop
 800a94a:	e006      	b.n	800a95a <USBH_HandleEnum+0x3be>
      break;
 800a94c:	bf00      	nop
 800a94e:	e004      	b.n	800a95a <USBH_HandleEnum+0x3be>
      break;
 800a950:	bf00      	nop
 800a952:	e002      	b.n	800a95a <USBH_HandleEnum+0x3be>
      break;
 800a954:	bf00      	nop
 800a956:	e000      	b.n	800a95a <USBH_HandleEnum+0x3be>
      break;
 800a958:	bf00      	nop
  }
  return Status;
 800a95a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a95c:	4618      	mov	r0, r3
 800a95e:	3710      	adds	r7, #16
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}

0800a964 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a964:	b480      	push	{r7}
 800a966:	b083      	sub	sp, #12
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
 800a96c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	683a      	ldr	r2, [r7, #0]
 800a972:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800a976:	bf00      	nop
 800a978:	370c      	adds	r7, #12
 800a97a:	46bd      	mov	sp, r7
 800a97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a980:	4770      	bx	lr

0800a982 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a982:	b580      	push	{r7, lr}
 800a984:	b082      	sub	sp, #8
 800a986:	af00      	add	r7, sp, #0
 800a988:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a990:	1c5a      	adds	r2, r3, #1
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800a998:	6878      	ldr	r0, [r7, #4]
 800a99a:	f000 f804 	bl	800a9a6 <USBH_HandleSof>
}
 800a99e:	bf00      	nop
 800a9a0:	3708      	adds	r7, #8
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}

0800a9a6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a9a6:	b580      	push	{r7, lr}
 800a9a8:	b082      	sub	sp, #8
 800a9aa:	af00      	add	r7, sp, #0
 800a9ac:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	781b      	ldrb	r3, [r3, #0]
 800a9b2:	b2db      	uxtb	r3, r3
 800a9b4:	2b0b      	cmp	r3, #11
 800a9b6:	d10a      	bne.n	800a9ce <USBH_HandleSof+0x28>
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d005      	beq.n	800a9ce <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a9c8:	699b      	ldr	r3, [r3, #24]
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	4798      	blx	r3
  }
}
 800a9ce:	bf00      	nop
 800a9d0:	3708      	adds	r7, #8
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	bd80      	pop	{r7, pc}

0800a9d6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a9d6:	b480      	push	{r7}
 800a9d8:	b083      	sub	sp, #12
 800a9da:	af00      	add	r7, sp, #0
 800a9dc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	2201      	movs	r2, #1
 800a9e2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800a9e6:	bf00      	nop
}
 800a9e8:	370c      	adds	r7, #12
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f0:	4770      	bx	lr

0800a9f2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a9f2:	b480      	push	{r7}
 800a9f4:	b083      	sub	sp, #12
 800a9f6:	af00      	add	r7, sp, #0
 800a9f8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800aa02:	bf00      	nop
}
 800aa04:	370c      	adds	r7, #12
 800aa06:	46bd      	mov	sp, r7
 800aa08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0c:	4770      	bx	lr

0800aa0e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800aa0e:	b480      	push	{r7}
 800aa10:	b083      	sub	sp, #12
 800aa12:	af00      	add	r7, sp, #0
 800aa14:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2201      	movs	r2, #1
 800aa1a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	2200      	movs	r2, #0
 800aa22:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2200      	movs	r2, #0
 800aa2a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800aa2e:	2300      	movs	r3, #0
}
 800aa30:	4618      	mov	r0, r3
 800aa32:	370c      	adds	r7, #12
 800aa34:	46bd      	mov	sp, r7
 800aa36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3a:	4770      	bx	lr

0800aa3c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b082      	sub	sp, #8
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2201      	movs	r2, #1
 800aa48:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2200      	movs	r2, #0
 800aa50:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2200      	movs	r2, #0
 800aa58:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800aa5c:	6878      	ldr	r0, [r7, #4]
 800aa5e:	f005 ff22 	bl	80108a6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	791b      	ldrb	r3, [r3, #4]
 800aa66:	4619      	mov	r1, r3
 800aa68:	6878      	ldr	r0, [r7, #4]
 800aa6a:	f000 fe91 	bl	800b790 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	795b      	ldrb	r3, [r3, #5]
 800aa72:	4619      	mov	r1, r3
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	f000 fe8b 	bl	800b790 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800aa7a:	2300      	movs	r3, #0
}
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	3708      	adds	r7, #8
 800aa80:	46bd      	mov	sp, r7
 800aa82:	bd80      	pop	{r7, pc}

0800aa84 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b086      	sub	sp, #24
 800aa88:	af02      	add	r7, sp, #8
 800aa8a:	6078      	str	r0, [r7, #4]
 800aa8c:	460b      	mov	r3, r1
 800aa8e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800aa96:	78fb      	ldrb	r3, [r7, #3]
 800aa98:	b29b      	uxth	r3, r3
 800aa9a:	9300      	str	r3, [sp, #0]
 800aa9c:	4613      	mov	r3, r2
 800aa9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800aaa2:	2100      	movs	r1, #0
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f000 f864 	bl	800ab72 <USBH_GetDescriptor>
 800aaaa:	4603      	mov	r3, r0
 800aaac:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800aaae:	7bfb      	ldrb	r3, [r7, #15]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d10a      	bne.n	800aaca <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f203 3026 	addw	r0, r3, #806	; 0x326
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800aac0:	78fa      	ldrb	r2, [r7, #3]
 800aac2:	b292      	uxth	r2, r2
 800aac4:	4619      	mov	r1, r3
 800aac6:	f000 f918 	bl	800acfa <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800aaca:	7bfb      	ldrb	r3, [r7, #15]
}
 800aacc:	4618      	mov	r0, r3
 800aace:	3710      	adds	r7, #16
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}

0800aad4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b086      	sub	sp, #24
 800aad8:	af02      	add	r7, sp, #8
 800aada:	6078      	str	r0, [r7, #4]
 800aadc:	460b      	mov	r3, r1
 800aade:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	331c      	adds	r3, #28
 800aae4:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800aae6:	887b      	ldrh	r3, [r7, #2]
 800aae8:	9300      	str	r3, [sp, #0]
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aaf0:	2100      	movs	r1, #0
 800aaf2:	6878      	ldr	r0, [r7, #4]
 800aaf4:	f000 f83d 	bl	800ab72 <USBH_GetDescriptor>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800aafc:	7bfb      	ldrb	r3, [r7, #15]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d107      	bne.n	800ab12 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800ab02:	887b      	ldrh	r3, [r7, #2]
 800ab04:	461a      	mov	r2, r3
 800ab06:	68b9      	ldr	r1, [r7, #8]
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	f000 f987 	bl	800ae1c <USBH_ParseCfgDesc>
 800ab0e:	4603      	mov	r3, r0
 800ab10:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ab12:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab14:	4618      	mov	r0, r3
 800ab16:	3710      	adds	r7, #16
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bd80      	pop	{r7, pc}

0800ab1c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b088      	sub	sp, #32
 800ab20:	af02      	add	r7, sp, #8
 800ab22:	60f8      	str	r0, [r7, #12]
 800ab24:	607a      	str	r2, [r7, #4]
 800ab26:	461a      	mov	r2, r3
 800ab28:	460b      	mov	r3, r1
 800ab2a:	72fb      	strb	r3, [r7, #11]
 800ab2c:	4613      	mov	r3, r2
 800ab2e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800ab30:	7afb      	ldrb	r3, [r7, #11]
 800ab32:	b29b      	uxth	r3, r3
 800ab34:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800ab38:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800ab40:	893b      	ldrh	r3, [r7, #8]
 800ab42:	9300      	str	r3, [sp, #0]
 800ab44:	460b      	mov	r3, r1
 800ab46:	2100      	movs	r1, #0
 800ab48:	68f8      	ldr	r0, [r7, #12]
 800ab4a:	f000 f812 	bl	800ab72 <USBH_GetDescriptor>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800ab52:	7dfb      	ldrb	r3, [r7, #23]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d107      	bne.n	800ab68 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ab5e:	893a      	ldrh	r2, [r7, #8]
 800ab60:	6879      	ldr	r1, [r7, #4]
 800ab62:	4618      	mov	r0, r3
 800ab64:	f000 fb24 	bl	800b1b0 <USBH_ParseStringDesc>
  }

  return status;
 800ab68:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	3718      	adds	r7, #24
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}

0800ab72 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800ab72:	b580      	push	{r7, lr}
 800ab74:	b084      	sub	sp, #16
 800ab76:	af00      	add	r7, sp, #0
 800ab78:	60f8      	str	r0, [r7, #12]
 800ab7a:	607b      	str	r3, [r7, #4]
 800ab7c:	460b      	mov	r3, r1
 800ab7e:	72fb      	strb	r3, [r7, #11]
 800ab80:	4613      	mov	r3, r2
 800ab82:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	789b      	ldrb	r3, [r3, #2]
 800ab88:	2b01      	cmp	r3, #1
 800ab8a:	d11c      	bne.n	800abc6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800ab8c:	7afb      	ldrb	r3, [r7, #11]
 800ab8e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ab92:	b2da      	uxtb	r2, r3
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	2206      	movs	r2, #6
 800ab9c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	893a      	ldrh	r2, [r7, #8]
 800aba2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800aba4:	893b      	ldrh	r3, [r7, #8]
 800aba6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800abaa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800abae:	d104      	bne.n	800abba <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	f240 4209 	movw	r2, #1033	; 0x409
 800abb6:	829a      	strh	r2, [r3, #20]
 800abb8:	e002      	b.n	800abc0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	2200      	movs	r2, #0
 800abbe:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	8b3a      	ldrh	r2, [r7, #24]
 800abc4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800abc6:	8b3b      	ldrh	r3, [r7, #24]
 800abc8:	461a      	mov	r2, r3
 800abca:	6879      	ldr	r1, [r7, #4]
 800abcc:	68f8      	ldr	r0, [r7, #12]
 800abce:	f000 fb3d 	bl	800b24c <USBH_CtlReq>
 800abd2:	4603      	mov	r3, r0
}
 800abd4:	4618      	mov	r0, r3
 800abd6:	3710      	adds	r7, #16
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd80      	pop	{r7, pc}

0800abdc <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b082      	sub	sp, #8
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
 800abe4:	460b      	mov	r3, r1
 800abe6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	789b      	ldrb	r3, [r3, #2]
 800abec:	2b01      	cmp	r3, #1
 800abee:	d10f      	bne.n	800ac10 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2200      	movs	r2, #0
 800abf4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2205      	movs	r2, #5
 800abfa:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800abfc:	78fb      	ldrb	r3, [r7, #3]
 800abfe:	b29a      	uxth	r2, r3
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2200      	movs	r2, #0
 800ac08:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ac10:	2200      	movs	r2, #0
 800ac12:	2100      	movs	r1, #0
 800ac14:	6878      	ldr	r0, [r7, #4]
 800ac16:	f000 fb19 	bl	800b24c <USBH_CtlReq>
 800ac1a:	4603      	mov	r3, r0
}
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	3708      	adds	r7, #8
 800ac20:	46bd      	mov	sp, r7
 800ac22:	bd80      	pop	{r7, pc}

0800ac24 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b082      	sub	sp, #8
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
 800ac2c:	460b      	mov	r3, r1
 800ac2e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	789b      	ldrb	r3, [r3, #2]
 800ac34:	2b01      	cmp	r3, #1
 800ac36:	d10e      	bne.n	800ac56 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	2209      	movs	r2, #9
 800ac42:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	887a      	ldrh	r2, [r7, #2]
 800ac48:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2200      	movs	r2, #0
 800ac54:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ac56:	2200      	movs	r2, #0
 800ac58:	2100      	movs	r1, #0
 800ac5a:	6878      	ldr	r0, [r7, #4]
 800ac5c:	f000 faf6 	bl	800b24c <USBH_CtlReq>
 800ac60:	4603      	mov	r3, r0
}
 800ac62:	4618      	mov	r0, r3
 800ac64:	3708      	adds	r7, #8
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}

0800ac6a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800ac6a:	b580      	push	{r7, lr}
 800ac6c:	b082      	sub	sp, #8
 800ac6e:	af00      	add	r7, sp, #0
 800ac70:	6078      	str	r0, [r7, #4]
 800ac72:	460b      	mov	r3, r1
 800ac74:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	789b      	ldrb	r3, [r3, #2]
 800ac7a:	2b01      	cmp	r3, #1
 800ac7c:	d10f      	bne.n	800ac9e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2200      	movs	r2, #0
 800ac82:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2203      	movs	r2, #3
 800ac88:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800ac8a:	78fb      	ldrb	r3, [r7, #3]
 800ac8c:	b29a      	uxth	r2, r3
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	2200      	movs	r2, #0
 800ac96:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ac9e:	2200      	movs	r2, #0
 800aca0:	2100      	movs	r1, #0
 800aca2:	6878      	ldr	r0, [r7, #4]
 800aca4:	f000 fad2 	bl	800b24c <USBH_CtlReq>
 800aca8:	4603      	mov	r3, r0
}
 800acaa:	4618      	mov	r0, r3
 800acac:	3708      	adds	r7, #8
 800acae:	46bd      	mov	sp, r7
 800acb0:	bd80      	pop	{r7, pc}

0800acb2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800acb2:	b580      	push	{r7, lr}
 800acb4:	b082      	sub	sp, #8
 800acb6:	af00      	add	r7, sp, #0
 800acb8:	6078      	str	r0, [r7, #4]
 800acba:	460b      	mov	r3, r1
 800acbc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	789b      	ldrb	r3, [r3, #2]
 800acc2:	2b01      	cmp	r3, #1
 800acc4:	d10f      	bne.n	800ace6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	2202      	movs	r2, #2
 800acca:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2201      	movs	r2, #1
 800acd0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	2200      	movs	r2, #0
 800acd6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800acd8:	78fb      	ldrb	r3, [r7, #3]
 800acda:	b29a      	uxth	r2, r3
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2200      	movs	r2, #0
 800ace4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800ace6:	2200      	movs	r2, #0
 800ace8:	2100      	movs	r1, #0
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f000 faae 	bl	800b24c <USBH_CtlReq>
 800acf0:	4603      	mov	r3, r0
}
 800acf2:	4618      	mov	r0, r3
 800acf4:	3708      	adds	r7, #8
 800acf6:	46bd      	mov	sp, r7
 800acf8:	bd80      	pop	{r7, pc}

0800acfa <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800acfa:	b480      	push	{r7}
 800acfc:	b085      	sub	sp, #20
 800acfe:	af00      	add	r7, sp, #0
 800ad00:	60f8      	str	r0, [r7, #12]
 800ad02:	60b9      	str	r1, [r7, #8]
 800ad04:	4613      	mov	r3, r2
 800ad06:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800ad08:	68bb      	ldr	r3, [r7, #8]
 800ad0a:	781a      	ldrb	r2, [r3, #0]
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800ad10:	68bb      	ldr	r3, [r7, #8]
 800ad12:	785a      	ldrb	r2, [r3, #1]
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800ad18:	68bb      	ldr	r3, [r7, #8]
 800ad1a:	3302      	adds	r3, #2
 800ad1c:	781b      	ldrb	r3, [r3, #0]
 800ad1e:	b29a      	uxth	r2, r3
 800ad20:	68bb      	ldr	r3, [r7, #8]
 800ad22:	3303      	adds	r3, #3
 800ad24:	781b      	ldrb	r3, [r3, #0]
 800ad26:	b29b      	uxth	r3, r3
 800ad28:	021b      	lsls	r3, r3, #8
 800ad2a:	b29b      	uxth	r3, r3
 800ad2c:	4313      	orrs	r3, r2
 800ad2e:	b29a      	uxth	r2, r3
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	791a      	ldrb	r2, [r3, #4]
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800ad3c:	68bb      	ldr	r3, [r7, #8]
 800ad3e:	795a      	ldrb	r2, [r3, #5]
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800ad44:	68bb      	ldr	r3, [r7, #8]
 800ad46:	799a      	ldrb	r2, [r3, #6]
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800ad4c:	68bb      	ldr	r3, [r7, #8]
 800ad4e:	79da      	ldrb	r2, [r3, #7]
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	79db      	ldrb	r3, [r3, #7]
 800ad58:	2b20      	cmp	r3, #32
 800ad5a:	dc11      	bgt.n	800ad80 <USBH_ParseDevDesc+0x86>
 800ad5c:	2b08      	cmp	r3, #8
 800ad5e:	db16      	blt.n	800ad8e <USBH_ParseDevDesc+0x94>
 800ad60:	3b08      	subs	r3, #8
 800ad62:	2201      	movs	r2, #1
 800ad64:	fa02 f303 	lsl.w	r3, r2, r3
 800ad68:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800ad6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	bf14      	ite	ne
 800ad74:	2301      	movne	r3, #1
 800ad76:	2300      	moveq	r3, #0
 800ad78:	b2db      	uxtb	r3, r3
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d102      	bne.n	800ad84 <USBH_ParseDevDesc+0x8a>
 800ad7e:	e006      	b.n	800ad8e <USBH_ParseDevDesc+0x94>
 800ad80:	2b40      	cmp	r3, #64	; 0x40
 800ad82:	d104      	bne.n	800ad8e <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	79da      	ldrb	r2, [r3, #7]
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	71da      	strb	r2, [r3, #7]
      break;
 800ad8c:	e003      	b.n	800ad96 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	2240      	movs	r2, #64	; 0x40
 800ad92:	71da      	strb	r2, [r3, #7]
      break;
 800ad94:	bf00      	nop
  }

  if (length > 8U)
 800ad96:	88fb      	ldrh	r3, [r7, #6]
 800ad98:	2b08      	cmp	r3, #8
 800ad9a:	d939      	bls.n	800ae10 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800ad9c:	68bb      	ldr	r3, [r7, #8]
 800ad9e:	3308      	adds	r3, #8
 800ada0:	781b      	ldrb	r3, [r3, #0]
 800ada2:	b29a      	uxth	r2, r3
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	3309      	adds	r3, #9
 800ada8:	781b      	ldrb	r3, [r3, #0]
 800adaa:	b29b      	uxth	r3, r3
 800adac:	021b      	lsls	r3, r3, #8
 800adae:	b29b      	uxth	r3, r3
 800adb0:	4313      	orrs	r3, r2
 800adb2:	b29a      	uxth	r2, r3
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	330a      	adds	r3, #10
 800adbc:	781b      	ldrb	r3, [r3, #0]
 800adbe:	b29a      	uxth	r2, r3
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	330b      	adds	r3, #11
 800adc4:	781b      	ldrb	r3, [r3, #0]
 800adc6:	b29b      	uxth	r3, r3
 800adc8:	021b      	lsls	r3, r3, #8
 800adca:	b29b      	uxth	r3, r3
 800adcc:	4313      	orrs	r3, r2
 800adce:	b29a      	uxth	r2, r3
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	330c      	adds	r3, #12
 800add8:	781b      	ldrb	r3, [r3, #0]
 800adda:	b29a      	uxth	r2, r3
 800addc:	68bb      	ldr	r3, [r7, #8]
 800adde:	330d      	adds	r3, #13
 800ade0:	781b      	ldrb	r3, [r3, #0]
 800ade2:	b29b      	uxth	r3, r3
 800ade4:	021b      	lsls	r3, r3, #8
 800ade6:	b29b      	uxth	r3, r3
 800ade8:	4313      	orrs	r3, r2
 800adea:	b29a      	uxth	r2, r3
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	7b9a      	ldrb	r2, [r3, #14]
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	7bda      	ldrb	r2, [r3, #15]
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	7c1a      	ldrb	r2, [r3, #16]
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800ae08:	68bb      	ldr	r3, [r7, #8]
 800ae0a:	7c5a      	ldrb	r2, [r3, #17]
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	745a      	strb	r2, [r3, #17]
  }
}
 800ae10:	bf00      	nop
 800ae12:	3714      	adds	r7, #20
 800ae14:	46bd      	mov	sp, r7
 800ae16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1a:	4770      	bx	lr

0800ae1c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b08c      	sub	sp, #48	; 0x30
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	60f8      	str	r0, [r7, #12]
 800ae24:	60b9      	str	r1, [r7, #8]
 800ae26:	4613      	mov	r3, r2
 800ae28:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800ae30:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800ae32:	2300      	movs	r3, #0
 800ae34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800ae42:	2300      	movs	r3, #0
 800ae44:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	781a      	ldrb	r2, [r3, #0]
 800ae50:	6a3b      	ldr	r3, [r7, #32]
 800ae52:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800ae54:	68bb      	ldr	r3, [r7, #8]
 800ae56:	785a      	ldrb	r2, [r3, #1]
 800ae58:	6a3b      	ldr	r3, [r7, #32]
 800ae5a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800ae5c:	68bb      	ldr	r3, [r7, #8]
 800ae5e:	3302      	adds	r3, #2
 800ae60:	781b      	ldrb	r3, [r3, #0]
 800ae62:	b29a      	uxth	r2, r3
 800ae64:	68bb      	ldr	r3, [r7, #8]
 800ae66:	3303      	adds	r3, #3
 800ae68:	781b      	ldrb	r3, [r3, #0]
 800ae6a:	b29b      	uxth	r3, r3
 800ae6c:	021b      	lsls	r3, r3, #8
 800ae6e:	b29b      	uxth	r3, r3
 800ae70:	4313      	orrs	r3, r2
 800ae72:	b29b      	uxth	r3, r3
 800ae74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae78:	bf28      	it	cs
 800ae7a:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800ae7e:	b29a      	uxth	r2, r3
 800ae80:	6a3b      	ldr	r3, [r7, #32]
 800ae82:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800ae84:	68bb      	ldr	r3, [r7, #8]
 800ae86:	791a      	ldrb	r2, [r3, #4]
 800ae88:	6a3b      	ldr	r3, [r7, #32]
 800ae8a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800ae8c:	68bb      	ldr	r3, [r7, #8]
 800ae8e:	795a      	ldrb	r2, [r3, #5]
 800ae90:	6a3b      	ldr	r3, [r7, #32]
 800ae92:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800ae94:	68bb      	ldr	r3, [r7, #8]
 800ae96:	799a      	ldrb	r2, [r3, #6]
 800ae98:	6a3b      	ldr	r3, [r7, #32]
 800ae9a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800ae9c:	68bb      	ldr	r3, [r7, #8]
 800ae9e:	79da      	ldrb	r2, [r3, #7]
 800aea0:	6a3b      	ldr	r3, [r7, #32]
 800aea2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800aea4:	68bb      	ldr	r3, [r7, #8]
 800aea6:	7a1a      	ldrb	r2, [r3, #8]
 800aea8:	6a3b      	ldr	r3, [r7, #32]
 800aeaa:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800aeac:	6a3b      	ldr	r3, [r7, #32]
 800aeae:	781b      	ldrb	r3, [r3, #0]
 800aeb0:	2b09      	cmp	r3, #9
 800aeb2:	d002      	beq.n	800aeba <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800aeb4:	6a3b      	ldr	r3, [r7, #32]
 800aeb6:	2209      	movs	r2, #9
 800aeb8:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800aeba:	88fb      	ldrh	r3, [r7, #6]
 800aebc:	2b09      	cmp	r3, #9
 800aebe:	f240 809d 	bls.w	800affc <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800aec2:	2309      	movs	r3, #9
 800aec4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800aec6:	2300      	movs	r3, #0
 800aec8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800aeca:	e081      	b.n	800afd0 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800aecc:	f107 0316 	add.w	r3, r7, #22
 800aed0:	4619      	mov	r1, r3
 800aed2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aed4:	f000 f99f 	bl	800b216 <USBH_GetNextDesc>
 800aed8:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800aeda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aedc:	785b      	ldrb	r3, [r3, #1]
 800aede:	2b04      	cmp	r3, #4
 800aee0:	d176      	bne.n	800afd0 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800aee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aee4:	781b      	ldrb	r3, [r3, #0]
 800aee6:	2b09      	cmp	r3, #9
 800aee8:	d002      	beq.n	800aef0 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800aeea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeec:	2209      	movs	r2, #9
 800aeee:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800aef0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aef4:	221a      	movs	r2, #26
 800aef6:	fb02 f303 	mul.w	r3, r2, r3
 800aefa:	3308      	adds	r3, #8
 800aefc:	6a3a      	ldr	r2, [r7, #32]
 800aefe:	4413      	add	r3, r2
 800af00:	3302      	adds	r3, #2
 800af02:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800af04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800af06:	69f8      	ldr	r0, [r7, #28]
 800af08:	f000 f87e 	bl	800b008 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800af0c:	2300      	movs	r3, #0
 800af0e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800af12:	2300      	movs	r3, #0
 800af14:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800af16:	e043      	b.n	800afa0 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800af18:	f107 0316 	add.w	r3, r7, #22
 800af1c:	4619      	mov	r1, r3
 800af1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af20:	f000 f979 	bl	800b216 <USBH_GetNextDesc>
 800af24:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800af26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af28:	785b      	ldrb	r3, [r3, #1]
 800af2a:	2b05      	cmp	r3, #5
 800af2c:	d138      	bne.n	800afa0 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800af2e:	69fb      	ldr	r3, [r7, #28]
 800af30:	795b      	ldrb	r3, [r3, #5]
 800af32:	2b01      	cmp	r3, #1
 800af34:	d10f      	bne.n	800af56 <USBH_ParseCfgDesc+0x13a>
 800af36:	69fb      	ldr	r3, [r7, #28]
 800af38:	799b      	ldrb	r3, [r3, #6]
 800af3a:	2b02      	cmp	r3, #2
 800af3c:	d10b      	bne.n	800af56 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800af3e:	69fb      	ldr	r3, [r7, #28]
 800af40:	79db      	ldrb	r3, [r3, #7]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d10f      	bne.n	800af66 <USBH_ParseCfgDesc+0x14a>
 800af46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af48:	781b      	ldrb	r3, [r3, #0]
 800af4a:	2b09      	cmp	r3, #9
 800af4c:	d00b      	beq.n	800af66 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800af4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af50:	2209      	movs	r2, #9
 800af52:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800af54:	e007      	b.n	800af66 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800af56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af58:	781b      	ldrb	r3, [r3, #0]
 800af5a:	2b07      	cmp	r3, #7
 800af5c:	d004      	beq.n	800af68 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800af5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af60:	2207      	movs	r2, #7
 800af62:	701a      	strb	r2, [r3, #0]
 800af64:	e000      	b.n	800af68 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800af66:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800af68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af6c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800af70:	3201      	adds	r2, #1
 800af72:	00d2      	lsls	r2, r2, #3
 800af74:	211a      	movs	r1, #26
 800af76:	fb01 f303 	mul.w	r3, r1, r3
 800af7a:	4413      	add	r3, r2
 800af7c:	3308      	adds	r3, #8
 800af7e:	6a3a      	ldr	r2, [r7, #32]
 800af80:	4413      	add	r3, r2
 800af82:	3304      	adds	r3, #4
 800af84:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800af86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af88:	69b9      	ldr	r1, [r7, #24]
 800af8a:	68f8      	ldr	r0, [r7, #12]
 800af8c:	f000 f86b 	bl	800b066 <USBH_ParseEPDesc>
 800af90:	4603      	mov	r3, r0
 800af92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800af96:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800af9a:	3301      	adds	r3, #1
 800af9c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800afa0:	69fb      	ldr	r3, [r7, #28]
 800afa2:	791b      	ldrb	r3, [r3, #4]
 800afa4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800afa8:	429a      	cmp	r2, r3
 800afaa:	d204      	bcs.n	800afb6 <USBH_ParseCfgDesc+0x19a>
 800afac:	6a3b      	ldr	r3, [r7, #32]
 800afae:	885a      	ldrh	r2, [r3, #2]
 800afb0:	8afb      	ldrh	r3, [r7, #22]
 800afb2:	429a      	cmp	r2, r3
 800afb4:	d8b0      	bhi.n	800af18 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800afb6:	69fb      	ldr	r3, [r7, #28]
 800afb8:	791b      	ldrb	r3, [r3, #4]
 800afba:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800afbe:	429a      	cmp	r2, r3
 800afc0:	d201      	bcs.n	800afc6 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800afc2:	2303      	movs	r3, #3
 800afc4:	e01c      	b.n	800b000 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800afc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800afca:	3301      	adds	r3, #1
 800afcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800afd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800afd4:	2b01      	cmp	r3, #1
 800afd6:	d805      	bhi.n	800afe4 <USBH_ParseCfgDesc+0x1c8>
 800afd8:	6a3b      	ldr	r3, [r7, #32]
 800afda:	885a      	ldrh	r2, [r3, #2]
 800afdc:	8afb      	ldrh	r3, [r7, #22]
 800afde:	429a      	cmp	r2, r3
 800afe0:	f63f af74 	bhi.w	800aecc <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800afe4:	6a3b      	ldr	r3, [r7, #32]
 800afe6:	791b      	ldrb	r3, [r3, #4]
 800afe8:	2b02      	cmp	r3, #2
 800afea:	bf28      	it	cs
 800afec:	2302      	movcs	r3, #2
 800afee:	b2db      	uxtb	r3, r3
 800aff0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800aff4:	429a      	cmp	r2, r3
 800aff6:	d201      	bcs.n	800affc <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800aff8:	2303      	movs	r3, #3
 800affa:	e001      	b.n	800b000 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800affc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b000:	4618      	mov	r0, r3
 800b002:	3730      	adds	r7, #48	; 0x30
 800b004:	46bd      	mov	sp, r7
 800b006:	bd80      	pop	{r7, pc}

0800b008 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800b008:	b480      	push	{r7}
 800b00a:	b083      	sub	sp, #12
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
 800b010:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	781a      	ldrb	r2, [r3, #0]
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	785a      	ldrb	r2, [r3, #1]
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	789a      	ldrb	r2, [r3, #2]
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	78da      	ldrb	r2, [r3, #3]
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800b032:	683b      	ldr	r3, [r7, #0]
 800b034:	791a      	ldrb	r2, [r3, #4]
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	795a      	ldrb	r2, [r3, #5]
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	799a      	ldrb	r2, [r3, #6]
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	79da      	ldrb	r2, [r3, #7]
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800b052:	683b      	ldr	r3, [r7, #0]
 800b054:	7a1a      	ldrb	r2, [r3, #8]
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	721a      	strb	r2, [r3, #8]
}
 800b05a:	bf00      	nop
 800b05c:	370c      	adds	r7, #12
 800b05e:	46bd      	mov	sp, r7
 800b060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b064:	4770      	bx	lr

0800b066 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800b066:	b480      	push	{r7}
 800b068:	b087      	sub	sp, #28
 800b06a:	af00      	add	r7, sp, #0
 800b06c:	60f8      	str	r0, [r7, #12]
 800b06e:	60b9      	str	r1, [r7, #8]
 800b070:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800b072:	2300      	movs	r3, #0
 800b074:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	781a      	ldrb	r2, [r3, #0]
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	785a      	ldrb	r2, [r3, #1]
 800b082:	68bb      	ldr	r3, [r7, #8]
 800b084:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	789a      	ldrb	r2, [r3, #2]
 800b08a:	68bb      	ldr	r3, [r7, #8]
 800b08c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	78da      	ldrb	r2, [r3, #3]
 800b092:	68bb      	ldr	r3, [r7, #8]
 800b094:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	3304      	adds	r3, #4
 800b09a:	781b      	ldrb	r3, [r3, #0]
 800b09c:	b29a      	uxth	r2, r3
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	3305      	adds	r3, #5
 800b0a2:	781b      	ldrb	r3, [r3, #0]
 800b0a4:	b29b      	uxth	r3, r3
 800b0a6:	021b      	lsls	r3, r3, #8
 800b0a8:	b29b      	uxth	r3, r3
 800b0aa:	4313      	orrs	r3, r2
 800b0ac:	b29a      	uxth	r2, r3
 800b0ae:	68bb      	ldr	r3, [r7, #8]
 800b0b0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	799a      	ldrb	r2, [r3, #6]
 800b0b6:	68bb      	ldr	r3, [r7, #8]
 800b0b8:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800b0ba:	68bb      	ldr	r3, [r7, #8]
 800b0bc:	889b      	ldrh	r3, [r3, #4]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d102      	bne.n	800b0c8 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800b0c2:	2303      	movs	r3, #3
 800b0c4:	75fb      	strb	r3, [r7, #23]
 800b0c6:	e033      	b.n	800b130 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	889b      	ldrh	r3, [r3, #4]
 800b0cc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b0d0:	f023 0307 	bic.w	r3, r3, #7
 800b0d4:	b29a      	uxth	r2, r3
 800b0d6:	68bb      	ldr	r3, [r7, #8]
 800b0d8:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800b0da:	68bb      	ldr	r3, [r7, #8]
 800b0dc:	889b      	ldrh	r3, [r3, #4]
 800b0de:	b21a      	sxth	r2, r3
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	3304      	adds	r3, #4
 800b0e4:	781b      	ldrb	r3, [r3, #0]
 800b0e6:	b299      	uxth	r1, r3
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	3305      	adds	r3, #5
 800b0ec:	781b      	ldrb	r3, [r3, #0]
 800b0ee:	b29b      	uxth	r3, r3
 800b0f0:	021b      	lsls	r3, r3, #8
 800b0f2:	b29b      	uxth	r3, r3
 800b0f4:	430b      	orrs	r3, r1
 800b0f6:	b29b      	uxth	r3, r3
 800b0f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d110      	bne.n	800b122 <USBH_ParseEPDesc+0xbc>
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	3304      	adds	r3, #4
 800b104:	781b      	ldrb	r3, [r3, #0]
 800b106:	b299      	uxth	r1, r3
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	3305      	adds	r3, #5
 800b10c:	781b      	ldrb	r3, [r3, #0]
 800b10e:	b29b      	uxth	r3, r3
 800b110:	021b      	lsls	r3, r3, #8
 800b112:	b29b      	uxth	r3, r3
 800b114:	430b      	orrs	r3, r1
 800b116:	b29b      	uxth	r3, r3
 800b118:	b21b      	sxth	r3, r3
 800b11a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b11e:	b21b      	sxth	r3, r3
 800b120:	e001      	b.n	800b126 <USBH_ParseEPDesc+0xc0>
 800b122:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b126:	4313      	orrs	r3, r2
 800b128:	b21b      	sxth	r3, r3
 800b12a:	b29a      	uxth	r2, r3
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b136:	2b00      	cmp	r3, #0
 800b138:	d116      	bne.n	800b168 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b13a:	68bb      	ldr	r3, [r7, #8]
 800b13c:	78db      	ldrb	r3, [r3, #3]
 800b13e:	f003 0303 	and.w	r3, r3, #3
 800b142:	2b01      	cmp	r3, #1
 800b144:	d005      	beq.n	800b152 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800b146:	68bb      	ldr	r3, [r7, #8]
 800b148:	78db      	ldrb	r3, [r3, #3]
 800b14a:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b14e:	2b03      	cmp	r3, #3
 800b150:	d127      	bne.n	800b1a2 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b152:	68bb      	ldr	r3, [r7, #8]
 800b154:	799b      	ldrb	r3, [r3, #6]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d003      	beq.n	800b162 <USBH_ParseEPDesc+0xfc>
 800b15a:	68bb      	ldr	r3, [r7, #8]
 800b15c:	799b      	ldrb	r3, [r3, #6]
 800b15e:	2b10      	cmp	r3, #16
 800b160:	d91f      	bls.n	800b1a2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800b162:	2303      	movs	r3, #3
 800b164:	75fb      	strb	r3, [r7, #23]
 800b166:	e01c      	b.n	800b1a2 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800b168:	68bb      	ldr	r3, [r7, #8]
 800b16a:	78db      	ldrb	r3, [r3, #3]
 800b16c:	f003 0303 	and.w	r3, r3, #3
 800b170:	2b01      	cmp	r3, #1
 800b172:	d10a      	bne.n	800b18a <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	799b      	ldrb	r3, [r3, #6]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d003      	beq.n	800b184 <USBH_ParseEPDesc+0x11e>
 800b17c:	68bb      	ldr	r3, [r7, #8]
 800b17e:	799b      	ldrb	r3, [r3, #6]
 800b180:	2b10      	cmp	r3, #16
 800b182:	d90e      	bls.n	800b1a2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800b184:	2303      	movs	r3, #3
 800b186:	75fb      	strb	r3, [r7, #23]
 800b188:	e00b      	b.n	800b1a2 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800b18a:	68bb      	ldr	r3, [r7, #8]
 800b18c:	78db      	ldrb	r3, [r3, #3]
 800b18e:	f003 0303 	and.w	r3, r3, #3
 800b192:	2b03      	cmp	r3, #3
 800b194:	d105      	bne.n	800b1a2 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800b196:	68bb      	ldr	r3, [r7, #8]
 800b198:	799b      	ldrb	r3, [r3, #6]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d101      	bne.n	800b1a2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800b19e:	2303      	movs	r3, #3
 800b1a0:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800b1a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	371c      	adds	r7, #28
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ae:	4770      	bx	lr

0800b1b0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b1b0:	b480      	push	{r7}
 800b1b2:	b087      	sub	sp, #28
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	60f8      	str	r0, [r7, #12]
 800b1b8:	60b9      	str	r1, [r7, #8]
 800b1ba:	4613      	mov	r3, r2
 800b1bc:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	3301      	adds	r3, #1
 800b1c2:	781b      	ldrb	r3, [r3, #0]
 800b1c4:	2b03      	cmp	r3, #3
 800b1c6:	d120      	bne.n	800b20a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	781b      	ldrb	r3, [r3, #0]
 800b1cc:	1e9a      	subs	r2, r3, #2
 800b1ce:	88fb      	ldrh	r3, [r7, #6]
 800b1d0:	4293      	cmp	r3, r2
 800b1d2:	bf28      	it	cs
 800b1d4:	4613      	movcs	r3, r2
 800b1d6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	3302      	adds	r3, #2
 800b1dc:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b1de:	2300      	movs	r3, #0
 800b1e0:	82fb      	strh	r3, [r7, #22]
 800b1e2:	e00b      	b.n	800b1fc <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b1e4:	8afb      	ldrh	r3, [r7, #22]
 800b1e6:	68fa      	ldr	r2, [r7, #12]
 800b1e8:	4413      	add	r3, r2
 800b1ea:	781a      	ldrb	r2, [r3, #0]
 800b1ec:	68bb      	ldr	r3, [r7, #8]
 800b1ee:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b1f0:	68bb      	ldr	r3, [r7, #8]
 800b1f2:	3301      	adds	r3, #1
 800b1f4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b1f6:	8afb      	ldrh	r3, [r7, #22]
 800b1f8:	3302      	adds	r3, #2
 800b1fa:	82fb      	strh	r3, [r7, #22]
 800b1fc:	8afa      	ldrh	r2, [r7, #22]
 800b1fe:	8abb      	ldrh	r3, [r7, #20]
 800b200:	429a      	cmp	r2, r3
 800b202:	d3ef      	bcc.n	800b1e4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b204:	68bb      	ldr	r3, [r7, #8]
 800b206:	2200      	movs	r2, #0
 800b208:	701a      	strb	r2, [r3, #0]
  }
}
 800b20a:	bf00      	nop
 800b20c:	371c      	adds	r7, #28
 800b20e:	46bd      	mov	sp, r7
 800b210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b214:	4770      	bx	lr

0800b216 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800b216:	b480      	push	{r7}
 800b218:	b085      	sub	sp, #20
 800b21a:	af00      	add	r7, sp, #0
 800b21c:	6078      	str	r0, [r7, #4]
 800b21e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	881a      	ldrh	r2, [r3, #0]
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	781b      	ldrb	r3, [r3, #0]
 800b228:	b29b      	uxth	r3, r3
 800b22a:	4413      	add	r3, r2
 800b22c:	b29a      	uxth	r2, r3
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	781b      	ldrb	r3, [r3, #0]
 800b236:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	4413      	add	r3, r2
 800b23c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b23e:	68fb      	ldr	r3, [r7, #12]
}
 800b240:	4618      	mov	r0, r3
 800b242:	3714      	adds	r7, #20
 800b244:	46bd      	mov	sp, r7
 800b246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24a:	4770      	bx	lr

0800b24c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b086      	sub	sp, #24
 800b250:	af00      	add	r7, sp, #0
 800b252:	60f8      	str	r0, [r7, #12]
 800b254:	60b9      	str	r1, [r7, #8]
 800b256:	4613      	mov	r3, r2
 800b258:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b25a:	2301      	movs	r3, #1
 800b25c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	789b      	ldrb	r3, [r3, #2]
 800b262:	2b01      	cmp	r3, #1
 800b264:	d002      	beq.n	800b26c <USBH_CtlReq+0x20>
 800b266:	2b02      	cmp	r3, #2
 800b268:	d00f      	beq.n	800b28a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800b26a:	e027      	b.n	800b2bc <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	68ba      	ldr	r2, [r7, #8]
 800b270:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	88fa      	ldrh	r2, [r7, #6]
 800b276:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	2201      	movs	r2, #1
 800b27c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	2202      	movs	r2, #2
 800b282:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b284:	2301      	movs	r3, #1
 800b286:	75fb      	strb	r3, [r7, #23]
      break;
 800b288:	e018      	b.n	800b2bc <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800b28a:	68f8      	ldr	r0, [r7, #12]
 800b28c:	f000 f81c 	bl	800b2c8 <USBH_HandleControl>
 800b290:	4603      	mov	r3, r0
 800b292:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b294:	7dfb      	ldrb	r3, [r7, #23]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d002      	beq.n	800b2a0 <USBH_CtlReq+0x54>
 800b29a:	7dfb      	ldrb	r3, [r7, #23]
 800b29c:	2b03      	cmp	r3, #3
 800b29e:	d106      	bne.n	800b2ae <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	2201      	movs	r2, #1
 800b2a4:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	761a      	strb	r2, [r3, #24]
      break;
 800b2ac:	e005      	b.n	800b2ba <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800b2ae:	7dfb      	ldrb	r3, [r7, #23]
 800b2b0:	2b02      	cmp	r3, #2
 800b2b2:	d102      	bne.n	800b2ba <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	2201      	movs	r2, #1
 800b2b8:	709a      	strb	r2, [r3, #2]
      break;
 800b2ba:	bf00      	nop
  }
  return status;
 800b2bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2be:	4618      	mov	r0, r3
 800b2c0:	3718      	adds	r7, #24
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bd80      	pop	{r7, pc}
	...

0800b2c8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b086      	sub	sp, #24
 800b2cc:	af02      	add	r7, sp, #8
 800b2ce:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b2d0:	2301      	movs	r3, #1
 800b2d2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	7e1b      	ldrb	r3, [r3, #24]
 800b2dc:	3b01      	subs	r3, #1
 800b2de:	2b0a      	cmp	r3, #10
 800b2e0:	f200 8156 	bhi.w	800b590 <USBH_HandleControl+0x2c8>
 800b2e4:	a201      	add	r2, pc, #4	; (adr r2, 800b2ec <USBH_HandleControl+0x24>)
 800b2e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2ea:	bf00      	nop
 800b2ec:	0800b319 	.word	0x0800b319
 800b2f0:	0800b333 	.word	0x0800b333
 800b2f4:	0800b39d 	.word	0x0800b39d
 800b2f8:	0800b3c3 	.word	0x0800b3c3
 800b2fc:	0800b3fb 	.word	0x0800b3fb
 800b300:	0800b425 	.word	0x0800b425
 800b304:	0800b477 	.word	0x0800b477
 800b308:	0800b499 	.word	0x0800b499
 800b30c:	0800b4d5 	.word	0x0800b4d5
 800b310:	0800b4fb 	.word	0x0800b4fb
 800b314:	0800b539 	.word	0x0800b539
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	f103 0110 	add.w	r1, r3, #16
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	795b      	ldrb	r3, [r3, #5]
 800b322:	461a      	mov	r2, r3
 800b324:	6878      	ldr	r0, [r7, #4]
 800b326:	f000 f943 	bl	800b5b0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	2202      	movs	r2, #2
 800b32e:	761a      	strb	r2, [r3, #24]
      break;
 800b330:	e139      	b.n	800b5a6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	795b      	ldrb	r3, [r3, #5]
 800b336:	4619      	mov	r1, r3
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	f005 fba3 	bl	8010a84 <USBH_LL_GetURBState>
 800b33e:	4603      	mov	r3, r0
 800b340:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b342:	7bbb      	ldrb	r3, [r7, #14]
 800b344:	2b01      	cmp	r3, #1
 800b346:	d11e      	bne.n	800b386 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	7c1b      	ldrb	r3, [r3, #16]
 800b34c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b350:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	8adb      	ldrh	r3, [r3, #22]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d00a      	beq.n	800b370 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b35a:	7b7b      	ldrb	r3, [r7, #13]
 800b35c:	2b80      	cmp	r3, #128	; 0x80
 800b35e:	d103      	bne.n	800b368 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2203      	movs	r2, #3
 800b364:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b366:	e115      	b.n	800b594 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2205      	movs	r2, #5
 800b36c:	761a      	strb	r2, [r3, #24]
      break;
 800b36e:	e111      	b.n	800b594 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800b370:	7b7b      	ldrb	r3, [r7, #13]
 800b372:	2b80      	cmp	r3, #128	; 0x80
 800b374:	d103      	bne.n	800b37e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	2209      	movs	r2, #9
 800b37a:	761a      	strb	r2, [r3, #24]
      break;
 800b37c:	e10a      	b.n	800b594 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	2207      	movs	r2, #7
 800b382:	761a      	strb	r2, [r3, #24]
      break;
 800b384:	e106      	b.n	800b594 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b386:	7bbb      	ldrb	r3, [r7, #14]
 800b388:	2b04      	cmp	r3, #4
 800b38a:	d003      	beq.n	800b394 <USBH_HandleControl+0xcc>
 800b38c:	7bbb      	ldrb	r3, [r7, #14]
 800b38e:	2b02      	cmp	r3, #2
 800b390:	f040 8100 	bne.w	800b594 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	220b      	movs	r2, #11
 800b398:	761a      	strb	r2, [r3, #24]
      break;
 800b39a:	e0fb      	b.n	800b594 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b3a2:	b29a      	uxth	r2, r3
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	6899      	ldr	r1, [r3, #8]
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	899a      	ldrh	r2, [r3, #12]
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	791b      	ldrb	r3, [r3, #4]
 800b3b4:	6878      	ldr	r0, [r7, #4]
 800b3b6:	f000 f93a 	bl	800b62e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	2204      	movs	r2, #4
 800b3be:	761a      	strb	r2, [r3, #24]
      break;
 800b3c0:	e0f1      	b.n	800b5a6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	791b      	ldrb	r3, [r3, #4]
 800b3c6:	4619      	mov	r1, r3
 800b3c8:	6878      	ldr	r0, [r7, #4]
 800b3ca:	f005 fb5b 	bl	8010a84 <USBH_LL_GetURBState>
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b3d2:	7bbb      	ldrb	r3, [r7, #14]
 800b3d4:	2b01      	cmp	r3, #1
 800b3d6:	d102      	bne.n	800b3de <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2209      	movs	r2, #9
 800b3dc:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800b3de:	7bbb      	ldrb	r3, [r7, #14]
 800b3e0:	2b05      	cmp	r3, #5
 800b3e2:	d102      	bne.n	800b3ea <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800b3e4:	2303      	movs	r3, #3
 800b3e6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b3e8:	e0d6      	b.n	800b598 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800b3ea:	7bbb      	ldrb	r3, [r7, #14]
 800b3ec:	2b04      	cmp	r3, #4
 800b3ee:	f040 80d3 	bne.w	800b598 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	220b      	movs	r2, #11
 800b3f6:	761a      	strb	r2, [r3, #24]
      break;
 800b3f8:	e0ce      	b.n	800b598 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	6899      	ldr	r1, [r3, #8]
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	899a      	ldrh	r2, [r3, #12]
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	795b      	ldrb	r3, [r3, #5]
 800b406:	2001      	movs	r0, #1
 800b408:	9000      	str	r0, [sp, #0]
 800b40a:	6878      	ldr	r0, [r7, #4]
 800b40c:	f000 f8ea 	bl	800b5e4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b416:	b29a      	uxth	r2, r3
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	2206      	movs	r2, #6
 800b420:	761a      	strb	r2, [r3, #24]
      break;
 800b422:	e0c0      	b.n	800b5a6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	795b      	ldrb	r3, [r3, #5]
 800b428:	4619      	mov	r1, r3
 800b42a:	6878      	ldr	r0, [r7, #4]
 800b42c:	f005 fb2a 	bl	8010a84 <USBH_LL_GetURBState>
 800b430:	4603      	mov	r3, r0
 800b432:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b434:	7bbb      	ldrb	r3, [r7, #14]
 800b436:	2b01      	cmp	r3, #1
 800b438:	d103      	bne.n	800b442 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	2207      	movs	r2, #7
 800b43e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b440:	e0ac      	b.n	800b59c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800b442:	7bbb      	ldrb	r3, [r7, #14]
 800b444:	2b05      	cmp	r3, #5
 800b446:	d105      	bne.n	800b454 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	220c      	movs	r2, #12
 800b44c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b44e:	2303      	movs	r3, #3
 800b450:	73fb      	strb	r3, [r7, #15]
      break;
 800b452:	e0a3      	b.n	800b59c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b454:	7bbb      	ldrb	r3, [r7, #14]
 800b456:	2b02      	cmp	r3, #2
 800b458:	d103      	bne.n	800b462 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	2205      	movs	r2, #5
 800b45e:	761a      	strb	r2, [r3, #24]
      break;
 800b460:	e09c      	b.n	800b59c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800b462:	7bbb      	ldrb	r3, [r7, #14]
 800b464:	2b04      	cmp	r3, #4
 800b466:	f040 8099 	bne.w	800b59c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	220b      	movs	r2, #11
 800b46e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b470:	2302      	movs	r3, #2
 800b472:	73fb      	strb	r3, [r7, #15]
      break;
 800b474:	e092      	b.n	800b59c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	791b      	ldrb	r3, [r3, #4]
 800b47a:	2200      	movs	r2, #0
 800b47c:	2100      	movs	r1, #0
 800b47e:	6878      	ldr	r0, [r7, #4]
 800b480:	f000 f8d5 	bl	800b62e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b48a:	b29a      	uxth	r2, r3
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2208      	movs	r2, #8
 800b494:	761a      	strb	r2, [r3, #24]

      break;
 800b496:	e086      	b.n	800b5a6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	791b      	ldrb	r3, [r3, #4]
 800b49c:	4619      	mov	r1, r3
 800b49e:	6878      	ldr	r0, [r7, #4]
 800b4a0:	f005 faf0 	bl	8010a84 <USBH_LL_GetURBState>
 800b4a4:	4603      	mov	r3, r0
 800b4a6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b4a8:	7bbb      	ldrb	r3, [r7, #14]
 800b4aa:	2b01      	cmp	r3, #1
 800b4ac:	d105      	bne.n	800b4ba <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	220d      	movs	r2, #13
 800b4b2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b4b8:	e072      	b.n	800b5a0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800b4ba:	7bbb      	ldrb	r3, [r7, #14]
 800b4bc:	2b04      	cmp	r3, #4
 800b4be:	d103      	bne.n	800b4c8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	220b      	movs	r2, #11
 800b4c4:	761a      	strb	r2, [r3, #24]
      break;
 800b4c6:	e06b      	b.n	800b5a0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800b4c8:	7bbb      	ldrb	r3, [r7, #14]
 800b4ca:	2b05      	cmp	r3, #5
 800b4cc:	d168      	bne.n	800b5a0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800b4ce:	2303      	movs	r3, #3
 800b4d0:	73fb      	strb	r3, [r7, #15]
      break;
 800b4d2:	e065      	b.n	800b5a0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	795b      	ldrb	r3, [r3, #5]
 800b4d8:	2201      	movs	r2, #1
 800b4da:	9200      	str	r2, [sp, #0]
 800b4dc:	2200      	movs	r2, #0
 800b4de:	2100      	movs	r1, #0
 800b4e0:	6878      	ldr	r0, [r7, #4]
 800b4e2:	f000 f87f 	bl	800b5e4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b4ec:	b29a      	uxth	r2, r3
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	220a      	movs	r2, #10
 800b4f6:	761a      	strb	r2, [r3, #24]
      break;
 800b4f8:	e055      	b.n	800b5a6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	795b      	ldrb	r3, [r3, #5]
 800b4fe:	4619      	mov	r1, r3
 800b500:	6878      	ldr	r0, [r7, #4]
 800b502:	f005 fabf 	bl	8010a84 <USBH_LL_GetURBState>
 800b506:	4603      	mov	r3, r0
 800b508:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b50a:	7bbb      	ldrb	r3, [r7, #14]
 800b50c:	2b01      	cmp	r3, #1
 800b50e:	d105      	bne.n	800b51c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800b510:	2300      	movs	r3, #0
 800b512:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	220d      	movs	r2, #13
 800b518:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b51a:	e043      	b.n	800b5a4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b51c:	7bbb      	ldrb	r3, [r7, #14]
 800b51e:	2b02      	cmp	r3, #2
 800b520:	d103      	bne.n	800b52a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	2209      	movs	r2, #9
 800b526:	761a      	strb	r2, [r3, #24]
      break;
 800b528:	e03c      	b.n	800b5a4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800b52a:	7bbb      	ldrb	r3, [r7, #14]
 800b52c:	2b04      	cmp	r3, #4
 800b52e:	d139      	bne.n	800b5a4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	220b      	movs	r2, #11
 800b534:	761a      	strb	r2, [r3, #24]
      break;
 800b536:	e035      	b.n	800b5a4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	7e5b      	ldrb	r3, [r3, #25]
 800b53c:	3301      	adds	r3, #1
 800b53e:	b2da      	uxtb	r2, r3
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	765a      	strb	r2, [r3, #25]
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	7e5b      	ldrb	r3, [r3, #25]
 800b548:	2b02      	cmp	r3, #2
 800b54a:	d806      	bhi.n	800b55a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	2201      	movs	r2, #1
 800b550:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	2201      	movs	r2, #1
 800b556:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b558:	e025      	b.n	800b5a6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b560:	2106      	movs	r1, #6
 800b562:	6878      	ldr	r0, [r7, #4]
 800b564:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	2200      	movs	r2, #0
 800b56a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	795b      	ldrb	r3, [r3, #5]
 800b570:	4619      	mov	r1, r3
 800b572:	6878      	ldr	r0, [r7, #4]
 800b574:	f000 f90c 	bl	800b790 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	791b      	ldrb	r3, [r3, #4]
 800b57c:	4619      	mov	r1, r3
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	f000 f906 	bl	800b790 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	2200      	movs	r2, #0
 800b588:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b58a:	2302      	movs	r3, #2
 800b58c:	73fb      	strb	r3, [r7, #15]
      break;
 800b58e:	e00a      	b.n	800b5a6 <USBH_HandleControl+0x2de>

    default:
      break;
 800b590:	bf00      	nop
 800b592:	e008      	b.n	800b5a6 <USBH_HandleControl+0x2de>
      break;
 800b594:	bf00      	nop
 800b596:	e006      	b.n	800b5a6 <USBH_HandleControl+0x2de>
      break;
 800b598:	bf00      	nop
 800b59a:	e004      	b.n	800b5a6 <USBH_HandleControl+0x2de>
      break;
 800b59c:	bf00      	nop
 800b59e:	e002      	b.n	800b5a6 <USBH_HandleControl+0x2de>
      break;
 800b5a0:	bf00      	nop
 800b5a2:	e000      	b.n	800b5a6 <USBH_HandleControl+0x2de>
      break;
 800b5a4:	bf00      	nop
  }

  return status;
 800b5a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	3710      	adds	r7, #16
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	bd80      	pop	{r7, pc}

0800b5b0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b088      	sub	sp, #32
 800b5b4:	af04      	add	r7, sp, #16
 800b5b6:	60f8      	str	r0, [r7, #12]
 800b5b8:	60b9      	str	r1, [r7, #8]
 800b5ba:	4613      	mov	r3, r2
 800b5bc:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b5be:	79f9      	ldrb	r1, [r7, #7]
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	9303      	str	r3, [sp, #12]
 800b5c4:	2308      	movs	r3, #8
 800b5c6:	9302      	str	r3, [sp, #8]
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	9301      	str	r3, [sp, #4]
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	9300      	str	r3, [sp, #0]
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	68f8      	ldr	r0, [r7, #12]
 800b5d6:	f005 fa24 	bl	8010a22 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800b5da:	2300      	movs	r3, #0
}
 800b5dc:	4618      	mov	r0, r3
 800b5de:	3710      	adds	r7, #16
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	bd80      	pop	{r7, pc}

0800b5e4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b088      	sub	sp, #32
 800b5e8:	af04      	add	r7, sp, #16
 800b5ea:	60f8      	str	r0, [r7, #12]
 800b5ec:	60b9      	str	r1, [r7, #8]
 800b5ee:	4611      	mov	r1, r2
 800b5f0:	461a      	mov	r2, r3
 800b5f2:	460b      	mov	r3, r1
 800b5f4:	80fb      	strh	r3, [r7, #6]
 800b5f6:	4613      	mov	r3, r2
 800b5f8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b600:	2b00      	cmp	r3, #0
 800b602:	d001      	beq.n	800b608 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b604:	2300      	movs	r3, #0
 800b606:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b608:	7979      	ldrb	r1, [r7, #5]
 800b60a:	7e3b      	ldrb	r3, [r7, #24]
 800b60c:	9303      	str	r3, [sp, #12]
 800b60e:	88fb      	ldrh	r3, [r7, #6]
 800b610:	9302      	str	r3, [sp, #8]
 800b612:	68bb      	ldr	r3, [r7, #8]
 800b614:	9301      	str	r3, [sp, #4]
 800b616:	2301      	movs	r3, #1
 800b618:	9300      	str	r3, [sp, #0]
 800b61a:	2300      	movs	r3, #0
 800b61c:	2200      	movs	r2, #0
 800b61e:	68f8      	ldr	r0, [r7, #12]
 800b620:	f005 f9ff 	bl	8010a22 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b624:	2300      	movs	r3, #0
}
 800b626:	4618      	mov	r0, r3
 800b628:	3710      	adds	r7, #16
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}

0800b62e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b62e:	b580      	push	{r7, lr}
 800b630:	b088      	sub	sp, #32
 800b632:	af04      	add	r7, sp, #16
 800b634:	60f8      	str	r0, [r7, #12]
 800b636:	60b9      	str	r1, [r7, #8]
 800b638:	4611      	mov	r1, r2
 800b63a:	461a      	mov	r2, r3
 800b63c:	460b      	mov	r3, r1
 800b63e:	80fb      	strh	r3, [r7, #6]
 800b640:	4613      	mov	r3, r2
 800b642:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b644:	7979      	ldrb	r1, [r7, #5]
 800b646:	2300      	movs	r3, #0
 800b648:	9303      	str	r3, [sp, #12]
 800b64a:	88fb      	ldrh	r3, [r7, #6]
 800b64c:	9302      	str	r3, [sp, #8]
 800b64e:	68bb      	ldr	r3, [r7, #8]
 800b650:	9301      	str	r3, [sp, #4]
 800b652:	2301      	movs	r3, #1
 800b654:	9300      	str	r3, [sp, #0]
 800b656:	2300      	movs	r3, #0
 800b658:	2201      	movs	r2, #1
 800b65a:	68f8      	ldr	r0, [r7, #12]
 800b65c:	f005 f9e1 	bl	8010a22 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b660:	2300      	movs	r3, #0

}
 800b662:	4618      	mov	r0, r3
 800b664:	3710      	adds	r7, #16
 800b666:	46bd      	mov	sp, r7
 800b668:	bd80      	pop	{r7, pc}

0800b66a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b66a:	b580      	push	{r7, lr}
 800b66c:	b088      	sub	sp, #32
 800b66e:	af04      	add	r7, sp, #16
 800b670:	60f8      	str	r0, [r7, #12]
 800b672:	60b9      	str	r1, [r7, #8]
 800b674:	4611      	mov	r1, r2
 800b676:	461a      	mov	r2, r3
 800b678:	460b      	mov	r3, r1
 800b67a:	80fb      	strh	r3, [r7, #6]
 800b67c:	4613      	mov	r3, r2
 800b67e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b686:	2b00      	cmp	r3, #0
 800b688:	d001      	beq.n	800b68e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b68a:	2300      	movs	r3, #0
 800b68c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b68e:	7979      	ldrb	r1, [r7, #5]
 800b690:	7e3b      	ldrb	r3, [r7, #24]
 800b692:	9303      	str	r3, [sp, #12]
 800b694:	88fb      	ldrh	r3, [r7, #6]
 800b696:	9302      	str	r3, [sp, #8]
 800b698:	68bb      	ldr	r3, [r7, #8]
 800b69a:	9301      	str	r3, [sp, #4]
 800b69c:	2301      	movs	r3, #1
 800b69e:	9300      	str	r3, [sp, #0]
 800b6a0:	2302      	movs	r3, #2
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	68f8      	ldr	r0, [r7, #12]
 800b6a6:	f005 f9bc 	bl	8010a22 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b6aa:	2300      	movs	r3, #0
}
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	3710      	adds	r7, #16
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	bd80      	pop	{r7, pc}

0800b6b4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b088      	sub	sp, #32
 800b6b8:	af04      	add	r7, sp, #16
 800b6ba:	60f8      	str	r0, [r7, #12]
 800b6bc:	60b9      	str	r1, [r7, #8]
 800b6be:	4611      	mov	r1, r2
 800b6c0:	461a      	mov	r2, r3
 800b6c2:	460b      	mov	r3, r1
 800b6c4:	80fb      	strh	r3, [r7, #6]
 800b6c6:	4613      	mov	r3, r2
 800b6c8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b6ca:	7979      	ldrb	r1, [r7, #5]
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	9303      	str	r3, [sp, #12]
 800b6d0:	88fb      	ldrh	r3, [r7, #6]
 800b6d2:	9302      	str	r3, [sp, #8]
 800b6d4:	68bb      	ldr	r3, [r7, #8]
 800b6d6:	9301      	str	r3, [sp, #4]
 800b6d8:	2301      	movs	r3, #1
 800b6da:	9300      	str	r3, [sp, #0]
 800b6dc:	2302      	movs	r3, #2
 800b6de:	2201      	movs	r2, #1
 800b6e0:	68f8      	ldr	r0, [r7, #12]
 800b6e2:	f005 f99e 	bl	8010a22 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b6e6:	2300      	movs	r3, #0
}
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	3710      	adds	r7, #16
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	bd80      	pop	{r7, pc}

0800b6f0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b086      	sub	sp, #24
 800b6f4:	af04      	add	r7, sp, #16
 800b6f6:	6078      	str	r0, [r7, #4]
 800b6f8:	4608      	mov	r0, r1
 800b6fa:	4611      	mov	r1, r2
 800b6fc:	461a      	mov	r2, r3
 800b6fe:	4603      	mov	r3, r0
 800b700:	70fb      	strb	r3, [r7, #3]
 800b702:	460b      	mov	r3, r1
 800b704:	70bb      	strb	r3, [r7, #2]
 800b706:	4613      	mov	r3, r2
 800b708:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b70a:	7878      	ldrb	r0, [r7, #1]
 800b70c:	78ba      	ldrb	r2, [r7, #2]
 800b70e:	78f9      	ldrb	r1, [r7, #3]
 800b710:	8b3b      	ldrh	r3, [r7, #24]
 800b712:	9302      	str	r3, [sp, #8]
 800b714:	7d3b      	ldrb	r3, [r7, #20]
 800b716:	9301      	str	r3, [sp, #4]
 800b718:	7c3b      	ldrb	r3, [r7, #16]
 800b71a:	9300      	str	r3, [sp, #0]
 800b71c:	4603      	mov	r3, r0
 800b71e:	6878      	ldr	r0, [r7, #4]
 800b720:	f005 f931 	bl	8010986 <USBH_LL_OpenPipe>

  return USBH_OK;
 800b724:	2300      	movs	r3, #0
}
 800b726:	4618      	mov	r0, r3
 800b728:	3708      	adds	r7, #8
 800b72a:	46bd      	mov	sp, r7
 800b72c:	bd80      	pop	{r7, pc}

0800b72e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b72e:	b580      	push	{r7, lr}
 800b730:	b082      	sub	sp, #8
 800b732:	af00      	add	r7, sp, #0
 800b734:	6078      	str	r0, [r7, #4]
 800b736:	460b      	mov	r3, r1
 800b738:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800b73a:	78fb      	ldrb	r3, [r7, #3]
 800b73c:	4619      	mov	r1, r3
 800b73e:	6878      	ldr	r0, [r7, #4]
 800b740:	f005 f950 	bl	80109e4 <USBH_LL_ClosePipe>

  return USBH_OK;
 800b744:	2300      	movs	r3, #0
}
 800b746:	4618      	mov	r0, r3
 800b748:	3708      	adds	r7, #8
 800b74a:	46bd      	mov	sp, r7
 800b74c:	bd80      	pop	{r7, pc}

0800b74e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b74e:	b580      	push	{r7, lr}
 800b750:	b084      	sub	sp, #16
 800b752:	af00      	add	r7, sp, #0
 800b754:	6078      	str	r0, [r7, #4]
 800b756:	460b      	mov	r3, r1
 800b758:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b75a:	6878      	ldr	r0, [r7, #4]
 800b75c:	f000 f836 	bl	800b7cc <USBH_GetFreePipe>
 800b760:	4603      	mov	r3, r0
 800b762:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b764:	89fb      	ldrh	r3, [r7, #14]
 800b766:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b76a:	4293      	cmp	r3, r2
 800b76c:	d00a      	beq.n	800b784 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800b76e:	78fa      	ldrb	r2, [r7, #3]
 800b770:	89fb      	ldrh	r3, [r7, #14]
 800b772:	f003 030f 	and.w	r3, r3, #15
 800b776:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b77a:	6879      	ldr	r1, [r7, #4]
 800b77c:	33e0      	adds	r3, #224	; 0xe0
 800b77e:	009b      	lsls	r3, r3, #2
 800b780:	440b      	add	r3, r1
 800b782:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b784:	89fb      	ldrh	r3, [r7, #14]
 800b786:	b2db      	uxtb	r3, r3
}
 800b788:	4618      	mov	r0, r3
 800b78a:	3710      	adds	r7, #16
 800b78c:	46bd      	mov	sp, r7
 800b78e:	bd80      	pop	{r7, pc}

0800b790 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b790:	b480      	push	{r7}
 800b792:	b083      	sub	sp, #12
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
 800b798:	460b      	mov	r3, r1
 800b79a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800b79c:	78fb      	ldrb	r3, [r7, #3]
 800b79e:	2b0f      	cmp	r3, #15
 800b7a0:	d80d      	bhi.n	800b7be <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b7a2:	78fb      	ldrb	r3, [r7, #3]
 800b7a4:	687a      	ldr	r2, [r7, #4]
 800b7a6:	33e0      	adds	r3, #224	; 0xe0
 800b7a8:	009b      	lsls	r3, r3, #2
 800b7aa:	4413      	add	r3, r2
 800b7ac:	685a      	ldr	r2, [r3, #4]
 800b7ae:	78fb      	ldrb	r3, [r7, #3]
 800b7b0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b7b4:	6879      	ldr	r1, [r7, #4]
 800b7b6:	33e0      	adds	r3, #224	; 0xe0
 800b7b8:	009b      	lsls	r3, r3, #2
 800b7ba:	440b      	add	r3, r1
 800b7bc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b7be:	2300      	movs	r3, #0
}
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	370c      	adds	r7, #12
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ca:	4770      	bx	lr

0800b7cc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	b085      	sub	sp, #20
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800b7d8:	2300      	movs	r3, #0
 800b7da:	73fb      	strb	r3, [r7, #15]
 800b7dc:	e00f      	b.n	800b7fe <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b7de:	7bfb      	ldrb	r3, [r7, #15]
 800b7e0:	687a      	ldr	r2, [r7, #4]
 800b7e2:	33e0      	adds	r3, #224	; 0xe0
 800b7e4:	009b      	lsls	r3, r3, #2
 800b7e6:	4413      	add	r3, r2
 800b7e8:	685b      	ldr	r3, [r3, #4]
 800b7ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d102      	bne.n	800b7f8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b7f2:	7bfb      	ldrb	r3, [r7, #15]
 800b7f4:	b29b      	uxth	r3, r3
 800b7f6:	e007      	b.n	800b808 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800b7f8:	7bfb      	ldrb	r3, [r7, #15]
 800b7fa:	3301      	adds	r3, #1
 800b7fc:	73fb      	strb	r3, [r7, #15]
 800b7fe:	7bfb      	ldrb	r3, [r7, #15]
 800b800:	2b0f      	cmp	r3, #15
 800b802:	d9ec      	bls.n	800b7de <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b804:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800b808:	4618      	mov	r0, r3
 800b80a:	3714      	adds	r7, #20
 800b80c:	46bd      	mov	sp, r7
 800b80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b812:	4770      	bx	lr

0800b814 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b084      	sub	sp, #16
 800b818:	af00      	add	r7, sp, #0
 800b81a:	4603      	mov	r3, r0
 800b81c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b81e:	79fb      	ldrb	r3, [r7, #7]
 800b820:	4a08      	ldr	r2, [pc, #32]	; (800b844 <disk_status+0x30>)
 800b822:	009b      	lsls	r3, r3, #2
 800b824:	4413      	add	r3, r2
 800b826:	685b      	ldr	r3, [r3, #4]
 800b828:	685b      	ldr	r3, [r3, #4]
 800b82a:	79fa      	ldrb	r2, [r7, #7]
 800b82c:	4905      	ldr	r1, [pc, #20]	; (800b844 <disk_status+0x30>)
 800b82e:	440a      	add	r2, r1
 800b830:	7a12      	ldrb	r2, [r2, #8]
 800b832:	4610      	mov	r0, r2
 800b834:	4798      	blx	r3
 800b836:	4603      	mov	r3, r0
 800b838:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b83a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b83c:	4618      	mov	r0, r3
 800b83e:	3710      	adds	r7, #16
 800b840:	46bd      	mov	sp, r7
 800b842:	bd80      	pop	{r7, pc}
 800b844:	20004a64 	.word	0x20004a64

0800b848 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b084      	sub	sp, #16
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	4603      	mov	r3, r0
 800b850:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b852:	2300      	movs	r3, #0
 800b854:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b856:	79fb      	ldrb	r3, [r7, #7]
 800b858:	4a0d      	ldr	r2, [pc, #52]	; (800b890 <disk_initialize+0x48>)
 800b85a:	5cd3      	ldrb	r3, [r2, r3]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d111      	bne.n	800b884 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b860:	79fb      	ldrb	r3, [r7, #7]
 800b862:	4a0b      	ldr	r2, [pc, #44]	; (800b890 <disk_initialize+0x48>)
 800b864:	2101      	movs	r1, #1
 800b866:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b868:	79fb      	ldrb	r3, [r7, #7]
 800b86a:	4a09      	ldr	r2, [pc, #36]	; (800b890 <disk_initialize+0x48>)
 800b86c:	009b      	lsls	r3, r3, #2
 800b86e:	4413      	add	r3, r2
 800b870:	685b      	ldr	r3, [r3, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	79fa      	ldrb	r2, [r7, #7]
 800b876:	4906      	ldr	r1, [pc, #24]	; (800b890 <disk_initialize+0x48>)
 800b878:	440a      	add	r2, r1
 800b87a:	7a12      	ldrb	r2, [r2, #8]
 800b87c:	4610      	mov	r0, r2
 800b87e:	4798      	blx	r3
 800b880:	4603      	mov	r3, r0
 800b882:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b884:	7bfb      	ldrb	r3, [r7, #15]
}
 800b886:	4618      	mov	r0, r3
 800b888:	3710      	adds	r7, #16
 800b88a:	46bd      	mov	sp, r7
 800b88c:	bd80      	pop	{r7, pc}
 800b88e:	bf00      	nop
 800b890:	20004a64 	.word	0x20004a64

0800b894 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b894:	b590      	push	{r4, r7, lr}
 800b896:	b087      	sub	sp, #28
 800b898:	af00      	add	r7, sp, #0
 800b89a:	60b9      	str	r1, [r7, #8]
 800b89c:	607a      	str	r2, [r7, #4]
 800b89e:	603b      	str	r3, [r7, #0]
 800b8a0:	4603      	mov	r3, r0
 800b8a2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b8a4:	7bfb      	ldrb	r3, [r7, #15]
 800b8a6:	4a0a      	ldr	r2, [pc, #40]	; (800b8d0 <disk_read+0x3c>)
 800b8a8:	009b      	lsls	r3, r3, #2
 800b8aa:	4413      	add	r3, r2
 800b8ac:	685b      	ldr	r3, [r3, #4]
 800b8ae:	689c      	ldr	r4, [r3, #8]
 800b8b0:	7bfb      	ldrb	r3, [r7, #15]
 800b8b2:	4a07      	ldr	r2, [pc, #28]	; (800b8d0 <disk_read+0x3c>)
 800b8b4:	4413      	add	r3, r2
 800b8b6:	7a18      	ldrb	r0, [r3, #8]
 800b8b8:	683b      	ldr	r3, [r7, #0]
 800b8ba:	687a      	ldr	r2, [r7, #4]
 800b8bc:	68b9      	ldr	r1, [r7, #8]
 800b8be:	47a0      	blx	r4
 800b8c0:	4603      	mov	r3, r0
 800b8c2:	75fb      	strb	r3, [r7, #23]
  return res;
 800b8c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	371c      	adds	r7, #28
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	bd90      	pop	{r4, r7, pc}
 800b8ce:	bf00      	nop
 800b8d0:	20004a64 	.word	0x20004a64

0800b8d4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b8d4:	b590      	push	{r4, r7, lr}
 800b8d6:	b087      	sub	sp, #28
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	60b9      	str	r1, [r7, #8]
 800b8dc:	607a      	str	r2, [r7, #4]
 800b8de:	603b      	str	r3, [r7, #0]
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b8e4:	7bfb      	ldrb	r3, [r7, #15]
 800b8e6:	4a0a      	ldr	r2, [pc, #40]	; (800b910 <disk_write+0x3c>)
 800b8e8:	009b      	lsls	r3, r3, #2
 800b8ea:	4413      	add	r3, r2
 800b8ec:	685b      	ldr	r3, [r3, #4]
 800b8ee:	68dc      	ldr	r4, [r3, #12]
 800b8f0:	7bfb      	ldrb	r3, [r7, #15]
 800b8f2:	4a07      	ldr	r2, [pc, #28]	; (800b910 <disk_write+0x3c>)
 800b8f4:	4413      	add	r3, r2
 800b8f6:	7a18      	ldrb	r0, [r3, #8]
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	687a      	ldr	r2, [r7, #4]
 800b8fc:	68b9      	ldr	r1, [r7, #8]
 800b8fe:	47a0      	blx	r4
 800b900:	4603      	mov	r3, r0
 800b902:	75fb      	strb	r3, [r7, #23]
  return res;
 800b904:	7dfb      	ldrb	r3, [r7, #23]
}
 800b906:	4618      	mov	r0, r3
 800b908:	371c      	adds	r7, #28
 800b90a:	46bd      	mov	sp, r7
 800b90c:	bd90      	pop	{r4, r7, pc}
 800b90e:	bf00      	nop
 800b910:	20004a64 	.word	0x20004a64

0800b914 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b084      	sub	sp, #16
 800b918:	af00      	add	r7, sp, #0
 800b91a:	4603      	mov	r3, r0
 800b91c:	603a      	str	r2, [r7, #0]
 800b91e:	71fb      	strb	r3, [r7, #7]
 800b920:	460b      	mov	r3, r1
 800b922:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b924:	79fb      	ldrb	r3, [r7, #7]
 800b926:	4a09      	ldr	r2, [pc, #36]	; (800b94c <disk_ioctl+0x38>)
 800b928:	009b      	lsls	r3, r3, #2
 800b92a:	4413      	add	r3, r2
 800b92c:	685b      	ldr	r3, [r3, #4]
 800b92e:	691b      	ldr	r3, [r3, #16]
 800b930:	79fa      	ldrb	r2, [r7, #7]
 800b932:	4906      	ldr	r1, [pc, #24]	; (800b94c <disk_ioctl+0x38>)
 800b934:	440a      	add	r2, r1
 800b936:	7a10      	ldrb	r0, [r2, #8]
 800b938:	79b9      	ldrb	r1, [r7, #6]
 800b93a:	683a      	ldr	r2, [r7, #0]
 800b93c:	4798      	blx	r3
 800b93e:	4603      	mov	r3, r0
 800b940:	73fb      	strb	r3, [r7, #15]
  return res;
 800b942:	7bfb      	ldrb	r3, [r7, #15]
}
 800b944:	4618      	mov	r0, r3
 800b946:	3710      	adds	r7, #16
 800b948:	46bd      	mov	sp, r7
 800b94a:	bd80      	pop	{r7, pc}
 800b94c:	20004a64 	.word	0x20004a64

0800b950 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b950:	b480      	push	{r7}
 800b952:	b085      	sub	sp, #20
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	3301      	adds	r3, #1
 800b95c:	781b      	ldrb	r3, [r3, #0]
 800b95e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b960:	89fb      	ldrh	r3, [r7, #14]
 800b962:	021b      	lsls	r3, r3, #8
 800b964:	b21a      	sxth	r2, r3
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	781b      	ldrb	r3, [r3, #0]
 800b96a:	b21b      	sxth	r3, r3
 800b96c:	4313      	orrs	r3, r2
 800b96e:	b21b      	sxth	r3, r3
 800b970:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b972:	89fb      	ldrh	r3, [r7, #14]
}
 800b974:	4618      	mov	r0, r3
 800b976:	3714      	adds	r7, #20
 800b978:	46bd      	mov	sp, r7
 800b97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97e:	4770      	bx	lr

0800b980 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b980:	b480      	push	{r7}
 800b982:	b085      	sub	sp, #20
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	3303      	adds	r3, #3
 800b98c:	781b      	ldrb	r3, [r3, #0]
 800b98e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	021b      	lsls	r3, r3, #8
 800b994:	687a      	ldr	r2, [r7, #4]
 800b996:	3202      	adds	r2, #2
 800b998:	7812      	ldrb	r2, [r2, #0]
 800b99a:	4313      	orrs	r3, r2
 800b99c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	021b      	lsls	r3, r3, #8
 800b9a2:	687a      	ldr	r2, [r7, #4]
 800b9a4:	3201      	adds	r2, #1
 800b9a6:	7812      	ldrb	r2, [r2, #0]
 800b9a8:	4313      	orrs	r3, r2
 800b9aa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	021b      	lsls	r3, r3, #8
 800b9b0:	687a      	ldr	r2, [r7, #4]
 800b9b2:	7812      	ldrb	r2, [r2, #0]
 800b9b4:	4313      	orrs	r3, r2
 800b9b6:	60fb      	str	r3, [r7, #12]
	return rv;
 800b9b8:	68fb      	ldr	r3, [r7, #12]
}
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	3714      	adds	r7, #20
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c4:	4770      	bx	lr

0800b9c6 <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 800b9c6:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800b9ca:	b09d      	sub	sp, #116	; 0x74
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6678      	str	r0, [r7, #100]	; 0x64
	QWORD rv;

	rv = ptr[7];
 800b9d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b9d2:	3307      	adds	r3, #7
 800b9d4:	781b      	ldrb	r3, [r3, #0]
 800b9d6:	b2db      	uxtb	r3, r3
 800b9d8:	2200      	movs	r2, #0
 800b9da:	469a      	mov	sl, r3
 800b9dc:	4693      	mov	fp, r2
 800b9de:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[6];
 800b9e2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800b9e6:	f04f 0000 	mov.w	r0, #0
 800b9ea:	f04f 0100 	mov.w	r1, #0
 800b9ee:	0219      	lsls	r1, r3, #8
 800b9f0:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800b9f4:	0210      	lsls	r0, r2, #8
 800b9f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b9f8:	3306      	adds	r3, #6
 800b9fa:	781b      	ldrb	r3, [r3, #0]
 800b9fc:	b2db      	uxtb	r3, r3
 800b9fe:	2200      	movs	r2, #0
 800ba00:	461c      	mov	r4, r3
 800ba02:	4615      	mov	r5, r2
 800ba04:	ea40 0804 	orr.w	r8, r0, r4
 800ba08:	ea41 0905 	orr.w	r9, r1, r5
 800ba0c:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[5];
 800ba10:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800ba14:	f04f 0000 	mov.w	r0, #0
 800ba18:	f04f 0100 	mov.w	r1, #0
 800ba1c:	0219      	lsls	r1, r3, #8
 800ba1e:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800ba22:	0210      	lsls	r0, r2, #8
 800ba24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ba26:	3305      	adds	r3, #5
 800ba28:	781b      	ldrb	r3, [r3, #0]
 800ba2a:	b2db      	uxtb	r3, r3
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	65bb      	str	r3, [r7, #88]	; 0x58
 800ba30:	65fa      	str	r2, [r7, #92]	; 0x5c
 800ba32:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800ba36:	4623      	mov	r3, r4
 800ba38:	4303      	orrs	r3, r0
 800ba3a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ba3c:	462b      	mov	r3, r5
 800ba3e:	430b      	orrs	r3, r1
 800ba40:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ba42:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800ba46:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[4];
 800ba4a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800ba4e:	f04f 0000 	mov.w	r0, #0
 800ba52:	f04f 0100 	mov.w	r1, #0
 800ba56:	0219      	lsls	r1, r3, #8
 800ba58:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800ba5c:	0210      	lsls	r0, r2, #8
 800ba5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ba60:	3304      	adds	r3, #4
 800ba62:	781b      	ldrb	r3, [r3, #0]
 800ba64:	b2db      	uxtb	r3, r3
 800ba66:	2200      	movs	r2, #0
 800ba68:	653b      	str	r3, [r7, #80]	; 0x50
 800ba6a:	657a      	str	r2, [r7, #84]	; 0x54
 800ba6c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800ba70:	4623      	mov	r3, r4
 800ba72:	4303      	orrs	r3, r0
 800ba74:	623b      	str	r3, [r7, #32]
 800ba76:	462b      	mov	r3, r5
 800ba78:	430b      	orrs	r3, r1
 800ba7a:	627b      	str	r3, [r7, #36]	; 0x24
 800ba7c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800ba80:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[3];
 800ba84:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800ba88:	f04f 0000 	mov.w	r0, #0
 800ba8c:	f04f 0100 	mov.w	r1, #0
 800ba90:	0219      	lsls	r1, r3, #8
 800ba92:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800ba96:	0210      	lsls	r0, r2, #8
 800ba98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ba9a:	3303      	adds	r3, #3
 800ba9c:	781b      	ldrb	r3, [r3, #0]
 800ba9e:	b2db      	uxtb	r3, r3
 800baa0:	2200      	movs	r2, #0
 800baa2:	64bb      	str	r3, [r7, #72]	; 0x48
 800baa4:	64fa      	str	r2, [r7, #76]	; 0x4c
 800baa6:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800baaa:	4623      	mov	r3, r4
 800baac:	4303      	orrs	r3, r0
 800baae:	61bb      	str	r3, [r7, #24]
 800bab0:	462b      	mov	r3, r5
 800bab2:	430b      	orrs	r3, r1
 800bab4:	61fb      	str	r3, [r7, #28]
 800bab6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800baba:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[2];
 800babe:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800bac2:	f04f 0000 	mov.w	r0, #0
 800bac6:	f04f 0100 	mov.w	r1, #0
 800baca:	0219      	lsls	r1, r3, #8
 800bacc:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800bad0:	0210      	lsls	r0, r2, #8
 800bad2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bad4:	3302      	adds	r3, #2
 800bad6:	781b      	ldrb	r3, [r3, #0]
 800bad8:	b2db      	uxtb	r3, r3
 800bada:	2200      	movs	r2, #0
 800badc:	643b      	str	r3, [r7, #64]	; 0x40
 800bade:	647a      	str	r2, [r7, #68]	; 0x44
 800bae0:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800bae4:	4623      	mov	r3, r4
 800bae6:	4303      	orrs	r3, r0
 800bae8:	613b      	str	r3, [r7, #16]
 800baea:	462b      	mov	r3, r5
 800baec:	430b      	orrs	r3, r1
 800baee:	617b      	str	r3, [r7, #20]
 800baf0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800baf4:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[1];
 800baf8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800bafc:	f04f 0200 	mov.w	r2, #0
 800bb00:	f04f 0300 	mov.w	r3, #0
 800bb04:	020b      	lsls	r3, r1, #8
 800bb06:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bb0a:	0202      	lsls	r2, r0, #8
 800bb0c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800bb0e:	3101      	adds	r1, #1
 800bb10:	7809      	ldrb	r1, [r1, #0]
 800bb12:	b2c9      	uxtb	r1, r1
 800bb14:	2000      	movs	r0, #0
 800bb16:	63b9      	str	r1, [r7, #56]	; 0x38
 800bb18:	63f8      	str	r0, [r7, #60]	; 0x3c
 800bb1a:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800bb1e:	4621      	mov	r1, r4
 800bb20:	4311      	orrs	r1, r2
 800bb22:	60b9      	str	r1, [r7, #8]
 800bb24:	4629      	mov	r1, r5
 800bb26:	4319      	orrs	r1, r3
 800bb28:	60f9      	str	r1, [r7, #12]
 800bb2a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800bb2e:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[0];
 800bb32:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800bb36:	f04f 0200 	mov.w	r2, #0
 800bb3a:	f04f 0300 	mov.w	r3, #0
 800bb3e:	020b      	lsls	r3, r1, #8
 800bb40:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bb44:	0202      	lsls	r2, r0, #8
 800bb46:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800bb48:	7809      	ldrb	r1, [r1, #0]
 800bb4a:	b2c9      	uxtb	r1, r1
 800bb4c:	2000      	movs	r0, #0
 800bb4e:	6339      	str	r1, [r7, #48]	; 0x30
 800bb50:	6378      	str	r0, [r7, #52]	; 0x34
 800bb52:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800bb56:	4621      	mov	r1, r4
 800bb58:	4311      	orrs	r1, r2
 800bb5a:	6039      	str	r1, [r7, #0]
 800bb5c:	4629      	mov	r1, r5
 800bb5e:	4319      	orrs	r1, r3
 800bb60:	6079      	str	r1, [r7, #4]
 800bb62:	e9d7 3400 	ldrd	r3, r4, [r7]
 800bb66:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	return rv;
 800bb6a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
}
 800bb6e:	4610      	mov	r0, r2
 800bb70:	4619      	mov	r1, r3
 800bb72:	3774      	adds	r7, #116	; 0x74
 800bb74:	46bd      	mov	sp, r7
 800bb76:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800bb7a:	4770      	bx	lr

0800bb7c <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800bb7c:	b480      	push	{r7}
 800bb7e:	b083      	sub	sp, #12
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
 800bb84:	460b      	mov	r3, r1
 800bb86:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	1c5a      	adds	r2, r3, #1
 800bb8c:	607a      	str	r2, [r7, #4]
 800bb8e:	887a      	ldrh	r2, [r7, #2]
 800bb90:	b2d2      	uxtb	r2, r2
 800bb92:	701a      	strb	r2, [r3, #0]
 800bb94:	887b      	ldrh	r3, [r7, #2]
 800bb96:	0a1b      	lsrs	r3, r3, #8
 800bb98:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	1c5a      	adds	r2, r3, #1
 800bb9e:	607a      	str	r2, [r7, #4]
 800bba0:	887a      	ldrh	r2, [r7, #2]
 800bba2:	b2d2      	uxtb	r2, r2
 800bba4:	701a      	strb	r2, [r3, #0]
}
 800bba6:	bf00      	nop
 800bba8:	370c      	adds	r7, #12
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb0:	4770      	bx	lr

0800bbb2 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800bbb2:	b480      	push	{r7}
 800bbb4:	b083      	sub	sp, #12
 800bbb6:	af00      	add	r7, sp, #0
 800bbb8:	6078      	str	r0, [r7, #4]
 800bbba:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	1c5a      	adds	r2, r3, #1
 800bbc0:	607a      	str	r2, [r7, #4]
 800bbc2:	683a      	ldr	r2, [r7, #0]
 800bbc4:	b2d2      	uxtb	r2, r2
 800bbc6:	701a      	strb	r2, [r3, #0]
 800bbc8:	683b      	ldr	r3, [r7, #0]
 800bbca:	0a1b      	lsrs	r3, r3, #8
 800bbcc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	1c5a      	adds	r2, r3, #1
 800bbd2:	607a      	str	r2, [r7, #4]
 800bbd4:	683a      	ldr	r2, [r7, #0]
 800bbd6:	b2d2      	uxtb	r2, r2
 800bbd8:	701a      	strb	r2, [r3, #0]
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	0a1b      	lsrs	r3, r3, #8
 800bbde:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	1c5a      	adds	r2, r3, #1
 800bbe4:	607a      	str	r2, [r7, #4]
 800bbe6:	683a      	ldr	r2, [r7, #0]
 800bbe8:	b2d2      	uxtb	r2, r2
 800bbea:	701a      	strb	r2, [r3, #0]
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	0a1b      	lsrs	r3, r3, #8
 800bbf0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	1c5a      	adds	r2, r3, #1
 800bbf6:	607a      	str	r2, [r7, #4]
 800bbf8:	683a      	ldr	r2, [r7, #0]
 800bbfa:	b2d2      	uxtb	r2, r2
 800bbfc:	701a      	strb	r2, [r3, #0]
}
 800bbfe:	bf00      	nop
 800bc00:	370c      	adds	r7, #12
 800bc02:	46bd      	mov	sp, r7
 800bc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc08:	4770      	bx	lr

0800bc0a <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 800bc0a:	b480      	push	{r7}
 800bc0c:	b085      	sub	sp, #20
 800bc0e:	af00      	add	r7, sp, #0
 800bc10:	60f8      	str	r0, [r7, #12]
 800bc12:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	1c5a      	adds	r2, r3, #1
 800bc1a:	60fa      	str	r2, [r7, #12]
 800bc1c:	783a      	ldrb	r2, [r7, #0]
 800bc1e:	701a      	strb	r2, [r3, #0]
 800bc20:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bc24:	f04f 0200 	mov.w	r2, #0
 800bc28:	f04f 0300 	mov.w	r3, #0
 800bc2c:	0a02      	lsrs	r2, r0, #8
 800bc2e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800bc32:	0a0b      	lsrs	r3, r1, #8
 800bc34:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	1c5a      	adds	r2, r3, #1
 800bc3c:	60fa      	str	r2, [r7, #12]
 800bc3e:	783a      	ldrb	r2, [r7, #0]
 800bc40:	701a      	strb	r2, [r3, #0]
 800bc42:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bc46:	f04f 0200 	mov.w	r2, #0
 800bc4a:	f04f 0300 	mov.w	r3, #0
 800bc4e:	0a02      	lsrs	r2, r0, #8
 800bc50:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800bc54:	0a0b      	lsrs	r3, r1, #8
 800bc56:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	1c5a      	adds	r2, r3, #1
 800bc5e:	60fa      	str	r2, [r7, #12]
 800bc60:	783a      	ldrb	r2, [r7, #0]
 800bc62:	701a      	strb	r2, [r3, #0]
 800bc64:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bc68:	f04f 0200 	mov.w	r2, #0
 800bc6c:	f04f 0300 	mov.w	r3, #0
 800bc70:	0a02      	lsrs	r2, r0, #8
 800bc72:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800bc76:	0a0b      	lsrs	r3, r1, #8
 800bc78:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	1c5a      	adds	r2, r3, #1
 800bc80:	60fa      	str	r2, [r7, #12]
 800bc82:	783a      	ldrb	r2, [r7, #0]
 800bc84:	701a      	strb	r2, [r3, #0]
 800bc86:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bc8a:	f04f 0200 	mov.w	r2, #0
 800bc8e:	f04f 0300 	mov.w	r3, #0
 800bc92:	0a02      	lsrs	r2, r0, #8
 800bc94:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800bc98:	0a0b      	lsrs	r3, r1, #8
 800bc9a:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	1c5a      	adds	r2, r3, #1
 800bca2:	60fa      	str	r2, [r7, #12]
 800bca4:	783a      	ldrb	r2, [r7, #0]
 800bca6:	701a      	strb	r2, [r3, #0]
 800bca8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bcac:	f04f 0200 	mov.w	r2, #0
 800bcb0:	f04f 0300 	mov.w	r3, #0
 800bcb4:	0a02      	lsrs	r2, r0, #8
 800bcb6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800bcba:	0a0b      	lsrs	r3, r1, #8
 800bcbc:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	1c5a      	adds	r2, r3, #1
 800bcc4:	60fa      	str	r2, [r7, #12]
 800bcc6:	783a      	ldrb	r2, [r7, #0]
 800bcc8:	701a      	strb	r2, [r3, #0]
 800bcca:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bcce:	f04f 0200 	mov.w	r2, #0
 800bcd2:	f04f 0300 	mov.w	r3, #0
 800bcd6:	0a02      	lsrs	r2, r0, #8
 800bcd8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800bcdc:	0a0b      	lsrs	r3, r1, #8
 800bcde:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	1c5a      	adds	r2, r3, #1
 800bce6:	60fa      	str	r2, [r7, #12]
 800bce8:	783a      	ldrb	r2, [r7, #0]
 800bcea:	701a      	strb	r2, [r3, #0]
 800bcec:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bcf0:	f04f 0200 	mov.w	r2, #0
 800bcf4:	f04f 0300 	mov.w	r3, #0
 800bcf8:	0a02      	lsrs	r2, r0, #8
 800bcfa:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800bcfe:	0a0b      	lsrs	r3, r1, #8
 800bd00:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	1c5a      	adds	r2, r3, #1
 800bd08:	60fa      	str	r2, [r7, #12]
 800bd0a:	783a      	ldrb	r2, [r7, #0]
 800bd0c:	701a      	strb	r2, [r3, #0]
}
 800bd0e:	bf00      	nop
 800bd10:	3714      	adds	r7, #20
 800bd12:	46bd      	mov	sp, r7
 800bd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd18:	4770      	bx	lr

0800bd1a <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800bd1a:	b480      	push	{r7}
 800bd1c:	b087      	sub	sp, #28
 800bd1e:	af00      	add	r7, sp, #0
 800bd20:	60f8      	str	r0, [r7, #12]
 800bd22:	60b9      	str	r1, [r7, #8]
 800bd24:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800bd2a:	68bb      	ldr	r3, [r7, #8]
 800bd2c:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d00d      	beq.n	800bd50 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800bd34:	693a      	ldr	r2, [r7, #16]
 800bd36:	1c53      	adds	r3, r2, #1
 800bd38:	613b      	str	r3, [r7, #16]
 800bd3a:	697b      	ldr	r3, [r7, #20]
 800bd3c:	1c59      	adds	r1, r3, #1
 800bd3e:	6179      	str	r1, [r7, #20]
 800bd40:	7812      	ldrb	r2, [r2, #0]
 800bd42:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	3b01      	subs	r3, #1
 800bd48:	607b      	str	r3, [r7, #4]
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d1f1      	bne.n	800bd34 <mem_cpy+0x1a>
	}
}
 800bd50:	bf00      	nop
 800bd52:	371c      	adds	r7, #28
 800bd54:	46bd      	mov	sp, r7
 800bd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5a:	4770      	bx	lr

0800bd5c <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800bd5c:	b480      	push	{r7}
 800bd5e:	b087      	sub	sp, #28
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	60f8      	str	r0, [r7, #12]
 800bd64:	60b9      	str	r1, [r7, #8]
 800bd66:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800bd6c:	697b      	ldr	r3, [r7, #20]
 800bd6e:	1c5a      	adds	r2, r3, #1
 800bd70:	617a      	str	r2, [r7, #20]
 800bd72:	68ba      	ldr	r2, [r7, #8]
 800bd74:	b2d2      	uxtb	r2, r2
 800bd76:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	3b01      	subs	r3, #1
 800bd7c:	607b      	str	r3, [r7, #4]
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d1f3      	bne.n	800bd6c <mem_set+0x10>
}
 800bd84:	bf00      	nop
 800bd86:	bf00      	nop
 800bd88:	371c      	adds	r7, #28
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd90:	4770      	bx	lr

0800bd92 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800bd92:	b480      	push	{r7}
 800bd94:	b089      	sub	sp, #36	; 0x24
 800bd96:	af00      	add	r7, sp, #0
 800bd98:	60f8      	str	r0, [r7, #12]
 800bd9a:	60b9      	str	r1, [r7, #8]
 800bd9c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	61fb      	str	r3, [r7, #28]
 800bda2:	68bb      	ldr	r3, [r7, #8]
 800bda4:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800bda6:	2300      	movs	r3, #0
 800bda8:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800bdaa:	69fb      	ldr	r3, [r7, #28]
 800bdac:	1c5a      	adds	r2, r3, #1
 800bdae:	61fa      	str	r2, [r7, #28]
 800bdb0:	781b      	ldrb	r3, [r3, #0]
 800bdb2:	4619      	mov	r1, r3
 800bdb4:	69bb      	ldr	r3, [r7, #24]
 800bdb6:	1c5a      	adds	r2, r3, #1
 800bdb8:	61ba      	str	r2, [r7, #24]
 800bdba:	781b      	ldrb	r3, [r3, #0]
 800bdbc:	1acb      	subs	r3, r1, r3
 800bdbe:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	3b01      	subs	r3, #1
 800bdc4:	607b      	str	r3, [r7, #4]
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d002      	beq.n	800bdd2 <mem_cmp+0x40>
 800bdcc:	697b      	ldr	r3, [r7, #20]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d0eb      	beq.n	800bdaa <mem_cmp+0x18>

	return r;
 800bdd2:	697b      	ldr	r3, [r7, #20]
}
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	3724      	adds	r7, #36	; 0x24
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdde:	4770      	bx	lr

0800bde0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800bde0:	b480      	push	{r7}
 800bde2:	b083      	sub	sp, #12
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
 800bde8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800bdea:	e002      	b.n	800bdf2 <chk_chr+0x12>
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	3301      	adds	r3, #1
 800bdf0:	607b      	str	r3, [r7, #4]
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	781b      	ldrb	r3, [r3, #0]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d005      	beq.n	800be06 <chk_chr+0x26>
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	781b      	ldrb	r3, [r3, #0]
 800bdfe:	461a      	mov	r2, r3
 800be00:	683b      	ldr	r3, [r7, #0]
 800be02:	4293      	cmp	r3, r2
 800be04:	d1f2      	bne.n	800bdec <chk_chr+0xc>
	return *str;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	781b      	ldrb	r3, [r3, #0]
}
 800be0a:	4618      	mov	r0, r3
 800be0c:	370c      	adds	r7, #12
 800be0e:	46bd      	mov	sp, r7
 800be10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be14:	4770      	bx	lr
	...

0800be18 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800be18:	b480      	push	{r7}
 800be1a:	b085      	sub	sp, #20
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
 800be20:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800be22:	2300      	movs	r3, #0
 800be24:	60bb      	str	r3, [r7, #8]
 800be26:	68bb      	ldr	r3, [r7, #8]
 800be28:	60fb      	str	r3, [r7, #12]
 800be2a:	e029      	b.n	800be80 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800be2c:	4a27      	ldr	r2, [pc, #156]	; (800becc <chk_lock+0xb4>)
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	011b      	lsls	r3, r3, #4
 800be32:	4413      	add	r3, r2
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d01d      	beq.n	800be76 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800be3a:	4a24      	ldr	r2, [pc, #144]	; (800becc <chk_lock+0xb4>)
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	011b      	lsls	r3, r3, #4
 800be40:	4413      	add	r3, r2
 800be42:	681a      	ldr	r2, [r3, #0]
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	429a      	cmp	r2, r3
 800be4a:	d116      	bne.n	800be7a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800be4c:	4a1f      	ldr	r2, [pc, #124]	; (800becc <chk_lock+0xb4>)
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	011b      	lsls	r3, r3, #4
 800be52:	4413      	add	r3, r2
 800be54:	3304      	adds	r3, #4
 800be56:	681a      	ldr	r2, [r3, #0]
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800be5c:	429a      	cmp	r2, r3
 800be5e:	d10c      	bne.n	800be7a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800be60:	4a1a      	ldr	r2, [pc, #104]	; (800becc <chk_lock+0xb4>)
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	011b      	lsls	r3, r3, #4
 800be66:	4413      	add	r3, r2
 800be68:	3308      	adds	r3, #8
 800be6a:	681a      	ldr	r2, [r3, #0]
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				Files[i].clu == dp->obj.sclust &&
 800be70:	429a      	cmp	r2, r3
 800be72:	d102      	bne.n	800be7a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800be74:	e007      	b.n	800be86 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800be76:	2301      	movs	r3, #1
 800be78:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	3301      	adds	r3, #1
 800be7e:	60fb      	str	r3, [r7, #12]
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	2b09      	cmp	r3, #9
 800be84:	d9d2      	bls.n	800be2c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	2b0a      	cmp	r3, #10
 800be8a:	d109      	bne.n	800bea0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800be8c:	68bb      	ldr	r3, [r7, #8]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d102      	bne.n	800be98 <chk_lock+0x80>
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	2b02      	cmp	r3, #2
 800be96:	d101      	bne.n	800be9c <chk_lock+0x84>
 800be98:	2300      	movs	r3, #0
 800be9a:	e010      	b.n	800bebe <chk_lock+0xa6>
 800be9c:	2312      	movs	r3, #18
 800be9e:	e00e      	b.n	800bebe <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800bea0:	683b      	ldr	r3, [r7, #0]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d108      	bne.n	800beb8 <chk_lock+0xa0>
 800bea6:	4a09      	ldr	r2, [pc, #36]	; (800becc <chk_lock+0xb4>)
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	011b      	lsls	r3, r3, #4
 800beac:	4413      	add	r3, r2
 800beae:	330c      	adds	r3, #12
 800beb0:	881b      	ldrh	r3, [r3, #0]
 800beb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800beb6:	d101      	bne.n	800bebc <chk_lock+0xa4>
 800beb8:	2310      	movs	r3, #16
 800beba:	e000      	b.n	800bebe <chk_lock+0xa6>
 800bebc:	2300      	movs	r3, #0
}
 800bebe:	4618      	mov	r0, r3
 800bec0:	3714      	adds	r7, #20
 800bec2:	46bd      	mov	sp, r7
 800bec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec8:	4770      	bx	lr
 800beca:	bf00      	nop
 800becc:	20004564 	.word	0x20004564

0800bed0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800bed0:	b480      	push	{r7}
 800bed2:	b083      	sub	sp, #12
 800bed4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bed6:	2300      	movs	r3, #0
 800bed8:	607b      	str	r3, [r7, #4]
 800beda:	e002      	b.n	800bee2 <enq_lock+0x12>
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	3301      	adds	r3, #1
 800bee0:	607b      	str	r3, [r7, #4]
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	2b09      	cmp	r3, #9
 800bee6:	d806      	bhi.n	800bef6 <enq_lock+0x26>
 800bee8:	4a09      	ldr	r2, [pc, #36]	; (800bf10 <enq_lock+0x40>)
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	011b      	lsls	r3, r3, #4
 800beee:	4413      	add	r3, r2
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d1f2      	bne.n	800bedc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	2b0a      	cmp	r3, #10
 800befa:	bf14      	ite	ne
 800befc:	2301      	movne	r3, #1
 800befe:	2300      	moveq	r3, #0
 800bf00:	b2db      	uxtb	r3, r3
}
 800bf02:	4618      	mov	r0, r3
 800bf04:	370c      	adds	r7, #12
 800bf06:	46bd      	mov	sp, r7
 800bf08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0c:	4770      	bx	lr
 800bf0e:	bf00      	nop
 800bf10:	20004564 	.word	0x20004564

0800bf14 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bf14:	b480      	push	{r7}
 800bf16:	b085      	sub	sp, #20
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
 800bf1c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bf1e:	2300      	movs	r3, #0
 800bf20:	60fb      	str	r3, [r7, #12]
 800bf22:	e01f      	b.n	800bf64 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800bf24:	4a41      	ldr	r2, [pc, #260]	; (800c02c <inc_lock+0x118>)
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	011b      	lsls	r3, r3, #4
 800bf2a:	4413      	add	r3, r2
 800bf2c:	681a      	ldr	r2, [r3, #0]
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	429a      	cmp	r2, r3
 800bf34:	d113      	bne.n	800bf5e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800bf36:	4a3d      	ldr	r2, [pc, #244]	; (800c02c <inc_lock+0x118>)
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	011b      	lsls	r3, r3, #4
 800bf3c:	4413      	add	r3, r2
 800bf3e:	3304      	adds	r3, #4
 800bf40:	681a      	ldr	r2, [r3, #0]
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800bf46:	429a      	cmp	r2, r3
 800bf48:	d109      	bne.n	800bf5e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800bf4a:	4a38      	ldr	r2, [pc, #224]	; (800c02c <inc_lock+0x118>)
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	011b      	lsls	r3, r3, #4
 800bf50:	4413      	add	r3, r2
 800bf52:	3308      	adds	r3, #8
 800bf54:	681a      	ldr	r2, [r3, #0]
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			Files[i].clu == dp->obj.sclust &&
 800bf5a:	429a      	cmp	r2, r3
 800bf5c:	d006      	beq.n	800bf6c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	3301      	adds	r3, #1
 800bf62:	60fb      	str	r3, [r7, #12]
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	2b09      	cmp	r3, #9
 800bf68:	d9dc      	bls.n	800bf24 <inc_lock+0x10>
 800bf6a:	e000      	b.n	800bf6e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800bf6c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	2b0a      	cmp	r3, #10
 800bf72:	d132      	bne.n	800bfda <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bf74:	2300      	movs	r3, #0
 800bf76:	60fb      	str	r3, [r7, #12]
 800bf78:	e002      	b.n	800bf80 <inc_lock+0x6c>
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	3301      	adds	r3, #1
 800bf7e:	60fb      	str	r3, [r7, #12]
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	2b09      	cmp	r3, #9
 800bf84:	d806      	bhi.n	800bf94 <inc_lock+0x80>
 800bf86:	4a29      	ldr	r2, [pc, #164]	; (800c02c <inc_lock+0x118>)
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	011b      	lsls	r3, r3, #4
 800bf8c:	4413      	add	r3, r2
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d1f2      	bne.n	800bf7a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	2b0a      	cmp	r3, #10
 800bf98:	d101      	bne.n	800bf9e <inc_lock+0x8a>
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	e040      	b.n	800c020 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	681a      	ldr	r2, [r3, #0]
 800bfa2:	4922      	ldr	r1, [pc, #136]	; (800c02c <inc_lock+0x118>)
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	011b      	lsls	r3, r3, #4
 800bfa8:	440b      	add	r3, r1
 800bfaa:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	689a      	ldr	r2, [r3, #8]
 800bfb0:	491e      	ldr	r1, [pc, #120]	; (800c02c <inc_lock+0x118>)
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	011b      	lsls	r3, r3, #4
 800bfb6:	440b      	add	r3, r1
 800bfb8:	3304      	adds	r3, #4
 800bfba:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bfc0:	491a      	ldr	r1, [pc, #104]	; (800c02c <inc_lock+0x118>)
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	011b      	lsls	r3, r3, #4
 800bfc6:	440b      	add	r3, r1
 800bfc8:	3308      	adds	r3, #8
 800bfca:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800bfcc:	4a17      	ldr	r2, [pc, #92]	; (800c02c <inc_lock+0x118>)
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	011b      	lsls	r3, r3, #4
 800bfd2:	4413      	add	r3, r2
 800bfd4:	330c      	adds	r3, #12
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800bfda:	683b      	ldr	r3, [r7, #0]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d009      	beq.n	800bff4 <inc_lock+0xe0>
 800bfe0:	4a12      	ldr	r2, [pc, #72]	; (800c02c <inc_lock+0x118>)
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	011b      	lsls	r3, r3, #4
 800bfe6:	4413      	add	r3, r2
 800bfe8:	330c      	adds	r3, #12
 800bfea:	881b      	ldrh	r3, [r3, #0]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d001      	beq.n	800bff4 <inc_lock+0xe0>
 800bff0:	2300      	movs	r3, #0
 800bff2:	e015      	b.n	800c020 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d108      	bne.n	800c00c <inc_lock+0xf8>
 800bffa:	4a0c      	ldr	r2, [pc, #48]	; (800c02c <inc_lock+0x118>)
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	011b      	lsls	r3, r3, #4
 800c000:	4413      	add	r3, r2
 800c002:	330c      	adds	r3, #12
 800c004:	881b      	ldrh	r3, [r3, #0]
 800c006:	3301      	adds	r3, #1
 800c008:	b29a      	uxth	r2, r3
 800c00a:	e001      	b.n	800c010 <inc_lock+0xfc>
 800c00c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c010:	4906      	ldr	r1, [pc, #24]	; (800c02c <inc_lock+0x118>)
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	011b      	lsls	r3, r3, #4
 800c016:	440b      	add	r3, r1
 800c018:	330c      	adds	r3, #12
 800c01a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	3301      	adds	r3, #1
}
 800c020:	4618      	mov	r0, r3
 800c022:	3714      	adds	r7, #20
 800c024:	46bd      	mov	sp, r7
 800c026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02a:	4770      	bx	lr
 800c02c:	20004564 	.word	0x20004564

0800c030 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c030:	b480      	push	{r7}
 800c032:	b085      	sub	sp, #20
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	3b01      	subs	r3, #1
 800c03c:	607b      	str	r3, [r7, #4]
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	2b09      	cmp	r3, #9
 800c042:	d825      	bhi.n	800c090 <dec_lock+0x60>
		n = Files[i].ctr;
 800c044:	4a17      	ldr	r2, [pc, #92]	; (800c0a4 <dec_lock+0x74>)
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	011b      	lsls	r3, r3, #4
 800c04a:	4413      	add	r3, r2
 800c04c:	330c      	adds	r3, #12
 800c04e:	881b      	ldrh	r3, [r3, #0]
 800c050:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c052:	89fb      	ldrh	r3, [r7, #14]
 800c054:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c058:	d101      	bne.n	800c05e <dec_lock+0x2e>
 800c05a:	2300      	movs	r3, #0
 800c05c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800c05e:	89fb      	ldrh	r3, [r7, #14]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d002      	beq.n	800c06a <dec_lock+0x3a>
 800c064:	89fb      	ldrh	r3, [r7, #14]
 800c066:	3b01      	subs	r3, #1
 800c068:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c06a:	4a0e      	ldr	r2, [pc, #56]	; (800c0a4 <dec_lock+0x74>)
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	011b      	lsls	r3, r3, #4
 800c070:	4413      	add	r3, r2
 800c072:	330c      	adds	r3, #12
 800c074:	89fa      	ldrh	r2, [r7, #14]
 800c076:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c078:	89fb      	ldrh	r3, [r7, #14]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d105      	bne.n	800c08a <dec_lock+0x5a>
 800c07e:	4a09      	ldr	r2, [pc, #36]	; (800c0a4 <dec_lock+0x74>)
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	011b      	lsls	r3, r3, #4
 800c084:	4413      	add	r3, r2
 800c086:	2200      	movs	r2, #0
 800c088:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c08a:	2300      	movs	r3, #0
 800c08c:	737b      	strb	r3, [r7, #13]
 800c08e:	e001      	b.n	800c094 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c090:	2302      	movs	r3, #2
 800c092:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c094:	7b7b      	ldrb	r3, [r7, #13]
}
 800c096:	4618      	mov	r0, r3
 800c098:	3714      	adds	r7, #20
 800c09a:	46bd      	mov	sp, r7
 800c09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a0:	4770      	bx	lr
 800c0a2:	bf00      	nop
 800c0a4:	20004564 	.word	0x20004564

0800c0a8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c0a8:	b480      	push	{r7}
 800c0aa:	b085      	sub	sp, #20
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	60fb      	str	r3, [r7, #12]
 800c0b4:	e010      	b.n	800c0d8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c0b6:	4a0d      	ldr	r2, [pc, #52]	; (800c0ec <clear_lock+0x44>)
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	011b      	lsls	r3, r3, #4
 800c0bc:	4413      	add	r3, r2
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	687a      	ldr	r2, [r7, #4]
 800c0c2:	429a      	cmp	r2, r3
 800c0c4:	d105      	bne.n	800c0d2 <clear_lock+0x2a>
 800c0c6:	4a09      	ldr	r2, [pc, #36]	; (800c0ec <clear_lock+0x44>)
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	011b      	lsls	r3, r3, #4
 800c0cc:	4413      	add	r3, r2
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	3301      	adds	r3, #1
 800c0d6:	60fb      	str	r3, [r7, #12]
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	2b09      	cmp	r3, #9
 800c0dc:	d9eb      	bls.n	800c0b6 <clear_lock+0xe>
	}
}
 800c0de:	bf00      	nop
 800c0e0:	bf00      	nop
 800c0e2:	3714      	adds	r7, #20
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ea:	4770      	bx	lr
 800c0ec:	20004564 	.word	0x20004564

0800c0f0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b086      	sub	sp, #24
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	78db      	ldrb	r3, [r3, #3]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d034      	beq.n	800c16e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c108:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	7858      	ldrb	r0, [r3, #1]
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c114:	2301      	movs	r3, #1
 800c116:	697a      	ldr	r2, [r7, #20]
 800c118:	f7ff fbdc 	bl	800b8d4 <disk_write>
 800c11c:	4603      	mov	r3, r0
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d002      	beq.n	800c128 <sync_window+0x38>
			res = FR_DISK_ERR;
 800c122:	2301      	movs	r3, #1
 800c124:	73fb      	strb	r3, [r7, #15]
 800c126:	e022      	b.n	800c16e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	2200      	movs	r2, #0
 800c12c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c132:	697a      	ldr	r2, [r7, #20]
 800c134:	1ad2      	subs	r2, r2, r3
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c13a:	429a      	cmp	r2, r3
 800c13c:	d217      	bcs.n	800c16e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	789b      	ldrb	r3, [r3, #2]
 800c142:	613b      	str	r3, [r7, #16]
 800c144:	e010      	b.n	800c168 <sync_window+0x78>
					wsect += fs->fsize;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c14a:	697a      	ldr	r2, [r7, #20]
 800c14c:	4413      	add	r3, r2
 800c14e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	7858      	ldrb	r0, [r3, #1]
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c15a:	2301      	movs	r3, #1
 800c15c:	697a      	ldr	r2, [r7, #20]
 800c15e:	f7ff fbb9 	bl	800b8d4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c162:	693b      	ldr	r3, [r7, #16]
 800c164:	3b01      	subs	r3, #1
 800c166:	613b      	str	r3, [r7, #16]
 800c168:	693b      	ldr	r3, [r7, #16]
 800c16a:	2b01      	cmp	r3, #1
 800c16c:	d8eb      	bhi.n	800c146 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c16e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c170:	4618      	mov	r0, r3
 800c172:	3718      	adds	r7, #24
 800c174:	46bd      	mov	sp, r7
 800c176:	bd80      	pop	{r7, pc}

0800c178 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b084      	sub	sp, #16
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
 800c180:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c182:	2300      	movs	r3, #0
 800c184:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c18a:	683a      	ldr	r2, [r7, #0]
 800c18c:	429a      	cmp	r2, r3
 800c18e:	d01b      	beq.n	800c1c8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c190:	6878      	ldr	r0, [r7, #4]
 800c192:	f7ff ffad 	bl	800c0f0 <sync_window>
 800c196:	4603      	mov	r3, r0
 800c198:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c19a:	7bfb      	ldrb	r3, [r7, #15]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d113      	bne.n	800c1c8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	7858      	ldrb	r0, [r3, #1]
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c1aa:	2301      	movs	r3, #1
 800c1ac:	683a      	ldr	r2, [r7, #0]
 800c1ae:	f7ff fb71 	bl	800b894 <disk_read>
 800c1b2:	4603      	mov	r3, r0
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d004      	beq.n	800c1c2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c1b8:	f04f 33ff 	mov.w	r3, #4294967295
 800c1bc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c1be:	2301      	movs	r3, #1
 800c1c0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	683a      	ldr	r2, [r7, #0]
 800c1c6:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 800c1c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	3710      	adds	r7, #16
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	bd80      	pop	{r7, pc}
	...

0800c1d4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b084      	sub	sp, #16
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800c1dc:	6878      	ldr	r0, [r7, #4]
 800c1de:	f7ff ff87 	bl	800c0f0 <sync_window>
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c1e6:	7bfb      	ldrb	r3, [r7, #15]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d159      	bne.n	800c2a0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	781b      	ldrb	r3, [r3, #0]
 800c1f0:	2b03      	cmp	r3, #3
 800c1f2:	d149      	bne.n	800c288 <sync_fs+0xb4>
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	791b      	ldrb	r3, [r3, #4]
 800c1f8:	2b01      	cmp	r3, #1
 800c1fa:	d145      	bne.n	800c288 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	899b      	ldrh	r3, [r3, #12]
 800c206:	461a      	mov	r2, r3
 800c208:	2100      	movs	r1, #0
 800c20a:	f7ff fda7 	bl	800bd5c <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	333c      	adds	r3, #60	; 0x3c
 800c212:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c216:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c21a:	4618      	mov	r0, r3
 800c21c:	f7ff fcae 	bl	800bb7c <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	333c      	adds	r3, #60	; 0x3c
 800c224:	4921      	ldr	r1, [pc, #132]	; (800c2ac <sync_fs+0xd8>)
 800c226:	4618      	mov	r0, r3
 800c228:	f7ff fcc3 	bl	800bbb2 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	333c      	adds	r3, #60	; 0x3c
 800c230:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c234:	491e      	ldr	r1, [pc, #120]	; (800c2b0 <sync_fs+0xdc>)
 800c236:	4618      	mov	r0, r3
 800c238:	f7ff fcbb 	bl	800bbb2 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	333c      	adds	r3, #60	; 0x3c
 800c240:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	69db      	ldr	r3, [r3, #28]
 800c248:	4619      	mov	r1, r3
 800c24a:	4610      	mov	r0, r2
 800c24c:	f7ff fcb1 	bl	800bbb2 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	333c      	adds	r3, #60	; 0x3c
 800c254:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	699b      	ldr	r3, [r3, #24]
 800c25c:	4619      	mov	r1, r3
 800c25e:	4610      	mov	r0, r2
 800c260:	f7ff fca7 	bl	800bbb2 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c268:	1c5a      	adds	r2, r3, #1
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	7858      	ldrb	r0, [r3, #1]
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c27c:	2301      	movs	r3, #1
 800c27e:	f7ff fb29 	bl	800b8d4 <disk_write>
			fs->fsi_flag = 0;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	2200      	movs	r2, #0
 800c286:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	785b      	ldrb	r3, [r3, #1]
 800c28c:	2200      	movs	r2, #0
 800c28e:	2100      	movs	r1, #0
 800c290:	4618      	mov	r0, r3
 800c292:	f7ff fb3f 	bl	800b914 <disk_ioctl>
 800c296:	4603      	mov	r3, r0
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d001      	beq.n	800c2a0 <sync_fs+0xcc>
 800c29c:	2301      	movs	r3, #1
 800c29e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c2a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	3710      	adds	r7, #16
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	bd80      	pop	{r7, pc}
 800c2aa:	bf00      	nop
 800c2ac:	41615252 	.word	0x41615252
 800c2b0:	61417272 	.word	0x61417272

0800c2b4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c2b4:	b480      	push	{r7}
 800c2b6:	b083      	sub	sp, #12
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
 800c2bc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c2be:	683b      	ldr	r3, [r7, #0]
 800c2c0:	3b02      	subs	r3, #2
 800c2c2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	6a1b      	ldr	r3, [r3, #32]
 800c2c8:	3b02      	subs	r3, #2
 800c2ca:	683a      	ldr	r2, [r7, #0]
 800c2cc:	429a      	cmp	r2, r3
 800c2ce:	d301      	bcc.n	800c2d4 <clust2sect+0x20>
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	e008      	b.n	800c2e6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	895b      	ldrh	r3, [r3, #10]
 800c2d8:	461a      	mov	r2, r3
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	fb03 f202 	mul.w	r2, r3, r2
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2e4:	4413      	add	r3, r2
}
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	370c      	adds	r7, #12
 800c2ea:	46bd      	mov	sp, r7
 800c2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f0:	4770      	bx	lr
	...

0800c2f4 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c2f4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800c2f8:	b088      	sub	sp, #32
 800c2fa:	af00      	add	r7, sp, #0
 800c2fc:	6078      	str	r0, [r7, #4]
 800c2fe:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	61bb      	str	r3, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c306:	683b      	ldr	r3, [r7, #0]
 800c308:	2b01      	cmp	r3, #1
 800c30a:	d904      	bls.n	800c316 <get_fat+0x22>
 800c30c:	69bb      	ldr	r3, [r7, #24]
 800c30e:	6a1b      	ldr	r3, [r3, #32]
 800c310:	683a      	ldr	r2, [r7, #0]
 800c312:	429a      	cmp	r2, r3
 800c314:	d302      	bcc.n	800c31c <get_fat+0x28>
		val = 1;	/* Internal error */
 800c316:	2301      	movs	r3, #1
 800c318:	61fb      	str	r3, [r7, #28]
 800c31a:	e13a      	b.n	800c592 <get_fat+0x29e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c31c:	f04f 33ff 	mov.w	r3, #4294967295
 800c320:	61fb      	str	r3, [r7, #28]

		switch (fs->fs_type) {
 800c322:	69bb      	ldr	r3, [r7, #24]
 800c324:	781b      	ldrb	r3, [r3, #0]
 800c326:	3b01      	subs	r3, #1
 800c328:	2b03      	cmp	r3, #3
 800c32a:	f200 8126 	bhi.w	800c57a <get_fat+0x286>
 800c32e:	a201      	add	r2, pc, #4	; (adr r2, 800c334 <get_fat+0x40>)
 800c330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c334:	0800c345 	.word	0x0800c345
 800c338:	0800c3f3 	.word	0x0800c3f3
 800c33c:	0800c43f 	.word	0x0800c43f
 800c340:	0800c48f 	.word	0x0800c48f
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	60fb      	str	r3, [r7, #12]
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	085b      	lsrs	r3, r3, #1
 800c34c:	68fa      	ldr	r2, [r7, #12]
 800c34e:	4413      	add	r3, r2
 800c350:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c352:	69bb      	ldr	r3, [r7, #24]
 800c354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c356:	69bb      	ldr	r3, [r7, #24]
 800c358:	899b      	ldrh	r3, [r3, #12]
 800c35a:	4619      	mov	r1, r3
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	fbb3 f3f1 	udiv	r3, r3, r1
 800c362:	4413      	add	r3, r2
 800c364:	4619      	mov	r1, r3
 800c366:	69b8      	ldr	r0, [r7, #24]
 800c368:	f7ff ff06 	bl	800c178 <move_window>
 800c36c:	4603      	mov	r3, r0
 800c36e:	2b00      	cmp	r3, #0
 800c370:	f040 8106 	bne.w	800c580 <get_fat+0x28c>
			wc = fs->win[bc++ % SS(fs)];
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	1c5a      	adds	r2, r3, #1
 800c378:	60fa      	str	r2, [r7, #12]
 800c37a:	69ba      	ldr	r2, [r7, #24]
 800c37c:	8992      	ldrh	r2, [r2, #12]
 800c37e:	fbb3 f1f2 	udiv	r1, r3, r2
 800c382:	fb01 f202 	mul.w	r2, r1, r2
 800c386:	1a9b      	subs	r3, r3, r2
 800c388:	69ba      	ldr	r2, [r7, #24]
 800c38a:	4413      	add	r3, r2
 800c38c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c390:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c392:	69bb      	ldr	r3, [r7, #24]
 800c394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c396:	69bb      	ldr	r3, [r7, #24]
 800c398:	899b      	ldrh	r3, [r3, #12]
 800c39a:	4619      	mov	r1, r3
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	fbb3 f3f1 	udiv	r3, r3, r1
 800c3a2:	4413      	add	r3, r2
 800c3a4:	4619      	mov	r1, r3
 800c3a6:	69b8      	ldr	r0, [r7, #24]
 800c3a8:	f7ff fee6 	bl	800c178 <move_window>
 800c3ac:	4603      	mov	r3, r0
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	f040 80e8 	bne.w	800c584 <get_fat+0x290>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c3b4:	69bb      	ldr	r3, [r7, #24]
 800c3b6:	899b      	ldrh	r3, [r3, #12]
 800c3b8:	461a      	mov	r2, r3
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	fbb3 f1f2 	udiv	r1, r3, r2
 800c3c0:	fb01 f202 	mul.w	r2, r1, r2
 800c3c4:	1a9b      	subs	r3, r3, r2
 800c3c6:	69ba      	ldr	r2, [r7, #24]
 800c3c8:	4413      	add	r3, r2
 800c3ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c3ce:	021b      	lsls	r3, r3, #8
 800c3d0:	461a      	mov	r2, r3
 800c3d2:	68bb      	ldr	r3, [r7, #8]
 800c3d4:	4313      	orrs	r3, r2
 800c3d6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	f003 0301 	and.w	r3, r3, #1
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d002      	beq.n	800c3e8 <get_fat+0xf4>
 800c3e2:	68bb      	ldr	r3, [r7, #8]
 800c3e4:	091b      	lsrs	r3, r3, #4
 800c3e6:	e002      	b.n	800c3ee <get_fat+0xfa>
 800c3e8:	68bb      	ldr	r3, [r7, #8]
 800c3ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c3ee:	61fb      	str	r3, [r7, #28]
			break;
 800c3f0:	e0cf      	b.n	800c592 <get_fat+0x29e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c3f2:	69bb      	ldr	r3, [r7, #24]
 800c3f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3f6:	69bb      	ldr	r3, [r7, #24]
 800c3f8:	899b      	ldrh	r3, [r3, #12]
 800c3fa:	085b      	lsrs	r3, r3, #1
 800c3fc:	b29b      	uxth	r3, r3
 800c3fe:	4619      	mov	r1, r3
 800c400:	683b      	ldr	r3, [r7, #0]
 800c402:	fbb3 f3f1 	udiv	r3, r3, r1
 800c406:	4413      	add	r3, r2
 800c408:	4619      	mov	r1, r3
 800c40a:	69b8      	ldr	r0, [r7, #24]
 800c40c:	f7ff feb4 	bl	800c178 <move_window>
 800c410:	4603      	mov	r3, r0
 800c412:	2b00      	cmp	r3, #0
 800c414:	f040 80b8 	bne.w	800c588 <get_fat+0x294>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c418:	69bb      	ldr	r3, [r7, #24]
 800c41a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c41e:	683b      	ldr	r3, [r7, #0]
 800c420:	005b      	lsls	r3, r3, #1
 800c422:	69ba      	ldr	r2, [r7, #24]
 800c424:	8992      	ldrh	r2, [r2, #12]
 800c426:	fbb3 f0f2 	udiv	r0, r3, r2
 800c42a:	fb00 f202 	mul.w	r2, r0, r2
 800c42e:	1a9b      	subs	r3, r3, r2
 800c430:	440b      	add	r3, r1
 800c432:	4618      	mov	r0, r3
 800c434:	f7ff fa8c 	bl	800b950 <ld_word>
 800c438:	4603      	mov	r3, r0
 800c43a:	61fb      	str	r3, [r7, #28]
			break;
 800c43c:	e0a9      	b.n	800c592 <get_fat+0x29e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c43e:	69bb      	ldr	r3, [r7, #24]
 800c440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c442:	69bb      	ldr	r3, [r7, #24]
 800c444:	899b      	ldrh	r3, [r3, #12]
 800c446:	089b      	lsrs	r3, r3, #2
 800c448:	b29b      	uxth	r3, r3
 800c44a:	4619      	mov	r1, r3
 800c44c:	683b      	ldr	r3, [r7, #0]
 800c44e:	fbb3 f3f1 	udiv	r3, r3, r1
 800c452:	4413      	add	r3, r2
 800c454:	4619      	mov	r1, r3
 800c456:	69b8      	ldr	r0, [r7, #24]
 800c458:	f7ff fe8e 	bl	800c178 <move_window>
 800c45c:	4603      	mov	r3, r0
 800c45e:	2b00      	cmp	r3, #0
 800c460:	f040 8094 	bne.w	800c58c <get_fat+0x298>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c464:	69bb      	ldr	r3, [r7, #24]
 800c466:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c46a:	683b      	ldr	r3, [r7, #0]
 800c46c:	009b      	lsls	r3, r3, #2
 800c46e:	69ba      	ldr	r2, [r7, #24]
 800c470:	8992      	ldrh	r2, [r2, #12]
 800c472:	fbb3 f0f2 	udiv	r0, r3, r2
 800c476:	fb00 f202 	mul.w	r2, r0, r2
 800c47a:	1a9b      	subs	r3, r3, r2
 800c47c:	440b      	add	r3, r1
 800c47e:	4618      	mov	r0, r3
 800c480:	f7ff fa7e 	bl	800b980 <ld_dword>
 800c484:	4603      	mov	r3, r0
 800c486:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c48a:	61fb      	str	r3, [r7, #28]
			break;
 800c48c:	e081      	b.n	800c592 <get_fat+0x29e>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c494:	4313      	orrs	r3, r2
 800c496:	d070      	beq.n	800c57a <get_fat+0x286>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	689b      	ldr	r3, [r3, #8]
 800c49c:	683a      	ldr	r2, [r7, #0]
 800c49e:	1ad3      	subs	r3, r2, r3
 800c4a0:	617b      	str	r3, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c4a8:	1e54      	subs	r4, r2, #1
 800c4aa:	f143 35ff 	adc.w	r5, r3, #4294967295
 800c4ae:	69bb      	ldr	r3, [r7, #24]
 800c4b0:	899b      	ldrh	r3, [r3, #12]
 800c4b2:	b29b      	uxth	r3, r3
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	4698      	mov	r8, r3
 800c4b8:	4691      	mov	r9, r2
 800c4ba:	4642      	mov	r2, r8
 800c4bc:	464b      	mov	r3, r9
 800c4be:	4620      	mov	r0, r4
 800c4c0:	4629      	mov	r1, r5
 800c4c2:	f7f3 fedd 	bl	8000280 <__aeabi_uldivmod>
 800c4c6:	4602      	mov	r2, r0
 800c4c8:	460b      	mov	r3, r1
 800c4ca:	69bb      	ldr	r3, [r7, #24]
 800c4cc:	895b      	ldrh	r3, [r3, #10]
 800c4ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800c4d2:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	79db      	ldrb	r3, [r3, #7]
 800c4d8:	2b02      	cmp	r3, #2
 800c4da:	d10e      	bne.n	800c4fa <get_fat+0x206>
					if (cofs <= clen) {
 800c4dc:	697a      	ldr	r2, [r7, #20]
 800c4de:	693b      	ldr	r3, [r7, #16]
 800c4e0:	429a      	cmp	r2, r3
 800c4e2:	d80a      	bhi.n	800c4fa <get_fat+0x206>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 800c4e4:	697a      	ldr	r2, [r7, #20]
 800c4e6:	693b      	ldr	r3, [r7, #16]
 800c4e8:	429a      	cmp	r2, r3
 800c4ea:	d002      	beq.n	800c4f2 <get_fat+0x1fe>
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	3301      	adds	r3, #1
 800c4f0:	e001      	b.n	800c4f6 <get_fat+0x202>
 800c4f2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800c4f6:	61fb      	str	r3, [r7, #28]
						break;
 800c4f8:	e04b      	b.n	800c592 <get_fat+0x29e>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	79db      	ldrb	r3, [r3, #7]
 800c4fe:	2b03      	cmp	r3, #3
 800c500:	d108      	bne.n	800c514 <get_fat+0x220>
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	699b      	ldr	r3, [r3, #24]
 800c506:	697a      	ldr	r2, [r7, #20]
 800c508:	429a      	cmp	r2, r3
 800c50a:	d203      	bcs.n	800c514 <get_fat+0x220>
					val = clst + 1; 	/* Generate the value */
 800c50c:	683b      	ldr	r3, [r7, #0]
 800c50e:	3301      	adds	r3, #1
 800c510:	61fb      	str	r3, [r7, #28]
					break;
 800c512:	e03e      	b.n	800c592 <get_fat+0x29e>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	79db      	ldrb	r3, [r3, #7]
 800c518:	2b02      	cmp	r3, #2
 800c51a:	d02e      	beq.n	800c57a <get_fat+0x286>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	69db      	ldr	r3, [r3, #28]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d003      	beq.n	800c52c <get_fat+0x238>
						val = 0x7FFFFFFF;	/* Generate EOC */
 800c524:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800c528:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 800c52a:	e032      	b.n	800c592 <get_fat+0x29e>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c52c:	69bb      	ldr	r3, [r7, #24]
 800c52e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c530:	69bb      	ldr	r3, [r7, #24]
 800c532:	899b      	ldrh	r3, [r3, #12]
 800c534:	089b      	lsrs	r3, r3, #2
 800c536:	b29b      	uxth	r3, r3
 800c538:	4619      	mov	r1, r3
 800c53a:	683b      	ldr	r3, [r7, #0]
 800c53c:	fbb3 f3f1 	udiv	r3, r3, r1
 800c540:	4413      	add	r3, r2
 800c542:	4619      	mov	r1, r3
 800c544:	69b8      	ldr	r0, [r7, #24]
 800c546:	f7ff fe17 	bl	800c178 <move_window>
 800c54a:	4603      	mov	r3, r0
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d11f      	bne.n	800c590 <get_fat+0x29c>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800c550:	69bb      	ldr	r3, [r7, #24]
 800c552:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	009b      	lsls	r3, r3, #2
 800c55a:	69ba      	ldr	r2, [r7, #24]
 800c55c:	8992      	ldrh	r2, [r2, #12]
 800c55e:	fbb3 f0f2 	udiv	r0, r3, r2
 800c562:	fb00 f202 	mul.w	r2, r0, r2
 800c566:	1a9b      	subs	r3, r3, r2
 800c568:	440b      	add	r3, r1
 800c56a:	4618      	mov	r0, r3
 800c56c:	f7ff fa08 	bl	800b980 <ld_dword>
 800c570:	4603      	mov	r3, r0
 800c572:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c576:	61fb      	str	r3, [r7, #28]
					break;
 800c578:	e00b      	b.n	800c592 <get_fat+0x29e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c57a:	2301      	movs	r3, #1
 800c57c:	61fb      	str	r3, [r7, #28]
 800c57e:	e008      	b.n	800c592 <get_fat+0x29e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c580:	bf00      	nop
 800c582:	e006      	b.n	800c592 <get_fat+0x29e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c584:	bf00      	nop
 800c586:	e004      	b.n	800c592 <get_fat+0x29e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c588:	bf00      	nop
 800c58a:	e002      	b.n	800c592 <get_fat+0x29e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c58c:	bf00      	nop
 800c58e:	e000      	b.n	800c592 <get_fat+0x29e>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c590:	bf00      	nop
		}
	}

	return val;
 800c592:	69fb      	ldr	r3, [r7, #28]
}
 800c594:	4618      	mov	r0, r3
 800c596:	3720      	adds	r7, #32
 800c598:	46bd      	mov	sp, r7
 800c59a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800c59e:	bf00      	nop

0800c5a0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c5a0:	b590      	push	{r4, r7, lr}
 800c5a2:	b089      	sub	sp, #36	; 0x24
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	60f8      	str	r0, [r7, #12]
 800c5a8:	60b9      	str	r1, [r7, #8]
 800c5aa:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c5ac:	2302      	movs	r3, #2
 800c5ae:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c5b0:	68bb      	ldr	r3, [r7, #8]
 800c5b2:	2b01      	cmp	r3, #1
 800c5b4:	f240 8106 	bls.w	800c7c4 <put_fat+0x224>
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	6a1b      	ldr	r3, [r3, #32]
 800c5bc:	68ba      	ldr	r2, [r7, #8]
 800c5be:	429a      	cmp	r2, r3
 800c5c0:	f080 8100 	bcs.w	800c7c4 <put_fat+0x224>
		switch (fs->fs_type) {
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	781b      	ldrb	r3, [r3, #0]
 800c5c8:	2b04      	cmp	r3, #4
 800c5ca:	f300 8104 	bgt.w	800c7d6 <put_fat+0x236>
 800c5ce:	2b03      	cmp	r3, #3
 800c5d0:	f280 80b3 	bge.w	800c73a <put_fat+0x19a>
 800c5d4:	2b01      	cmp	r3, #1
 800c5d6:	d003      	beq.n	800c5e0 <put_fat+0x40>
 800c5d8:	2b02      	cmp	r3, #2
 800c5da:	f000 8083 	beq.w	800c6e4 <put_fat+0x144>
 800c5de:	e0fa      	b.n	800c7d6 <put_fat+0x236>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c5e0:	68bb      	ldr	r3, [r7, #8]
 800c5e2:	61bb      	str	r3, [r7, #24]
 800c5e4:	69bb      	ldr	r3, [r7, #24]
 800c5e6:	085b      	lsrs	r3, r3, #1
 800c5e8:	69ba      	ldr	r2, [r7, #24]
 800c5ea:	4413      	add	r3, r2
 800c5ec:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	899b      	ldrh	r3, [r3, #12]
 800c5f6:	4619      	mov	r1, r3
 800c5f8:	69bb      	ldr	r3, [r7, #24]
 800c5fa:	fbb3 f3f1 	udiv	r3, r3, r1
 800c5fe:	4413      	add	r3, r2
 800c600:	4619      	mov	r1, r3
 800c602:	68f8      	ldr	r0, [r7, #12]
 800c604:	f7ff fdb8 	bl	800c178 <move_window>
 800c608:	4603      	mov	r3, r0
 800c60a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c60c:	7ffb      	ldrb	r3, [r7, #31]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	f040 80da 	bne.w	800c7c8 <put_fat+0x228>
			p = fs->win + bc++ % SS(fs);
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c61a:	69bb      	ldr	r3, [r7, #24]
 800c61c:	1c5a      	adds	r2, r3, #1
 800c61e:	61ba      	str	r2, [r7, #24]
 800c620:	68fa      	ldr	r2, [r7, #12]
 800c622:	8992      	ldrh	r2, [r2, #12]
 800c624:	fbb3 f0f2 	udiv	r0, r3, r2
 800c628:	fb00 f202 	mul.w	r2, r0, r2
 800c62c:	1a9b      	subs	r3, r3, r2
 800c62e:	440b      	add	r3, r1
 800c630:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c632:	68bb      	ldr	r3, [r7, #8]
 800c634:	f003 0301 	and.w	r3, r3, #1
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d00d      	beq.n	800c658 <put_fat+0xb8>
 800c63c:	697b      	ldr	r3, [r7, #20]
 800c63e:	781b      	ldrb	r3, [r3, #0]
 800c640:	b25b      	sxtb	r3, r3
 800c642:	f003 030f 	and.w	r3, r3, #15
 800c646:	b25a      	sxtb	r2, r3
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	b2db      	uxtb	r3, r3
 800c64c:	011b      	lsls	r3, r3, #4
 800c64e:	b25b      	sxtb	r3, r3
 800c650:	4313      	orrs	r3, r2
 800c652:	b25b      	sxtb	r3, r3
 800c654:	b2db      	uxtb	r3, r3
 800c656:	e001      	b.n	800c65c <put_fat+0xbc>
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	b2db      	uxtb	r3, r3
 800c65c:	697a      	ldr	r2, [r7, #20]
 800c65e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	2201      	movs	r2, #1
 800c664:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	899b      	ldrh	r3, [r3, #12]
 800c66e:	4619      	mov	r1, r3
 800c670:	69bb      	ldr	r3, [r7, #24]
 800c672:	fbb3 f3f1 	udiv	r3, r3, r1
 800c676:	4413      	add	r3, r2
 800c678:	4619      	mov	r1, r3
 800c67a:	68f8      	ldr	r0, [r7, #12]
 800c67c:	f7ff fd7c 	bl	800c178 <move_window>
 800c680:	4603      	mov	r3, r0
 800c682:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c684:	7ffb      	ldrb	r3, [r7, #31]
 800c686:	2b00      	cmp	r3, #0
 800c688:	f040 80a0 	bne.w	800c7cc <put_fat+0x22c>
			p = fs->win + bc % SS(fs);
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	899b      	ldrh	r3, [r3, #12]
 800c696:	461a      	mov	r2, r3
 800c698:	69bb      	ldr	r3, [r7, #24]
 800c69a:	fbb3 f0f2 	udiv	r0, r3, r2
 800c69e:	fb00 f202 	mul.w	r2, r0, r2
 800c6a2:	1a9b      	subs	r3, r3, r2
 800c6a4:	440b      	add	r3, r1
 800c6a6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c6a8:	68bb      	ldr	r3, [r7, #8]
 800c6aa:	f003 0301 	and.w	r3, r3, #1
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d003      	beq.n	800c6ba <put_fat+0x11a>
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	091b      	lsrs	r3, r3, #4
 800c6b6:	b2db      	uxtb	r3, r3
 800c6b8:	e00e      	b.n	800c6d8 <put_fat+0x138>
 800c6ba:	697b      	ldr	r3, [r7, #20]
 800c6bc:	781b      	ldrb	r3, [r3, #0]
 800c6be:	b25b      	sxtb	r3, r3
 800c6c0:	f023 030f 	bic.w	r3, r3, #15
 800c6c4:	b25a      	sxtb	r2, r3
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	0a1b      	lsrs	r3, r3, #8
 800c6ca:	b25b      	sxtb	r3, r3
 800c6cc:	f003 030f 	and.w	r3, r3, #15
 800c6d0:	b25b      	sxtb	r3, r3
 800c6d2:	4313      	orrs	r3, r2
 800c6d4:	b25b      	sxtb	r3, r3
 800c6d6:	b2db      	uxtb	r3, r3
 800c6d8:	697a      	ldr	r2, [r7, #20]
 800c6da:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	2201      	movs	r2, #1
 800c6e0:	70da      	strb	r2, [r3, #3]
			break;
 800c6e2:	e078      	b.n	800c7d6 <put_fat+0x236>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	899b      	ldrh	r3, [r3, #12]
 800c6ec:	085b      	lsrs	r3, r3, #1
 800c6ee:	b29b      	uxth	r3, r3
 800c6f0:	4619      	mov	r1, r3
 800c6f2:	68bb      	ldr	r3, [r7, #8]
 800c6f4:	fbb3 f3f1 	udiv	r3, r3, r1
 800c6f8:	4413      	add	r3, r2
 800c6fa:	4619      	mov	r1, r3
 800c6fc:	68f8      	ldr	r0, [r7, #12]
 800c6fe:	f7ff fd3b 	bl	800c178 <move_window>
 800c702:	4603      	mov	r3, r0
 800c704:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c706:	7ffb      	ldrb	r3, [r7, #31]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d161      	bne.n	800c7d0 <put_fat+0x230>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c712:	68bb      	ldr	r3, [r7, #8]
 800c714:	005b      	lsls	r3, r3, #1
 800c716:	68fa      	ldr	r2, [r7, #12]
 800c718:	8992      	ldrh	r2, [r2, #12]
 800c71a:	fbb3 f0f2 	udiv	r0, r3, r2
 800c71e:	fb00 f202 	mul.w	r2, r0, r2
 800c722:	1a9b      	subs	r3, r3, r2
 800c724:	440b      	add	r3, r1
 800c726:	687a      	ldr	r2, [r7, #4]
 800c728:	b292      	uxth	r2, r2
 800c72a:	4611      	mov	r1, r2
 800c72c:	4618      	mov	r0, r3
 800c72e:	f7ff fa25 	bl	800bb7c <st_word>
			fs->wflag = 1;
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	2201      	movs	r2, #1
 800c736:	70da      	strb	r2, [r3, #3]
			break;
 800c738:	e04d      	b.n	800c7d6 <put_fat+0x236>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	899b      	ldrh	r3, [r3, #12]
 800c742:	089b      	lsrs	r3, r3, #2
 800c744:	b29b      	uxth	r3, r3
 800c746:	4619      	mov	r1, r3
 800c748:	68bb      	ldr	r3, [r7, #8]
 800c74a:	fbb3 f3f1 	udiv	r3, r3, r1
 800c74e:	4413      	add	r3, r2
 800c750:	4619      	mov	r1, r3
 800c752:	68f8      	ldr	r0, [r7, #12]
 800c754:	f7ff fd10 	bl	800c178 <move_window>
 800c758:	4603      	mov	r3, r0
 800c75a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c75c:	7ffb      	ldrb	r3, [r7, #31]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d138      	bne.n	800c7d4 <put_fat+0x234>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	781b      	ldrb	r3, [r3, #0]
 800c766:	2b04      	cmp	r3, #4
 800c768:	d017      	beq.n	800c79a <put_fat+0x1fa>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c776:	68bb      	ldr	r3, [r7, #8]
 800c778:	009b      	lsls	r3, r3, #2
 800c77a:	68fa      	ldr	r2, [r7, #12]
 800c77c:	8992      	ldrh	r2, [r2, #12]
 800c77e:	fbb3 f0f2 	udiv	r0, r3, r2
 800c782:	fb00 f202 	mul.w	r2, r0, r2
 800c786:	1a9b      	subs	r3, r3, r2
 800c788:	440b      	add	r3, r1
 800c78a:	4618      	mov	r0, r3
 800c78c:	f7ff f8f8 	bl	800b980 <ld_dword>
 800c790:	4603      	mov	r3, r0
 800c792:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c796:	4323      	orrs	r3, r4
 800c798:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c7a0:	68bb      	ldr	r3, [r7, #8]
 800c7a2:	009b      	lsls	r3, r3, #2
 800c7a4:	68fa      	ldr	r2, [r7, #12]
 800c7a6:	8992      	ldrh	r2, [r2, #12]
 800c7a8:	fbb3 f0f2 	udiv	r0, r3, r2
 800c7ac:	fb00 f202 	mul.w	r2, r0, r2
 800c7b0:	1a9b      	subs	r3, r3, r2
 800c7b2:	440b      	add	r3, r1
 800c7b4:	6879      	ldr	r1, [r7, #4]
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	f7ff f9fb 	bl	800bbb2 <st_dword>
			fs->wflag = 1;
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	2201      	movs	r2, #1
 800c7c0:	70da      	strb	r2, [r3, #3]
			break;
 800c7c2:	e008      	b.n	800c7d6 <put_fat+0x236>
		}
	}
 800c7c4:	bf00      	nop
 800c7c6:	e006      	b.n	800c7d6 <put_fat+0x236>
			if (res != FR_OK) break;
 800c7c8:	bf00      	nop
 800c7ca:	e004      	b.n	800c7d6 <put_fat+0x236>
			if (res != FR_OK) break;
 800c7cc:	bf00      	nop
 800c7ce:	e002      	b.n	800c7d6 <put_fat+0x236>
			if (res != FR_OK) break;
 800c7d0:	bf00      	nop
 800c7d2:	e000      	b.n	800c7d6 <put_fat+0x236>
			if (res != FR_OK) break;
 800c7d4:	bf00      	nop
	return res;
 800c7d6:	7ffb      	ldrb	r3, [r7, #31]
}
 800c7d8:	4618      	mov	r0, r3
 800c7da:	3724      	adds	r7, #36	; 0x24
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	bd90      	pop	{r4, r7, pc}

0800c7e0 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b08a      	sub	sp, #40	; 0x28
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	60f8      	str	r0, [r7, #12]
 800c7e8:	60b9      	str	r1, [r7, #8]
 800c7ea:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 800c7ec:	68bb      	ldr	r3, [r7, #8]
 800c7ee:	3b02      	subs	r3, #2
 800c7f0:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	6a1b      	ldr	r3, [r3, #32]
 800c7f6:	3b02      	subs	r3, #2
 800c7f8:	68ba      	ldr	r2, [r7, #8]
 800c7fa:	429a      	cmp	r2, r3
 800c7fc:	d301      	bcc.n	800c802 <find_bitmap+0x22>
 800c7fe:	2300      	movs	r3, #0
 800c800:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 800c802:	68bb      	ldr	r3, [r7, #8]
 800c804:	61fb      	str	r3, [r7, #28]
 800c806:	69fb      	ldr	r3, [r7, #28]
 800c808:	61bb      	str	r3, [r7, #24]
 800c80a:	2300      	movs	r3, #0
 800c80c:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c812:	69fb      	ldr	r3, [r7, #28]
 800c814:	08db      	lsrs	r3, r3, #3
 800c816:	68f9      	ldr	r1, [r7, #12]
 800c818:	8989      	ldrh	r1, [r1, #12]
 800c81a:	fbb3 f3f1 	udiv	r3, r3, r1
 800c81e:	4413      	add	r3, r2
 800c820:	4619      	mov	r1, r3
 800c822:	68f8      	ldr	r0, [r7, #12]
 800c824:	f7ff fca8 	bl	800c178 <move_window>
 800c828:	4603      	mov	r3, r0
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d002      	beq.n	800c834 <find_bitmap+0x54>
 800c82e:	f04f 33ff 	mov.w	r3, #4294967295
 800c832:	e058      	b.n	800c8e6 <find_bitmap+0x106>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 800c834:	69fb      	ldr	r3, [r7, #28]
 800c836:	08db      	lsrs	r3, r3, #3
 800c838:	68fa      	ldr	r2, [r7, #12]
 800c83a:	8992      	ldrh	r2, [r2, #12]
 800c83c:	fbb3 f1f2 	udiv	r1, r3, r2
 800c840:	fb01 f202 	mul.w	r2, r1, r2
 800c844:	1a9b      	subs	r3, r3, r2
 800c846:	623b      	str	r3, [r7, #32]
 800c848:	69fb      	ldr	r3, [r7, #28]
 800c84a:	f003 0307 	and.w	r3, r3, #7
 800c84e:	2201      	movs	r2, #1
 800c850:	fa02 f303 	lsl.w	r3, r2, r3
 800c854:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800c858:	68fa      	ldr	r2, [r7, #12]
 800c85a:	6a3b      	ldr	r3, [r7, #32]
 800c85c:	4413      	add	r3, r2
 800c85e:	333c      	adds	r3, #60	; 0x3c
 800c860:	781a      	ldrb	r2, [r3, #0]
 800c862:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c866:	4013      	ands	r3, r2
 800c868:	74fb      	strb	r3, [r7, #19]
 800c86a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c86e:	005b      	lsls	r3, r3, #1
 800c870:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800c874:	69fb      	ldr	r3, [r7, #28]
 800c876:	3301      	adds	r3, #1
 800c878:	61fb      	str	r3, [r7, #28]
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	6a1b      	ldr	r3, [r3, #32]
 800c87e:	3b02      	subs	r3, #2
 800c880:	69fa      	ldr	r2, [r7, #28]
 800c882:	429a      	cmp	r2, r3
 800c884:	d307      	bcc.n	800c896 <find_bitmap+0xb6>
					val = 0; bm = 0; i = SS(fs);
 800c886:	2300      	movs	r3, #0
 800c888:	61fb      	str	r3, [r7, #28]
 800c88a:	2300      	movs	r3, #0
 800c88c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	899b      	ldrh	r3, [r3, #12]
 800c894:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 800c896:	7cfb      	ldrb	r3, [r7, #19]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d109      	bne.n	800c8b0 <find_bitmap+0xd0>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 800c89c:	697b      	ldr	r3, [r7, #20]
 800c89e:	3301      	adds	r3, #1
 800c8a0:	617b      	str	r3, [r7, #20]
 800c8a2:	697a      	ldr	r2, [r7, #20]
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	429a      	cmp	r2, r3
 800c8a8:	d106      	bne.n	800c8b8 <find_bitmap+0xd8>
 800c8aa:	69bb      	ldr	r3, [r7, #24]
 800c8ac:	3302      	adds	r3, #2
 800c8ae:	e01a      	b.n	800c8e6 <find_bitmap+0x106>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 800c8b0:	69fb      	ldr	r3, [r7, #28]
 800c8b2:	61bb      	str	r3, [r7, #24]
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 800c8b8:	69fa      	ldr	r2, [r7, #28]
 800c8ba:	68bb      	ldr	r3, [r7, #8]
 800c8bc:	429a      	cmp	r2, r3
 800c8be:	d101      	bne.n	800c8c4 <find_bitmap+0xe4>
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	e010      	b.n	800c8e6 <find_bitmap+0x106>
			} while (bm);
 800c8c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d1c5      	bne.n	800c858 <find_bitmap+0x78>
			bm = 1;
 800c8cc:	2301      	movs	r3, #1
 800c8ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 800c8d2:	6a3b      	ldr	r3, [r7, #32]
 800c8d4:	3301      	adds	r3, #1
 800c8d6:	623b      	str	r3, [r7, #32]
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	899b      	ldrh	r3, [r3, #12]
 800c8dc:	461a      	mov	r2, r3
 800c8de:	6a3b      	ldr	r3, [r7, #32]
 800c8e0:	4293      	cmp	r3, r2
 800c8e2:	d3b9      	bcc.n	800c858 <find_bitmap+0x78>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800c8e4:	e793      	b.n	800c80e <find_bitmap+0x2e>
	}
}
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	3728      	adds	r7, #40	; 0x28
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	bd80      	pop	{r7, pc}

0800c8ee <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 800c8ee:	b580      	push	{r7, lr}
 800c8f0:	b088      	sub	sp, #32
 800c8f2:	af00      	add	r7, sp, #0
 800c8f4:	60f8      	str	r0, [r7, #12]
 800c8f6:	60b9      	str	r1, [r7, #8]
 800c8f8:	607a      	str	r2, [r7, #4]
 800c8fa:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 800c8fc:	68bb      	ldr	r3, [r7, #8]
 800c8fe:	3b02      	subs	r3, #2
 800c900:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c906:	68bb      	ldr	r3, [r7, #8]
 800c908:	08db      	lsrs	r3, r3, #3
 800c90a:	68f9      	ldr	r1, [r7, #12]
 800c90c:	8989      	ldrh	r1, [r1, #12]
 800c90e:	fbb3 f3f1 	udiv	r3, r3, r1
 800c912:	4413      	add	r3, r2
 800c914:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 800c916:	68bb      	ldr	r3, [r7, #8]
 800c918:	08db      	lsrs	r3, r3, #3
 800c91a:	68fa      	ldr	r2, [r7, #12]
 800c91c:	8992      	ldrh	r2, [r2, #12]
 800c91e:	fbb3 f1f2 	udiv	r1, r3, r2
 800c922:	fb01 f202 	mul.w	r2, r1, r2
 800c926:	1a9b      	subs	r3, r3, r2
 800c928:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 800c92a:	68bb      	ldr	r3, [r7, #8]
 800c92c:	f003 0307 	and.w	r3, r3, #7
 800c930:	2201      	movs	r2, #1
 800c932:	fa02 f303 	lsl.w	r3, r2, r3
 800c936:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800c938:	697b      	ldr	r3, [r7, #20]
 800c93a:	1c5a      	adds	r2, r3, #1
 800c93c:	617a      	str	r2, [r7, #20]
 800c93e:	4619      	mov	r1, r3
 800c940:	68f8      	ldr	r0, [r7, #12]
 800c942:	f7ff fc19 	bl	800c178 <move_window>
 800c946:	4603      	mov	r3, r0
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d001      	beq.n	800c950 <change_bitmap+0x62>
 800c94c:	2301      	movs	r3, #1
 800c94e:	e03f      	b.n	800c9d0 <change_bitmap+0xe2>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800c950:	68fa      	ldr	r2, [r7, #12]
 800c952:	69bb      	ldr	r3, [r7, #24]
 800c954:	4413      	add	r3, r2
 800c956:	333c      	adds	r3, #60	; 0x3c
 800c958:	781a      	ldrb	r2, [r3, #0]
 800c95a:	7ffb      	ldrb	r3, [r7, #31]
 800c95c:	4013      	ands	r3, r2
 800c95e:	b2db      	uxtb	r3, r3
 800c960:	2b00      	cmp	r3, #0
 800c962:	bf14      	ite	ne
 800c964:	2301      	movne	r3, #1
 800c966:	2300      	moveq	r3, #0
 800c968:	b2db      	uxtb	r3, r3
 800c96a:	461a      	mov	r2, r3
 800c96c:	683b      	ldr	r3, [r7, #0]
 800c96e:	4293      	cmp	r3, r2
 800c970:	d101      	bne.n	800c976 <change_bitmap+0x88>
 800c972:	2302      	movs	r3, #2
 800c974:	e02c      	b.n	800c9d0 <change_bitmap+0xe2>
				fs->win[i] ^= bm;	/* Flip the bit */
 800c976:	68fa      	ldr	r2, [r7, #12]
 800c978:	69bb      	ldr	r3, [r7, #24]
 800c97a:	4413      	add	r3, r2
 800c97c:	333c      	adds	r3, #60	; 0x3c
 800c97e:	781a      	ldrb	r2, [r3, #0]
 800c980:	7ffb      	ldrb	r3, [r7, #31]
 800c982:	4053      	eors	r3, r2
 800c984:	b2d9      	uxtb	r1, r3
 800c986:	68fa      	ldr	r2, [r7, #12]
 800c988:	69bb      	ldr	r3, [r7, #24]
 800c98a:	4413      	add	r3, r2
 800c98c:	333c      	adds	r3, #60	; 0x3c
 800c98e:	460a      	mov	r2, r1
 800c990:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	2201      	movs	r2, #1
 800c996:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	3b01      	subs	r3, #1
 800c99c:	607b      	str	r3, [r7, #4]
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d101      	bne.n	800c9a8 <change_bitmap+0xba>
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	e013      	b.n	800c9d0 <change_bitmap+0xe2>
			} while (bm <<= 1);		/* Next bit */
 800c9a8:	7ffb      	ldrb	r3, [r7, #31]
 800c9aa:	005b      	lsls	r3, r3, #1
 800c9ac:	77fb      	strb	r3, [r7, #31]
 800c9ae:	7ffb      	ldrb	r3, [r7, #31]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d1cd      	bne.n	800c950 <change_bitmap+0x62>
			bm = 1;
 800c9b4:	2301      	movs	r3, #1
 800c9b6:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 800c9b8:	69bb      	ldr	r3, [r7, #24]
 800c9ba:	3301      	adds	r3, #1
 800c9bc:	61bb      	str	r3, [r7, #24]
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	899b      	ldrh	r3, [r3, #12]
 800c9c2:	461a      	mov	r2, r3
 800c9c4:	69bb      	ldr	r3, [r7, #24]
 800c9c6:	4293      	cmp	r3, r2
 800c9c8:	d3c2      	bcc.n	800c950 <change_bitmap+0x62>
		i = 0;
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800c9ce:	e7b3      	b.n	800c938 <change_bitmap+0x4a>
	}
}
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	3720      	adds	r7, #32
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	bd80      	pop	{r7, pc}

0800c9d8 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	b086      	sub	sp, #24
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	79db      	ldrb	r3, [r3, #7]
 800c9e4:	2b03      	cmp	r3, #3
 800c9e6:	d121      	bne.n	800ca2c <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	689b      	ldr	r3, [r3, #8]
 800c9ec:	617b      	str	r3, [r7, #20]
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	699b      	ldr	r3, [r3, #24]
 800c9f2:	613b      	str	r3, [r7, #16]
 800c9f4:	e014      	b.n	800ca20 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	6818      	ldr	r0, [r3, #0]
 800c9fa:	697b      	ldr	r3, [r7, #20]
 800c9fc:	3301      	adds	r3, #1
 800c9fe:	461a      	mov	r2, r3
 800ca00:	6979      	ldr	r1, [r7, #20]
 800ca02:	f7ff fdcd 	bl	800c5a0 <put_fat>
 800ca06:	4603      	mov	r3, r0
 800ca08:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 800ca0a:	7bfb      	ldrb	r3, [r7, #15]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d001      	beq.n	800ca14 <fill_first_frag+0x3c>
 800ca10:	7bfb      	ldrb	r3, [r7, #15]
 800ca12:	e00c      	b.n	800ca2e <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800ca14:	697b      	ldr	r3, [r7, #20]
 800ca16:	3301      	adds	r3, #1
 800ca18:	617b      	str	r3, [r7, #20]
 800ca1a:	693b      	ldr	r3, [r7, #16]
 800ca1c:	3b01      	subs	r3, #1
 800ca1e:	613b      	str	r3, [r7, #16]
 800ca20:	693b      	ldr	r3, [r7, #16]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d1e7      	bne.n	800c9f6 <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	2200      	movs	r2, #0
 800ca2a:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 800ca2c:	2300      	movs	r3, #0
}
 800ca2e:	4618      	mov	r0, r3
 800ca30:	3718      	adds	r7, #24
 800ca32:	46bd      	mov	sp, r7
 800ca34:	bd80      	pop	{r7, pc}

0800ca36 <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 800ca36:	b580      	push	{r7, lr}
 800ca38:	b086      	sub	sp, #24
 800ca3a:	af00      	add	r7, sp, #0
 800ca3c:	60f8      	str	r0, [r7, #12]
 800ca3e:	60b9      	str	r1, [r7, #8]
 800ca40:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800ca42:	e020      	b.n	800ca86 <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	6818      	ldr	r0, [r3, #0]
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	69db      	ldr	r3, [r3, #28]
 800ca4c:	68ba      	ldr	r2, [r7, #8]
 800ca4e:	1ad3      	subs	r3, r2, r3
 800ca50:	1c59      	adds	r1, r3, #1
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	69db      	ldr	r3, [r3, #28]
 800ca56:	2b01      	cmp	r3, #1
 800ca58:	d905      	bls.n	800ca66 <fill_last_frag+0x30>
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	69db      	ldr	r3, [r3, #28]
 800ca5e:	68ba      	ldr	r2, [r7, #8]
 800ca60:	1ad3      	subs	r3, r2, r3
 800ca62:	3302      	adds	r3, #2
 800ca64:	e000      	b.n	800ca68 <fill_last_frag+0x32>
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	461a      	mov	r2, r3
 800ca6a:	f7ff fd99 	bl	800c5a0 <put_fat>
 800ca6e:	4603      	mov	r3, r0
 800ca70:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 800ca72:	7dfb      	ldrb	r3, [r7, #23]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d001      	beq.n	800ca7c <fill_last_frag+0x46>
 800ca78:	7dfb      	ldrb	r3, [r7, #23]
 800ca7a:	e009      	b.n	800ca90 <fill_last_frag+0x5a>
		obj->n_frag--;
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	69db      	ldr	r3, [r3, #28]
 800ca80:	1e5a      	subs	r2, r3, #1
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	69db      	ldr	r3, [r3, #28]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d1da      	bne.n	800ca44 <fill_last_frag+0xe>
	}
	return FR_OK;
 800ca8e:	2300      	movs	r3, #0
}
 800ca90:	4618      	mov	r0, r3
 800ca92:	3718      	adds	r7, #24
 800ca94:	46bd      	mov	sp, r7
 800ca96:	bd80      	pop	{r7, pc}

0800ca98 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b08a      	sub	sp, #40	; 0x28
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	60f8      	str	r0, [r7, #12]
 800caa0:	60b9      	str	r1, [r7, #8]
 800caa2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800caa4:	2300      	movs	r3, #0
 800caa6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 800caae:	68bb      	ldr	r3, [r7, #8]
 800cab0:	627b      	str	r3, [r7, #36]	; 0x24
 800cab2:	68bb      	ldr	r3, [r7, #8]
 800cab4:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800cab6:	68bb      	ldr	r3, [r7, #8]
 800cab8:	2b01      	cmp	r3, #1
 800caba:	d904      	bls.n	800cac6 <remove_chain+0x2e>
 800cabc:	69bb      	ldr	r3, [r7, #24]
 800cabe:	6a1b      	ldr	r3, [r3, #32]
 800cac0:	68ba      	ldr	r2, [r7, #8]
 800cac2:	429a      	cmp	r2, r3
 800cac4:	d301      	bcc.n	800caca <remove_chain+0x32>
 800cac6:	2302      	movs	r3, #2
 800cac8:	e096      	b.n	800cbf8 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d014      	beq.n	800cafa <remove_chain+0x62>
 800cad0:	69bb      	ldr	r3, [r7, #24]
 800cad2:	781b      	ldrb	r3, [r3, #0]
 800cad4:	2b04      	cmp	r3, #4
 800cad6:	d103      	bne.n	800cae0 <remove_chain+0x48>
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	79db      	ldrb	r3, [r3, #7]
 800cadc:	2b02      	cmp	r3, #2
 800cade:	d00c      	beq.n	800cafa <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800cae0:	f04f 32ff 	mov.w	r2, #4294967295
 800cae4:	6879      	ldr	r1, [r7, #4]
 800cae6:	69b8      	ldr	r0, [r7, #24]
 800cae8:	f7ff fd5a 	bl	800c5a0 <put_fat>
 800caec:	4603      	mov	r3, r0
 800caee:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800caf0:	7ffb      	ldrb	r3, [r7, #31]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d001      	beq.n	800cafa <remove_chain+0x62>
 800caf6:	7ffb      	ldrb	r3, [r7, #31]
 800caf8:	e07e      	b.n	800cbf8 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800cafa:	68b9      	ldr	r1, [r7, #8]
 800cafc:	68f8      	ldr	r0, [r7, #12]
 800cafe:	f7ff fbf9 	bl	800c2f4 <get_fat>
 800cb02:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800cb04:	697b      	ldr	r3, [r7, #20]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d055      	beq.n	800cbb6 <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800cb0a:	697b      	ldr	r3, [r7, #20]
 800cb0c:	2b01      	cmp	r3, #1
 800cb0e:	d101      	bne.n	800cb14 <remove_chain+0x7c>
 800cb10:	2302      	movs	r3, #2
 800cb12:	e071      	b.n	800cbf8 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800cb14:	697b      	ldr	r3, [r7, #20]
 800cb16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb1a:	d101      	bne.n	800cb20 <remove_chain+0x88>
 800cb1c:	2301      	movs	r3, #1
 800cb1e:	e06b      	b.n	800cbf8 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800cb20:	69bb      	ldr	r3, [r7, #24]
 800cb22:	781b      	ldrb	r3, [r3, #0]
 800cb24:	2b04      	cmp	r3, #4
 800cb26:	d00b      	beq.n	800cb40 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800cb28:	2200      	movs	r2, #0
 800cb2a:	68b9      	ldr	r1, [r7, #8]
 800cb2c:	69b8      	ldr	r0, [r7, #24]
 800cb2e:	f7ff fd37 	bl	800c5a0 <put_fat>
 800cb32:	4603      	mov	r3, r0
 800cb34:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800cb36:	7ffb      	ldrb	r3, [r7, #31]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d001      	beq.n	800cb40 <remove_chain+0xa8>
 800cb3c:	7ffb      	ldrb	r3, [r7, #31]
 800cb3e:	e05b      	b.n	800cbf8 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800cb40:	69bb      	ldr	r3, [r7, #24]
 800cb42:	69da      	ldr	r2, [r3, #28]
 800cb44:	69bb      	ldr	r3, [r7, #24]
 800cb46:	6a1b      	ldr	r3, [r3, #32]
 800cb48:	3b02      	subs	r3, #2
 800cb4a:	429a      	cmp	r2, r3
 800cb4c:	d20b      	bcs.n	800cb66 <remove_chain+0xce>
			fs->free_clst++;
 800cb4e:	69bb      	ldr	r3, [r7, #24]
 800cb50:	69db      	ldr	r3, [r3, #28]
 800cb52:	1c5a      	adds	r2, r3, #1
 800cb54:	69bb      	ldr	r3, [r7, #24]
 800cb56:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 800cb58:	69bb      	ldr	r3, [r7, #24]
 800cb5a:	791b      	ldrb	r3, [r3, #4]
 800cb5c:	f043 0301 	orr.w	r3, r3, #1
 800cb60:	b2da      	uxtb	r2, r3
 800cb62:	69bb      	ldr	r3, [r7, #24]
 800cb64:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 800cb66:	6a3b      	ldr	r3, [r7, #32]
 800cb68:	3301      	adds	r3, #1
 800cb6a:	697a      	ldr	r2, [r7, #20]
 800cb6c:	429a      	cmp	r2, r3
 800cb6e:	d102      	bne.n	800cb76 <remove_chain+0xde>
			ecl = nxt;
 800cb70:	697b      	ldr	r3, [r7, #20]
 800cb72:	623b      	str	r3, [r7, #32]
 800cb74:	e017      	b.n	800cba6 <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800cb76:	69bb      	ldr	r3, [r7, #24]
 800cb78:	781b      	ldrb	r3, [r3, #0]
 800cb7a:	2b04      	cmp	r3, #4
 800cb7c:	d10f      	bne.n	800cb9e <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 800cb7e:	6a3a      	ldr	r2, [r7, #32]
 800cb80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb82:	1ad3      	subs	r3, r2, r3
 800cb84:	1c5a      	adds	r2, r3, #1
 800cb86:	2300      	movs	r3, #0
 800cb88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cb8a:	69b8      	ldr	r0, [r7, #24]
 800cb8c:	f7ff feaf 	bl	800c8ee <change_bitmap>
 800cb90:	4603      	mov	r3, r0
 800cb92:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 800cb94:	7ffb      	ldrb	r3, [r7, #31]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d001      	beq.n	800cb9e <remove_chain+0x106>
 800cb9a:	7ffb      	ldrb	r3, [r7, #31]
 800cb9c:	e02c      	b.n	800cbf8 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 800cb9e:	697b      	ldr	r3, [r7, #20]
 800cba0:	623b      	str	r3, [r7, #32]
 800cba2:	6a3b      	ldr	r3, [r7, #32]
 800cba4:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 800cba6:	697b      	ldr	r3, [r7, #20]
 800cba8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800cbaa:	69bb      	ldr	r3, [r7, #24]
 800cbac:	6a1b      	ldr	r3, [r3, #32]
 800cbae:	68ba      	ldr	r2, [r7, #8]
 800cbb0:	429a      	cmp	r2, r3
 800cbb2:	d3a2      	bcc.n	800cafa <remove_chain+0x62>
 800cbb4:	e000      	b.n	800cbb8 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 800cbb6:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 800cbb8:	69bb      	ldr	r3, [r7, #24]
 800cbba:	781b      	ldrb	r3, [r3, #0]
 800cbbc:	2b04      	cmp	r3, #4
 800cbbe:	d11a      	bne.n	800cbf6 <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d103      	bne.n	800cbce <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	2200      	movs	r2, #0
 800cbca:	71da      	strb	r2, [r3, #7]
 800cbcc:	e013      	b.n	800cbf6 <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	79db      	ldrb	r3, [r3, #7]
 800cbd2:	2b03      	cmp	r3, #3
 800cbd4:	d10f      	bne.n	800cbf6 <remove_chain+0x15e>
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	689b      	ldr	r3, [r3, #8]
 800cbda:	687a      	ldr	r2, [r7, #4]
 800cbdc:	429a      	cmp	r2, r3
 800cbde:	d30a      	bcc.n	800cbf6 <remove_chain+0x15e>
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	689a      	ldr	r2, [r3, #8]
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	699b      	ldr	r3, [r3, #24]
 800cbe8:	4413      	add	r3, r2
 800cbea:	687a      	ldr	r2, [r7, #4]
 800cbec:	429a      	cmp	r2, r3
 800cbee:	d802      	bhi.n	800cbf6 <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	2202      	movs	r2, #2
 800cbf4:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 800cbf6:	2300      	movs	r3, #0
}
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	3728      	adds	r7, #40	; 0x28
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	bd80      	pop	{r7, pc}

0800cc00 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b088      	sub	sp, #32
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	6078      	str	r0, [r7, #4]
 800cc08:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800cc10:	683b      	ldr	r3, [r7, #0]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d10d      	bne.n	800cc32 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800cc16:	693b      	ldr	r3, [r7, #16]
 800cc18:	699b      	ldr	r3, [r3, #24]
 800cc1a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800cc1c:	69bb      	ldr	r3, [r7, #24]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d004      	beq.n	800cc2c <create_chain+0x2c>
 800cc22:	693b      	ldr	r3, [r7, #16]
 800cc24:	6a1b      	ldr	r3, [r3, #32]
 800cc26:	69ba      	ldr	r2, [r7, #24]
 800cc28:	429a      	cmp	r2, r3
 800cc2a:	d31b      	bcc.n	800cc64 <create_chain+0x64>
 800cc2c:	2301      	movs	r3, #1
 800cc2e:	61bb      	str	r3, [r7, #24]
 800cc30:	e018      	b.n	800cc64 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800cc32:	6839      	ldr	r1, [r7, #0]
 800cc34:	6878      	ldr	r0, [r7, #4]
 800cc36:	f7ff fb5d 	bl	800c2f4 <get_fat>
 800cc3a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	2b01      	cmp	r3, #1
 800cc40:	d801      	bhi.n	800cc46 <create_chain+0x46>
 800cc42:	2301      	movs	r3, #1
 800cc44:	e0d9      	b.n	800cdfa <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc4c:	d101      	bne.n	800cc52 <create_chain+0x52>
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	e0d3      	b.n	800cdfa <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800cc52:	693b      	ldr	r3, [r7, #16]
 800cc54:	6a1b      	ldr	r3, [r3, #32]
 800cc56:	68fa      	ldr	r2, [r7, #12]
 800cc58:	429a      	cmp	r2, r3
 800cc5a:	d201      	bcs.n	800cc60 <create_chain+0x60>
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	e0cc      	b.n	800cdfa <create_chain+0x1fa>
		scl = clst;
 800cc60:	683b      	ldr	r3, [r7, #0]
 800cc62:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800cc64:	693b      	ldr	r3, [r7, #16]
 800cc66:	781b      	ldrb	r3, [r3, #0]
 800cc68:	2b04      	cmp	r3, #4
 800cc6a:	d164      	bne.n	800cd36 <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800cc6c:	2201      	movs	r2, #1
 800cc6e:	69b9      	ldr	r1, [r7, #24]
 800cc70:	6938      	ldr	r0, [r7, #16]
 800cc72:	f7ff fdb5 	bl	800c7e0 <find_bitmap>
 800cc76:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 800cc78:	69fb      	ldr	r3, [r7, #28]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d003      	beq.n	800cc86 <create_chain+0x86>
 800cc7e:	69fb      	ldr	r3, [r7, #28]
 800cc80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc84:	d101      	bne.n	800cc8a <create_chain+0x8a>
 800cc86:	69fb      	ldr	r3, [r7, #28]
 800cc88:	e0b7      	b.n	800cdfa <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 800cc8a:	2301      	movs	r3, #1
 800cc8c:	2201      	movs	r2, #1
 800cc8e:	69f9      	ldr	r1, [r7, #28]
 800cc90:	6938      	ldr	r0, [r7, #16]
 800cc92:	f7ff fe2c 	bl	800c8ee <change_bitmap>
 800cc96:	4603      	mov	r3, r0
 800cc98:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 800cc9a:	7dfb      	ldrb	r3, [r7, #23]
 800cc9c:	2b02      	cmp	r3, #2
 800cc9e:	d101      	bne.n	800cca4 <create_chain+0xa4>
 800cca0:	2301      	movs	r3, #1
 800cca2:	e0aa      	b.n	800cdfa <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 800cca4:	7dfb      	ldrb	r3, [r7, #23]
 800cca6:	2b01      	cmp	r3, #1
 800cca8:	d102      	bne.n	800ccb0 <create_chain+0xb0>
 800ccaa:	f04f 33ff 	mov.w	r3, #4294967295
 800ccae:	e0a4      	b.n	800cdfa <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 800ccb0:	683b      	ldr	r3, [r7, #0]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d103      	bne.n	800ccbe <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	2202      	movs	r2, #2
 800ccba:	71da      	strb	r2, [r3, #7]
 800ccbc:	e011      	b.n	800cce2 <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	79db      	ldrb	r3, [r3, #7]
 800ccc2:	2b02      	cmp	r3, #2
 800ccc4:	d10d      	bne.n	800cce2 <create_chain+0xe2>
 800ccc6:	69bb      	ldr	r3, [r7, #24]
 800ccc8:	3301      	adds	r3, #1
 800ccca:	69fa      	ldr	r2, [r7, #28]
 800cccc:	429a      	cmp	r2, r3
 800ccce:	d008      	beq.n	800cce2 <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	689b      	ldr	r3, [r3, #8]
 800ccd4:	69ba      	ldr	r2, [r7, #24]
 800ccd6:	1ad2      	subs	r2, r2, r3
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	2203      	movs	r2, #3
 800cce0:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	79db      	ldrb	r3, [r3, #7]
 800cce6:	2b02      	cmp	r3, #2
 800cce8:	d064      	beq.n	800cdb4 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 800ccea:	683b      	ldr	r3, [r7, #0]
 800ccec:	3301      	adds	r3, #1
 800ccee:	69fa      	ldr	r2, [r7, #28]
 800ccf0:	429a      	cmp	r2, r3
 800ccf2:	d10b      	bne.n	800cd0c <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	69db      	ldr	r3, [r3, #28]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d003      	beq.n	800cd04 <create_chain+0x104>
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	69db      	ldr	r3, [r3, #28]
 800cd00:	3301      	adds	r3, #1
 800cd02:	e000      	b.n	800cd06 <create_chain+0x106>
 800cd04:	2302      	movs	r3, #2
 800cd06:	687a      	ldr	r2, [r7, #4]
 800cd08:	61d3      	str	r3, [r2, #28]
 800cd0a:	e053      	b.n	800cdb4 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	69db      	ldr	r3, [r3, #28]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d102      	bne.n	800cd1a <create_chain+0x11a>
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	2201      	movs	r2, #1
 800cd18:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 800cd1a:	69fa      	ldr	r2, [r7, #28]
 800cd1c:	6839      	ldr	r1, [r7, #0]
 800cd1e:	6878      	ldr	r0, [r7, #4]
 800cd20:	f7ff fe89 	bl	800ca36 <fill_last_frag>
 800cd24:	4603      	mov	r3, r0
 800cd26:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 800cd28:	7dfb      	ldrb	r3, [r7, #23]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d142      	bne.n	800cdb4 <create_chain+0x1b4>
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	2201      	movs	r2, #1
 800cd32:	61da      	str	r2, [r3, #28]
 800cd34:	e03e      	b.n	800cdb4 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800cd36:	69bb      	ldr	r3, [r7, #24]
 800cd38:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800cd3a:	69fb      	ldr	r3, [r7, #28]
 800cd3c:	3301      	adds	r3, #1
 800cd3e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800cd40:	693b      	ldr	r3, [r7, #16]
 800cd42:	6a1b      	ldr	r3, [r3, #32]
 800cd44:	69fa      	ldr	r2, [r7, #28]
 800cd46:	429a      	cmp	r2, r3
 800cd48:	d307      	bcc.n	800cd5a <create_chain+0x15a>
				ncl = 2;
 800cd4a:	2302      	movs	r3, #2
 800cd4c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800cd4e:	69fa      	ldr	r2, [r7, #28]
 800cd50:	69bb      	ldr	r3, [r7, #24]
 800cd52:	429a      	cmp	r2, r3
 800cd54:	d901      	bls.n	800cd5a <create_chain+0x15a>
 800cd56:	2300      	movs	r3, #0
 800cd58:	e04f      	b.n	800cdfa <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800cd5a:	69f9      	ldr	r1, [r7, #28]
 800cd5c:	6878      	ldr	r0, [r7, #4]
 800cd5e:	f7ff fac9 	bl	800c2f4 <get_fat>
 800cd62:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d00e      	beq.n	800cd88 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	2b01      	cmp	r3, #1
 800cd6e:	d003      	beq.n	800cd78 <create_chain+0x178>
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd76:	d101      	bne.n	800cd7c <create_chain+0x17c>
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	e03e      	b.n	800cdfa <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 800cd7c:	69fa      	ldr	r2, [r7, #28]
 800cd7e:	69bb      	ldr	r3, [r7, #24]
 800cd80:	429a      	cmp	r2, r3
 800cd82:	d1da      	bne.n	800cd3a <create_chain+0x13a>
 800cd84:	2300      	movs	r3, #0
 800cd86:	e038      	b.n	800cdfa <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 800cd88:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800cd8a:	f04f 32ff 	mov.w	r2, #4294967295
 800cd8e:	69f9      	ldr	r1, [r7, #28]
 800cd90:	6938      	ldr	r0, [r7, #16]
 800cd92:	f7ff fc05 	bl	800c5a0 <put_fat>
 800cd96:	4603      	mov	r3, r0
 800cd98:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800cd9a:	7dfb      	ldrb	r3, [r7, #23]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d109      	bne.n	800cdb4 <create_chain+0x1b4>
 800cda0:	683b      	ldr	r3, [r7, #0]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d006      	beq.n	800cdb4 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800cda6:	69fa      	ldr	r2, [r7, #28]
 800cda8:	6839      	ldr	r1, [r7, #0]
 800cdaa:	6938      	ldr	r0, [r7, #16]
 800cdac:	f7ff fbf8 	bl	800c5a0 <put_fat>
 800cdb0:	4603      	mov	r3, r0
 800cdb2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800cdb4:	7dfb      	ldrb	r3, [r7, #23]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d116      	bne.n	800cde8 <create_chain+0x1e8>
		fs->last_clst = ncl;
 800cdba:	693b      	ldr	r3, [r7, #16]
 800cdbc:	69fa      	ldr	r2, [r7, #28]
 800cdbe:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800cdc0:	693b      	ldr	r3, [r7, #16]
 800cdc2:	69da      	ldr	r2, [r3, #28]
 800cdc4:	693b      	ldr	r3, [r7, #16]
 800cdc6:	6a1b      	ldr	r3, [r3, #32]
 800cdc8:	3b02      	subs	r3, #2
 800cdca:	429a      	cmp	r2, r3
 800cdcc:	d804      	bhi.n	800cdd8 <create_chain+0x1d8>
 800cdce:	693b      	ldr	r3, [r7, #16]
 800cdd0:	69db      	ldr	r3, [r3, #28]
 800cdd2:	1e5a      	subs	r2, r3, #1
 800cdd4:	693b      	ldr	r3, [r7, #16]
 800cdd6:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 800cdd8:	693b      	ldr	r3, [r7, #16]
 800cdda:	791b      	ldrb	r3, [r3, #4]
 800cddc:	f043 0301 	orr.w	r3, r3, #1
 800cde0:	b2da      	uxtb	r2, r3
 800cde2:	693b      	ldr	r3, [r7, #16]
 800cde4:	711a      	strb	r2, [r3, #4]
 800cde6:	e007      	b.n	800cdf8 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800cde8:	7dfb      	ldrb	r3, [r7, #23]
 800cdea:	2b01      	cmp	r3, #1
 800cdec:	d102      	bne.n	800cdf4 <create_chain+0x1f4>
 800cdee:	f04f 33ff 	mov.w	r3, #4294967295
 800cdf2:	e000      	b.n	800cdf6 <create_chain+0x1f6>
 800cdf4:	2301      	movs	r3, #1
 800cdf6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800cdf8:	69fb      	ldr	r3, [r7, #28]
}
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	3720      	adds	r7, #32
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	bd80      	pop	{r7, pc}

0800ce02 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ce02:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800ce06:	b088      	sub	sp, #32
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	60f8      	str	r0, [r7, #12]
 800ce0c:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce1a:	3304      	adds	r3, #4
 800ce1c:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ce1e:	697b      	ldr	r3, [r7, #20]
 800ce20:	899b      	ldrh	r3, [r3, #12]
 800ce22:	b29b      	uxth	r3, r3
 800ce24:	2200      	movs	r2, #0
 800ce26:	4698      	mov	r8, r3
 800ce28:	4691      	mov	r9, r2
 800ce2a:	4642      	mov	r2, r8
 800ce2c:	464b      	mov	r3, r9
 800ce2e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ce32:	f7f3 fa25 	bl	8000280 <__aeabi_uldivmod>
 800ce36:	4602      	mov	r2, r0
 800ce38:	460b      	mov	r3, r1
 800ce3a:	4610      	mov	r0, r2
 800ce3c:	4619      	mov	r1, r3
 800ce3e:	697b      	ldr	r3, [r7, #20]
 800ce40:	895b      	ldrh	r3, [r3, #10]
 800ce42:	b29b      	uxth	r3, r3
 800ce44:	2200      	movs	r2, #0
 800ce46:	461c      	mov	r4, r3
 800ce48:	4615      	mov	r5, r2
 800ce4a:	4622      	mov	r2, r4
 800ce4c:	462b      	mov	r3, r5
 800ce4e:	f7f3 fa17 	bl	8000280 <__aeabi_uldivmod>
 800ce52:	4602      	mov	r2, r0
 800ce54:	460b      	mov	r3, r1
 800ce56:	4613      	mov	r3, r2
 800ce58:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ce5a:	69bb      	ldr	r3, [r7, #24]
 800ce5c:	1d1a      	adds	r2, r3, #4
 800ce5e:	61ba      	str	r2, [r7, #24]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ce64:	693b      	ldr	r3, [r7, #16]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d101      	bne.n	800ce6e <clmt_clust+0x6c>
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	e010      	b.n	800ce90 <clmt_clust+0x8e>
		if (cl < ncl) break;	/* In this fragment? */
 800ce6e:	69fa      	ldr	r2, [r7, #28]
 800ce70:	693b      	ldr	r3, [r7, #16]
 800ce72:	429a      	cmp	r2, r3
 800ce74:	d307      	bcc.n	800ce86 <clmt_clust+0x84>
		cl -= ncl; tbl++;		/* Next fragment */
 800ce76:	69fa      	ldr	r2, [r7, #28]
 800ce78:	693b      	ldr	r3, [r7, #16]
 800ce7a:	1ad3      	subs	r3, r2, r3
 800ce7c:	61fb      	str	r3, [r7, #28]
 800ce7e:	69bb      	ldr	r3, [r7, #24]
 800ce80:	3304      	adds	r3, #4
 800ce82:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ce84:	e7e9      	b.n	800ce5a <clmt_clust+0x58>
		if (cl < ncl) break;	/* In this fragment? */
 800ce86:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ce88:	69bb      	ldr	r3, [r7, #24]
 800ce8a:	681a      	ldr	r2, [r3, #0]
 800ce8c:	69fb      	ldr	r3, [r7, #28]
 800ce8e:	4413      	add	r3, r2
}
 800ce90:	4618      	mov	r0, r3
 800ce92:	3720      	adds	r7, #32
 800ce94:	46bd      	mov	sp, r7
 800ce96:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800ce9a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800ce9a:	b580      	push	{r7, lr}
 800ce9c:	b086      	sub	sp, #24
 800ce9e:	af00      	add	r7, sp, #0
 800cea0:	6078      	str	r0, [r7, #4]
 800cea2:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800ceaa:	693b      	ldr	r3, [r7, #16]
 800ceac:	781b      	ldrb	r3, [r3, #0]
 800ceae:	2b04      	cmp	r3, #4
 800ceb0:	d102      	bne.n	800ceb8 <dir_sdi+0x1e>
 800ceb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ceb6:	e001      	b.n	800cebc <dir_sdi+0x22>
 800ceb8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800cebc:	683b      	ldr	r3, [r7, #0]
 800cebe:	429a      	cmp	r2, r3
 800cec0:	d904      	bls.n	800cecc <dir_sdi+0x32>
 800cec2:	683b      	ldr	r3, [r7, #0]
 800cec4:	f003 031f 	and.w	r3, r3, #31
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d001      	beq.n	800ced0 <dir_sdi+0x36>
		return FR_INT_ERR;
 800cecc:	2302      	movs	r3, #2
 800cece:	e074      	b.n	800cfba <dir_sdi+0x120>
	}
	dp->dptr = ofs;				/* Set current offset */
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	683a      	ldr	r2, [r7, #0]
 800ced4:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	689b      	ldr	r3, [r3, #8]
 800ceda:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800cedc:	697b      	ldr	r3, [r7, #20]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d109      	bne.n	800cef6 <dir_sdi+0x5c>
 800cee2:	693b      	ldr	r3, [r7, #16]
 800cee4:	781b      	ldrb	r3, [r3, #0]
 800cee6:	2b02      	cmp	r3, #2
 800cee8:	d905      	bls.n	800cef6 <dir_sdi+0x5c>
		clst = fs->dirbase;
 800ceea:	693b      	ldr	r3, [r7, #16]
 800ceec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ceee:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2200      	movs	r2, #0
 800cef4:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800cef6:	697b      	ldr	r3, [r7, #20]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d10c      	bne.n	800cf16 <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800cefc:	683b      	ldr	r3, [r7, #0]
 800cefe:	095b      	lsrs	r3, r3, #5
 800cf00:	693a      	ldr	r2, [r7, #16]
 800cf02:	8912      	ldrh	r2, [r2, #8]
 800cf04:	4293      	cmp	r3, r2
 800cf06:	d301      	bcc.n	800cf0c <dir_sdi+0x72>
 800cf08:	2302      	movs	r3, #2
 800cf0a:	e056      	b.n	800cfba <dir_sdi+0x120>
		dp->sect = fs->dirbase;
 800cf0c:	693b      	ldr	r3, [r7, #16]
 800cf0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	639a      	str	r2, [r3, #56]	; 0x38
 800cf14:	e02d      	b.n	800cf72 <dir_sdi+0xd8>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800cf16:	693b      	ldr	r3, [r7, #16]
 800cf18:	895b      	ldrh	r3, [r3, #10]
 800cf1a:	461a      	mov	r2, r3
 800cf1c:	693b      	ldr	r3, [r7, #16]
 800cf1e:	899b      	ldrh	r3, [r3, #12]
 800cf20:	fb02 f303 	mul.w	r3, r2, r3
 800cf24:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cf26:	e019      	b.n	800cf5c <dir_sdi+0xc2>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	6979      	ldr	r1, [r7, #20]
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	f7ff f9e1 	bl	800c2f4 <get_fat>
 800cf32:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cf34:	697b      	ldr	r3, [r7, #20]
 800cf36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf3a:	d101      	bne.n	800cf40 <dir_sdi+0xa6>
 800cf3c:	2301      	movs	r3, #1
 800cf3e:	e03c      	b.n	800cfba <dir_sdi+0x120>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800cf40:	697b      	ldr	r3, [r7, #20]
 800cf42:	2b01      	cmp	r3, #1
 800cf44:	d904      	bls.n	800cf50 <dir_sdi+0xb6>
 800cf46:	693b      	ldr	r3, [r7, #16]
 800cf48:	6a1b      	ldr	r3, [r3, #32]
 800cf4a:	697a      	ldr	r2, [r7, #20]
 800cf4c:	429a      	cmp	r2, r3
 800cf4e:	d301      	bcc.n	800cf54 <dir_sdi+0xba>
 800cf50:	2302      	movs	r3, #2
 800cf52:	e032      	b.n	800cfba <dir_sdi+0x120>
			ofs -= csz;
 800cf54:	683a      	ldr	r2, [r7, #0]
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	1ad3      	subs	r3, r2, r3
 800cf5a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cf5c:	683a      	ldr	r2, [r7, #0]
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	429a      	cmp	r2, r3
 800cf62:	d2e1      	bcs.n	800cf28 <dir_sdi+0x8e>
		}
		dp->sect = clust2sect(fs, clst);
 800cf64:	6979      	ldr	r1, [r7, #20]
 800cf66:	6938      	ldr	r0, [r7, #16]
 800cf68:	f7ff f9a4 	bl	800c2b4 <clust2sect>
 800cf6c:	4602      	mov	r2, r0
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	697a      	ldr	r2, [r7, #20]
 800cf76:	635a      	str	r2, [r3, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d101      	bne.n	800cf84 <dir_sdi+0xea>
 800cf80:	2302      	movs	r3, #2
 800cf82:	e01a      	b.n	800cfba <dir_sdi+0x120>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf88:	693b      	ldr	r3, [r7, #16]
 800cf8a:	899b      	ldrh	r3, [r3, #12]
 800cf8c:	4619      	mov	r1, r3
 800cf8e:	683b      	ldr	r3, [r7, #0]
 800cf90:	fbb3 f3f1 	udiv	r3, r3, r1
 800cf94:	441a      	add	r2, r3
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800cf9a:	693b      	ldr	r3, [r7, #16]
 800cf9c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800cfa0:	693b      	ldr	r3, [r7, #16]
 800cfa2:	899b      	ldrh	r3, [r3, #12]
 800cfa4:	461a      	mov	r2, r3
 800cfa6:	683b      	ldr	r3, [r7, #0]
 800cfa8:	fbb3 f0f2 	udiv	r0, r3, r2
 800cfac:	fb00 f202 	mul.w	r2, r0, r2
 800cfb0:	1a9b      	subs	r3, r3, r2
 800cfb2:	18ca      	adds	r2, r1, r3
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800cfb8:	2300      	movs	r3, #0
}
 800cfba:	4618      	mov	r0, r3
 800cfbc:	3718      	adds	r7, #24
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	bd80      	pop	{r7, pc}

0800cfc2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800cfc2:	b580      	push	{r7, lr}
 800cfc4:	b086      	sub	sp, #24
 800cfc6:	af00      	add	r7, sp, #0
 800cfc8:	6078      	str	r0, [r7, #4]
 800cfca:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfd6:	3320      	adds	r3, #32
 800cfd8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d00b      	beq.n	800cffa <dir_next+0x38>
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	781b      	ldrb	r3, [r3, #0]
 800cfe6:	2b04      	cmp	r3, #4
 800cfe8:	d102      	bne.n	800cff0 <dir_next+0x2e>
 800cfea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cfee:	e001      	b.n	800cff4 <dir_next+0x32>
 800cff0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800cff4:	68bb      	ldr	r3, [r7, #8]
 800cff6:	429a      	cmp	r2, r3
 800cff8:	d801      	bhi.n	800cffe <dir_next+0x3c>
 800cffa:	2304      	movs	r3, #4
 800cffc:	e0c3      	b.n	800d186 <dir_next+0x1c4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	899b      	ldrh	r3, [r3, #12]
 800d002:	461a      	mov	r2, r3
 800d004:	68bb      	ldr	r3, [r7, #8]
 800d006:	fbb3 f1f2 	udiv	r1, r3, r2
 800d00a:	fb01 f202 	mul.w	r2, r1, r2
 800d00e:	1a9b      	subs	r3, r3, r2
 800d010:	2b00      	cmp	r3, #0
 800d012:	f040 80a5 	bne.w	800d160 <dir_next+0x19e>
		dp->sect++;				/* Next sector */
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d01a:	1c5a      	adds	r2, r3, #1
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	639a      	str	r2, [r3, #56]	; 0x38

		if (!dp->clust) {		/* Static table */
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d024:	2b00      	cmp	r3, #0
 800d026:	d10b      	bne.n	800d040 <dir_next+0x7e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d028:	68bb      	ldr	r3, [r7, #8]
 800d02a:	095b      	lsrs	r3, r3, #5
 800d02c:	68fa      	ldr	r2, [r7, #12]
 800d02e:	8912      	ldrh	r2, [r2, #8]
 800d030:	4293      	cmp	r3, r2
 800d032:	f0c0 8095 	bcc.w	800d160 <dir_next+0x19e>
				dp->sect = 0; return FR_NO_FILE;
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	2200      	movs	r2, #0
 800d03a:	639a      	str	r2, [r3, #56]	; 0x38
 800d03c:	2304      	movs	r3, #4
 800d03e:	e0a2      	b.n	800d186 <dir_next+0x1c4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	899b      	ldrh	r3, [r3, #12]
 800d044:	461a      	mov	r2, r3
 800d046:	68bb      	ldr	r3, [r7, #8]
 800d048:	fbb3 f3f2 	udiv	r3, r3, r2
 800d04c:	68fa      	ldr	r2, [r7, #12]
 800d04e:	8952      	ldrh	r2, [r2, #10]
 800d050:	3a01      	subs	r2, #1
 800d052:	4013      	ands	r3, r2
 800d054:	2b00      	cmp	r3, #0
 800d056:	f040 8083 	bne.w	800d160 <dir_next+0x19e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d05a:	687a      	ldr	r2, [r7, #4]
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d060:	4619      	mov	r1, r3
 800d062:	4610      	mov	r0, r2
 800d064:	f7ff f946 	bl	800c2f4 <get_fat>
 800d068:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d06a:	697b      	ldr	r3, [r7, #20]
 800d06c:	2b01      	cmp	r3, #1
 800d06e:	d801      	bhi.n	800d074 <dir_next+0xb2>
 800d070:	2302      	movs	r3, #2
 800d072:	e088      	b.n	800d186 <dir_next+0x1c4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d074:	697b      	ldr	r3, [r7, #20]
 800d076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d07a:	d101      	bne.n	800d080 <dir_next+0xbe>
 800d07c:	2301      	movs	r3, #1
 800d07e:	e082      	b.n	800d186 <dir_next+0x1c4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	6a1b      	ldr	r3, [r3, #32]
 800d084:	697a      	ldr	r2, [r7, #20]
 800d086:	429a      	cmp	r2, r3
 800d088:	d360      	bcc.n	800d14c <dir_next+0x18a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800d08a:	683b      	ldr	r3, [r7, #0]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d104      	bne.n	800d09a <dir_next+0xd8>
						dp->sect = 0; return FR_NO_FILE;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	2200      	movs	r2, #0
 800d094:	639a      	str	r2, [r3, #56]	; 0x38
 800d096:	2304      	movs	r3, #4
 800d098:	e075      	b.n	800d186 <dir_next+0x1c4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800d09a:	687a      	ldr	r2, [r7, #4]
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0a0:	4619      	mov	r1, r3
 800d0a2:	4610      	mov	r0, r2
 800d0a4:	f7ff fdac 	bl	800cc00 <create_chain>
 800d0a8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d0aa:	697b      	ldr	r3, [r7, #20]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d101      	bne.n	800d0b4 <dir_next+0xf2>
 800d0b0:	2307      	movs	r3, #7
 800d0b2:	e068      	b.n	800d186 <dir_next+0x1c4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d0b4:	697b      	ldr	r3, [r7, #20]
 800d0b6:	2b01      	cmp	r3, #1
 800d0b8:	d101      	bne.n	800d0be <dir_next+0xfc>
 800d0ba:	2302      	movs	r3, #2
 800d0bc:	e063      	b.n	800d186 <dir_next+0x1c4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d0be:	697b      	ldr	r3, [r7, #20]
 800d0c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0c4:	d101      	bne.n	800d0ca <dir_next+0x108>
 800d0c6:	2301      	movs	r3, #1
 800d0c8:	e05d      	b.n	800d186 <dir_next+0x1c4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	79db      	ldrb	r3, [r3, #7]
 800d0ce:	f043 0304 	orr.w	r3, r3, #4
 800d0d2:	b2da      	uxtb	r2, r3
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d0d8:	68f8      	ldr	r0, [r7, #12]
 800d0da:	f7ff f809 	bl	800c0f0 <sync_window>
 800d0de:	4603      	mov	r3, r0
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d001      	beq.n	800d0e8 <dir_next+0x126>
 800d0e4:	2301      	movs	r3, #1
 800d0e6:	e04e      	b.n	800d186 <dir_next+0x1c4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	899b      	ldrh	r3, [r3, #12]
 800d0f2:	461a      	mov	r2, r3
 800d0f4:	2100      	movs	r1, #0
 800d0f6:	f7fe fe31 	bl	800bd5c <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	613b      	str	r3, [r7, #16]
 800d0fe:	6979      	ldr	r1, [r7, #20]
 800d100:	68f8      	ldr	r0, [r7, #12]
 800d102:	f7ff f8d7 	bl	800c2b4 <clust2sect>
 800d106:	4602      	mov	r2, r0
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	639a      	str	r2, [r3, #56]	; 0x38
 800d10c:	e012      	b.n	800d134 <dir_next+0x172>
						fs->wflag = 1;
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	2201      	movs	r2, #1
 800d112:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800d114:	68f8      	ldr	r0, [r7, #12]
 800d116:	f7fe ffeb 	bl	800c0f0 <sync_window>
 800d11a:	4603      	mov	r3, r0
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d001      	beq.n	800d124 <dir_next+0x162>
 800d120:	2301      	movs	r3, #1
 800d122:	e030      	b.n	800d186 <dir_next+0x1c4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d124:	693b      	ldr	r3, [r7, #16]
 800d126:	3301      	adds	r3, #1
 800d128:	613b      	str	r3, [r7, #16]
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d12e:	1c5a      	adds	r2, r3, #1
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	639a      	str	r2, [r3, #56]	; 0x38
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	895b      	ldrh	r3, [r3, #10]
 800d138:	461a      	mov	r2, r3
 800d13a:	693b      	ldr	r3, [r7, #16]
 800d13c:	4293      	cmp	r3, r2
 800d13e:	d3e6      	bcc.n	800d10e <dir_next+0x14c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d144:	693b      	ldr	r3, [r7, #16]
 800d146:	1ad2      	subs	r2, r2, r3
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	697a      	ldr	r2, [r7, #20]
 800d150:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 800d152:	6979      	ldr	r1, [r7, #20]
 800d154:	68f8      	ldr	r0, [r7, #12]
 800d156:	f7ff f8ad 	bl	800c2b4 <clust2sect>
 800d15a:	4602      	mov	r2, r0
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	68ba      	ldr	r2, [r7, #8]
 800d164:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	899b      	ldrh	r3, [r3, #12]
 800d170:	461a      	mov	r2, r3
 800d172:	68bb      	ldr	r3, [r7, #8]
 800d174:	fbb3 f0f2 	udiv	r0, r3, r2
 800d178:	fb00 f202 	mul.w	r2, r0, r2
 800d17c:	1a9b      	subs	r3, r3, r2
 800d17e:	18ca      	adds	r2, r1, r3
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800d184:	2300      	movs	r3, #0
}
 800d186:	4618      	mov	r0, r3
 800d188:	3718      	adds	r7, #24
 800d18a:	46bd      	mov	sp, r7
 800d18c:	bd80      	pop	{r7, pc}

0800d18e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800d18e:	b580      	push	{r7, lr}
 800d190:	b086      	sub	sp, #24
 800d192:	af00      	add	r7, sp, #0
 800d194:	6078      	str	r0, [r7, #4]
 800d196:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800d19e:	2100      	movs	r1, #0
 800d1a0:	6878      	ldr	r0, [r7, #4]
 800d1a2:	f7ff fe7a 	bl	800ce9a <dir_sdi>
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d1aa:	7dfb      	ldrb	r3, [r7, #23]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d140      	bne.n	800d232 <dir_alloc+0xa4>
		n = 0;
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1b8:	4619      	mov	r1, r3
 800d1ba:	68f8      	ldr	r0, [r7, #12]
 800d1bc:	f7fe ffdc 	bl	800c178 <move_window>
 800d1c0:	4603      	mov	r3, r0
 800d1c2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d1c4:	7dfb      	ldrb	r3, [r7, #23]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d132      	bne.n	800d230 <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	781b      	ldrb	r3, [r3, #0]
 800d1ce:	2b04      	cmp	r3, #4
 800d1d0:	d108      	bne.n	800d1e4 <dir_alloc+0x56>
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1d6:	781b      	ldrb	r3, [r3, #0]
 800d1d8:	b25b      	sxtb	r3, r3
 800d1da:	43db      	mvns	r3, r3
 800d1dc:	b2db      	uxtb	r3, r3
 800d1de:	09db      	lsrs	r3, r3, #7
 800d1e0:	b2db      	uxtb	r3, r3
 800d1e2:	e00f      	b.n	800d204 <dir_alloc+0x76>
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1e8:	781b      	ldrb	r3, [r3, #0]
 800d1ea:	2be5      	cmp	r3, #229	; 0xe5
 800d1ec:	d004      	beq.n	800d1f8 <dir_alloc+0x6a>
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1f2:	781b      	ldrb	r3, [r3, #0]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d101      	bne.n	800d1fc <dir_alloc+0x6e>
 800d1f8:	2301      	movs	r3, #1
 800d1fa:	e000      	b.n	800d1fe <dir_alloc+0x70>
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	f003 0301 	and.w	r3, r3, #1
 800d202:	b2db      	uxtb	r3, r3
 800d204:	2b00      	cmp	r3, #0
 800d206:	d007      	beq.n	800d218 <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800d208:	693b      	ldr	r3, [r7, #16]
 800d20a:	3301      	adds	r3, #1
 800d20c:	613b      	str	r3, [r7, #16]
 800d20e:	693a      	ldr	r2, [r7, #16]
 800d210:	683b      	ldr	r3, [r7, #0]
 800d212:	429a      	cmp	r2, r3
 800d214:	d102      	bne.n	800d21c <dir_alloc+0x8e>
 800d216:	e00c      	b.n	800d232 <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800d218:	2300      	movs	r3, #0
 800d21a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800d21c:	2101      	movs	r1, #1
 800d21e:	6878      	ldr	r0, [r7, #4]
 800d220:	f7ff fecf 	bl	800cfc2 <dir_next>
 800d224:	4603      	mov	r3, r0
 800d226:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800d228:	7dfb      	ldrb	r3, [r7, #23]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d0c2      	beq.n	800d1b4 <dir_alloc+0x26>
 800d22e:	e000      	b.n	800d232 <dir_alloc+0xa4>
			if (res != FR_OK) break;
 800d230:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d232:	7dfb      	ldrb	r3, [r7, #23]
 800d234:	2b04      	cmp	r3, #4
 800d236:	d101      	bne.n	800d23c <dir_alloc+0xae>
 800d238:	2307      	movs	r3, #7
 800d23a:	75fb      	strb	r3, [r7, #23]
	return res;
 800d23c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d23e:	4618      	mov	r0, r3
 800d240:	3718      	adds	r7, #24
 800d242:	46bd      	mov	sp, r7
 800d244:	bd80      	pop	{r7, pc}

0800d246 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800d246:	b580      	push	{r7, lr}
 800d248:	b084      	sub	sp, #16
 800d24a:	af00      	add	r7, sp, #0
 800d24c:	6078      	str	r0, [r7, #4]
 800d24e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800d250:	683b      	ldr	r3, [r7, #0]
 800d252:	331a      	adds	r3, #26
 800d254:	4618      	mov	r0, r3
 800d256:	f7fe fb7b 	bl	800b950 <ld_word>
 800d25a:	4603      	mov	r3, r0
 800d25c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	781b      	ldrb	r3, [r3, #0]
 800d262:	2b03      	cmp	r3, #3
 800d264:	d109      	bne.n	800d27a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d266:	683b      	ldr	r3, [r7, #0]
 800d268:	3314      	adds	r3, #20
 800d26a:	4618      	mov	r0, r3
 800d26c:	f7fe fb70 	bl	800b950 <ld_word>
 800d270:	4603      	mov	r3, r0
 800d272:	041b      	lsls	r3, r3, #16
 800d274:	68fa      	ldr	r2, [r7, #12]
 800d276:	4313      	orrs	r3, r2
 800d278:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800d27a:	68fb      	ldr	r3, [r7, #12]
}
 800d27c:	4618      	mov	r0, r3
 800d27e:	3710      	adds	r7, #16
 800d280:	46bd      	mov	sp, r7
 800d282:	bd80      	pop	{r7, pc}

0800d284 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d284:	b580      	push	{r7, lr}
 800d286:	b084      	sub	sp, #16
 800d288:	af00      	add	r7, sp, #0
 800d28a:	60f8      	str	r0, [r7, #12]
 800d28c:	60b9      	str	r1, [r7, #8]
 800d28e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d290:	68bb      	ldr	r3, [r7, #8]
 800d292:	331a      	adds	r3, #26
 800d294:	687a      	ldr	r2, [r7, #4]
 800d296:	b292      	uxth	r2, r2
 800d298:	4611      	mov	r1, r2
 800d29a:	4618      	mov	r0, r3
 800d29c:	f7fe fc6e 	bl	800bb7c <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	781b      	ldrb	r3, [r3, #0]
 800d2a4:	2b03      	cmp	r3, #3
 800d2a6:	d109      	bne.n	800d2bc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d2a8:	68bb      	ldr	r3, [r7, #8]
 800d2aa:	f103 0214 	add.w	r2, r3, #20
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	0c1b      	lsrs	r3, r3, #16
 800d2b2:	b29b      	uxth	r3, r3
 800d2b4:	4619      	mov	r1, r3
 800d2b6:	4610      	mov	r0, r2
 800d2b8:	f7fe fc60 	bl	800bb7c <st_word>
	}
}
 800d2bc:	bf00      	nop
 800d2be:	3710      	adds	r7, #16
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	bd80      	pop	{r7, pc}

0800d2c4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800d2c4:	b590      	push	{r4, r7, lr}
 800d2c6:	b087      	sub	sp, #28
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	6078      	str	r0, [r7, #4]
 800d2cc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800d2ce:	683b      	ldr	r3, [r7, #0]
 800d2d0:	331a      	adds	r3, #26
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	f7fe fb3c 	bl	800b950 <ld_word>
 800d2d8:	4603      	mov	r3, r0
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d001      	beq.n	800d2e2 <cmp_lfn+0x1e>
 800d2de:	2300      	movs	r3, #0
 800d2e0:	e059      	b.n	800d396 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800d2e2:	683b      	ldr	r3, [r7, #0]
 800d2e4:	781b      	ldrb	r3, [r3, #0]
 800d2e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d2ea:	1e5a      	subs	r2, r3, #1
 800d2ec:	4613      	mov	r3, r2
 800d2ee:	005b      	lsls	r3, r3, #1
 800d2f0:	4413      	add	r3, r2
 800d2f2:	009b      	lsls	r3, r3, #2
 800d2f4:	4413      	add	r3, r2
 800d2f6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d2f8:	2301      	movs	r3, #1
 800d2fa:	81fb      	strh	r3, [r7, #14]
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	613b      	str	r3, [r7, #16]
 800d300:	e033      	b.n	800d36a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800d302:	4a27      	ldr	r2, [pc, #156]	; (800d3a0 <cmp_lfn+0xdc>)
 800d304:	693b      	ldr	r3, [r7, #16]
 800d306:	4413      	add	r3, r2
 800d308:	781b      	ldrb	r3, [r3, #0]
 800d30a:	461a      	mov	r2, r3
 800d30c:	683b      	ldr	r3, [r7, #0]
 800d30e:	4413      	add	r3, r2
 800d310:	4618      	mov	r0, r3
 800d312:	f7fe fb1d 	bl	800b950 <ld_word>
 800d316:	4603      	mov	r3, r0
 800d318:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800d31a:	89fb      	ldrh	r3, [r7, #14]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d01a      	beq.n	800d356 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800d320:	697b      	ldr	r3, [r7, #20]
 800d322:	2bfe      	cmp	r3, #254	; 0xfe
 800d324:	d812      	bhi.n	800d34c <cmp_lfn+0x88>
 800d326:	89bb      	ldrh	r3, [r7, #12]
 800d328:	4618      	mov	r0, r3
 800d32a:	f003 f8c7 	bl	80104bc <ff_wtoupper>
 800d32e:	4603      	mov	r3, r0
 800d330:	461c      	mov	r4, r3
 800d332:	697b      	ldr	r3, [r7, #20]
 800d334:	1c5a      	adds	r2, r3, #1
 800d336:	617a      	str	r2, [r7, #20]
 800d338:	005b      	lsls	r3, r3, #1
 800d33a:	687a      	ldr	r2, [r7, #4]
 800d33c:	4413      	add	r3, r2
 800d33e:	881b      	ldrh	r3, [r3, #0]
 800d340:	4618      	mov	r0, r3
 800d342:	f003 f8bb 	bl	80104bc <ff_wtoupper>
 800d346:	4603      	mov	r3, r0
 800d348:	429c      	cmp	r4, r3
 800d34a:	d001      	beq.n	800d350 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800d34c:	2300      	movs	r3, #0
 800d34e:	e022      	b.n	800d396 <cmp_lfn+0xd2>
			}
			wc = uc;
 800d350:	89bb      	ldrh	r3, [r7, #12]
 800d352:	81fb      	strh	r3, [r7, #14]
 800d354:	e006      	b.n	800d364 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d356:	89bb      	ldrh	r3, [r7, #12]
 800d358:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d35c:	4293      	cmp	r3, r2
 800d35e:	d001      	beq.n	800d364 <cmp_lfn+0xa0>
 800d360:	2300      	movs	r3, #0
 800d362:	e018      	b.n	800d396 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d364:	693b      	ldr	r3, [r7, #16]
 800d366:	3301      	adds	r3, #1
 800d368:	613b      	str	r3, [r7, #16]
 800d36a:	693b      	ldr	r3, [r7, #16]
 800d36c:	2b0c      	cmp	r3, #12
 800d36e:	d9c8      	bls.n	800d302 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800d370:	683b      	ldr	r3, [r7, #0]
 800d372:	781b      	ldrb	r3, [r3, #0]
 800d374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d00b      	beq.n	800d394 <cmp_lfn+0xd0>
 800d37c:	89fb      	ldrh	r3, [r7, #14]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d008      	beq.n	800d394 <cmp_lfn+0xd0>
 800d382:	697b      	ldr	r3, [r7, #20]
 800d384:	005b      	lsls	r3, r3, #1
 800d386:	687a      	ldr	r2, [r7, #4]
 800d388:	4413      	add	r3, r2
 800d38a:	881b      	ldrh	r3, [r3, #0]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d001      	beq.n	800d394 <cmp_lfn+0xd0>
 800d390:	2300      	movs	r3, #0
 800d392:	e000      	b.n	800d396 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800d394:	2301      	movs	r3, #1
}
 800d396:	4618      	mov	r0, r3
 800d398:	371c      	adds	r7, #28
 800d39a:	46bd      	mov	sp, r7
 800d39c:	bd90      	pop	{r4, r7, pc}
 800d39e:	bf00      	nop
 800d3a0:	08012210 	.word	0x08012210

0800d3a4 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800d3a4:	b580      	push	{r7, lr}
 800d3a6:	b086      	sub	sp, #24
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	6078      	str	r0, [r7, #4]
 800d3ac:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800d3ae:	683b      	ldr	r3, [r7, #0]
 800d3b0:	331a      	adds	r3, #26
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	f7fe facc 	bl	800b950 <ld_word>
 800d3b8:	4603      	mov	r3, r0
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d001      	beq.n	800d3c2 <pick_lfn+0x1e>
 800d3be:	2300      	movs	r3, #0
 800d3c0:	e04d      	b.n	800d45e <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800d3c2:	683b      	ldr	r3, [r7, #0]
 800d3c4:	781b      	ldrb	r3, [r3, #0]
 800d3c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d3ca:	1e5a      	subs	r2, r3, #1
 800d3cc:	4613      	mov	r3, r2
 800d3ce:	005b      	lsls	r3, r3, #1
 800d3d0:	4413      	add	r3, r2
 800d3d2:	009b      	lsls	r3, r3, #2
 800d3d4:	4413      	add	r3, r2
 800d3d6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d3d8:	2301      	movs	r3, #1
 800d3da:	81fb      	strh	r3, [r7, #14]
 800d3dc:	2300      	movs	r3, #0
 800d3de:	613b      	str	r3, [r7, #16]
 800d3e0:	e028      	b.n	800d434 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800d3e2:	4a21      	ldr	r2, [pc, #132]	; (800d468 <pick_lfn+0xc4>)
 800d3e4:	693b      	ldr	r3, [r7, #16]
 800d3e6:	4413      	add	r3, r2
 800d3e8:	781b      	ldrb	r3, [r3, #0]
 800d3ea:	461a      	mov	r2, r3
 800d3ec:	683b      	ldr	r3, [r7, #0]
 800d3ee:	4413      	add	r3, r2
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	f7fe faad 	bl	800b950 <ld_word>
 800d3f6:	4603      	mov	r3, r0
 800d3f8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800d3fa:	89fb      	ldrh	r3, [r7, #14]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d00f      	beq.n	800d420 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800d400:	697b      	ldr	r3, [r7, #20]
 800d402:	2bfe      	cmp	r3, #254	; 0xfe
 800d404:	d901      	bls.n	800d40a <pick_lfn+0x66>
 800d406:	2300      	movs	r3, #0
 800d408:	e029      	b.n	800d45e <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800d40a:	89bb      	ldrh	r3, [r7, #12]
 800d40c:	81fb      	strh	r3, [r7, #14]
 800d40e:	697b      	ldr	r3, [r7, #20]
 800d410:	1c5a      	adds	r2, r3, #1
 800d412:	617a      	str	r2, [r7, #20]
 800d414:	005b      	lsls	r3, r3, #1
 800d416:	687a      	ldr	r2, [r7, #4]
 800d418:	4413      	add	r3, r2
 800d41a:	89fa      	ldrh	r2, [r7, #14]
 800d41c:	801a      	strh	r2, [r3, #0]
 800d41e:	e006      	b.n	800d42e <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d420:	89bb      	ldrh	r3, [r7, #12]
 800d422:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d426:	4293      	cmp	r3, r2
 800d428:	d001      	beq.n	800d42e <pick_lfn+0x8a>
 800d42a:	2300      	movs	r3, #0
 800d42c:	e017      	b.n	800d45e <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d42e:	693b      	ldr	r3, [r7, #16]
 800d430:	3301      	adds	r3, #1
 800d432:	613b      	str	r3, [r7, #16]
 800d434:	693b      	ldr	r3, [r7, #16]
 800d436:	2b0c      	cmp	r3, #12
 800d438:	d9d3      	bls.n	800d3e2 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800d43a:	683b      	ldr	r3, [r7, #0]
 800d43c:	781b      	ldrb	r3, [r3, #0]
 800d43e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d442:	2b00      	cmp	r3, #0
 800d444:	d00a      	beq.n	800d45c <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800d446:	697b      	ldr	r3, [r7, #20]
 800d448:	2bfe      	cmp	r3, #254	; 0xfe
 800d44a:	d901      	bls.n	800d450 <pick_lfn+0xac>
 800d44c:	2300      	movs	r3, #0
 800d44e:	e006      	b.n	800d45e <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800d450:	697b      	ldr	r3, [r7, #20]
 800d452:	005b      	lsls	r3, r3, #1
 800d454:	687a      	ldr	r2, [r7, #4]
 800d456:	4413      	add	r3, r2
 800d458:	2200      	movs	r2, #0
 800d45a:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800d45c:	2301      	movs	r3, #1
}
 800d45e:	4618      	mov	r0, r3
 800d460:	3718      	adds	r7, #24
 800d462:	46bd      	mov	sp, r7
 800d464:	bd80      	pop	{r7, pc}
 800d466:	bf00      	nop
 800d468:	08012210 	.word	0x08012210

0800d46c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b088      	sub	sp, #32
 800d470:	af00      	add	r7, sp, #0
 800d472:	60f8      	str	r0, [r7, #12]
 800d474:	60b9      	str	r1, [r7, #8]
 800d476:	4611      	mov	r1, r2
 800d478:	461a      	mov	r2, r3
 800d47a:	460b      	mov	r3, r1
 800d47c:	71fb      	strb	r3, [r7, #7]
 800d47e:	4613      	mov	r3, r2
 800d480:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800d482:	68bb      	ldr	r3, [r7, #8]
 800d484:	330d      	adds	r3, #13
 800d486:	79ba      	ldrb	r2, [r7, #6]
 800d488:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800d48a:	68bb      	ldr	r3, [r7, #8]
 800d48c:	330b      	adds	r3, #11
 800d48e:	220f      	movs	r2, #15
 800d490:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800d492:	68bb      	ldr	r3, [r7, #8]
 800d494:	330c      	adds	r3, #12
 800d496:	2200      	movs	r2, #0
 800d498:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800d49a:	68bb      	ldr	r3, [r7, #8]
 800d49c:	331a      	adds	r3, #26
 800d49e:	2100      	movs	r1, #0
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	f7fe fb6b 	bl	800bb7c <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800d4a6:	79fb      	ldrb	r3, [r7, #7]
 800d4a8:	1e5a      	subs	r2, r3, #1
 800d4aa:	4613      	mov	r3, r2
 800d4ac:	005b      	lsls	r3, r3, #1
 800d4ae:	4413      	add	r3, r2
 800d4b0:	009b      	lsls	r3, r3, #2
 800d4b2:	4413      	add	r3, r2
 800d4b4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	82fb      	strh	r3, [r7, #22]
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d4be:	8afb      	ldrh	r3, [r7, #22]
 800d4c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d4c4:	4293      	cmp	r3, r2
 800d4c6:	d007      	beq.n	800d4d8 <put_lfn+0x6c>
 800d4c8:	69fb      	ldr	r3, [r7, #28]
 800d4ca:	1c5a      	adds	r2, r3, #1
 800d4cc:	61fa      	str	r2, [r7, #28]
 800d4ce:	005b      	lsls	r3, r3, #1
 800d4d0:	68fa      	ldr	r2, [r7, #12]
 800d4d2:	4413      	add	r3, r2
 800d4d4:	881b      	ldrh	r3, [r3, #0]
 800d4d6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800d4d8:	4a17      	ldr	r2, [pc, #92]	; (800d538 <put_lfn+0xcc>)
 800d4da:	69bb      	ldr	r3, [r7, #24]
 800d4dc:	4413      	add	r3, r2
 800d4de:	781b      	ldrb	r3, [r3, #0]
 800d4e0:	461a      	mov	r2, r3
 800d4e2:	68bb      	ldr	r3, [r7, #8]
 800d4e4:	4413      	add	r3, r2
 800d4e6:	8afa      	ldrh	r2, [r7, #22]
 800d4e8:	4611      	mov	r1, r2
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	f7fe fb46 	bl	800bb7c <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800d4f0:	8afb      	ldrh	r3, [r7, #22]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d102      	bne.n	800d4fc <put_lfn+0x90>
 800d4f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d4fa:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800d4fc:	69bb      	ldr	r3, [r7, #24]
 800d4fe:	3301      	adds	r3, #1
 800d500:	61bb      	str	r3, [r7, #24]
 800d502:	69bb      	ldr	r3, [r7, #24]
 800d504:	2b0c      	cmp	r3, #12
 800d506:	d9da      	bls.n	800d4be <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800d508:	8afb      	ldrh	r3, [r7, #22]
 800d50a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d50e:	4293      	cmp	r3, r2
 800d510:	d006      	beq.n	800d520 <put_lfn+0xb4>
 800d512:	69fb      	ldr	r3, [r7, #28]
 800d514:	005b      	lsls	r3, r3, #1
 800d516:	68fa      	ldr	r2, [r7, #12]
 800d518:	4413      	add	r3, r2
 800d51a:	881b      	ldrh	r3, [r3, #0]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d103      	bne.n	800d528 <put_lfn+0xbc>
 800d520:	79fb      	ldrb	r3, [r7, #7]
 800d522:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d526:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800d528:	68bb      	ldr	r3, [r7, #8]
 800d52a:	79fa      	ldrb	r2, [r7, #7]
 800d52c:	701a      	strb	r2, [r3, #0]
}
 800d52e:	bf00      	nop
 800d530:	3720      	adds	r7, #32
 800d532:	46bd      	mov	sp, r7
 800d534:	bd80      	pop	{r7, pc}
 800d536:	bf00      	nop
 800d538:	08012210 	.word	0x08012210

0800d53c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800d53c:	b580      	push	{r7, lr}
 800d53e:	b08c      	sub	sp, #48	; 0x30
 800d540:	af00      	add	r7, sp, #0
 800d542:	60f8      	str	r0, [r7, #12]
 800d544:	60b9      	str	r1, [r7, #8]
 800d546:	607a      	str	r2, [r7, #4]
 800d548:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800d54a:	220b      	movs	r2, #11
 800d54c:	68b9      	ldr	r1, [r7, #8]
 800d54e:	68f8      	ldr	r0, [r7, #12]
 800d550:	f7fe fbe3 	bl	800bd1a <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800d554:	683b      	ldr	r3, [r7, #0]
 800d556:	2b05      	cmp	r3, #5
 800d558:	d92b      	bls.n	800d5b2 <gen_numname+0x76>
		sr = seq;
 800d55a:	683b      	ldr	r3, [r7, #0]
 800d55c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800d55e:	e022      	b.n	800d5a6 <gen_numname+0x6a>
			wc = *lfn++;
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	1c9a      	adds	r2, r3, #2
 800d564:	607a      	str	r2, [r7, #4]
 800d566:	881b      	ldrh	r3, [r3, #0]
 800d568:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800d56a:	2300      	movs	r3, #0
 800d56c:	62bb      	str	r3, [r7, #40]	; 0x28
 800d56e:	e017      	b.n	800d5a0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800d570:	69fb      	ldr	r3, [r7, #28]
 800d572:	005a      	lsls	r2, r3, #1
 800d574:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d576:	f003 0301 	and.w	r3, r3, #1
 800d57a:	4413      	add	r3, r2
 800d57c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800d57e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d580:	085b      	lsrs	r3, r3, #1
 800d582:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800d584:	69fb      	ldr	r3, [r7, #28]
 800d586:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d005      	beq.n	800d59a <gen_numname+0x5e>
 800d58e:	69fb      	ldr	r3, [r7, #28]
 800d590:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800d594:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800d598:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800d59a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d59c:	3301      	adds	r3, #1
 800d59e:	62bb      	str	r3, [r7, #40]	; 0x28
 800d5a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5a2:	2b0f      	cmp	r3, #15
 800d5a4:	d9e4      	bls.n	800d570 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	881b      	ldrh	r3, [r3, #0]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d1d8      	bne.n	800d560 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800d5ae:	69fb      	ldr	r3, [r7, #28]
 800d5b0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800d5b2:	2307      	movs	r3, #7
 800d5b4:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800d5b6:	683b      	ldr	r3, [r7, #0]
 800d5b8:	b2db      	uxtb	r3, r3
 800d5ba:	f003 030f 	and.w	r3, r3, #15
 800d5be:	b2db      	uxtb	r3, r3
 800d5c0:	3330      	adds	r3, #48	; 0x30
 800d5c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800d5c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d5ca:	2b39      	cmp	r3, #57	; 0x39
 800d5cc:	d904      	bls.n	800d5d8 <gen_numname+0x9c>
 800d5ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d5d2:	3307      	adds	r3, #7
 800d5d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800d5d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5da:	1e5a      	subs	r2, r3, #1
 800d5dc:	62ba      	str	r2, [r7, #40]	; 0x28
 800d5de:	3330      	adds	r3, #48	; 0x30
 800d5e0:	443b      	add	r3, r7
 800d5e2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d5e6:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800d5ea:	683b      	ldr	r3, [r7, #0]
 800d5ec:	091b      	lsrs	r3, r3, #4
 800d5ee:	603b      	str	r3, [r7, #0]
	} while (seq);
 800d5f0:	683b      	ldr	r3, [r7, #0]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d1df      	bne.n	800d5b6 <gen_numname+0x7a>
	ns[i] = '~';
 800d5f6:	f107 0214 	add.w	r2, r7, #20
 800d5fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5fc:	4413      	add	r3, r2
 800d5fe:	227e      	movs	r2, #126	; 0x7e
 800d600:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800d602:	2300      	movs	r3, #0
 800d604:	627b      	str	r3, [r7, #36]	; 0x24
 800d606:	e002      	b.n	800d60e <gen_numname+0xd2>
 800d608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d60a:	3301      	adds	r3, #1
 800d60c:	627b      	str	r3, [r7, #36]	; 0x24
 800d60e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d612:	429a      	cmp	r2, r3
 800d614:	d205      	bcs.n	800d622 <gen_numname+0xe6>
 800d616:	68fa      	ldr	r2, [r7, #12]
 800d618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d61a:	4413      	add	r3, r2
 800d61c:	781b      	ldrb	r3, [r3, #0]
 800d61e:	2b20      	cmp	r3, #32
 800d620:	d1f2      	bne.n	800d608 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d624:	2b07      	cmp	r3, #7
 800d626:	d807      	bhi.n	800d638 <gen_numname+0xfc>
 800d628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d62a:	1c5a      	adds	r2, r3, #1
 800d62c:	62ba      	str	r2, [r7, #40]	; 0x28
 800d62e:	3330      	adds	r3, #48	; 0x30
 800d630:	443b      	add	r3, r7
 800d632:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800d636:	e000      	b.n	800d63a <gen_numname+0xfe>
 800d638:	2120      	movs	r1, #32
 800d63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d63c:	1c5a      	adds	r2, r3, #1
 800d63e:	627a      	str	r2, [r7, #36]	; 0x24
 800d640:	68fa      	ldr	r2, [r7, #12]
 800d642:	4413      	add	r3, r2
 800d644:	460a      	mov	r2, r1
 800d646:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800d648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d64a:	2b07      	cmp	r3, #7
 800d64c:	d9e9      	bls.n	800d622 <gen_numname+0xe6>
}
 800d64e:	bf00      	nop
 800d650:	bf00      	nop
 800d652:	3730      	adds	r7, #48	; 0x30
 800d654:	46bd      	mov	sp, r7
 800d656:	bd80      	pop	{r7, pc}

0800d658 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800d658:	b480      	push	{r7}
 800d65a:	b085      	sub	sp, #20
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800d660:	2300      	movs	r3, #0
 800d662:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800d664:	230b      	movs	r3, #11
 800d666:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800d668:	7bfb      	ldrb	r3, [r7, #15]
 800d66a:	b2da      	uxtb	r2, r3
 800d66c:	0852      	lsrs	r2, r2, #1
 800d66e:	01db      	lsls	r3, r3, #7
 800d670:	4313      	orrs	r3, r2
 800d672:	b2da      	uxtb	r2, r3
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	1c59      	adds	r1, r3, #1
 800d678:	6079      	str	r1, [r7, #4]
 800d67a:	781b      	ldrb	r3, [r3, #0]
 800d67c:	4413      	add	r3, r2
 800d67e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800d680:	68bb      	ldr	r3, [r7, #8]
 800d682:	3b01      	subs	r3, #1
 800d684:	60bb      	str	r3, [r7, #8]
 800d686:	68bb      	ldr	r3, [r7, #8]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d1ed      	bne.n	800d668 <sum_sfn+0x10>
	return sum;
 800d68c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d68e:	4618      	mov	r0, r3
 800d690:	3714      	adds	r7, #20
 800d692:	46bd      	mov	sp, r7
 800d694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d698:	4770      	bx	lr

0800d69a <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800d69a:	b480      	push	{r7}
 800d69c:	b087      	sub	sp, #28
 800d69e:	af00      	add	r7, sp, #0
 800d6a0:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	3301      	adds	r3, #1
 800d6a6:	781b      	ldrb	r3, [r3, #0]
 800d6a8:	3301      	adds	r3, #1
 800d6aa:	015b      	lsls	r3, r3, #5
 800d6ac:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	827b      	strh	r3, [r7, #18]
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	617b      	str	r3, [r7, #20]
 800d6b6:	e018      	b.n	800d6ea <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 800d6b8:	697b      	ldr	r3, [r7, #20]
 800d6ba:	2b02      	cmp	r3, #2
 800d6bc:	d103      	bne.n	800d6c6 <xdir_sum+0x2c>
			i++;
 800d6be:	697b      	ldr	r3, [r7, #20]
 800d6c0:	3301      	adds	r3, #1
 800d6c2:	617b      	str	r3, [r7, #20]
 800d6c4:	e00e      	b.n	800d6e4 <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800d6c6:	8a7b      	ldrh	r3, [r7, #18]
 800d6c8:	03db      	lsls	r3, r3, #15
 800d6ca:	b29a      	uxth	r2, r3
 800d6cc:	8a7b      	ldrh	r3, [r7, #18]
 800d6ce:	085b      	lsrs	r3, r3, #1
 800d6d0:	b29b      	uxth	r3, r3
 800d6d2:	4413      	add	r3, r2
 800d6d4:	b29a      	uxth	r2, r3
 800d6d6:	6879      	ldr	r1, [r7, #4]
 800d6d8:	697b      	ldr	r3, [r7, #20]
 800d6da:	440b      	add	r3, r1
 800d6dc:	781b      	ldrb	r3, [r3, #0]
 800d6de:	b29b      	uxth	r3, r3
 800d6e0:	4413      	add	r3, r2
 800d6e2:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 800d6e4:	697b      	ldr	r3, [r7, #20]
 800d6e6:	3301      	adds	r3, #1
 800d6e8:	617b      	str	r3, [r7, #20]
 800d6ea:	697a      	ldr	r2, [r7, #20]
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	429a      	cmp	r2, r3
 800d6f0:	d3e2      	bcc.n	800d6b8 <xdir_sum+0x1e>
		}
	}
	return sum;
 800d6f2:	8a7b      	ldrh	r3, [r7, #18]
}
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	371c      	adds	r7, #28
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6fe:	4770      	bx	lr

0800d700 <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 800d700:	b580      	push	{r7, lr}
 800d702:	b084      	sub	sp, #16
 800d704:	af00      	add	r7, sp, #0
 800d706:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 800d708:	2300      	movs	r3, #0
 800d70a:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800d70c:	e01f      	b.n	800d74e <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 800d70e:	89bb      	ldrh	r3, [r7, #12]
 800d710:	4618      	mov	r0, r3
 800d712:	f002 fed3 	bl	80104bc <ff_wtoupper>
 800d716:	4603      	mov	r3, r0
 800d718:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800d71a:	89fb      	ldrh	r3, [r7, #14]
 800d71c:	03db      	lsls	r3, r3, #15
 800d71e:	b29a      	uxth	r2, r3
 800d720:	89fb      	ldrh	r3, [r7, #14]
 800d722:	085b      	lsrs	r3, r3, #1
 800d724:	b29b      	uxth	r3, r3
 800d726:	4413      	add	r3, r2
 800d728:	b29a      	uxth	r2, r3
 800d72a:	89bb      	ldrh	r3, [r7, #12]
 800d72c:	b2db      	uxtb	r3, r3
 800d72e:	b29b      	uxth	r3, r3
 800d730:	4413      	add	r3, r2
 800d732:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800d734:	89fb      	ldrh	r3, [r7, #14]
 800d736:	03db      	lsls	r3, r3, #15
 800d738:	b29a      	uxth	r2, r3
 800d73a:	89fb      	ldrh	r3, [r7, #14]
 800d73c:	085b      	lsrs	r3, r3, #1
 800d73e:	b29b      	uxth	r3, r3
 800d740:	4413      	add	r3, r2
 800d742:	b29a      	uxth	r2, r3
 800d744:	89bb      	ldrh	r3, [r7, #12]
 800d746:	0a1b      	lsrs	r3, r3, #8
 800d748:	b29b      	uxth	r3, r3
 800d74a:	4413      	add	r3, r2
 800d74c:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	1c9a      	adds	r2, r3, #2
 800d752:	607a      	str	r2, [r7, #4]
 800d754:	881b      	ldrh	r3, [r3, #0]
 800d756:	81bb      	strh	r3, [r7, #12]
 800d758:	89bb      	ldrh	r3, [r7, #12]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d1d7      	bne.n	800d70e <xname_sum+0xe>
	}
	return sum;
 800d75e:	89fb      	ldrh	r3, [r7, #14]
}
 800d760:	4618      	mov	r0, r3
 800d762:	3710      	adds	r7, #16
 800d764:	46bd      	mov	sp, r7
 800d766:	bd80      	pop	{r7, pc}

0800d768 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 800d768:	b590      	push	{r4, r7, lr}
 800d76a:	b087      	sub	sp, #28
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	695b      	ldr	r3, [r3, #20]
 800d776:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	681a      	ldr	r2, [r3, #0]
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d780:	4619      	mov	r1, r3
 800d782:	4610      	mov	r0, r2
 800d784:	f7fe fcf8 	bl	800c178 <move_window>
 800d788:	4603      	mov	r3, r0
 800d78a:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800d78c:	7bfb      	ldrb	r3, [r7, #15]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d001      	beq.n	800d796 <load_xdir+0x2e>
 800d792:	7bfb      	ldrb	r3, [r7, #15]
 800d794:	e09f      	b.n	800d8d6 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d79a:	781b      	ldrb	r3, [r3, #0]
 800d79c:	2b85      	cmp	r3, #133	; 0x85
 800d79e:	d001      	beq.n	800d7a4 <load_xdir+0x3c>
 800d7a0:	2302      	movs	r3, #2
 800d7a2:	e098      	b.n	800d8d6 <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7a8:	2220      	movs	r2, #32
 800d7aa:	4619      	mov	r1, r3
 800d7ac:	6938      	ldr	r0, [r7, #16]
 800d7ae:	f7fe fab4 	bl	800bd1a <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800d7b2:	693b      	ldr	r3, [r7, #16]
 800d7b4:	3301      	adds	r3, #1
 800d7b6:	781b      	ldrb	r3, [r3, #0]
 800d7b8:	3301      	adds	r3, #1
 800d7ba:	015b      	lsls	r3, r3, #5
 800d7bc:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800d7be:	68bb      	ldr	r3, [r7, #8]
 800d7c0:	2b5f      	cmp	r3, #95	; 0x5f
 800d7c2:	d903      	bls.n	800d7cc <load_xdir+0x64>
 800d7c4:	68bb      	ldr	r3, [r7, #8]
 800d7c6:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800d7ca:	d901      	bls.n	800d7d0 <load_xdir+0x68>
 800d7cc:	2302      	movs	r3, #2
 800d7ce:	e082      	b.n	800d8d6 <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 800d7d0:	2100      	movs	r1, #0
 800d7d2:	6878      	ldr	r0, [r7, #4]
 800d7d4:	f7ff fbf5 	bl	800cfc2 <dir_next>
 800d7d8:	4603      	mov	r3, r0
 800d7da:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800d7dc:	7bfb      	ldrb	r3, [r7, #15]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d001      	beq.n	800d7e6 <load_xdir+0x7e>
 800d7e2:	7bfb      	ldrb	r3, [r7, #15]
 800d7e4:	e077      	b.n	800d8d6 <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	681a      	ldr	r2, [r3, #0]
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7ee:	4619      	mov	r1, r3
 800d7f0:	4610      	mov	r0, r2
 800d7f2:	f7fe fcc1 	bl	800c178 <move_window>
 800d7f6:	4603      	mov	r3, r0
 800d7f8:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800d7fa:	7bfb      	ldrb	r3, [r7, #15]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d001      	beq.n	800d804 <load_xdir+0x9c>
 800d800:	7bfb      	ldrb	r3, [r7, #15]
 800d802:	e068      	b.n	800d8d6 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d808:	781b      	ldrb	r3, [r3, #0]
 800d80a:	2bc0      	cmp	r3, #192	; 0xc0
 800d80c:	d001      	beq.n	800d812 <load_xdir+0xaa>
 800d80e:	2302      	movs	r3, #2
 800d810:	e061      	b.n	800d8d6 <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 800d812:	693b      	ldr	r3, [r7, #16]
 800d814:	f103 0020 	add.w	r0, r3, #32
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d81c:	2220      	movs	r2, #32
 800d81e:	4619      	mov	r1, r3
 800d820:	f7fe fa7b 	bl	800bd1a <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800d824:	693b      	ldr	r3, [r7, #16]
 800d826:	3323      	adds	r3, #35	; 0x23
 800d828:	781b      	ldrb	r3, [r3, #0]
 800d82a:	332c      	adds	r3, #44	; 0x2c
 800d82c:	4a2c      	ldr	r2, [pc, #176]	; (800d8e0 <load_xdir+0x178>)
 800d82e:	fba2 2303 	umull	r2, r3, r2, r3
 800d832:	08db      	lsrs	r3, r3, #3
 800d834:	015b      	lsls	r3, r3, #5
 800d836:	68ba      	ldr	r2, [r7, #8]
 800d838:	429a      	cmp	r2, r3
 800d83a:	d201      	bcs.n	800d840 <load_xdir+0xd8>
 800d83c:	2302      	movs	r3, #2
 800d83e:	e04a      	b.n	800d8d6 <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 800d840:	2340      	movs	r3, #64	; 0x40
 800d842:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 800d844:	2100      	movs	r1, #0
 800d846:	6878      	ldr	r0, [r7, #4]
 800d848:	f7ff fbbb 	bl	800cfc2 <dir_next>
 800d84c:	4603      	mov	r3, r0
 800d84e:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800d850:	7bfb      	ldrb	r3, [r7, #15]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d001      	beq.n	800d85a <load_xdir+0xf2>
 800d856:	7bfb      	ldrb	r3, [r7, #15]
 800d858:	e03d      	b.n	800d8d6 <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	681a      	ldr	r2, [r3, #0]
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d862:	4619      	mov	r1, r3
 800d864:	4610      	mov	r0, r2
 800d866:	f7fe fc87 	bl	800c178 <move_window>
 800d86a:	4603      	mov	r3, r0
 800d86c:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800d86e:	7bfb      	ldrb	r3, [r7, #15]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d001      	beq.n	800d878 <load_xdir+0x110>
 800d874:	7bfb      	ldrb	r3, [r7, #15]
 800d876:	e02e      	b.n	800d8d6 <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d87c:	781b      	ldrb	r3, [r3, #0]
 800d87e:	2bc1      	cmp	r3, #193	; 0xc1
 800d880:	d001      	beq.n	800d886 <load_xdir+0x11e>
 800d882:	2302      	movs	r3, #2
 800d884:	e027      	b.n	800d8d6 <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800d886:	697b      	ldr	r3, [r7, #20]
 800d888:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800d88c:	d208      	bcs.n	800d8a0 <load_xdir+0x138>
 800d88e:	693a      	ldr	r2, [r7, #16]
 800d890:	697b      	ldr	r3, [r7, #20]
 800d892:	18d0      	adds	r0, r2, r3
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d898:	2220      	movs	r2, #32
 800d89a:	4619      	mov	r1, r3
 800d89c:	f7fe fa3d 	bl	800bd1a <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 800d8a0:	697b      	ldr	r3, [r7, #20]
 800d8a2:	3320      	adds	r3, #32
 800d8a4:	617b      	str	r3, [r7, #20]
 800d8a6:	697a      	ldr	r2, [r7, #20]
 800d8a8:	68bb      	ldr	r3, [r7, #8]
 800d8aa:	429a      	cmp	r2, r3
 800d8ac:	d3ca      	bcc.n	800d844 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 800d8ae:	697b      	ldr	r3, [r7, #20]
 800d8b0:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800d8b4:	d80e      	bhi.n	800d8d4 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800d8b6:	6938      	ldr	r0, [r7, #16]
 800d8b8:	f7ff feef 	bl	800d69a <xdir_sum>
 800d8bc:	4603      	mov	r3, r0
 800d8be:	461c      	mov	r4, r3
 800d8c0:	693b      	ldr	r3, [r7, #16]
 800d8c2:	3302      	adds	r3, #2
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	f7fe f843 	bl	800b950 <ld_word>
 800d8ca:	4603      	mov	r3, r0
 800d8cc:	429c      	cmp	r4, r3
 800d8ce:	d001      	beq.n	800d8d4 <load_xdir+0x16c>
 800d8d0:	2302      	movs	r3, #2
 800d8d2:	e000      	b.n	800d8d6 <load_xdir+0x16e>
	}
	return FR_OK;
 800d8d4:	2300      	movs	r3, #0
}
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	371c      	adds	r7, #28
 800d8da:	46bd      	mov	sp, r7
 800d8dc:	bd90      	pop	{r4, r7, pc}
 800d8de:	bf00      	nop
 800d8e0:	88888889 	.word	0x88888889

0800d8e4 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 800d8e4:	b5b0      	push	{r4, r5, r7, lr}
 800d8e6:	b084      	sub	sp, #16
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	6078      	str	r0, [r7, #4]
 800d8ec:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 800d8ee:	6839      	ldr	r1, [r7, #0]
 800d8f0:	6808      	ldr	r0, [r1, #0]
 800d8f2:	6879      	ldr	r1, [r7, #4]
 800d8f4:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 800d8f6:	6839      	ldr	r1, [r7, #0]
 800d8f8:	6a08      	ldr	r0, [r1, #32]
 800d8fa:	6879      	ldr	r1, [r7, #4]
 800d8fc:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 800d8fe:	6839      	ldr	r1, [r7, #0]
 800d900:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800d902:	b2c8      	uxtb	r0, r1
 800d904:	6879      	ldr	r1, [r7, #4]
 800d906:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800d908:	6839      	ldr	r1, [r7, #0]
 800d90a:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800d90c:	2000      	movs	r0, #0
 800d90e:	460c      	mov	r4, r1
 800d910:	4605      	mov	r5, r0
 800d912:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800d916:	2300      	movs	r3, #0
 800d918:	6879      	ldr	r1, [r7, #4]
 800d91a:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 800d91e:	683b      	ldr	r3, [r7, #0]
 800d920:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d92a:	4619      	mov	r1, r3
 800d92c:	6878      	ldr	r0, [r7, #4]
 800d92e:	f7ff fab4 	bl	800ce9a <dir_sdi>
 800d932:	4603      	mov	r3, r0
 800d934:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d936:	7bfb      	ldrb	r3, [r7, #15]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d104      	bne.n	800d946 <load_obj_dir+0x62>
		res = load_xdir(dp);		/* Load the object's entry block */
 800d93c:	6878      	ldr	r0, [r7, #4]
 800d93e:	f7ff ff13 	bl	800d768 <load_xdir>
 800d942:	4603      	mov	r3, r0
 800d944:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800d946:	7bfb      	ldrb	r3, [r7, #15]
}
 800d948:	4618      	mov	r0, r3
 800d94a:	3710      	adds	r7, #16
 800d94c:	46bd      	mov	sp, r7
 800d94e:	bdb0      	pop	{r4, r5, r7, pc}

0800d950 <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 800d950:	b590      	push	{r4, r7, lr}
 800d952:	b087      	sub	sp, #28
 800d954:	af00      	add	r7, sp, #0
 800d956:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	695b      	ldr	r3, [r3, #20]
 800d95e:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	1c9c      	adds	r4, r3, #2
 800d964:	68f8      	ldr	r0, [r7, #12]
 800d966:	f7ff fe98 	bl	800d69a <xdir_sum>
 800d96a:	4603      	mov	r3, r0
 800d96c:	4619      	mov	r1, r3
 800d96e:	4620      	mov	r0, r4
 800d970:	f7fe f904 	bl	800bb7c <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	3301      	adds	r3, #1
 800d978:	781b      	ldrb	r3, [r3, #0]
 800d97a:	3301      	adds	r3, #1
 800d97c:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d982:	4619      	mov	r1, r3
 800d984:	6878      	ldr	r0, [r7, #4]
 800d986:	f7ff fa88 	bl	800ce9a <dir_sdi>
 800d98a:	4603      	mov	r3, r0
 800d98c:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800d98e:	e026      	b.n	800d9de <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	681a      	ldr	r2, [r3, #0]
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d998:	4619      	mov	r1, r3
 800d99a:	4610      	mov	r0, r2
 800d99c:	f7fe fbec 	bl	800c178 <move_window>
 800d9a0:	4603      	mov	r3, r0
 800d9a2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d9a4:	7dfb      	ldrb	r3, [r7, #23]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d11d      	bne.n	800d9e6 <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9ae:	2220      	movs	r2, #32
 800d9b0:	68f9      	ldr	r1, [r7, #12]
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	f7fe f9b1 	bl	800bd1a <mem_cpy>
		dp->obj.fs->wflag = 1;
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	2201      	movs	r2, #1
 800d9be:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 800d9c0:	693b      	ldr	r3, [r7, #16]
 800d9c2:	3b01      	subs	r3, #1
 800d9c4:	613b      	str	r3, [r7, #16]
 800d9c6:	693b      	ldr	r3, [r7, #16]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d00e      	beq.n	800d9ea <store_xdir+0x9a>
		dirb += SZDIRE;
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	3320      	adds	r3, #32
 800d9d0:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 800d9d2:	2100      	movs	r1, #0
 800d9d4:	6878      	ldr	r0, [r7, #4]
 800d9d6:	f7ff faf4 	bl	800cfc2 <dir_next>
 800d9da:	4603      	mov	r3, r0
 800d9dc:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800d9de:	7dfb      	ldrb	r3, [r7, #23]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d0d5      	beq.n	800d990 <store_xdir+0x40>
 800d9e4:	e002      	b.n	800d9ec <store_xdir+0x9c>
		if (res != FR_OK) break;
 800d9e6:	bf00      	nop
 800d9e8:	e000      	b.n	800d9ec <store_xdir+0x9c>
		if (--nent == 0) break;
 800d9ea:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 800d9ec:	7dfb      	ldrb	r3, [r7, #23]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d002      	beq.n	800d9f8 <store_xdir+0xa8>
 800d9f2:	7dfb      	ldrb	r3, [r7, #23]
 800d9f4:	2b01      	cmp	r3, #1
 800d9f6:	d101      	bne.n	800d9fc <store_xdir+0xac>
 800d9f8:	7dfb      	ldrb	r3, [r7, #23]
 800d9fa:	e000      	b.n	800d9fe <store_xdir+0xae>
 800d9fc:	2302      	movs	r3, #2
}
 800d9fe:	4618      	mov	r0, r3
 800da00:	371c      	adds	r7, #28
 800da02:	46bd      	mov	sp, r7
 800da04:	bd90      	pop	{r4, r7, pc}

0800da06 <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 800da06:	b590      	push	{r4, r7, lr}
 800da08:	b085      	sub	sp, #20
 800da0a:	af00      	add	r7, sp, #0
 800da0c:	6078      	str	r0, [r7, #4]
 800da0e:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 800da10:	2240      	movs	r2, #64	; 0x40
 800da12:	2100      	movs	r1, #0
 800da14:	6878      	ldr	r0, [r7, #4]
 800da16:	f7fe f9a1 	bl	800bd5c <mem_set>
	dirb[XDIR_Type] = 0x85;
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	2285      	movs	r2, #133	; 0x85
 800da1e:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	3320      	adds	r3, #32
 800da24:	22c0      	movs	r2, #192	; 0xc0
 800da26:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 800da28:	2300      	movs	r3, #0
 800da2a:	72bb      	strb	r3, [r7, #10]
 800da2c:	2301      	movs	r3, #1
 800da2e:	72fb      	strb	r3, [r7, #11]
 800da30:	2301      	movs	r3, #1
 800da32:	813b      	strh	r3, [r7, #8]
 800da34:	2340      	movs	r3, #64	; 0x40
 800da36:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	1c5a      	adds	r2, r3, #1
 800da3c:	60fa      	str	r2, [r7, #12]
 800da3e:	687a      	ldr	r2, [r7, #4]
 800da40:	4413      	add	r3, r2
 800da42:	22c1      	movs	r2, #193	; 0xc1
 800da44:	701a      	strb	r2, [r3, #0]
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	1c5a      	adds	r2, r3, #1
 800da4a:	60fa      	str	r2, [r7, #12]
 800da4c:	687a      	ldr	r2, [r7, #4]
 800da4e:	4413      	add	r3, r2
 800da50:	2200      	movs	r2, #0
 800da52:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 800da54:	893b      	ldrh	r3, [r7, #8]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d00b      	beq.n	800da72 <create_xdir+0x6c>
 800da5a:	7abb      	ldrb	r3, [r7, #10]
 800da5c:	005b      	lsls	r3, r3, #1
 800da5e:	683a      	ldr	r2, [r7, #0]
 800da60:	4413      	add	r3, r2
 800da62:	881b      	ldrh	r3, [r3, #0]
 800da64:	813b      	strh	r3, [r7, #8]
 800da66:	893b      	ldrh	r3, [r7, #8]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d002      	beq.n	800da72 <create_xdir+0x6c>
 800da6c:	7abb      	ldrb	r3, [r7, #10]
 800da6e:	3301      	adds	r3, #1
 800da70:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 800da72:	687a      	ldr	r2, [r7, #4]
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	4413      	add	r3, r2
 800da78:	893a      	ldrh	r2, [r7, #8]
 800da7a:	4611      	mov	r1, r2
 800da7c:	4618      	mov	r0, r3
 800da7e:	f7fe f87d 	bl	800bb7c <st_word>
		} while ((i += 2) % SZDIRE != 0);
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	3302      	adds	r3, #2
 800da86:	60fb      	str	r3, [r7, #12]
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	f003 031f 	and.w	r3, r3, #31
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d1e0      	bne.n	800da54 <create_xdir+0x4e>
		nb++;
 800da92:	7afb      	ldrb	r3, [r7, #11]
 800da94:	3301      	adds	r3, #1
 800da96:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 800da98:	7abb      	ldrb	r3, [r7, #10]
 800da9a:	005b      	lsls	r3, r3, #1
 800da9c:	683a      	ldr	r2, [r7, #0]
 800da9e:	4413      	add	r3, r2
 800daa0:	881b      	ldrh	r3, [r3, #0]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d1c8      	bne.n	800da38 <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	3323      	adds	r3, #35	; 0x23
 800daaa:	7aba      	ldrb	r2, [r7, #10]
 800daac:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	3301      	adds	r3, #1
 800dab2:	7afa      	ldrb	r2, [r7, #11]
 800dab4:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	f103 0424 	add.w	r4, r3, #36	; 0x24
 800dabc:	6838      	ldr	r0, [r7, #0]
 800dabe:	f7ff fe1f 	bl	800d700 <xname_sum>
 800dac2:	4603      	mov	r3, r0
 800dac4:	4619      	mov	r1, r3
 800dac6:	4620      	mov	r0, r4
 800dac8:	f7fe f858 	bl	800bb7c <st_word>
}
 800dacc:	bf00      	nop
 800dace:	3714      	adds	r7, #20
 800dad0:	46bd      	mov	sp, r7
 800dad2:	bd90      	pop	{r4, r7, pc}

0800dad4 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800dad4:	b580      	push	{r7, lr}
 800dad6:	b086      	sub	sp, #24
 800dad8:	af00      	add	r7, sp, #0
 800dada:	6078      	str	r0, [r7, #4]
 800dadc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800dade:	2304      	movs	r3, #4
 800dae0:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800dae8:	23ff      	movs	r3, #255	; 0xff
 800daea:	757b      	strb	r3, [r7, #21]
 800daec:	23ff      	movs	r3, #255	; 0xff
 800daee:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800daf0:	e09f      	b.n	800dc32 <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800daf6:	4619      	mov	r1, r3
 800daf8:	6938      	ldr	r0, [r7, #16]
 800dafa:	f7fe fb3d 	bl	800c178 <move_window>
 800dafe:	4603      	mov	r3, r0
 800db00:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800db02:	7dfb      	ldrb	r3, [r7, #23]
 800db04:	2b00      	cmp	r3, #0
 800db06:	f040 809a 	bne.w	800dc3e <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db0e:	781b      	ldrb	r3, [r3, #0]
 800db10:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800db12:	7dbb      	ldrb	r3, [r7, #22]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d102      	bne.n	800db1e <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800db18:	2304      	movs	r3, #4
 800db1a:	75fb      	strb	r3, [r7, #23]
 800db1c:	e096      	b.n	800dc4c <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800db1e:	693b      	ldr	r3, [r7, #16]
 800db20:	781b      	ldrb	r3, [r3, #0]
 800db22:	2b04      	cmp	r3, #4
 800db24:	d118      	bne.n	800db58 <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 800db26:	7dbb      	ldrb	r3, [r7, #22]
 800db28:	2b85      	cmp	r3, #133	; 0x85
 800db2a:	d179      	bne.n	800dc20 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800db34:	6878      	ldr	r0, [r7, #4]
 800db36:	f7ff fe17 	bl	800d768 <load_xdir>
 800db3a:	4603      	mov	r3, r0
 800db3c:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 800db3e:	7dfb      	ldrb	r3, [r7, #23]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d17e      	bne.n	800dc42 <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800db44:	693b      	ldr	r3, [r7, #16]
 800db46:	695b      	ldr	r3, [r3, #20]
 800db48:	3304      	adds	r3, #4
 800db4a:	781b      	ldrb	r3, [r3, #0]
 800db4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800db50:	b2da      	uxtb	r2, r3
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	719a      	strb	r2, [r3, #6]
					}
					break;
 800db56:	e074      	b.n	800dc42 <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db5c:	330b      	adds	r3, #11
 800db5e:	781b      	ldrb	r3, [r3, #0]
 800db60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800db64:	73fb      	strb	r3, [r7, #15]
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	7bfa      	ldrb	r2, [r7, #15]
 800db6a:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800db6c:	7dbb      	ldrb	r3, [r7, #22]
 800db6e:	2be5      	cmp	r3, #229	; 0xe5
 800db70:	d00e      	beq.n	800db90 <dir_read+0xbc>
 800db72:	7dbb      	ldrb	r3, [r7, #22]
 800db74:	2b2e      	cmp	r3, #46	; 0x2e
 800db76:	d00b      	beq.n	800db90 <dir_read+0xbc>
 800db78:	7bfb      	ldrb	r3, [r7, #15]
 800db7a:	f023 0320 	bic.w	r3, r3, #32
 800db7e:	2b08      	cmp	r3, #8
 800db80:	bf0c      	ite	eq
 800db82:	2301      	moveq	r3, #1
 800db84:	2300      	movne	r3, #0
 800db86:	b2db      	uxtb	r3, r3
 800db88:	461a      	mov	r2, r3
 800db8a:	683b      	ldr	r3, [r7, #0]
 800db8c:	4293      	cmp	r3, r2
 800db8e:	d002      	beq.n	800db96 <dir_read+0xc2>
				ord = 0xFF;
 800db90:	23ff      	movs	r3, #255	; 0xff
 800db92:	757b      	strb	r3, [r7, #21]
 800db94:	e044      	b.n	800dc20 <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800db96:	7bfb      	ldrb	r3, [r7, #15]
 800db98:	2b0f      	cmp	r3, #15
 800db9a:	d12f      	bne.n	800dbfc <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800db9c:	7dbb      	ldrb	r3, [r7, #22]
 800db9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d00d      	beq.n	800dbc2 <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dbaa:	7b5b      	ldrb	r3, [r3, #13]
 800dbac:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800dbae:	7dbb      	ldrb	r3, [r7, #22]
 800dbb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dbb4:	75bb      	strb	r3, [r7, #22]
 800dbb6:	7dbb      	ldrb	r3, [r7, #22]
 800dbb8:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800dbc2:	7dba      	ldrb	r2, [r7, #22]
 800dbc4:	7d7b      	ldrb	r3, [r7, #21]
 800dbc6:	429a      	cmp	r2, r3
 800dbc8:	d115      	bne.n	800dbf6 <dir_read+0x122>
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dbce:	330d      	adds	r3, #13
 800dbd0:	781b      	ldrb	r3, [r3, #0]
 800dbd2:	7d3a      	ldrb	r2, [r7, #20]
 800dbd4:	429a      	cmp	r2, r3
 800dbd6:	d10e      	bne.n	800dbf6 <dir_read+0x122>
 800dbd8:	693b      	ldr	r3, [r7, #16]
 800dbda:	691a      	ldr	r2, [r3, #16]
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dbe0:	4619      	mov	r1, r3
 800dbe2:	4610      	mov	r0, r2
 800dbe4:	f7ff fbde 	bl	800d3a4 <pick_lfn>
 800dbe8:	4603      	mov	r3, r0
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d003      	beq.n	800dbf6 <dir_read+0x122>
 800dbee:	7d7b      	ldrb	r3, [r7, #21]
 800dbf0:	3b01      	subs	r3, #1
 800dbf2:	b2db      	uxtb	r3, r3
 800dbf4:	e000      	b.n	800dbf8 <dir_read+0x124>
 800dbf6:	23ff      	movs	r3, #255	; 0xff
 800dbf8:	757b      	strb	r3, [r7, #21]
 800dbfa:	e011      	b.n	800dc20 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800dbfc:	7d7b      	ldrb	r3, [r7, #21]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d109      	bne.n	800dc16 <dir_read+0x142>
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc06:	4618      	mov	r0, r3
 800dc08:	f7ff fd26 	bl	800d658 <sum_sfn>
 800dc0c:	4603      	mov	r3, r0
 800dc0e:	461a      	mov	r2, r3
 800dc10:	7d3b      	ldrb	r3, [r7, #20]
 800dc12:	4293      	cmp	r3, r2
 800dc14:	d017      	beq.n	800dc46 <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	f04f 32ff 	mov.w	r2, #4294967295
 800dc1c:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 800dc1e:	e012      	b.n	800dc46 <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800dc20:	2100      	movs	r1, #0
 800dc22:	6878      	ldr	r0, [r7, #4]
 800dc24:	f7ff f9cd 	bl	800cfc2 <dir_next>
 800dc28:	4603      	mov	r3, r0
 800dc2a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800dc2c:	7dfb      	ldrb	r3, [r7, #23]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d10b      	bne.n	800dc4a <dir_read+0x176>
	while (dp->sect) {
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	f47f af5b 	bne.w	800daf2 <dir_read+0x1e>
 800dc3c:	e006      	b.n	800dc4c <dir_read+0x178>
		if (res != FR_OK) break;
 800dc3e:	bf00      	nop
 800dc40:	e004      	b.n	800dc4c <dir_read+0x178>
					break;
 800dc42:	bf00      	nop
 800dc44:	e002      	b.n	800dc4c <dir_read+0x178>
					break;
 800dc46:	bf00      	nop
 800dc48:	e000      	b.n	800dc4c <dir_read+0x178>
		if (res != FR_OK) break;
 800dc4a:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800dc4c:	7dfb      	ldrb	r3, [r7, #23]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d002      	beq.n	800dc58 <dir_read+0x184>
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	2200      	movs	r2, #0
 800dc56:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 800dc58:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	3718      	adds	r7, #24
 800dc5e:	46bd      	mov	sp, r7
 800dc60:	bd80      	pop	{r7, pc}

0800dc62 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800dc62:	b590      	push	{r4, r7, lr}
 800dc64:	b089      	sub	sp, #36	; 0x24
 800dc66:	af00      	add	r7, sp, #0
 800dc68:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800dc70:	2100      	movs	r1, #0
 800dc72:	6878      	ldr	r0, [r7, #4]
 800dc74:	f7ff f911 	bl	800ce9a <dir_sdi>
 800dc78:	4603      	mov	r3, r0
 800dc7a:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 800dc7c:	7ffb      	ldrb	r3, [r7, #31]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d001      	beq.n	800dc86 <dir_find+0x24>
 800dc82:	7ffb      	ldrb	r3, [r7, #31]
 800dc84:	e112      	b.n	800deac <dir_find+0x24a>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	781b      	ldrb	r3, [r3, #0]
 800dc8a:	2b04      	cmp	r3, #4
 800dc8c:	d164      	bne.n	800dd58 <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	691b      	ldr	r3, [r3, #16]
 800dc92:	4618      	mov	r0, r3
 800dc94:	f7ff fd34 	bl	800d700 <xname_sum>
 800dc98:	4603      	mov	r3, r0
 800dc9a:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800dc9c:	e04f      	b.n	800dd3e <dir_find+0xdc>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	695b      	ldr	r3, [r3, #20]
 800dca2:	3324      	adds	r3, #36	; 0x24
 800dca4:	4618      	mov	r0, r3
 800dca6:	f7fd fe53 	bl	800b950 <ld_word>
 800dcaa:	4603      	mov	r3, r0
 800dcac:	461a      	mov	r2, r3
 800dcae:	893b      	ldrh	r3, [r7, #8]
 800dcb0:	4293      	cmp	r3, r2
 800dcb2:	d000      	beq.n	800dcb6 <dir_find+0x54>
 800dcb4:	e043      	b.n	800dd3e <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	695b      	ldr	r3, [r3, #20]
 800dcba:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800dcbe:	76fb      	strb	r3, [r7, #27]
 800dcc0:	2340      	movs	r3, #64	; 0x40
 800dcc2:	617b      	str	r3, [r7, #20]
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	613b      	str	r3, [r7, #16]
 800dcc8:	e029      	b.n	800dd1e <dir_find+0xbc>
				if ((di % SZDIRE) == 0) di += 2;
 800dcca:	697b      	ldr	r3, [r7, #20]
 800dccc:	f003 031f 	and.w	r3, r3, #31
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d102      	bne.n	800dcda <dir_find+0x78>
 800dcd4:	697b      	ldr	r3, [r7, #20]
 800dcd6:	3302      	adds	r3, #2
 800dcd8:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	695a      	ldr	r2, [r3, #20]
 800dcde:	697b      	ldr	r3, [r7, #20]
 800dce0:	4413      	add	r3, r2
 800dce2:	4618      	mov	r0, r3
 800dce4:	f7fd fe34 	bl	800b950 <ld_word>
 800dce8:	4603      	mov	r3, r0
 800dcea:	4618      	mov	r0, r3
 800dcec:	f002 fbe6 	bl	80104bc <ff_wtoupper>
 800dcf0:	4603      	mov	r3, r0
 800dcf2:	461c      	mov	r4, r3
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	691a      	ldr	r2, [r3, #16]
 800dcf8:	693b      	ldr	r3, [r7, #16]
 800dcfa:	005b      	lsls	r3, r3, #1
 800dcfc:	4413      	add	r3, r2
 800dcfe:	881b      	ldrh	r3, [r3, #0]
 800dd00:	4618      	mov	r0, r3
 800dd02:	f002 fbdb 	bl	80104bc <ff_wtoupper>
 800dd06:	4603      	mov	r3, r0
 800dd08:	429c      	cmp	r4, r3
 800dd0a:	d10c      	bne.n	800dd26 <dir_find+0xc4>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800dd0c:	7efb      	ldrb	r3, [r7, #27]
 800dd0e:	3b01      	subs	r3, #1
 800dd10:	76fb      	strb	r3, [r7, #27]
 800dd12:	697b      	ldr	r3, [r7, #20]
 800dd14:	3302      	adds	r3, #2
 800dd16:	617b      	str	r3, [r7, #20]
 800dd18:	693b      	ldr	r3, [r7, #16]
 800dd1a:	3301      	adds	r3, #1
 800dd1c:	613b      	str	r3, [r7, #16]
 800dd1e:	7efb      	ldrb	r3, [r7, #27]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d1d2      	bne.n	800dcca <dir_find+0x68>
 800dd24:	e000      	b.n	800dd28 <dir_find+0xc6>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800dd26:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800dd28:	7efb      	ldrb	r3, [r7, #27]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d107      	bne.n	800dd3e <dir_find+0xdc>
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	691a      	ldr	r2, [r3, #16]
 800dd32:	693b      	ldr	r3, [r7, #16]
 800dd34:	005b      	lsls	r3, r3, #1
 800dd36:	4413      	add	r3, r2
 800dd38:	881b      	ldrh	r3, [r3, #0]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d009      	beq.n	800dd52 <dir_find+0xf0>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800dd3e:	2100      	movs	r1, #0
 800dd40:	6878      	ldr	r0, [r7, #4]
 800dd42:	f7ff fec7 	bl	800dad4 <dir_read>
 800dd46:	4603      	mov	r3, r0
 800dd48:	77fb      	strb	r3, [r7, #31]
 800dd4a:	7ffb      	ldrb	r3, [r7, #31]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d0a6      	beq.n	800dc9e <dir_find+0x3c>
 800dd50:	e000      	b.n	800dd54 <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800dd52:	bf00      	nop
		}
		return res;
 800dd54:	7ffb      	ldrb	r3, [r7, #31]
 800dd56:	e0a9      	b.n	800deac <dir_find+0x24a>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800dd58:	23ff      	movs	r3, #255	; 0xff
 800dd5a:	773b      	strb	r3, [r7, #28]
 800dd5c:	7f3b      	ldrb	r3, [r7, #28]
 800dd5e:	777b      	strb	r3, [r7, #29]
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	f04f 32ff 	mov.w	r2, #4294967295
 800dd66:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd6c:	4619      	mov	r1, r3
 800dd6e:	68f8      	ldr	r0, [r7, #12]
 800dd70:	f7fe fa02 	bl	800c178 <move_window>
 800dd74:	4603      	mov	r3, r0
 800dd76:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 800dd78:	7ffb      	ldrb	r3, [r7, #31]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	f040 8090 	bne.w	800dea0 <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd84:	781b      	ldrb	r3, [r3, #0]
 800dd86:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800dd88:	7fbb      	ldrb	r3, [r7, #30]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d102      	bne.n	800dd94 <dir_find+0x132>
 800dd8e:	2304      	movs	r3, #4
 800dd90:	77fb      	strb	r3, [r7, #31]
 800dd92:	e08a      	b.n	800deaa <dir_find+0x248>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd98:	330b      	adds	r3, #11
 800dd9a:	781b      	ldrb	r3, [r3, #0]
 800dd9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dda0:	72fb      	strb	r3, [r7, #11]
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	7afa      	ldrb	r2, [r7, #11]
 800dda6:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800dda8:	7fbb      	ldrb	r3, [r7, #30]
 800ddaa:	2be5      	cmp	r3, #229	; 0xe5
 800ddac:	d007      	beq.n	800ddbe <dir_find+0x15c>
 800ddae:	7afb      	ldrb	r3, [r7, #11]
 800ddb0:	f003 0308 	and.w	r3, r3, #8
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d009      	beq.n	800ddcc <dir_find+0x16a>
 800ddb8:	7afb      	ldrb	r3, [r7, #11]
 800ddba:	2b0f      	cmp	r3, #15
 800ddbc:	d006      	beq.n	800ddcc <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ddbe:	23ff      	movs	r3, #255	; 0xff
 800ddc0:	777b      	strb	r3, [r7, #29]
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	f04f 32ff 	mov.w	r2, #4294967295
 800ddc8:	64da      	str	r2, [r3, #76]	; 0x4c
 800ddca:	e05e      	b.n	800de8a <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800ddcc:	7afb      	ldrb	r3, [r7, #11]
 800ddce:	2b0f      	cmp	r3, #15
 800ddd0:	d136      	bne.n	800de40 <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800ddd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d154      	bne.n	800de8a <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800dde0:	7fbb      	ldrb	r3, [r7, #30]
 800dde2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d00d      	beq.n	800de06 <dir_find+0x1a4>
						sum = dp->dir[LDIR_Chksum];
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddee:	7b5b      	ldrb	r3, [r3, #13]
 800ddf0:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800ddf2:	7fbb      	ldrb	r3, [r7, #30]
 800ddf4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ddf8:	77bb      	strb	r3, [r7, #30]
 800ddfa:	7fbb      	ldrb	r3, [r7, #30]
 800ddfc:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800de06:	7fba      	ldrb	r2, [r7, #30]
 800de08:	7f7b      	ldrb	r3, [r7, #29]
 800de0a:	429a      	cmp	r2, r3
 800de0c:	d115      	bne.n	800de3a <dir_find+0x1d8>
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de12:	330d      	adds	r3, #13
 800de14:	781b      	ldrb	r3, [r3, #0]
 800de16:	7f3a      	ldrb	r2, [r7, #28]
 800de18:	429a      	cmp	r2, r3
 800de1a:	d10e      	bne.n	800de3a <dir_find+0x1d8>
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	691a      	ldr	r2, [r3, #16]
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de24:	4619      	mov	r1, r3
 800de26:	4610      	mov	r0, r2
 800de28:	f7ff fa4c 	bl	800d2c4 <cmp_lfn>
 800de2c:	4603      	mov	r3, r0
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d003      	beq.n	800de3a <dir_find+0x1d8>
 800de32:	7f7b      	ldrb	r3, [r7, #29]
 800de34:	3b01      	subs	r3, #1
 800de36:	b2db      	uxtb	r3, r3
 800de38:	e000      	b.n	800de3c <dir_find+0x1da>
 800de3a:	23ff      	movs	r3, #255	; 0xff
 800de3c:	777b      	strb	r3, [r7, #29]
 800de3e:	e024      	b.n	800de8a <dir_find+0x228>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800de40:	7f7b      	ldrb	r3, [r7, #29]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d109      	bne.n	800de5a <dir_find+0x1f8>
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de4a:	4618      	mov	r0, r3
 800de4c:	f7ff fc04 	bl	800d658 <sum_sfn>
 800de50:	4603      	mov	r3, r0
 800de52:	461a      	mov	r2, r3
 800de54:	7f3b      	ldrb	r3, [r7, #28]
 800de56:	4293      	cmp	r3, r2
 800de58:	d024      	beq.n	800dea4 <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800de60:	f003 0301 	and.w	r3, r3, #1
 800de64:	2b00      	cmp	r3, #0
 800de66:	d10a      	bne.n	800de7e <dir_find+0x21c>
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	3340      	adds	r3, #64	; 0x40
 800de70:	220b      	movs	r2, #11
 800de72:	4619      	mov	r1, r3
 800de74:	f7fd ff8d 	bl	800bd92 <mem_cmp>
 800de78:	4603      	mov	r3, r0
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d014      	beq.n	800dea8 <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800de7e:	23ff      	movs	r3, #255	; 0xff
 800de80:	777b      	strb	r3, [r7, #29]
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	f04f 32ff 	mov.w	r2, #4294967295
 800de88:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800de8a:	2100      	movs	r1, #0
 800de8c:	6878      	ldr	r0, [r7, #4]
 800de8e:	f7ff f898 	bl	800cfc2 <dir_next>
 800de92:	4603      	mov	r3, r0
 800de94:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 800de96:	7ffb      	ldrb	r3, [r7, #31]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	f43f af65 	beq.w	800dd68 <dir_find+0x106>
 800de9e:	e004      	b.n	800deaa <dir_find+0x248>
		if (res != FR_OK) break;
 800dea0:	bf00      	nop
 800dea2:	e002      	b.n	800deaa <dir_find+0x248>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800dea4:	bf00      	nop
 800dea6:	e000      	b.n	800deaa <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800dea8:	bf00      	nop

	return res;
 800deaa:	7ffb      	ldrb	r3, [r7, #31]
}
 800deac:	4618      	mov	r0, r3
 800deae:	3724      	adds	r7, #36	; 0x24
 800deb0:	46bd      	mov	sp, r7
 800deb2:	bd90      	pop	{r4, r7, pc}

0800deb4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800deb4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800deb8:	b0a0      	sub	sp, #128	; 0x80
 800deba:	af00      	add	r7, sp, #0
 800debc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	66fb      	str	r3, [r7, #108]	; 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800deca:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d001      	beq.n	800ded6 <dir_register+0x22>
 800ded2:	2306      	movs	r3, #6
 800ded4:	e192      	b.n	800e1fc <dir_register+0x348>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800ded6:	2300      	movs	r3, #0
 800ded8:	677b      	str	r3, [r7, #116]	; 0x74
 800deda:	e002      	b.n	800dee2 <dir_register+0x2e>
 800dedc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dede:	3301      	adds	r3, #1
 800dee0:	677b      	str	r3, [r7, #116]	; 0x74
 800dee2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dee4:	691a      	ldr	r2, [r3, #16]
 800dee6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dee8:	005b      	lsls	r3, r3, #1
 800deea:	4413      	add	r3, r2
 800deec:	881b      	ldrh	r3, [r3, #0]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d1f4      	bne.n	800dedc <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800def2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800def4:	781b      	ldrb	r3, [r3, #0]
 800def6:	2b04      	cmp	r3, #4
 800def8:	f040 80a3 	bne.w	800e042 <dir_register+0x18e>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800defc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800defe:	330e      	adds	r3, #14
 800df00:	4aa4      	ldr	r2, [pc, #656]	; (800e194 <dir_register+0x2e0>)
 800df02:	fba2 2303 	umull	r2, r3, r2, r3
 800df06:	08db      	lsrs	r3, r3, #3
 800df08:	3302      	adds	r3, #2
 800df0a:	673b      	str	r3, [r7, #112]	; 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 800df0c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800df0e:	6878      	ldr	r0, [r7, #4]
 800df10:	f7ff f93d 	bl	800d18e <dir_alloc>
 800df14:	4603      	mov	r3, r0
 800df16:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res != FR_OK) return res;
 800df1a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d002      	beq.n	800df28 <dir_register+0x74>
 800df22:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800df26:	e169      	b.n	800e1fc <dir_register+0x348>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800df2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800df2e:	3b01      	subs	r3, #1
 800df30:	015b      	lsls	r3, r3, #5
 800df32:	1ad2      	subs	r2, r2, r3
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	689b      	ldr	r3, [r3, #8]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d076      	beq.n	800e02e <dir_register+0x17a>
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	79db      	ldrb	r3, [r3, #7]
 800df44:	f003 0304 	and.w	r3, r3, #4
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d070      	beq.n	800e02e <dir_register+0x17a>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800df52:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800df54:	8949      	ldrh	r1, [r1, #10]
 800df56:	4608      	mov	r0, r1
 800df58:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800df5a:	8989      	ldrh	r1, [r1, #12]
 800df5c:	fb00 f101 	mul.w	r1, r0, r1
 800df60:	2000      	movs	r0, #0
 800df62:	460c      	mov	r4, r1
 800df64:	4605      	mov	r5, r0
 800df66:	eb12 0804 	adds.w	r8, r2, r4
 800df6a:	eb43 0905 	adc.w	r9, r3, r5
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	e9c3 8904 	strd	r8, r9, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	4618      	mov	r0, r3
 800df78:	f7fe fd2e 	bl	800c9d8 <fill_first_frag>
 800df7c:	4603      	mov	r3, r0
 800df7e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800df82:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800df86:	2b00      	cmp	r3, #0
 800df88:	d002      	beq.n	800df90 <dir_register+0xdc>
 800df8a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800df8e:	e135      	b.n	800e1fc <dir_register+0x348>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800df90:	6878      	ldr	r0, [r7, #4]
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df96:	f04f 32ff 	mov.w	r2, #4294967295
 800df9a:	4619      	mov	r1, r3
 800df9c:	f7fe fd4b 	bl	800ca36 <fill_last_frag>
 800dfa0:	4603      	mov	r3, r0
 800dfa2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800dfa6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d002      	beq.n	800dfb4 <dir_register+0x100>
 800dfae:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800dfb2:	e123      	b.n	800e1fc <dir_register+0x348>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 800dfb4:	687a      	ldr	r2, [r7, #4]
 800dfb6:	f107 0308 	add.w	r3, r7, #8
 800dfba:	4611      	mov	r1, r2
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	f7ff fc91 	bl	800d8e4 <load_obj_dir>
 800dfc2:	4603      	mov	r3, r0
 800dfc4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800dfc8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d002      	beq.n	800dfd6 <dir_register+0x122>
 800dfd0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800dfd4:	e112      	b.n	800e1fc <dir_register+0x348>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 800dfd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dfd8:	695b      	ldr	r3, [r3, #20]
 800dfda:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800dfe4:	4608      	mov	r0, r1
 800dfe6:	f7fd fe10 	bl	800bc0a <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800dfea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dfec:	695b      	ldr	r3, [r3, #20]
 800dfee:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800dff8:	4608      	mov	r0, r1
 800dffa:	f7fd fe06 	bl	800bc0a <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	79da      	ldrb	r2, [r3, #7]
 800e002:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e004:	695b      	ldr	r3, [r3, #20]
 800e006:	3321      	adds	r3, #33	; 0x21
 800e008:	f042 0201 	orr.w	r2, r2, #1
 800e00c:	b2d2      	uxtb	r2, r2
 800e00e:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 800e010:	f107 0308 	add.w	r3, r7, #8
 800e014:	4618      	mov	r0, r3
 800e016:	f7ff fc9b 	bl	800d950 <store_xdir>
 800e01a:	4603      	mov	r3, r0
 800e01c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800e020:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e024:	2b00      	cmp	r3, #0
 800e026:	d002      	beq.n	800e02e <dir_register+0x17a>
 800e028:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e02c:	e0e6      	b.n	800e1fc <dir_register+0x348>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800e02e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e030:	695a      	ldr	r2, [r3, #20]
 800e032:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e034:	691b      	ldr	r3, [r3, #16]
 800e036:	4619      	mov	r1, r3
 800e038:	4610      	mov	r0, r2
 800e03a:	f7ff fce4 	bl	800da06 <create_xdir>
		return FR_OK;
 800e03e:	2300      	movs	r3, #0
 800e040:	e0dc      	b.n	800e1fc <dir_register+0x348>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800e048:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800e04c:	220c      	movs	r2, #12
 800e04e:	4618      	mov	r0, r3
 800e050:	f7fd fe63 	bl	800bd1a <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800e054:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e058:	f003 0301 	and.w	r3, r3, #1
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d033      	beq.n	800e0c8 <dir_register+0x214>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	2240      	movs	r2, #64	; 0x40
 800e064:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 800e068:	2301      	movs	r3, #1
 800e06a:	67bb      	str	r3, [r7, #120]	; 0x78
 800e06c:	e016      	b.n	800e09c <dir_register+0x1e8>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800e074:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e076:	691a      	ldr	r2, [r3, #16]
 800e078:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800e07c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e07e:	f7ff fa5d 	bl	800d53c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800e082:	6878      	ldr	r0, [r7, #4]
 800e084:	f7ff fded 	bl	800dc62 <dir_find>
 800e088:	4603      	mov	r3, r0
 800e08a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) break;
 800e08e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e092:	2b00      	cmp	r3, #0
 800e094:	d106      	bne.n	800e0a4 <dir_register+0x1f0>
		for (n = 1; n < 100; n++) {
 800e096:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e098:	3301      	adds	r3, #1
 800e09a:	67bb      	str	r3, [r7, #120]	; 0x78
 800e09c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e09e:	2b63      	cmp	r3, #99	; 0x63
 800e0a0:	d9e5      	bls.n	800e06e <dir_register+0x1ba>
 800e0a2:	e000      	b.n	800e0a6 <dir_register+0x1f2>
			if (res != FR_OK) break;
 800e0a4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800e0a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e0a8:	2b64      	cmp	r3, #100	; 0x64
 800e0aa:	d101      	bne.n	800e0b0 <dir_register+0x1fc>
 800e0ac:	2307      	movs	r3, #7
 800e0ae:	e0a5      	b.n	800e1fc <dir_register+0x348>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800e0b0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e0b4:	2b04      	cmp	r3, #4
 800e0b6:	d002      	beq.n	800e0be <dir_register+0x20a>
 800e0b8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e0bc:	e09e      	b.n	800e1fc <dir_register+0x348>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800e0be:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800e0c8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e0cc:	f003 0302 	and.w	r3, r3, #2
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d007      	beq.n	800e0e4 <dir_register+0x230>
 800e0d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e0d6:	330c      	adds	r3, #12
 800e0d8:	4a2f      	ldr	r2, [pc, #188]	; (800e198 <dir_register+0x2e4>)
 800e0da:	fba2 2303 	umull	r2, r3, r2, r3
 800e0de:	089b      	lsrs	r3, r3, #2
 800e0e0:	3301      	adds	r3, #1
 800e0e2:	e000      	b.n	800e0e6 <dir_register+0x232>
 800e0e4:	2301      	movs	r3, #1
 800e0e6:	673b      	str	r3, [r7, #112]	; 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800e0e8:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800e0ea:	6878      	ldr	r0, [r7, #4]
 800e0ec:	f7ff f84f 	bl	800d18e <dir_alloc>
 800e0f0:	4603      	mov	r3, r0
 800e0f2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800e0f6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d14f      	bne.n	800e19e <dir_register+0x2ea>
 800e0fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e100:	3b01      	subs	r3, #1
 800e102:	673b      	str	r3, [r7, #112]	; 0x70
 800e104:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e106:	2b00      	cmp	r3, #0
 800e108:	d049      	beq.n	800e19e <dir_register+0x2ea>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e10e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e110:	015b      	lsls	r3, r3, #5
 800e112:	1ad3      	subs	r3, r2, r3
 800e114:	4619      	mov	r1, r3
 800e116:	6878      	ldr	r0, [r7, #4]
 800e118:	f7fe febf 	bl	800ce9a <dir_sdi>
 800e11c:	4603      	mov	r3, r0
 800e11e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800e122:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e126:	2b00      	cmp	r3, #0
 800e128:	d139      	bne.n	800e19e <dir_register+0x2ea>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	3340      	adds	r3, #64	; 0x40
 800e12e:	4618      	mov	r0, r3
 800e130:	f7ff fa92 	bl	800d658 <sum_sfn>
 800e134:	4603      	mov	r3, r0
 800e136:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e13e:	4619      	mov	r1, r3
 800e140:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e142:	f7fe f819 	bl	800c178 <move_window>
 800e146:	4603      	mov	r3, r0
 800e148:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) break;
 800e14c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e150:	2b00      	cmp	r3, #0
 800e152:	d123      	bne.n	800e19c <dir_register+0x2e8>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800e154:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e156:	6918      	ldr	r0, [r3, #16]
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800e15c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e15e:	b2da      	uxtb	r2, r3
 800e160:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800e164:	f7ff f982 	bl	800d46c <put_lfn>
				fs->wflag = 1;
 800e168:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e16a:	2201      	movs	r2, #1
 800e16c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800e16e:	2100      	movs	r1, #0
 800e170:	6878      	ldr	r0, [r7, #4]
 800e172:	f7fe ff26 	bl	800cfc2 <dir_next>
 800e176:	4603      	mov	r3, r0
 800e178:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			} while (res == FR_OK && --nent);
 800e17c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e180:	2b00      	cmp	r3, #0
 800e182:	d10c      	bne.n	800e19e <dir_register+0x2ea>
 800e184:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e186:	3b01      	subs	r3, #1
 800e188:	673b      	str	r3, [r7, #112]	; 0x70
 800e18a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d1d4      	bne.n	800e13a <dir_register+0x286>
 800e190:	e005      	b.n	800e19e <dir_register+0x2ea>
 800e192:	bf00      	nop
 800e194:	88888889 	.word	0x88888889
 800e198:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 800e19c:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800e19e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d128      	bne.n	800e1f8 <dir_register+0x344>
		res = move_window(fs, dp->sect);
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1aa:	4619      	mov	r1, r3
 800e1ac:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e1ae:	f7fd ffe3 	bl	800c178 <move_window>
 800e1b2:	4603      	mov	r3, r0
 800e1b4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800e1b8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d11b      	bne.n	800e1f8 <dir_register+0x344>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e1c4:	2220      	movs	r2, #32
 800e1c6:	2100      	movs	r1, #0
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	f7fd fdc7 	bl	800bd5c <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	3340      	adds	r3, #64	; 0x40
 800e1d6:	220b      	movs	r2, #11
 800e1d8:	4619      	mov	r1, r3
 800e1da:	f7fd fd9e 	bl	800bd1a <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e1e8:	330c      	adds	r3, #12
 800e1ea:	f002 0218 	and.w	r2, r2, #24
 800e1ee:	b2d2      	uxtb	r2, r2
 800e1f0:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800e1f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e1f4:	2201      	movs	r2, #1
 800e1f6:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800e1f8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	3780      	adds	r7, #128	; 0x80
 800e200:	46bd      	mov	sp, r7
 800e202:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800e206:	bf00      	nop

0800e208 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800e208:	b580      	push	{r7, lr}
 800e20a:	b08a      	sub	sp, #40	; 0x28
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	6078      	str	r0, [r7, #4]
 800e210:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800e212:	683b      	ldr	r3, [r7, #0]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	613b      	str	r3, [r7, #16]
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	691b      	ldr	r3, [r3, #16]
 800e21e:	60fb      	str	r3, [r7, #12]
 800e220:	2300      	movs	r3, #0
 800e222:	617b      	str	r3, [r7, #20]
 800e224:	697b      	ldr	r3, [r7, #20]
 800e226:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800e228:	69bb      	ldr	r3, [r7, #24]
 800e22a:	1c5a      	adds	r2, r3, #1
 800e22c:	61ba      	str	r2, [r7, #24]
 800e22e:	693a      	ldr	r2, [r7, #16]
 800e230:	4413      	add	r3, r2
 800e232:	781b      	ldrb	r3, [r3, #0]
 800e234:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800e236:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e238:	2b1f      	cmp	r3, #31
 800e23a:	d940      	bls.n	800e2be <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800e23c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e23e:	2b2f      	cmp	r3, #47	; 0x2f
 800e240:	d006      	beq.n	800e250 <create_name+0x48>
 800e242:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e244:	2b5c      	cmp	r3, #92	; 0x5c
 800e246:	d110      	bne.n	800e26a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800e248:	e002      	b.n	800e250 <create_name+0x48>
 800e24a:	69bb      	ldr	r3, [r7, #24]
 800e24c:	3301      	adds	r3, #1
 800e24e:	61bb      	str	r3, [r7, #24]
 800e250:	693a      	ldr	r2, [r7, #16]
 800e252:	69bb      	ldr	r3, [r7, #24]
 800e254:	4413      	add	r3, r2
 800e256:	781b      	ldrb	r3, [r3, #0]
 800e258:	2b2f      	cmp	r3, #47	; 0x2f
 800e25a:	d0f6      	beq.n	800e24a <create_name+0x42>
 800e25c:	693a      	ldr	r2, [r7, #16]
 800e25e:	69bb      	ldr	r3, [r7, #24]
 800e260:	4413      	add	r3, r2
 800e262:	781b      	ldrb	r3, [r3, #0]
 800e264:	2b5c      	cmp	r3, #92	; 0x5c
 800e266:	d0f0      	beq.n	800e24a <create_name+0x42>
			break;
 800e268:	e02a      	b.n	800e2c0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800e26a:	697b      	ldr	r3, [r7, #20]
 800e26c:	2bfe      	cmp	r3, #254	; 0xfe
 800e26e:	d901      	bls.n	800e274 <create_name+0x6c>
 800e270:	2306      	movs	r3, #6
 800e272:	e17d      	b.n	800e570 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800e274:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e276:	b2db      	uxtb	r3, r3
 800e278:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800e27a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e27c:	2101      	movs	r1, #1
 800e27e:	4618      	mov	r0, r3
 800e280:	f002 f8e0 	bl	8010444 <ff_convert>
 800e284:	4603      	mov	r3, r0
 800e286:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800e288:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d101      	bne.n	800e292 <create_name+0x8a>
 800e28e:	2306      	movs	r3, #6
 800e290:	e16e      	b.n	800e570 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800e292:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e294:	2b7f      	cmp	r3, #127	; 0x7f
 800e296:	d809      	bhi.n	800e2ac <create_name+0xa4>
 800e298:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e29a:	4619      	mov	r1, r3
 800e29c:	488d      	ldr	r0, [pc, #564]	; (800e4d4 <create_name+0x2cc>)
 800e29e:	f7fd fd9f 	bl	800bde0 <chk_chr>
 800e2a2:	4603      	mov	r3, r0
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d001      	beq.n	800e2ac <create_name+0xa4>
 800e2a8:	2306      	movs	r3, #6
 800e2aa:	e161      	b.n	800e570 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800e2ac:	697b      	ldr	r3, [r7, #20]
 800e2ae:	1c5a      	adds	r2, r3, #1
 800e2b0:	617a      	str	r2, [r7, #20]
 800e2b2:	005b      	lsls	r3, r3, #1
 800e2b4:	68fa      	ldr	r2, [r7, #12]
 800e2b6:	4413      	add	r3, r2
 800e2b8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e2ba:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800e2bc:	e7b4      	b.n	800e228 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800e2be:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800e2c0:	693a      	ldr	r2, [r7, #16]
 800e2c2:	69bb      	ldr	r3, [r7, #24]
 800e2c4:	441a      	add	r2, r3
 800e2c6:	683b      	ldr	r3, [r7, #0]
 800e2c8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800e2ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e2cc:	2b1f      	cmp	r3, #31
 800e2ce:	d801      	bhi.n	800e2d4 <create_name+0xcc>
 800e2d0:	2304      	movs	r3, #4
 800e2d2:	e000      	b.n	800e2d6 <create_name+0xce>
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800e2da:	e011      	b.n	800e300 <create_name+0xf8>
		w = lfn[di - 1];
 800e2dc:	697b      	ldr	r3, [r7, #20]
 800e2de:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e2e2:	3b01      	subs	r3, #1
 800e2e4:	005b      	lsls	r3, r3, #1
 800e2e6:	68fa      	ldr	r2, [r7, #12]
 800e2e8:	4413      	add	r3, r2
 800e2ea:	881b      	ldrh	r3, [r3, #0]
 800e2ec:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800e2ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e2f0:	2b20      	cmp	r3, #32
 800e2f2:	d002      	beq.n	800e2fa <create_name+0xf2>
 800e2f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e2f6:	2b2e      	cmp	r3, #46	; 0x2e
 800e2f8:	d106      	bne.n	800e308 <create_name+0x100>
		di--;
 800e2fa:	697b      	ldr	r3, [r7, #20]
 800e2fc:	3b01      	subs	r3, #1
 800e2fe:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800e300:	697b      	ldr	r3, [r7, #20]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d1ea      	bne.n	800e2dc <create_name+0xd4>
 800e306:	e000      	b.n	800e30a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800e308:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800e30a:	697b      	ldr	r3, [r7, #20]
 800e30c:	005b      	lsls	r3, r3, #1
 800e30e:	68fa      	ldr	r2, [r7, #12]
 800e310:	4413      	add	r3, r2
 800e312:	2200      	movs	r2, #0
 800e314:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800e316:	697b      	ldr	r3, [r7, #20]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d101      	bne.n	800e320 <create_name+0x118>
 800e31c:	2306      	movs	r3, #6
 800e31e:	e127      	b.n	800e570 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	3340      	adds	r3, #64	; 0x40
 800e324:	220b      	movs	r2, #11
 800e326:	2120      	movs	r1, #32
 800e328:	4618      	mov	r0, r3
 800e32a:	f7fd fd17 	bl	800bd5c <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800e32e:	2300      	movs	r3, #0
 800e330:	61bb      	str	r3, [r7, #24]
 800e332:	e002      	b.n	800e33a <create_name+0x132>
 800e334:	69bb      	ldr	r3, [r7, #24]
 800e336:	3301      	adds	r3, #1
 800e338:	61bb      	str	r3, [r7, #24]
 800e33a:	69bb      	ldr	r3, [r7, #24]
 800e33c:	005b      	lsls	r3, r3, #1
 800e33e:	68fa      	ldr	r2, [r7, #12]
 800e340:	4413      	add	r3, r2
 800e342:	881b      	ldrh	r3, [r3, #0]
 800e344:	2b20      	cmp	r3, #32
 800e346:	d0f5      	beq.n	800e334 <create_name+0x12c>
 800e348:	69bb      	ldr	r3, [r7, #24]
 800e34a:	005b      	lsls	r3, r3, #1
 800e34c:	68fa      	ldr	r2, [r7, #12]
 800e34e:	4413      	add	r3, r2
 800e350:	881b      	ldrh	r3, [r3, #0]
 800e352:	2b2e      	cmp	r3, #46	; 0x2e
 800e354:	d0ee      	beq.n	800e334 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800e356:	69bb      	ldr	r3, [r7, #24]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d009      	beq.n	800e370 <create_name+0x168>
 800e35c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e360:	f043 0303 	orr.w	r3, r3, #3
 800e364:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800e368:	e002      	b.n	800e370 <create_name+0x168>
 800e36a:	697b      	ldr	r3, [r7, #20]
 800e36c:	3b01      	subs	r3, #1
 800e36e:	617b      	str	r3, [r7, #20]
 800e370:	697b      	ldr	r3, [r7, #20]
 800e372:	2b00      	cmp	r3, #0
 800e374:	d009      	beq.n	800e38a <create_name+0x182>
 800e376:	697b      	ldr	r3, [r7, #20]
 800e378:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e37c:	3b01      	subs	r3, #1
 800e37e:	005b      	lsls	r3, r3, #1
 800e380:	68fa      	ldr	r2, [r7, #12]
 800e382:	4413      	add	r3, r2
 800e384:	881b      	ldrh	r3, [r3, #0]
 800e386:	2b2e      	cmp	r3, #46	; 0x2e
 800e388:	d1ef      	bne.n	800e36a <create_name+0x162>

	i = b = 0; ni = 8;
 800e38a:	2300      	movs	r3, #0
 800e38c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e390:	2300      	movs	r3, #0
 800e392:	623b      	str	r3, [r7, #32]
 800e394:	2308      	movs	r3, #8
 800e396:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800e398:	69bb      	ldr	r3, [r7, #24]
 800e39a:	1c5a      	adds	r2, r3, #1
 800e39c:	61ba      	str	r2, [r7, #24]
 800e39e:	005b      	lsls	r3, r3, #1
 800e3a0:	68fa      	ldr	r2, [r7, #12]
 800e3a2:	4413      	add	r3, r2
 800e3a4:	881b      	ldrh	r3, [r3, #0]
 800e3a6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800e3a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	f000 8090 	beq.w	800e4d0 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800e3b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e3b2:	2b20      	cmp	r3, #32
 800e3b4:	d006      	beq.n	800e3c4 <create_name+0x1bc>
 800e3b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e3b8:	2b2e      	cmp	r3, #46	; 0x2e
 800e3ba:	d10a      	bne.n	800e3d2 <create_name+0x1ca>
 800e3bc:	69ba      	ldr	r2, [r7, #24]
 800e3be:	697b      	ldr	r3, [r7, #20]
 800e3c0:	429a      	cmp	r2, r3
 800e3c2:	d006      	beq.n	800e3d2 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800e3c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e3c8:	f043 0303 	orr.w	r3, r3, #3
 800e3cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e3d0:	e07d      	b.n	800e4ce <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800e3d2:	6a3a      	ldr	r2, [r7, #32]
 800e3d4:	69fb      	ldr	r3, [r7, #28]
 800e3d6:	429a      	cmp	r2, r3
 800e3d8:	d203      	bcs.n	800e3e2 <create_name+0x1da>
 800e3da:	69ba      	ldr	r2, [r7, #24]
 800e3dc:	697b      	ldr	r3, [r7, #20]
 800e3de:	429a      	cmp	r2, r3
 800e3e0:	d123      	bne.n	800e42a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800e3e2:	69fb      	ldr	r3, [r7, #28]
 800e3e4:	2b0b      	cmp	r3, #11
 800e3e6:	d106      	bne.n	800e3f6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800e3e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e3ec:	f043 0303 	orr.w	r3, r3, #3
 800e3f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e3f4:	e075      	b.n	800e4e2 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800e3f6:	69ba      	ldr	r2, [r7, #24]
 800e3f8:	697b      	ldr	r3, [r7, #20]
 800e3fa:	429a      	cmp	r2, r3
 800e3fc:	d005      	beq.n	800e40a <create_name+0x202>
 800e3fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e402:	f043 0303 	orr.w	r3, r3, #3
 800e406:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800e40a:	69ba      	ldr	r2, [r7, #24]
 800e40c:	697b      	ldr	r3, [r7, #20]
 800e40e:	429a      	cmp	r2, r3
 800e410:	d866      	bhi.n	800e4e0 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800e412:	697b      	ldr	r3, [r7, #20]
 800e414:	61bb      	str	r3, [r7, #24]
 800e416:	2308      	movs	r3, #8
 800e418:	623b      	str	r3, [r7, #32]
 800e41a:	230b      	movs	r3, #11
 800e41c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800e41e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e422:	009b      	lsls	r3, r3, #2
 800e424:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e428:	e051      	b.n	800e4ce <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800e42a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e42c:	2b7f      	cmp	r3, #127	; 0x7f
 800e42e:	d914      	bls.n	800e45a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800e430:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e432:	2100      	movs	r1, #0
 800e434:	4618      	mov	r0, r3
 800e436:	f002 f805 	bl	8010444 <ff_convert>
 800e43a:	4603      	mov	r3, r0
 800e43c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800e43e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e440:	2b00      	cmp	r3, #0
 800e442:	d004      	beq.n	800e44e <create_name+0x246>
 800e444:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e446:	3b80      	subs	r3, #128	; 0x80
 800e448:	4a23      	ldr	r2, [pc, #140]	; (800e4d8 <create_name+0x2d0>)
 800e44a:	5cd3      	ldrb	r3, [r2, r3]
 800e44c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800e44e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e452:	f043 0302 	orr.w	r3, r3, #2
 800e456:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800e45a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d007      	beq.n	800e470 <create_name+0x268>
 800e460:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e462:	4619      	mov	r1, r3
 800e464:	481d      	ldr	r0, [pc, #116]	; (800e4dc <create_name+0x2d4>)
 800e466:	f7fd fcbb 	bl	800bde0 <chk_chr>
 800e46a:	4603      	mov	r3, r0
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d008      	beq.n	800e482 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800e470:	235f      	movs	r3, #95	; 0x5f
 800e472:	84bb      	strh	r3, [r7, #36]	; 0x24
 800e474:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e478:	f043 0303 	orr.w	r3, r3, #3
 800e47c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e480:	e01b      	b.n	800e4ba <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800e482:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e484:	2b40      	cmp	r3, #64	; 0x40
 800e486:	d909      	bls.n	800e49c <create_name+0x294>
 800e488:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e48a:	2b5a      	cmp	r3, #90	; 0x5a
 800e48c:	d806      	bhi.n	800e49c <create_name+0x294>
					b |= 2;
 800e48e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e492:	f043 0302 	orr.w	r3, r3, #2
 800e496:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e49a:	e00e      	b.n	800e4ba <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800e49c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e49e:	2b60      	cmp	r3, #96	; 0x60
 800e4a0:	d90b      	bls.n	800e4ba <create_name+0x2b2>
 800e4a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e4a4:	2b7a      	cmp	r3, #122	; 0x7a
 800e4a6:	d808      	bhi.n	800e4ba <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800e4a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e4ac:	f043 0301 	orr.w	r3, r3, #1
 800e4b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e4b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e4b6:	3b20      	subs	r3, #32
 800e4b8:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800e4ba:	6a3b      	ldr	r3, [r7, #32]
 800e4bc:	1c5a      	adds	r2, r3, #1
 800e4be:	623a      	str	r2, [r7, #32]
 800e4c0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e4c2:	b2d1      	uxtb	r1, r2
 800e4c4:	687a      	ldr	r2, [r7, #4]
 800e4c6:	4413      	add	r3, r2
 800e4c8:	460a      	mov	r2, r1
 800e4ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 800e4ce:	e763      	b.n	800e398 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800e4d0:	bf00      	nop
 800e4d2:	e006      	b.n	800e4e2 <create_name+0x2da>
 800e4d4:	080120a8 	.word	0x080120a8
 800e4d8:	08012190 	.word	0x08012190
 800e4dc:	080120b4 	.word	0x080120b4
			if (si > di) break;			/* No extension */
 800e4e0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e4e8:	2be5      	cmp	r3, #229	; 0xe5
 800e4ea:	d103      	bne.n	800e4f4 <create_name+0x2ec>
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	2205      	movs	r2, #5
 800e4f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;
 800e4f4:	69fb      	ldr	r3, [r7, #28]
 800e4f6:	2b08      	cmp	r3, #8
 800e4f8:	d104      	bne.n	800e504 <create_name+0x2fc>
 800e4fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e4fe:	009b      	lsls	r3, r3, #2
 800e500:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800e504:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e508:	f003 030c 	and.w	r3, r3, #12
 800e50c:	2b0c      	cmp	r3, #12
 800e50e:	d005      	beq.n	800e51c <create_name+0x314>
 800e510:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e514:	f003 0303 	and.w	r3, r3, #3
 800e518:	2b03      	cmp	r3, #3
 800e51a:	d105      	bne.n	800e528 <create_name+0x320>
 800e51c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e520:	f043 0302 	orr.w	r3, r3, #2
 800e524:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800e528:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e52c:	f003 0302 	and.w	r3, r3, #2
 800e530:	2b00      	cmp	r3, #0
 800e532:	d117      	bne.n	800e564 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800e534:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e538:	f003 0303 	and.w	r3, r3, #3
 800e53c:	2b01      	cmp	r3, #1
 800e53e:	d105      	bne.n	800e54c <create_name+0x344>
 800e540:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e544:	f043 0310 	orr.w	r3, r3, #16
 800e548:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800e54c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e550:	f003 030c 	and.w	r3, r3, #12
 800e554:	2b04      	cmp	r3, #4
 800e556:	d105      	bne.n	800e564 <create_name+0x35c>
 800e558:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e55c:	f043 0308 	orr.w	r3, r3, #8
 800e560:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e56a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 800e56e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800e570:	4618      	mov	r0, r3
 800e572:	3728      	adds	r7, #40	; 0x28
 800e574:	46bd      	mov	sp, r7
 800e576:	bd80      	pop	{r7, pc}

0800e578 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800e578:	b580      	push	{r7, lr}
 800e57a:	b086      	sub	sp, #24
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	6078      	str	r0, [r7, #4]
 800e580:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800e586:	693b      	ldr	r3, [r7, #16]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e58c:	e002      	b.n	800e594 <follow_path+0x1c>
 800e58e:	683b      	ldr	r3, [r7, #0]
 800e590:	3301      	adds	r3, #1
 800e592:	603b      	str	r3, [r7, #0]
 800e594:	683b      	ldr	r3, [r7, #0]
 800e596:	781b      	ldrb	r3, [r3, #0]
 800e598:	2b2f      	cmp	r3, #47	; 0x2f
 800e59a:	d0f8      	beq.n	800e58e <follow_path+0x16>
 800e59c:	683b      	ldr	r3, [r7, #0]
 800e59e:	781b      	ldrb	r3, [r3, #0]
 800e5a0:	2b5c      	cmp	r3, #92	; 0x5c
 800e5a2:	d0f4      	beq.n	800e58e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800e5a4:	693b      	ldr	r3, [r7, #16]
 800e5a6:	2200      	movs	r2, #0
 800e5a8:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 800e5aa:	693b      	ldr	r3, [r7, #16]
 800e5ac:	2200      	movs	r2, #0
 800e5ae:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800e5b0:	683b      	ldr	r3, [r7, #0]
 800e5b2:	781b      	ldrb	r3, [r3, #0]
 800e5b4:	2b1f      	cmp	r3, #31
 800e5b6:	d80a      	bhi.n	800e5ce <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	2280      	movs	r2, #128	; 0x80
 800e5bc:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 800e5c0:	2100      	movs	r1, #0
 800e5c2:	6878      	ldr	r0, [r7, #4]
 800e5c4:	f7fe fc69 	bl	800ce9a <dir_sdi>
 800e5c8:	4603      	mov	r3, r0
 800e5ca:	75fb      	strb	r3, [r7, #23]
 800e5cc:	e07d      	b.n	800e6ca <follow_path+0x152>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e5ce:	463b      	mov	r3, r7
 800e5d0:	4619      	mov	r1, r3
 800e5d2:	6878      	ldr	r0, [r7, #4]
 800e5d4:	f7ff fe18 	bl	800e208 <create_name>
 800e5d8:	4603      	mov	r3, r0
 800e5da:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e5dc:	7dfb      	ldrb	r3, [r7, #23]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d16e      	bne.n	800e6c0 <follow_path+0x148>
			res = dir_find(dp);				/* Find an object with the segment name */
 800e5e2:	6878      	ldr	r0, [r7, #4]
 800e5e4:	f7ff fb3d 	bl	800dc62 <dir_find>
 800e5e8:	4603      	mov	r3, r0
 800e5ea:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800e5f2:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800e5f4:	7dfb      	ldrb	r3, [r7, #23]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d00a      	beq.n	800e610 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800e5fa:	7dfb      	ldrb	r3, [r7, #23]
 800e5fc:	2b04      	cmp	r3, #4
 800e5fe:	d161      	bne.n	800e6c4 <follow_path+0x14c>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e600:	7afb      	ldrb	r3, [r7, #11]
 800e602:	f003 0304 	and.w	r3, r3, #4
 800e606:	2b00      	cmp	r3, #0
 800e608:	d15c      	bne.n	800e6c4 <follow_path+0x14c>
 800e60a:	2305      	movs	r3, #5
 800e60c:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800e60e:	e059      	b.n	800e6c4 <follow_path+0x14c>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e610:	7afb      	ldrb	r3, [r7, #11]
 800e612:	f003 0304 	and.w	r3, r3, #4
 800e616:	2b00      	cmp	r3, #0
 800e618:	d156      	bne.n	800e6c8 <follow_path+0x150>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800e61a:	693b      	ldr	r3, [r7, #16]
 800e61c:	799b      	ldrb	r3, [r3, #6]
 800e61e:	f003 0310 	and.w	r3, r3, #16
 800e622:	2b00      	cmp	r3, #0
 800e624:	d102      	bne.n	800e62c <follow_path+0xb4>
				res = FR_NO_PATH; break;
 800e626:	2305      	movs	r3, #5
 800e628:	75fb      	strb	r3, [r7, #23]
 800e62a:	e04e      	b.n	800e6ca <follow_path+0x152>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	781b      	ldrb	r3, [r3, #0]
 800e630:	2b04      	cmp	r3, #4
 800e632:	d130      	bne.n	800e696 <follow_path+0x11e>
				obj->c_scl = obj->sclust;
 800e634:	693b      	ldr	r3, [r7, #16]
 800e636:	689a      	ldr	r2, [r3, #8]
 800e638:	693b      	ldr	r3, [r7, #16]
 800e63a:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800e63c:	693b      	ldr	r3, [r7, #16]
 800e63e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e642:	4613      	mov	r3, r2
 800e644:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e648:	693a      	ldr	r2, [r7, #16]
 800e64a:	79d2      	ldrb	r2, [r2, #7]
 800e64c:	431a      	orrs	r2, r3
 800e64e:	693b      	ldr	r3, [r7, #16]
 800e650:	625a      	str	r2, [r3, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e656:	693b      	ldr	r3, [r7, #16]
 800e658:	629a      	str	r2, [r3, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	695b      	ldr	r3, [r3, #20]
 800e65e:	3334      	adds	r3, #52	; 0x34
 800e660:	4618      	mov	r0, r3
 800e662:	f7fd f98d 	bl	800b980 <ld_dword>
 800e666:	4602      	mov	r2, r0
 800e668:	693b      	ldr	r3, [r7, #16]
 800e66a:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	695b      	ldr	r3, [r3, #20]
 800e670:	3321      	adds	r3, #33	; 0x21
 800e672:	781b      	ldrb	r3, [r3, #0]
 800e674:	f003 0302 	and.w	r3, r3, #2
 800e678:	b2da      	uxtb	r2, r3
 800e67a:	693b      	ldr	r3, [r7, #16]
 800e67c:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	695b      	ldr	r3, [r3, #20]
 800e682:	3338      	adds	r3, #56	; 0x38
 800e684:	4618      	mov	r0, r3
 800e686:	f7fd f99e 	bl	800b9c6 <ld_qword>
 800e68a:	4602      	mov	r2, r0
 800e68c:	460b      	mov	r3, r1
 800e68e:	6939      	ldr	r1, [r7, #16]
 800e690:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800e694:	e79b      	b.n	800e5ce <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6a0:	68fa      	ldr	r2, [r7, #12]
 800e6a2:	8992      	ldrh	r2, [r2, #12]
 800e6a4:	fbb3 f0f2 	udiv	r0, r3, r2
 800e6a8:	fb00 f202 	mul.w	r2, r0, r2
 800e6ac:	1a9b      	subs	r3, r3, r2
 800e6ae:	440b      	add	r3, r1
 800e6b0:	4619      	mov	r1, r3
 800e6b2:	68f8      	ldr	r0, [r7, #12]
 800e6b4:	f7fe fdc7 	bl	800d246 <ld_clust>
 800e6b8:	4602      	mov	r2, r0
 800e6ba:	693b      	ldr	r3, [r7, #16]
 800e6bc:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e6be:	e786      	b.n	800e5ce <follow_path+0x56>
			if (res != FR_OK) break;
 800e6c0:	bf00      	nop
 800e6c2:	e002      	b.n	800e6ca <follow_path+0x152>
				break;
 800e6c4:	bf00      	nop
 800e6c6:	e000      	b.n	800e6ca <follow_path+0x152>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e6c8:	bf00      	nop
			}
		}
	}

	return res;
 800e6ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	3718      	adds	r7, #24
 800e6d0:	46bd      	mov	sp, r7
 800e6d2:	bd80      	pop	{r7, pc}

0800e6d4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800e6d4:	b480      	push	{r7}
 800e6d6:	b087      	sub	sp, #28
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800e6dc:	f04f 33ff 	mov.w	r3, #4294967295
 800e6e0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d031      	beq.n	800e74e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	617b      	str	r3, [r7, #20]
 800e6f0:	e002      	b.n	800e6f8 <get_ldnumber+0x24>
 800e6f2:	697b      	ldr	r3, [r7, #20]
 800e6f4:	3301      	adds	r3, #1
 800e6f6:	617b      	str	r3, [r7, #20]
 800e6f8:	697b      	ldr	r3, [r7, #20]
 800e6fa:	781b      	ldrb	r3, [r3, #0]
 800e6fc:	2b1f      	cmp	r3, #31
 800e6fe:	d903      	bls.n	800e708 <get_ldnumber+0x34>
 800e700:	697b      	ldr	r3, [r7, #20]
 800e702:	781b      	ldrb	r3, [r3, #0]
 800e704:	2b3a      	cmp	r3, #58	; 0x3a
 800e706:	d1f4      	bne.n	800e6f2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800e708:	697b      	ldr	r3, [r7, #20]
 800e70a:	781b      	ldrb	r3, [r3, #0]
 800e70c:	2b3a      	cmp	r3, #58	; 0x3a
 800e70e:	d11c      	bne.n	800e74a <get_ldnumber+0x76>
			tp = *path;
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	1c5a      	adds	r2, r3, #1
 800e71a:	60fa      	str	r2, [r7, #12]
 800e71c:	781b      	ldrb	r3, [r3, #0]
 800e71e:	3b30      	subs	r3, #48	; 0x30
 800e720:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e722:	68bb      	ldr	r3, [r7, #8]
 800e724:	2b09      	cmp	r3, #9
 800e726:	d80e      	bhi.n	800e746 <get_ldnumber+0x72>
 800e728:	68fa      	ldr	r2, [r7, #12]
 800e72a:	697b      	ldr	r3, [r7, #20]
 800e72c:	429a      	cmp	r2, r3
 800e72e:	d10a      	bne.n	800e746 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e730:	68bb      	ldr	r3, [r7, #8]
 800e732:	2b00      	cmp	r3, #0
 800e734:	d107      	bne.n	800e746 <get_ldnumber+0x72>
					vol = (int)i;
 800e736:	68bb      	ldr	r3, [r7, #8]
 800e738:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800e73a:	697b      	ldr	r3, [r7, #20]
 800e73c:	3301      	adds	r3, #1
 800e73e:	617b      	str	r3, [r7, #20]
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	697a      	ldr	r2, [r7, #20]
 800e744:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800e746:	693b      	ldr	r3, [r7, #16]
 800e748:	e002      	b.n	800e750 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800e74a:	2300      	movs	r3, #0
 800e74c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800e74e:	693b      	ldr	r3, [r7, #16]
}
 800e750:	4618      	mov	r0, r3
 800e752:	371c      	adds	r7, #28
 800e754:	46bd      	mov	sp, r7
 800e756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e75a:	4770      	bx	lr

0800e75c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800e75c:	b580      	push	{r7, lr}
 800e75e:	b082      	sub	sp, #8
 800e760:	af00      	add	r7, sp, #0
 800e762:	6078      	str	r0, [r7, #4]
 800e764:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	2200      	movs	r2, #0
 800e76a:	70da      	strb	r2, [r3, #3]
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	f04f 32ff 	mov.w	r2, #4294967295
 800e772:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800e774:	6839      	ldr	r1, [r7, #0]
 800e776:	6878      	ldr	r0, [r7, #4]
 800e778:	f7fd fcfe 	bl	800c178 <move_window>
 800e77c:	4603      	mov	r3, r0
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d001      	beq.n	800e786 <check_fs+0x2a>
 800e782:	2304      	movs	r3, #4
 800e784:	e044      	b.n	800e810 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	333c      	adds	r3, #60	; 0x3c
 800e78a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e78e:	4618      	mov	r0, r3
 800e790:	f7fd f8de 	bl	800b950 <ld_word>
 800e794:	4603      	mov	r3, r0
 800e796:	461a      	mov	r2, r3
 800e798:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e79c:	429a      	cmp	r2, r3
 800e79e:	d001      	beq.n	800e7a4 <check_fs+0x48>
 800e7a0:	2303      	movs	r3, #3
 800e7a2:	e035      	b.n	800e810 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e7aa:	2be9      	cmp	r3, #233	; 0xe9
 800e7ac:	d009      	beq.n	800e7c2 <check_fs+0x66>
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e7b4:	2beb      	cmp	r3, #235	; 0xeb
 800e7b6:	d11e      	bne.n	800e7f6 <check_fs+0x9a>
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e7be:	2b90      	cmp	r3, #144	; 0x90
 800e7c0:	d119      	bne.n	800e7f6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	333c      	adds	r3, #60	; 0x3c
 800e7c6:	3336      	adds	r3, #54	; 0x36
 800e7c8:	4618      	mov	r0, r3
 800e7ca:	f7fd f8d9 	bl	800b980 <ld_dword>
 800e7ce:	4603      	mov	r3, r0
 800e7d0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e7d4:	4a10      	ldr	r2, [pc, #64]	; (800e818 <check_fs+0xbc>)
 800e7d6:	4293      	cmp	r3, r2
 800e7d8:	d101      	bne.n	800e7de <check_fs+0x82>
 800e7da:	2300      	movs	r3, #0
 800e7dc:	e018      	b.n	800e810 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	333c      	adds	r3, #60	; 0x3c
 800e7e2:	3352      	adds	r3, #82	; 0x52
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	f7fd f8cb 	bl	800b980 <ld_dword>
 800e7ea:	4603      	mov	r3, r0
 800e7ec:	4a0b      	ldr	r2, [pc, #44]	; (800e81c <check_fs+0xc0>)
 800e7ee:	4293      	cmp	r3, r2
 800e7f0:	d101      	bne.n	800e7f6 <check_fs+0x9a>
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	e00c      	b.n	800e810 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	333c      	adds	r3, #60	; 0x3c
 800e7fa:	220b      	movs	r2, #11
 800e7fc:	4908      	ldr	r1, [pc, #32]	; (800e820 <check_fs+0xc4>)
 800e7fe:	4618      	mov	r0, r3
 800e800:	f7fd fac7 	bl	800bd92 <mem_cmp>
 800e804:	4603      	mov	r3, r0
 800e806:	2b00      	cmp	r3, #0
 800e808:	d101      	bne.n	800e80e <check_fs+0xb2>
 800e80a:	2301      	movs	r3, #1
 800e80c:	e000      	b.n	800e810 <check_fs+0xb4>
#endif
	return 2;
 800e80e:	2302      	movs	r3, #2
}
 800e810:	4618      	mov	r0, r3
 800e812:	3708      	adds	r7, #8
 800e814:	46bd      	mov	sp, r7
 800e816:	bd80      	pop	{r7, pc}
 800e818:	00544146 	.word	0x00544146
 800e81c:	33544146 	.word	0x33544146
 800e820:	080120bc 	.word	0x080120bc

0800e824 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800e824:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e828:	b09c      	sub	sp, #112	; 0x70
 800e82a:	af00      	add	r7, sp, #0
 800e82c:	61f8      	str	r0, [r7, #28]
 800e82e:	61b9      	str	r1, [r7, #24]
 800e830:	4613      	mov	r3, r2
 800e832:	75fb      	strb	r3, [r7, #23]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e834:	69bb      	ldr	r3, [r7, #24]
 800e836:	2200      	movs	r2, #0
 800e838:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e83a:	69f8      	ldr	r0, [r7, #28]
 800e83c:	f7ff ff4a 	bl	800e6d4 <get_ldnumber>
 800e840:	6578      	str	r0, [r7, #84]	; 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
 800e842:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e844:	2b00      	cmp	r3, #0
 800e846:	da01      	bge.n	800e84c <find_volume+0x28>
 800e848:	230b      	movs	r3, #11
 800e84a:	e376      	b.n	800ef3a <find_volume+0x716>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e84c:	4aa6      	ldr	r2, [pc, #664]	; (800eae8 <find_volume+0x2c4>)
 800e84e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e854:	653b      	str	r3, [r7, #80]	; 0x50
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e856:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d101      	bne.n	800e860 <find_volume+0x3c>
 800e85c:	230c      	movs	r3, #12
 800e85e:	e36c      	b.n	800ef3a <find_volume+0x716>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800e860:	69bb      	ldr	r3, [r7, #24]
 800e862:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e864:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e866:	7dfb      	ldrb	r3, [r7, #23]
 800e868:	f023 0301 	bic.w	r3, r3, #1
 800e86c:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e86e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e870:	781b      	ldrb	r3, [r3, #0]
 800e872:	2b00      	cmp	r3, #0
 800e874:	d01a      	beq.n	800e8ac <find_volume+0x88>
		stat = disk_status(fs->drv);
 800e876:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e878:	785b      	ldrb	r3, [r3, #1]
 800e87a:	4618      	mov	r0, r3
 800e87c:	f7fc ffca 	bl	800b814 <disk_status>
 800e880:	4603      	mov	r3, r0
 800e882:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e886:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e88a:	f003 0301 	and.w	r3, r3, #1
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d10c      	bne.n	800e8ac <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e892:	7dfb      	ldrb	r3, [r7, #23]
 800e894:	2b00      	cmp	r3, #0
 800e896:	d007      	beq.n	800e8a8 <find_volume+0x84>
 800e898:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e89c:	f003 0304 	and.w	r3, r3, #4
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d001      	beq.n	800e8a8 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 800e8a4:	230a      	movs	r3, #10
 800e8a6:	e348      	b.n	800ef3a <find_volume+0x716>
			}
			return FR_OK;				/* The file system object is valid */
 800e8a8:	2300      	movs	r3, #0
 800e8aa:	e346      	b.n	800ef3a <find_volume+0x716>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e8ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8ae:	2200      	movs	r2, #0
 800e8b0:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e8b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e8b4:	b2da      	uxtb	r2, r3
 800e8b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8b8:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e8ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8bc:	785b      	ldrb	r3, [r3, #1]
 800e8be:	4618      	mov	r0, r3
 800e8c0:	f7fc ffc2 	bl	800b848 <disk_initialize>
 800e8c4:	4603      	mov	r3, r0
 800e8c6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e8ca:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e8ce:	f003 0301 	and.w	r3, r3, #1
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d001      	beq.n	800e8da <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e8d6:	2303      	movs	r3, #3
 800e8d8:	e32f      	b.n	800ef3a <find_volume+0x716>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e8da:	7dfb      	ldrb	r3, [r7, #23]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d007      	beq.n	800e8f0 <find_volume+0xcc>
 800e8e0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e8e4:	f003 0304 	and.w	r3, r3, #4
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d001      	beq.n	800e8f0 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800e8ec:	230a      	movs	r3, #10
 800e8ee:	e324      	b.n	800ef3a <find_volume+0x716>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800e8f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8f2:	7858      	ldrb	r0, [r3, #1]
 800e8f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8f6:	330c      	adds	r3, #12
 800e8f8:	461a      	mov	r2, r3
 800e8fa:	2102      	movs	r1, #2
 800e8fc:	f7fd f80a 	bl	800b914 <disk_ioctl>
 800e900:	4603      	mov	r3, r0
 800e902:	2b00      	cmp	r3, #0
 800e904:	d001      	beq.n	800e90a <find_volume+0xe6>
 800e906:	2301      	movs	r3, #1
 800e908:	e317      	b.n	800ef3a <find_volume+0x716>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800e90a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e90c:	899b      	ldrh	r3, [r3, #12]
 800e90e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e912:	d80d      	bhi.n	800e930 <find_volume+0x10c>
 800e914:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e916:	899b      	ldrh	r3, [r3, #12]
 800e918:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e91c:	d308      	bcc.n	800e930 <find_volume+0x10c>
 800e91e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e920:	899b      	ldrh	r3, [r3, #12]
 800e922:	461a      	mov	r2, r3
 800e924:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e926:	899b      	ldrh	r3, [r3, #12]
 800e928:	3b01      	subs	r3, #1
 800e92a:	4013      	ands	r3, r2
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d001      	beq.n	800e934 <find_volume+0x110>
 800e930:	2301      	movs	r3, #1
 800e932:	e302      	b.n	800ef3a <find_volume+0x716>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e934:	2300      	movs	r3, #0
 800e936:	66bb      	str	r3, [r7, #104]	; 0x68
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e938:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e93a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800e93c:	f7ff ff0e 	bl	800e75c <check_fs>
 800e940:	4603      	mov	r3, r0
 800e942:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e946:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800e94a:	2b02      	cmp	r3, #2
 800e94c:	d14d      	bne.n	800e9ea <find_volume+0x1c6>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e94e:	2300      	movs	r3, #0
 800e950:	65bb      	str	r3, [r7, #88]	; 0x58
 800e952:	e020      	b.n	800e996 <find_volume+0x172>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e954:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e956:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800e95a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e95c:	011b      	lsls	r3, r3, #4
 800e95e:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800e962:	4413      	add	r3, r2
 800e964:	64bb      	str	r3, [r7, #72]	; 0x48
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e966:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e968:	3304      	adds	r3, #4
 800e96a:	781b      	ldrb	r3, [r3, #0]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d006      	beq.n	800e97e <find_volume+0x15a>
 800e970:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e972:	3308      	adds	r3, #8
 800e974:	4618      	mov	r0, r3
 800e976:	f7fd f803 	bl	800b980 <ld_dword>
 800e97a:	4602      	mov	r2, r0
 800e97c:	e000      	b.n	800e980 <find_volume+0x15c>
 800e97e:	2200      	movs	r2, #0
 800e980:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e982:	009b      	lsls	r3, r3, #2
 800e984:	3360      	adds	r3, #96	; 0x60
 800e986:	f107 0110 	add.w	r1, r7, #16
 800e98a:	440b      	add	r3, r1
 800e98c:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e990:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e992:	3301      	adds	r3, #1
 800e994:	65bb      	str	r3, [r7, #88]	; 0x58
 800e996:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e998:	2b03      	cmp	r3, #3
 800e99a:	d9db      	bls.n	800e954 <find_volume+0x130>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e99c:	2300      	movs	r3, #0
 800e99e:	65bb      	str	r3, [r7, #88]	; 0x58
		if (i) i--;
 800e9a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d002      	beq.n	800e9ac <find_volume+0x188>
 800e9a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e9a8:	3b01      	subs	r3, #1
 800e9aa:	65bb      	str	r3, [r7, #88]	; 0x58
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e9ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e9ae:	009b      	lsls	r3, r3, #2
 800e9b0:	3360      	adds	r3, #96	; 0x60
 800e9b2:	f107 0210 	add.w	r2, r7, #16
 800e9b6:	4413      	add	r3, r2
 800e9b8:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800e9bc:	66bb      	str	r3, [r7, #104]	; 0x68
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e9be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d005      	beq.n	800e9d0 <find_volume+0x1ac>
 800e9c4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e9c6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800e9c8:	f7ff fec8 	bl	800e75c <check_fs>
 800e9cc:	4603      	mov	r3, r0
 800e9ce:	e000      	b.n	800e9d2 <find_volume+0x1ae>
 800e9d0:	2303      	movs	r3, #3
 800e9d2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e9d6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800e9da:	2b01      	cmp	r3, #1
 800e9dc:	d905      	bls.n	800e9ea <find_volume+0x1c6>
 800e9de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e9e0:	3301      	adds	r3, #1
 800e9e2:	65bb      	str	r3, [r7, #88]	; 0x58
 800e9e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e9e6:	2b03      	cmp	r3, #3
 800e9e8:	d9e0      	bls.n	800e9ac <find_volume+0x188>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e9ea:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800e9ee:	2b04      	cmp	r3, #4
 800e9f0:	d101      	bne.n	800e9f6 <find_volume+0x1d2>
 800e9f2:	2301      	movs	r3, #1
 800e9f4:	e2a1      	b.n	800ef3a <find_volume+0x716>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e9f6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800e9fa:	2b01      	cmp	r3, #1
 800e9fc:	d901      	bls.n	800ea02 <find_volume+0x1de>
 800e9fe:	230d      	movs	r3, #13
 800ea00:	e29b      	b.n	800ef3a <find_volume+0x716>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 800ea02:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800ea06:	2b01      	cmp	r3, #1
 800ea08:	f040 8101 	bne.w	800ec0e <find_volume+0x3ea>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800ea0c:	230b      	movs	r3, #11
 800ea0e:	65bb      	str	r3, [r7, #88]	; 0x58
 800ea10:	e002      	b.n	800ea18 <find_volume+0x1f4>
 800ea12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ea14:	3301      	adds	r3, #1
 800ea16:	65bb      	str	r3, [r7, #88]	; 0x58
 800ea18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ea1a:	2b3f      	cmp	r3, #63	; 0x3f
 800ea1c:	d806      	bhi.n	800ea2c <find_volume+0x208>
 800ea1e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ea20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ea22:	4413      	add	r3, r2
 800ea24:	333c      	adds	r3, #60	; 0x3c
 800ea26:	781b      	ldrb	r3, [r3, #0]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d0f2      	beq.n	800ea12 <find_volume+0x1ee>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800ea2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ea2e:	2b3f      	cmp	r3, #63	; 0x3f
 800ea30:	d801      	bhi.n	800ea36 <find_volume+0x212>
 800ea32:	230d      	movs	r3, #13
 800ea34:	e281      	b.n	800ef3a <find_volume+0x716>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 800ea36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea38:	333c      	adds	r3, #60	; 0x3c
 800ea3a:	3368      	adds	r3, #104	; 0x68
 800ea3c:	4618      	mov	r0, r3
 800ea3e:	f7fc ff87 	bl	800b950 <ld_word>
 800ea42:	4603      	mov	r3, r0
 800ea44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ea48:	d001      	beq.n	800ea4e <find_volume+0x22a>
 800ea4a:	230d      	movs	r3, #13
 800ea4c:	e275      	b.n	800ef3a <find_volume+0x716>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800ea4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea50:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 800ea54:	461a      	mov	r2, r3
 800ea56:	2301      	movs	r3, #1
 800ea58:	4093      	lsls	r3, r2
 800ea5a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ea5c:	8992      	ldrh	r2, [r2, #12]
 800ea5e:	4293      	cmp	r3, r2
 800ea60:	d001      	beq.n	800ea66 <find_volume+0x242>
			return FR_NO_FILESYSTEM;
 800ea62:	230d      	movs	r3, #13
 800ea64:	e269      	b.n	800ef3a <find_volume+0x716>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 800ea66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea68:	333c      	adds	r3, #60	; 0x3c
 800ea6a:	3348      	adds	r3, #72	; 0x48
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	f7fc ffaa 	bl	800b9c6 <ld_qword>
 800ea72:	4602      	mov	r2, r0
 800ea74:	460b      	mov	r3, r1
 800ea76:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ea78:	2000      	movs	r0, #0
 800ea7a:	60b9      	str	r1, [r7, #8]
 800ea7c:	60f8      	str	r0, [r7, #12]
 800ea7e:	68b9      	ldr	r1, [r7, #8]
 800ea80:	1851      	adds	r1, r2, r1
 800ea82:	6039      	str	r1, [r7, #0]
 800ea84:	68f9      	ldr	r1, [r7, #12]
 800ea86:	eb43 0101 	adc.w	r1, r3, r1
 800ea8a:	6079      	str	r1, [r7, #4]
 800ea8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ea90:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800ea94:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800ea98:	2b01      	cmp	r3, #1
 800ea9a:	d301      	bcc.n	800eaa0 <find_volume+0x27c>
 800ea9c:	230d      	movs	r3, #13
 800ea9e:	e24c      	b.n	800ef3a <find_volume+0x716>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800eaa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eaa2:	333c      	adds	r3, #60	; 0x3c
 800eaa4:	3354      	adds	r3, #84	; 0x54
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	f7fc ff6a 	bl	800b980 <ld_dword>
 800eaac:	4602      	mov	r2, r0
 800eaae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eab0:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800eab2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eab4:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 800eab8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eaba:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800eabc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eabe:	789b      	ldrb	r3, [r3, #2]
 800eac0:	2b01      	cmp	r3, #1
 800eac2:	d001      	beq.n	800eac8 <find_volume+0x2a4>
 800eac4:	230d      	movs	r3, #13
 800eac6:	e238      	b.n	800ef3a <find_volume+0x716>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800eac8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eaca:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800eace:	461a      	mov	r2, r3
 800ead0:	2301      	movs	r3, #1
 800ead2:	4093      	lsls	r3, r2
 800ead4:	b29a      	uxth	r2, r3
 800ead6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ead8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800eada:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eadc:	895b      	ldrh	r3, [r3, #10]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d104      	bne.n	800eaec <find_volume+0x2c8>
 800eae2:	230d      	movs	r3, #13
 800eae4:	e229      	b.n	800ef3a <find_volume+0x716>
 800eae6:	bf00      	nop
 800eae8:	2000455c 	.word	0x2000455c

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 800eaec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eaee:	333c      	adds	r3, #60	; 0x3c
 800eaf0:	335c      	adds	r3, #92	; 0x5c
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	f7fc ff44 	bl	800b980 <ld_dword>
 800eaf8:	63f8      	str	r0, [r7, #60]	; 0x3c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800eafa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eafc:	4a99      	ldr	r2, [pc, #612]	; (800ed64 <find_volume+0x540>)
 800eafe:	4293      	cmp	r3, r2
 800eb00:	d901      	bls.n	800eb06 <find_volume+0x2e2>
 800eb02:	230d      	movs	r3, #13
 800eb04:	e219      	b.n	800ef3a <find_volume+0x716>
		fs->n_fatent = nclst + 2;
 800eb06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb08:	1c9a      	adds	r2, r3, #2
 800eb0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb0c:	621a      	str	r2, [r3, #32]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 800eb0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb10:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800eb12:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800eb14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb16:	333c      	adds	r3, #60	; 0x3c
 800eb18:	3358      	adds	r3, #88	; 0x58
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	f7fc ff30 	bl	800b980 <ld_dword>
 800eb20:	4602      	mov	r2, r0
 800eb22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800eb24:	441a      	add	r2, r3
 800eb26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb28:	635a      	str	r2, [r3, #52]	; 0x34
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800eb2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb2c:	333c      	adds	r3, #60	; 0x3c
 800eb2e:	3350      	adds	r3, #80	; 0x50
 800eb30:	4618      	mov	r0, r3
 800eb32:	f7fc ff25 	bl	800b980 <ld_dword>
 800eb36:	4602      	mov	r2, r0
 800eb38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800eb3a:	441a      	add	r2, r3
 800eb3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb3e:	62da      	str	r2, [r3, #44]	; 0x2c
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800eb40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb44:	2200      	movs	r2, #0
 800eb46:	469a      	mov	sl, r3
 800eb48:	4693      	mov	fp, r2
 800eb4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb4c:	895b      	ldrh	r3, [r3, #10]
 800eb4e:	461a      	mov	r2, r3
 800eb50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb52:	fb02 f303 	mul.w	r3, r2, r3
 800eb56:	2200      	movs	r2, #0
 800eb58:	4698      	mov	r8, r3
 800eb5a:	4691      	mov	r9, r2
 800eb5c:	eb1a 0408 	adds.w	r4, sl, r8
 800eb60:	eb4b 0509 	adc.w	r5, fp, r9
 800eb64:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800eb68:	42a2      	cmp	r2, r4
 800eb6a:	41ab      	sbcs	r3, r5
 800eb6c:	d201      	bcs.n	800eb72 <find_volume+0x34e>
 800eb6e:	230d      	movs	r3, #13
 800eb70:	e1e3      	b.n	800ef3a <find_volume+0x716>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800eb72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb74:	333c      	adds	r3, #60	; 0x3c
 800eb76:	3360      	adds	r3, #96	; 0x60
 800eb78:	4618      	mov	r0, r3
 800eb7a:	f7fc ff01 	bl	800b980 <ld_dword>
 800eb7e:	4602      	mov	r2, r0
 800eb80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb82:	631a      	str	r2, [r3, #48]	; 0x30

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800eb84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb88:	4619      	mov	r1, r3
 800eb8a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800eb8c:	f7fd fb92 	bl	800c2b4 <clust2sect>
 800eb90:	4603      	mov	r3, r0
 800eb92:	4619      	mov	r1, r3
 800eb94:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800eb96:	f7fd faef 	bl	800c178 <move_window>
 800eb9a:	4603      	mov	r3, r0
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d001      	beq.n	800eba4 <find_volume+0x380>
 800eba0:	2301      	movs	r3, #1
 800eba2:	e1ca      	b.n	800ef3a <find_volume+0x716>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800eba4:	2300      	movs	r3, #0
 800eba6:	65bb      	str	r3, [r7, #88]	; 0x58
 800eba8:	e015      	b.n	800ebd6 <find_volume+0x3b2>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800ebaa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ebac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ebae:	4413      	add	r3, r2
 800ebb0:	333c      	adds	r3, #60	; 0x3c
 800ebb2:	781b      	ldrb	r3, [r3, #0]
 800ebb4:	2b81      	cmp	r3, #129	; 0x81
 800ebb6:	d10b      	bne.n	800ebd0 <find_volume+0x3ac>
 800ebb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ebba:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800ebbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ebc0:	3314      	adds	r3, #20
 800ebc2:	4413      	add	r3, r2
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	f7fc fedb 	bl	800b980 <ld_dword>
 800ebca:	4603      	mov	r3, r0
 800ebcc:	2b02      	cmp	r3, #2
 800ebce:	d009      	beq.n	800ebe4 <find_volume+0x3c0>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800ebd0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ebd2:	3320      	adds	r3, #32
 800ebd4:	65bb      	str	r3, [r7, #88]	; 0x58
 800ebd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ebd8:	899b      	ldrh	r3, [r3, #12]
 800ebda:	461a      	mov	r2, r3
 800ebdc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ebde:	4293      	cmp	r3, r2
 800ebe0:	d3e3      	bcc.n	800ebaa <find_volume+0x386>
 800ebe2:	e000      	b.n	800ebe6 <find_volume+0x3c2>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800ebe4:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800ebe6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ebe8:	899b      	ldrh	r3, [r3, #12]
 800ebea:	461a      	mov	r2, r3
 800ebec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ebee:	4293      	cmp	r3, r2
 800ebf0:	d101      	bne.n	800ebf6 <find_volume+0x3d2>
 800ebf2:	230d      	movs	r3, #13
 800ebf4:	e1a1      	b.n	800ef3a <find_volume+0x716>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ebf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ebf8:	f04f 32ff 	mov.w	r2, #4294967295
 800ebfc:	61da      	str	r2, [r3, #28]
 800ebfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec00:	69da      	ldr	r2, [r3, #28]
 800ec02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec04:	619a      	str	r2, [r3, #24]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 800ec06:	2304      	movs	r3, #4
 800ec08:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800ec0c:	e17d      	b.n	800ef0a <find_volume+0x6e6>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ec0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec10:	333c      	adds	r3, #60	; 0x3c
 800ec12:	330b      	adds	r3, #11
 800ec14:	4618      	mov	r0, r3
 800ec16:	f7fc fe9b 	bl	800b950 <ld_word>
 800ec1a:	4603      	mov	r3, r0
 800ec1c:	461a      	mov	r2, r3
 800ec1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec20:	899b      	ldrh	r3, [r3, #12]
 800ec22:	429a      	cmp	r2, r3
 800ec24:	d001      	beq.n	800ec2a <find_volume+0x406>
 800ec26:	230d      	movs	r3, #13
 800ec28:	e187      	b.n	800ef3a <find_volume+0x716>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ec2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec2c:	333c      	adds	r3, #60	; 0x3c
 800ec2e:	3316      	adds	r3, #22
 800ec30:	4618      	mov	r0, r3
 800ec32:	f7fc fe8d 	bl	800b950 <ld_word>
 800ec36:	4603      	mov	r3, r0
 800ec38:	667b      	str	r3, [r7, #100]	; 0x64
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ec3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d106      	bne.n	800ec4e <find_volume+0x42a>
 800ec40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec42:	333c      	adds	r3, #60	; 0x3c
 800ec44:	3324      	adds	r3, #36	; 0x24
 800ec46:	4618      	mov	r0, r3
 800ec48:	f7fc fe9a 	bl	800b980 <ld_dword>
 800ec4c:	6678      	str	r0, [r7, #100]	; 0x64
		fs->fsize = fasize;
 800ec4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec50:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ec52:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ec54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec56:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800ec5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec5c:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ec5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec60:	789b      	ldrb	r3, [r3, #2]
 800ec62:	2b01      	cmp	r3, #1
 800ec64:	d005      	beq.n	800ec72 <find_volume+0x44e>
 800ec66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec68:	789b      	ldrb	r3, [r3, #2]
 800ec6a:	2b02      	cmp	r3, #2
 800ec6c:	d001      	beq.n	800ec72 <find_volume+0x44e>
 800ec6e:	230d      	movs	r3, #13
 800ec70:	e163      	b.n	800ef3a <find_volume+0x716>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ec72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec74:	789b      	ldrb	r3, [r3, #2]
 800ec76:	461a      	mov	r2, r3
 800ec78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ec7a:	fb02 f303 	mul.w	r3, r2, r3
 800ec7e:	667b      	str	r3, [r7, #100]	; 0x64

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ec80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec82:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800ec86:	b29a      	uxth	r2, r3
 800ec88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec8a:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ec8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec8e:	895b      	ldrh	r3, [r3, #10]
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d008      	beq.n	800eca6 <find_volume+0x482>
 800ec94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec96:	895b      	ldrh	r3, [r3, #10]
 800ec98:	461a      	mov	r2, r3
 800ec9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec9c:	895b      	ldrh	r3, [r3, #10]
 800ec9e:	3b01      	subs	r3, #1
 800eca0:	4013      	ands	r3, r2
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d001      	beq.n	800ecaa <find_volume+0x486>
 800eca6:	230d      	movs	r3, #13
 800eca8:	e147      	b.n	800ef3a <find_volume+0x716>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ecaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ecac:	333c      	adds	r3, #60	; 0x3c
 800ecae:	3311      	adds	r3, #17
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	f7fc fe4d 	bl	800b950 <ld_word>
 800ecb6:	4603      	mov	r3, r0
 800ecb8:	461a      	mov	r2, r3
 800ecba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ecbc:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ecbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ecc0:	891b      	ldrh	r3, [r3, #8]
 800ecc2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ecc4:	8992      	ldrh	r2, [r2, #12]
 800ecc6:	0952      	lsrs	r2, r2, #5
 800ecc8:	b292      	uxth	r2, r2
 800ecca:	fbb3 f1f2 	udiv	r1, r3, r2
 800ecce:	fb01 f202 	mul.w	r2, r1, r2
 800ecd2:	1a9b      	subs	r3, r3, r2
 800ecd4:	b29b      	uxth	r3, r3
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d001      	beq.n	800ecde <find_volume+0x4ba>
 800ecda:	230d      	movs	r3, #13
 800ecdc:	e12d      	b.n	800ef3a <find_volume+0x716>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ecde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ece0:	333c      	adds	r3, #60	; 0x3c
 800ece2:	3313      	adds	r3, #19
 800ece4:	4618      	mov	r0, r3
 800ece6:	f7fc fe33 	bl	800b950 <ld_word>
 800ecea:	4603      	mov	r3, r0
 800ecec:	663b      	str	r3, [r7, #96]	; 0x60
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ecee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d106      	bne.n	800ed02 <find_volume+0x4de>
 800ecf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ecf6:	333c      	adds	r3, #60	; 0x3c
 800ecf8:	3320      	adds	r3, #32
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	f7fc fe40 	bl	800b980 <ld_dword>
 800ed00:	6638      	str	r0, [r7, #96]	; 0x60

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ed02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed04:	333c      	adds	r3, #60	; 0x3c
 800ed06:	330e      	adds	r3, #14
 800ed08:	4618      	mov	r0, r3
 800ed0a:	f7fc fe21 	bl	800b950 <ld_word>
 800ed0e:	4603      	mov	r3, r0
 800ed10:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ed14:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d101      	bne.n	800ed20 <find_volume+0x4fc>
 800ed1c:	230d      	movs	r3, #13
 800ed1e:	e10c      	b.n	800ef3a <find_volume+0x716>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ed20:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800ed24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ed26:	4413      	add	r3, r2
 800ed28:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ed2a:	8911      	ldrh	r1, [r2, #8]
 800ed2c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ed2e:	8992      	ldrh	r2, [r2, #12]
 800ed30:	0952      	lsrs	r2, r2, #5
 800ed32:	b292      	uxth	r2, r2
 800ed34:	fbb1 f2f2 	udiv	r2, r1, r2
 800ed38:	b292      	uxth	r2, r2
 800ed3a:	4413      	add	r3, r2
 800ed3c:	643b      	str	r3, [r7, #64]	; 0x40
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ed3e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ed40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed42:	429a      	cmp	r2, r3
 800ed44:	d201      	bcs.n	800ed4a <find_volume+0x526>
 800ed46:	230d      	movs	r3, #13
 800ed48:	e0f7      	b.n	800ef3a <find_volume+0x716>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ed4a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ed4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed4e:	1ad3      	subs	r3, r2, r3
 800ed50:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ed52:	8952      	ldrh	r2, [r2, #10]
 800ed54:	fbb3 f3f2 	udiv	r3, r3, r2
 800ed58:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ed5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d103      	bne.n	800ed68 <find_volume+0x544>
 800ed60:	230d      	movs	r3, #13
 800ed62:	e0ea      	b.n	800ef3a <find_volume+0x716>
 800ed64:	7ffffffd 	.word	0x7ffffffd
		fmt = FS_FAT32;
 800ed68:	2303      	movs	r3, #3
 800ed6a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ed6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed70:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ed74:	4293      	cmp	r3, r2
 800ed76:	d802      	bhi.n	800ed7e <find_volume+0x55a>
 800ed78:	2302      	movs	r3, #2
 800ed7a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800ed7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed80:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ed84:	4293      	cmp	r3, r2
 800ed86:	d802      	bhi.n	800ed8e <find_volume+0x56a>
 800ed88:	2301      	movs	r3, #1
 800ed8a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ed8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed90:	1c9a      	adds	r2, r3, #2
 800ed92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed94:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 800ed96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed98:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ed9a:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ed9c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800eda0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800eda2:	441a      	add	r2, r3
 800eda4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eda6:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 800eda8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800edaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800edac:	441a      	add	r2, r3
 800edae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800edb0:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 800edb2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800edb6:	2b03      	cmp	r3, #3
 800edb8:	d11e      	bne.n	800edf8 <find_volume+0x5d4>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800edba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800edbc:	333c      	adds	r3, #60	; 0x3c
 800edbe:	332a      	adds	r3, #42	; 0x2a
 800edc0:	4618      	mov	r0, r3
 800edc2:	f7fc fdc5 	bl	800b950 <ld_word>
 800edc6:	4603      	mov	r3, r0
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d001      	beq.n	800edd0 <find_volume+0x5ac>
 800edcc:	230d      	movs	r3, #13
 800edce:	e0b4      	b.n	800ef3a <find_volume+0x716>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800edd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800edd2:	891b      	ldrh	r3, [r3, #8]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d001      	beq.n	800eddc <find_volume+0x5b8>
 800edd8:	230d      	movs	r3, #13
 800edda:	e0ae      	b.n	800ef3a <find_volume+0x716>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800eddc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800edde:	333c      	adds	r3, #60	; 0x3c
 800ede0:	332c      	adds	r3, #44	; 0x2c
 800ede2:	4618      	mov	r0, r3
 800ede4:	f7fc fdcc 	bl	800b980 <ld_dword>
 800ede8:	4602      	mov	r2, r0
 800edea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800edec:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800edee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800edf0:	6a1b      	ldr	r3, [r3, #32]
 800edf2:	009b      	lsls	r3, r3, #2
 800edf4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800edf6:	e01f      	b.n	800ee38 <find_volume+0x614>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800edf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800edfa:	891b      	ldrh	r3, [r3, #8]
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d101      	bne.n	800ee04 <find_volume+0x5e0>
 800ee00:	230d      	movs	r3, #13
 800ee02:	e09a      	b.n	800ef3a <find_volume+0x716>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ee04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ee0a:	441a      	add	r2, r3
 800ee0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee0e:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ee10:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800ee14:	2b02      	cmp	r3, #2
 800ee16:	d103      	bne.n	800ee20 <find_volume+0x5fc>
 800ee18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee1a:	6a1b      	ldr	r3, [r3, #32]
 800ee1c:	005b      	lsls	r3, r3, #1
 800ee1e:	e00a      	b.n	800ee36 <find_volume+0x612>
 800ee20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee22:	6a1a      	ldr	r2, [r3, #32]
 800ee24:	4613      	mov	r3, r2
 800ee26:	005b      	lsls	r3, r3, #1
 800ee28:	4413      	add	r3, r2
 800ee2a:	085a      	lsrs	r2, r3, #1
 800ee2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee2e:	6a1b      	ldr	r3, [r3, #32]
 800ee30:	f003 0301 	and.w	r3, r3, #1
 800ee34:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800ee36:	65fb      	str	r3, [r7, #92]	; 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800ee38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ee3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee3e:	899b      	ldrh	r3, [r3, #12]
 800ee40:	4619      	mov	r1, r3
 800ee42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ee44:	440b      	add	r3, r1
 800ee46:	3b01      	subs	r3, #1
 800ee48:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ee4a:	8989      	ldrh	r1, [r1, #12]
 800ee4c:	fbb3 f3f1 	udiv	r3, r3, r1
 800ee50:	429a      	cmp	r2, r3
 800ee52:	d201      	bcs.n	800ee58 <find_volume+0x634>
 800ee54:	230d      	movs	r3, #13
 800ee56:	e070      	b.n	800ef3a <find_volume+0x716>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ee58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee5a:	f04f 32ff 	mov.w	r2, #4294967295
 800ee5e:	61da      	str	r2, [r3, #28]
 800ee60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee62:	69da      	ldr	r2, [r3, #28]
 800ee64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee66:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 800ee68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee6a:	2280      	movs	r2, #128	; 0x80
 800ee6c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800ee6e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800ee72:	2b03      	cmp	r3, #3
 800ee74:	d149      	bne.n	800ef0a <find_volume+0x6e6>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ee76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee78:	333c      	adds	r3, #60	; 0x3c
 800ee7a:	3330      	adds	r3, #48	; 0x30
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	f7fc fd67 	bl	800b950 <ld_word>
 800ee82:	4603      	mov	r3, r0
 800ee84:	2b01      	cmp	r3, #1
 800ee86:	d140      	bne.n	800ef0a <find_volume+0x6e6>
			&& move_window(fs, bsect + 1) == FR_OK)
 800ee88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ee8a:	3301      	adds	r3, #1
 800ee8c:	4619      	mov	r1, r3
 800ee8e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800ee90:	f7fd f972 	bl	800c178 <move_window>
 800ee94:	4603      	mov	r3, r0
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d137      	bne.n	800ef0a <find_volume+0x6e6>
		{
			fs->fsi_flag = 0;
 800ee9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee9c:	2200      	movs	r2, #0
 800ee9e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800eea0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eea2:	333c      	adds	r3, #60	; 0x3c
 800eea4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800eea8:	4618      	mov	r0, r3
 800eeaa:	f7fc fd51 	bl	800b950 <ld_word>
 800eeae:	4603      	mov	r3, r0
 800eeb0:	461a      	mov	r2, r3
 800eeb2:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800eeb6:	429a      	cmp	r2, r3
 800eeb8:	d127      	bne.n	800ef0a <find_volume+0x6e6>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800eeba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eebc:	333c      	adds	r3, #60	; 0x3c
 800eebe:	4618      	mov	r0, r3
 800eec0:	f7fc fd5e 	bl	800b980 <ld_dword>
 800eec4:	4603      	mov	r3, r0
 800eec6:	4a1f      	ldr	r2, [pc, #124]	; (800ef44 <find_volume+0x720>)
 800eec8:	4293      	cmp	r3, r2
 800eeca:	d11e      	bne.n	800ef0a <find_volume+0x6e6>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800eecc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eece:	333c      	adds	r3, #60	; 0x3c
 800eed0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800eed4:	4618      	mov	r0, r3
 800eed6:	f7fc fd53 	bl	800b980 <ld_dword>
 800eeda:	4603      	mov	r3, r0
 800eedc:	4a1a      	ldr	r2, [pc, #104]	; (800ef48 <find_volume+0x724>)
 800eede:	4293      	cmp	r3, r2
 800eee0:	d113      	bne.n	800ef0a <find_volume+0x6e6>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800eee2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eee4:	333c      	adds	r3, #60	; 0x3c
 800eee6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800eeea:	4618      	mov	r0, r3
 800eeec:	f7fc fd48 	bl	800b980 <ld_dword>
 800eef0:	4602      	mov	r2, r0
 800eef2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eef4:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800eef6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eef8:	333c      	adds	r3, #60	; 0x3c
 800eefa:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800eefe:	4618      	mov	r0, r3
 800ef00:	f7fc fd3e 	bl	800b980 <ld_dword>
 800ef04:	4602      	mov	r2, r0
 800ef06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef08:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ef0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef0c:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800ef10:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ef12:	4b0e      	ldr	r3, [pc, #56]	; (800ef4c <find_volume+0x728>)
 800ef14:	881b      	ldrh	r3, [r3, #0]
 800ef16:	3301      	adds	r3, #1
 800ef18:	b29a      	uxth	r2, r3
 800ef1a:	4b0c      	ldr	r3, [pc, #48]	; (800ef4c <find_volume+0x728>)
 800ef1c:	801a      	strh	r2, [r3, #0]
 800ef1e:	4b0b      	ldr	r3, [pc, #44]	; (800ef4c <find_volume+0x728>)
 800ef20:	881a      	ldrh	r2, [r3, #0]
 800ef22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef24:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800ef26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef28:	4a09      	ldr	r2, [pc, #36]	; (800ef50 <find_volume+0x72c>)
 800ef2a:	611a      	str	r2, [r3, #16]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 800ef2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef2e:	4a09      	ldr	r2, [pc, #36]	; (800ef54 <find_volume+0x730>)
 800ef30:	615a      	str	r2, [r3, #20]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ef32:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800ef34:	f7fd f8b8 	bl	800c0a8 <clear_lock>
#endif
	return FR_OK;
 800ef38:	2300      	movs	r3, #0
}
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	3770      	adds	r7, #112	; 0x70
 800ef3e:	46bd      	mov	sp, r7
 800ef40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ef44:	41615252 	.word	0x41615252
 800ef48:	61417272 	.word	0x61417272
 800ef4c:	20004560 	.word	0x20004560
 800ef50:	20004864 	.word	0x20004864
 800ef54:	20004604 	.word	0x20004604

0800ef58 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ef58:	b580      	push	{r7, lr}
 800ef5a:	b084      	sub	sp, #16
 800ef5c:	af00      	add	r7, sp, #0
 800ef5e:	6078      	str	r0, [r7, #4]
 800ef60:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ef62:	2309      	movs	r3, #9
 800ef64:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d01c      	beq.n	800efa6 <validate+0x4e>
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d018      	beq.n	800efa6 <validate+0x4e>
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	781b      	ldrb	r3, [r3, #0]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d013      	beq.n	800efa6 <validate+0x4e>
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	889a      	ldrh	r2, [r3, #4]
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	88db      	ldrh	r3, [r3, #6]
 800ef88:	429a      	cmp	r2, r3
 800ef8a:	d10c      	bne.n	800efa6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	785b      	ldrb	r3, [r3, #1]
 800ef92:	4618      	mov	r0, r3
 800ef94:	f7fc fc3e 	bl	800b814 <disk_status>
 800ef98:	4603      	mov	r3, r0
 800ef9a:	f003 0301 	and.w	r3, r3, #1
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d101      	bne.n	800efa6 <validate+0x4e>
			res = FR_OK;
 800efa2:	2300      	movs	r3, #0
 800efa4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800efa6:	7bfb      	ldrb	r3, [r7, #15]
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d102      	bne.n	800efb2 <validate+0x5a>
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	e000      	b.n	800efb4 <validate+0x5c>
 800efb2:	2300      	movs	r3, #0
 800efb4:	683a      	ldr	r2, [r7, #0]
 800efb6:	6013      	str	r3, [r2, #0]
	return res;
 800efb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800efba:	4618      	mov	r0, r3
 800efbc:	3710      	adds	r7, #16
 800efbe:	46bd      	mov	sp, r7
 800efc0:	bd80      	pop	{r7, pc}
	...

0800efc4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800efc4:	b580      	push	{r7, lr}
 800efc6:	b088      	sub	sp, #32
 800efc8:	af00      	add	r7, sp, #0
 800efca:	60f8      	str	r0, [r7, #12]
 800efcc:	60b9      	str	r1, [r7, #8]
 800efce:	4613      	mov	r3, r2
 800efd0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800efd2:	68bb      	ldr	r3, [r7, #8]
 800efd4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800efd6:	f107 0310 	add.w	r3, r7, #16
 800efda:	4618      	mov	r0, r3
 800efdc:	f7ff fb7a 	bl	800e6d4 <get_ldnumber>
 800efe0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800efe2:	69fb      	ldr	r3, [r7, #28]
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	da01      	bge.n	800efec <f_mount+0x28>
 800efe8:	230b      	movs	r3, #11
 800efea:	e02b      	b.n	800f044 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800efec:	4a17      	ldr	r2, [pc, #92]	; (800f04c <f_mount+0x88>)
 800efee:	69fb      	ldr	r3, [r7, #28]
 800eff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eff4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800eff6:	69bb      	ldr	r3, [r7, #24]
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d005      	beq.n	800f008 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800effc:	69b8      	ldr	r0, [r7, #24]
 800effe:	f7fd f853 	bl	800c0a8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800f002:	69bb      	ldr	r3, [r7, #24]
 800f004:	2200      	movs	r2, #0
 800f006:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d002      	beq.n	800f014 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	2200      	movs	r2, #0
 800f012:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800f014:	68fa      	ldr	r2, [r7, #12]
 800f016:	490d      	ldr	r1, [pc, #52]	; (800f04c <f_mount+0x88>)
 800f018:	69fb      	ldr	r3, [r7, #28]
 800f01a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	2b00      	cmp	r3, #0
 800f022:	d002      	beq.n	800f02a <f_mount+0x66>
 800f024:	79fb      	ldrb	r3, [r7, #7]
 800f026:	2b01      	cmp	r3, #1
 800f028:	d001      	beq.n	800f02e <f_mount+0x6a>
 800f02a:	2300      	movs	r3, #0
 800f02c:	e00a      	b.n	800f044 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f02e:	f107 010c 	add.w	r1, r7, #12
 800f032:	f107 0308 	add.w	r3, r7, #8
 800f036:	2200      	movs	r2, #0
 800f038:	4618      	mov	r0, r3
 800f03a:	f7ff fbf3 	bl	800e824 <find_volume>
 800f03e:	4603      	mov	r3, r0
 800f040:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800f042:	7dfb      	ldrb	r3, [r7, #23]
}
 800f044:	4618      	mov	r0, r3
 800f046:	3720      	adds	r7, #32
 800f048:	46bd      	mov	sp, r7
 800f04a:	bd80      	pop	{r7, pc}
 800f04c:	2000455c 	.word	0x2000455c

0800f050 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f050:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f054:	b0a8      	sub	sp, #160	; 0xa0
 800f056:	af00      	add	r7, sp, #0
 800f058:	6278      	str	r0, [r7, #36]	; 0x24
 800f05a:	6239      	str	r1, [r7, #32]
 800f05c:	4613      	mov	r3, r2
 800f05e:	77fb      	strb	r3, [r7, #31]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800f060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f062:	2b00      	cmp	r3, #0
 800f064:	d101      	bne.n	800f06a <f_open+0x1a>
 800f066:	2309      	movs	r3, #9
 800f068:	e2c0      	b.n	800f5ec <f_open+0x59c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800f06a:	7ffb      	ldrb	r3, [r7, #31]
 800f06c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f070:	77fb      	strb	r3, [r7, #31]
	res = find_volume(&path, &fs, mode);
 800f072:	7ffb      	ldrb	r3, [r7, #31]
 800f074:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800f078:	f107 0020 	add.w	r0, r7, #32
 800f07c:	461a      	mov	r2, r3
 800f07e:	f7ff fbd1 	bl	800e824 <find_volume>
 800f082:	4603      	mov	r3, r0
 800f084:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	if (res == FR_OK) {
 800f088:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	f040 82a4 	bne.w	800f5da <f_open+0x58a>
		dj.obj.fs = fs;
 800f092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f094:	633b      	str	r3, [r7, #48]	; 0x30
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800f096:	6a3b      	ldr	r3, [r7, #32]
 800f098:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800f09c:	4619      	mov	r1, r3
 800f09e:	4610      	mov	r0, r2
 800f0a0:	f7ff fa6a 	bl	800e578 <follow_path>
 800f0a4:	4603      	mov	r3, r0
 800f0a6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800f0aa:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d11a      	bne.n	800f0e8 <f_open+0x98>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800f0b2:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800f0b6:	b25b      	sxtb	r3, r3
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	da03      	bge.n	800f0c4 <f_open+0x74>
				res = FR_INVALID_NAME;
 800f0bc:	2306      	movs	r3, #6
 800f0be:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 800f0c2:	e011      	b.n	800f0e8 <f_open+0x98>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f0c4:	7ffb      	ldrb	r3, [r7, #31]
 800f0c6:	f023 0301 	bic.w	r3, r3, #1
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	bf14      	ite	ne
 800f0ce:	2301      	movne	r3, #1
 800f0d0:	2300      	moveq	r3, #0
 800f0d2:	b2db      	uxtb	r3, r3
 800f0d4:	461a      	mov	r2, r3
 800f0d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f0da:	4611      	mov	r1, r2
 800f0dc:	4618      	mov	r0, r3
 800f0de:	f7fc fe9b 	bl	800be18 <chk_lock>
 800f0e2:	4603      	mov	r3, r0
 800f0e4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f0e8:	7ffb      	ldrb	r3, [r7, #31]
 800f0ea:	f003 031c 	and.w	r3, r3, #28
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	f000 8117 	beq.w	800f322 <f_open+0x2d2>
			if (res != FR_OK) {					/* No file, create new */
 800f0f4:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d017      	beq.n	800f12c <f_open+0xdc>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800f0fc:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800f100:	2b04      	cmp	r3, #4
 800f102:	d10e      	bne.n	800f122 <f_open+0xd2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f104:	f7fc fee4 	bl	800bed0 <enq_lock>
 800f108:	4603      	mov	r3, r0
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d006      	beq.n	800f11c <f_open+0xcc>
 800f10e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f112:	4618      	mov	r0, r3
 800f114:	f7fe fece 	bl	800deb4 <dir_register>
 800f118:	4603      	mov	r3, r0
 800f11a:	e000      	b.n	800f11e <f_open+0xce>
 800f11c:	2312      	movs	r3, #18
 800f11e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f122:	7ffb      	ldrb	r3, [r7, #31]
 800f124:	f043 0308 	orr.w	r3, r3, #8
 800f128:	77fb      	strb	r3, [r7, #31]
 800f12a:	e011      	b.n	800f150 <f_open+0x100>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f12c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f130:	f003 0311 	and.w	r3, r3, #17
 800f134:	2b00      	cmp	r3, #0
 800f136:	d003      	beq.n	800f140 <f_open+0xf0>
					res = FR_DENIED;
 800f138:	2307      	movs	r3, #7
 800f13a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 800f13e:	e007      	b.n	800f150 <f_open+0x100>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800f140:	7ffb      	ldrb	r3, [r7, #31]
 800f142:	f003 0304 	and.w	r3, r3, #4
 800f146:	2b00      	cmp	r3, #0
 800f148:	d002      	beq.n	800f150 <f_open+0x100>
 800f14a:	2308      	movs	r3, #8
 800f14c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f150:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800f154:	2b00      	cmp	r3, #0
 800f156:	f040 8100 	bne.w	800f35a <f_open+0x30a>
 800f15a:	7ffb      	ldrb	r3, [r7, #31]
 800f15c:	f003 0308 	and.w	r3, r3, #8
 800f160:	2b00      	cmp	r3, #0
 800f162:	f000 80fa 	beq.w	800f35a <f_open+0x30a>
				dw = GET_FATTIME();
 800f166:	f7f9 fa47 	bl	80085f8 <get_fattime>
 800f16a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 800f16e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f170:	781b      	ldrb	r3, [r3, #0]
 800f172:	2b04      	cmp	r3, #4
 800f174:	f040 8085 	bne.w	800f282 <f_open+0x232>
					/* Get current allocation info */
					fp->obj.fs = fs;
 800f178:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f17c:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 800f17e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f180:	695b      	ldr	r3, [r3, #20]
 800f182:	3334      	adds	r3, #52	; 0x34
 800f184:	4618      	mov	r0, r3
 800f186:	f7fc fbfb 	bl	800b980 <ld_dword>
 800f18a:	4602      	mov	r2, r0
 800f18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f18e:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800f190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f192:	695b      	ldr	r3, [r3, #20]
 800f194:	3338      	adds	r3, #56	; 0x38
 800f196:	4618      	mov	r0, r3
 800f198:	f7fc fc15 	bl	800b9c6 <ld_qword>
 800f19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f19e:	e9c3 0104 	strd	r0, r1, [r3, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800f1a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1a4:	695b      	ldr	r3, [r3, #20]
 800f1a6:	3321      	adds	r3, #33	; 0x21
 800f1a8:	781b      	ldrb	r3, [r3, #0]
 800f1aa:	f003 0302 	and.w	r3, r3, #2
 800f1ae:	b2db      	uxtb	r3, r3
 800f1b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f1b2:	71d3      	strb	r3, [r2, #7]
					fp->obj.n_frag = 0;
 800f1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1b6:	2200      	movs	r2, #0
 800f1b8:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 800f1ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1bc:	695b      	ldr	r3, [r3, #20]
 800f1be:	3308      	adds	r3, #8
 800f1c0:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800f1c4:	4618      	mov	r0, r3
 800f1c6:	f7fc fcf4 	bl	800bbb2 <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 800f1ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1cc:	695b      	ldr	r3, [r3, #20]
 800f1ce:	f103 0214 	add.w	r2, r3, #20
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	7013      	strb	r3, [r2, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 800f1d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1d8:	695b      	ldr	r3, [r3, #20]
 800f1da:	330c      	adds	r3, #12
 800f1dc:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800f1e0:	4618      	mov	r0, r3
 800f1e2:	f7fc fce6 	bl	800bbb2 <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 800f1e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1e8:	695b      	ldr	r3, [r3, #20]
 800f1ea:	f103 0215 	add.w	r2, r3, #21
 800f1ee:	2300      	movs	r3, #0
 800f1f0:	7013      	strb	r3, [r2, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 800f1f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1f4:	695b      	ldr	r3, [r3, #20]
 800f1f6:	1d1a      	adds	r2, r3, #4
 800f1f8:	2320      	movs	r3, #32
 800f1fa:	7013      	strb	r3, [r2, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 800f1fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1fe:	695b      	ldr	r3, [r3, #20]
 800f200:	3334      	adds	r3, #52	; 0x34
 800f202:	2100      	movs	r1, #0
 800f204:	4618      	mov	r0, r3
 800f206:	f7fc fcd4 	bl	800bbb2 <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 800f20a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f20c:	695b      	ldr	r3, [r3, #20]
 800f20e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f212:	f04f 0200 	mov.w	r2, #0
 800f216:	f04f 0300 	mov.w	r3, #0
 800f21a:	4608      	mov	r0, r1
 800f21c:	f7fc fcf5 	bl	800bc0a <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 800f220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f222:	695b      	ldr	r3, [r3, #20]
 800f224:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800f228:	f04f 0200 	mov.w	r2, #0
 800f22c:	f04f 0300 	mov.w	r3, #0
 800f230:	4608      	mov	r0, r1
 800f232:	f7fc fcea 	bl	800bc0a <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 800f236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f238:	695b      	ldr	r3, [r3, #20]
 800f23a:	f103 0221 	add.w	r2, r3, #33	; 0x21
 800f23e:	2301      	movs	r3, #1
 800f240:	7013      	strb	r3, [r2, #0]
					res = store_xdir(&dj);
 800f242:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f246:	4618      	mov	r0, r3
 800f248:	f7fe fb82 	bl	800d950 <store_xdir>
 800f24c:	4603      	mov	r3, r0
 800f24e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 800f252:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800f256:	2b00      	cmp	r3, #0
 800f258:	d17f      	bne.n	800f35a <f_open+0x30a>
 800f25a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f25c:	689b      	ldr	r3, [r3, #8]
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d07b      	beq.n	800f35a <f_open+0x30a>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 800f262:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f266:	689b      	ldr	r3, [r3, #8]
 800f268:	2200      	movs	r2, #0
 800f26a:	4619      	mov	r1, r3
 800f26c:	f7fd fc14 	bl	800ca98 <remove_chain>
 800f270:	4603      	mov	r3, r0
 800f272:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 800f276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f278:	689b      	ldr	r3, [r3, #8]
 800f27a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f27c:	3b01      	subs	r3, #1
 800f27e:	6193      	str	r3, [r2, #24]
 800f280:	e06b      	b.n	800f35a <f_open+0x30a>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800f282:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f284:	330e      	adds	r3, #14
 800f286:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800f28a:	4618      	mov	r0, r3
 800f28c:	f7fc fc91 	bl	800bbb2 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800f290:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f292:	3316      	adds	r3, #22
 800f294:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800f298:	4618      	mov	r0, r3
 800f29a:	f7fc fc8a 	bl	800bbb2 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f29e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f2a0:	f103 020b 	add.w	r2, r3, #11
 800f2a4:	2320      	movs	r3, #32
 800f2a6:	7013      	strb	r3, [r2, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800f2a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f2aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f2ac:	4619      	mov	r1, r3
 800f2ae:	4610      	mov	r0, r2
 800f2b0:	f7fd ffc9 	bl	800d246 <ld_clust>
 800f2b4:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800f2b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f2ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f2bc:	2200      	movs	r2, #0
 800f2be:	4619      	mov	r1, r3
 800f2c0:	f7fd ffe0 	bl	800d284 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800f2c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f2c6:	331c      	adds	r3, #28
 800f2c8:	2100      	movs	r1, #0
 800f2ca:	4618      	mov	r0, r3
 800f2cc:	f7fc fc71 	bl	800bbb2 <st_dword>
					fs->wflag = 1;
 800f2d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f2d2:	2301      	movs	r3, #1
 800f2d4:	70d3      	strb	r3, [r2, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800f2d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d03d      	beq.n	800f35a <f_open+0x30a>
						dw = fs->winsect;
 800f2de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
						res = remove_chain(&dj.obj, cl, 0);
 800f2e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f2ea:	2200      	movs	r2, #0
 800f2ec:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800f2f0:	4618      	mov	r0, r3
 800f2f2:	f7fd fbd1 	bl	800ca98 <remove_chain>
 800f2f6:	4603      	mov	r3, r0
 800f2f8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						if (res == FR_OK) {
 800f2fc:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800f300:	2b00      	cmp	r3, #0
 800f302:	d12a      	bne.n	800f35a <f_open+0x30a>
							res = move_window(fs, dw);
 800f304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f306:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800f30a:	4618      	mov	r0, r3
 800f30c:	f7fc ff34 	bl	800c178 <move_window>
 800f310:	4603      	mov	r3, r0
 800f312:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800f316:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f318:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f31c:	3b01      	subs	r3, #1
 800f31e:	6193      	str	r3, [r2, #24]
 800f320:	e01b      	b.n	800f35a <f_open+0x30a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800f322:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800f326:	2b00      	cmp	r3, #0
 800f328:	d117      	bne.n	800f35a <f_open+0x30a>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800f32a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f32e:	f003 0310 	and.w	r3, r3, #16
 800f332:	2b00      	cmp	r3, #0
 800f334:	d003      	beq.n	800f33e <f_open+0x2ee>
					res = FR_NO_FILE;
 800f336:	2304      	movs	r3, #4
 800f338:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 800f33c:	e00d      	b.n	800f35a <f_open+0x30a>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800f33e:	7ffb      	ldrb	r3, [r7, #31]
 800f340:	f003 0302 	and.w	r3, r3, #2
 800f344:	2b00      	cmp	r3, #0
 800f346:	d008      	beq.n	800f35a <f_open+0x30a>
 800f348:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f34c:	f003 0301 	and.w	r3, r3, #1
 800f350:	2b00      	cmp	r3, #0
 800f352:	d002      	beq.n	800f35a <f_open+0x30a>
						res = FR_DENIED;
 800f354:	2307      	movs	r3, #7
 800f356:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
					}
				}
			}
		}
		if (res == FR_OK) {
 800f35a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d128      	bne.n	800f3b4 <f_open+0x364>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800f362:	7ffb      	ldrb	r3, [r7, #31]
 800f364:	f003 0308 	and.w	r3, r3, #8
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d003      	beq.n	800f374 <f_open+0x324>
				mode |= FA_MODIFIED;
 800f36c:	7ffb      	ldrb	r3, [r7, #31]
 800f36e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f372:	77fb      	strb	r3, [r7, #31]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800f374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f376:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f37a:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 800f37c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f37e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f380:	64da      	str	r2, [r3, #76]	; 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f382:	7ffb      	ldrb	r3, [r7, #31]
 800f384:	f023 0301 	bic.w	r3, r3, #1
 800f388:	2b00      	cmp	r3, #0
 800f38a:	bf14      	ite	ne
 800f38c:	2301      	movne	r3, #1
 800f38e:	2300      	moveq	r3, #0
 800f390:	b2db      	uxtb	r3, r3
 800f392:	461a      	mov	r2, r3
 800f394:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f398:	4611      	mov	r1, r2
 800f39a:	4618      	mov	r0, r3
 800f39c:	f7fc fdba 	bl	800bf14 <inc_lock>
 800f3a0:	4602      	mov	r2, r0
 800f3a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3a4:	62da      	str	r2, [r3, #44]	; 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800f3a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d102      	bne.n	800f3b4 <f_open+0x364>
 800f3ae:	2302      	movs	r3, #2
 800f3b0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800f3b4:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	f040 810e 	bne.w	800f5da <f_open+0x58a>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800f3be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3c0:	781b      	ldrb	r3, [r3, #0]
 800f3c2:	2b04      	cmp	r3, #4
 800f3c4:	d12d      	bne.n	800f422 <f_open+0x3d2>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 800f3c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3ca:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800f3cc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800f3d0:	4613      	mov	r3, r2
 800f3d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800f3d6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800f3da:	431a      	orrs	r2, r3
 800f3dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3de:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 800f3e0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3e4:	629a      	str	r2, [r3, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800f3e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3e8:	695b      	ldr	r3, [r3, #20]
 800f3ea:	3334      	adds	r3, #52	; 0x34
 800f3ec:	4618      	mov	r0, r3
 800f3ee:	f7fc fac7 	bl	800b980 <ld_dword>
 800f3f2:	4602      	mov	r2, r0
 800f3f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3f6:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800f3f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3fa:	695b      	ldr	r3, [r3, #20]
 800f3fc:	3338      	adds	r3, #56	; 0x38
 800f3fe:	4618      	mov	r0, r3
 800f400:	f7fc fae1 	bl	800b9c6 <ld_qword>
 800f404:	4602      	mov	r2, r0
 800f406:	460b      	mov	r3, r1
 800f408:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f40a:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800f40e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f410:	695b      	ldr	r3, [r3, #20]
 800f412:	3321      	adds	r3, #33	; 0x21
 800f414:	781b      	ldrb	r3, [r3, #0]
 800f416:	f003 0302 	and.w	r3, r3, #2
 800f41a:	b2da      	uxtb	r2, r3
 800f41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f41e:	71da      	strb	r2, [r3, #7]
 800f420:	e016      	b.n	800f450 <f_open+0x400>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800f422:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f424:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f426:	4619      	mov	r1, r3
 800f428:	4610      	mov	r0, r2
 800f42a:	f7fd ff0c 	bl	800d246 <ld_clust>
 800f42e:	4602      	mov	r2, r0
 800f430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f432:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800f434:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f436:	331c      	adds	r3, #28
 800f438:	4618      	mov	r0, r3
 800f43a:	f7fc faa1 	bl	800b980 <ld_dword>
 800f43e:	4603      	mov	r3, r0
 800f440:	2200      	movs	r2, #0
 800f442:	613b      	str	r3, [r7, #16]
 800f444:	617a      	str	r2, [r7, #20]
 800f446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f448:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800f44c:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f452:	2200      	movs	r2, #0
 800f454:	651a      	str	r2, [r3, #80]	; 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800f456:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f45a:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800f45c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f45e:	88da      	ldrh	r2, [r3, #6]
 800f460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f462:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800f464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f466:	7ffa      	ldrb	r2, [r7, #31]
 800f468:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 800f46c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f46e:	2200      	movs	r2, #0
 800f470:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 800f474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f476:	2200      	movs	r2, #0
 800f478:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 800f47a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f47c:	f04f 0200 	mov.w	r2, #0
 800f480:	f04f 0300 	mov.w	r3, #0
 800f484:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f48a:	3354      	adds	r3, #84	; 0x54
 800f48c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f490:	2100      	movs	r1, #0
 800f492:	4618      	mov	r0, r3
 800f494:	f7fc fc62 	bl	800bd5c <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800f498:	7ffb      	ldrb	r3, [r7, #31]
 800f49a:	f003 0320 	and.w	r3, r3, #32
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	f000 809b 	beq.w	800f5da <f_open+0x58a>
 800f4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4a6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f4aa:	4313      	orrs	r3, r2
 800f4ac:	f000 8095 	beq.w	800f5da <f_open+0x58a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800f4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4b2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f4b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f4b8:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f4bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4be:	895b      	ldrh	r3, [r3, #10]
 800f4c0:	461a      	mov	r2, r3
 800f4c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4c4:	899b      	ldrh	r3, [r3, #12]
 800f4c6:	fb02 f303 	mul.w	r3, r2, r3
 800f4ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800f4ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4d0:	689b      	ldr	r3, [r3, #8]
 800f4d2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f4d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4d8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f4dc:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
 800f4e0:	e023      	b.n	800f52a <f_open+0x4da>
					clst = get_fat(&fp->obj, clst);
 800f4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4e4:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800f4e8:	4618      	mov	r0, r3
 800f4ea:	f7fc ff03 	bl	800c2f4 <get_fat>
 800f4ee:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
					if (clst <= 1) res = FR_INT_ERR;
 800f4f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f4f6:	2b01      	cmp	r3, #1
 800f4f8:	d802      	bhi.n	800f500 <f_open+0x4b0>
 800f4fa:	2302      	movs	r3, #2
 800f4fc:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f500:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f504:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f508:	d102      	bne.n	800f510 <f_open+0x4c0>
 800f50a:	2301      	movs	r3, #1
 800f50c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f510:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f514:	2200      	movs	r2, #0
 800f516:	4698      	mov	r8, r3
 800f518:	4691      	mov	r9, r2
 800f51a:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800f51e:	ebb2 0a08 	subs.w	sl, r2, r8
 800f522:	eb63 0b09 	sbc.w	fp, r3, r9
 800f526:	e9c7 ab24 	strd	sl, fp, [r7, #144]	; 0x90
 800f52a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d10a      	bne.n	800f548 <f_open+0x4f8>
 800f532:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f536:	2200      	movs	r2, #0
 800f538:	461c      	mov	r4, r3
 800f53a:	4615      	mov	r5, r2
 800f53c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800f540:	4294      	cmp	r4, r2
 800f542:	eb75 0303 	sbcs.w	r3, r5, r3
 800f546:	d3cc      	bcc.n	800f4e2 <f_open+0x492>
				}
				fp->clust = clst;
 800f548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f54a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800f54e:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f550:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800f554:	2b00      	cmp	r3, #0
 800f556:	d140      	bne.n	800f5da <f_open+0x58a>
 800f558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f55a:	899b      	ldrh	r3, [r3, #12]
 800f55c:	b29b      	uxth	r3, r3
 800f55e:	2200      	movs	r2, #0
 800f560:	60bb      	str	r3, [r7, #8]
 800f562:	60fa      	str	r2, [r7, #12]
 800f564:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800f568:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f56c:	f7f0 fe88 	bl	8000280 <__aeabi_uldivmod>
 800f570:	4313      	orrs	r3, r2
 800f572:	d032      	beq.n	800f5da <f_open+0x58a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800f574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f576:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800f57a:	4618      	mov	r0, r3
 800f57c:	f7fc fe9a 	bl	800c2b4 <clust2sect>
 800f580:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
 800f584:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d103      	bne.n	800f594 <f_open+0x544>
						res = FR_INT_ERR;
 800f58c:	2302      	movs	r3, #2
 800f58e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 800f592:	e022      	b.n	800f5da <f_open+0x58a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800f594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f596:	899b      	ldrh	r3, [r3, #12]
 800f598:	b29b      	uxth	r3, r3
 800f59a:	2200      	movs	r2, #0
 800f59c:	603b      	str	r3, [r7, #0]
 800f59e:	607a      	str	r2, [r7, #4]
 800f5a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f5a4:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800f5a8:	f7f0 fe6a 	bl	8000280 <__aeabi_uldivmod>
 800f5ac:	4602      	mov	r2, r0
 800f5ae:	460b      	mov	r3, r1
 800f5b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f5b4:	441a      	add	r2, r3
 800f5b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5b8:	645a      	str	r2, [r3, #68]	; 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f5ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5bc:	7858      	ldrb	r0, [r3, #1]
 800f5be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5c0:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800f5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f5c8:	2301      	movs	r3, #1
 800f5ca:	f7fc f963 	bl	800b894 <disk_read>
 800f5ce:	4603      	mov	r3, r0
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d002      	beq.n	800f5da <f_open+0x58a>
 800f5d4:	2301      	movs	r3, #1
 800f5d6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800f5da:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d002      	beq.n	800f5e8 <f_open+0x598>
 800f5e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5e4:	2200      	movs	r2, #0
 800f5e6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f5e8:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
}
 800f5ec:	4618      	mov	r0, r3
 800f5ee:	37a0      	adds	r7, #160	; 0xa0
 800f5f0:	46bd      	mov	sp, r7
 800f5f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800f5f6 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800f5f6:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f5fa:	b098      	sub	sp, #96	; 0x60
 800f5fc:	af00      	add	r7, sp, #0
 800f5fe:	62f8      	str	r0, [r7, #44]	; 0x2c
 800f600:	62b9      	str	r1, [r7, #40]	; 0x28
 800f602:	627a      	str	r2, [r7, #36]	; 0x24
 800f604:	623b      	str	r3, [r7, #32]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800f606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f608:	64fb      	str	r3, [r7, #76]	; 0x4c


	*br = 0;	/* Clear read byte counter */
 800f60a:	6a3a      	ldr	r2, [r7, #32]
 800f60c:	2300      	movs	r3, #0
 800f60e:	6013      	str	r3, [r2, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800f610:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f612:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f616:	4619      	mov	r1, r3
 800f618:	4610      	mov	r0, r2
 800f61a:	f7ff fc9d 	bl	800ef58 <validate>
 800f61e:	4603      	mov	r3, r0
 800f620:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f624:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d108      	bne.n	800f63e <f_read+0x48>
 800f62c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f62e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f632:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f636:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d002      	beq.n	800f644 <f_read+0x4e>
 800f63e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f642:	e16b      	b.n	800f91c <f_read+0x326>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800f644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f646:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f64a:	f003 0301 	and.w	r3, r3, #1
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d101      	bne.n	800f656 <f_read+0x60>
 800f652:	2307      	movs	r3, #7
 800f654:	e162      	b.n	800f91c <f_read+0x326>
	remain = fp->obj.objsize - fp->fptr;
 800f656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f658:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800f65c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f65e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800f662:	ebb0 0802 	subs.w	r8, r0, r2
 800f666:	eb61 0903 	sbc.w	r9, r1, r3
 800f66a:	e9c7 8910 	strd	r8, r9, [r7, #64]	; 0x40
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800f66e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f670:	2200      	movs	r2, #0
 800f672:	461c      	mov	r4, r3
 800f674:	4615      	mov	r5, r2
 800f676:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800f67a:	42a2      	cmp	r2, r4
 800f67c:	41ab      	sbcs	r3, r5
 800f67e:	f080 8148 	bcs.w	800f912 <f_read+0x31c>
 800f682:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f684:	627b      	str	r3, [r7, #36]	; 0x24

	for ( ;  btr;								/* Repeat until all data read */
 800f686:	e144      	b.n	800f912 <f_read+0x31c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800f688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f68a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800f68e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f690:	899b      	ldrh	r3, [r3, #12]
 800f692:	b29b      	uxth	r3, r3
 800f694:	2200      	movs	r2, #0
 800f696:	61bb      	str	r3, [r7, #24]
 800f698:	61fa      	str	r2, [r7, #28]
 800f69a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f69e:	f7f0 fdef 	bl	8000280 <__aeabi_uldivmod>
 800f6a2:	4313      	orrs	r3, r2
 800f6a4:	f040 80e9 	bne.w	800f87a <f_read+0x284>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800f6a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6aa:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800f6ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6b0:	899b      	ldrh	r3, [r3, #12]
 800f6b2:	b29b      	uxth	r3, r3
 800f6b4:	2200      	movs	r2, #0
 800f6b6:	613b      	str	r3, [r7, #16]
 800f6b8:	617a      	str	r2, [r7, #20]
 800f6ba:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f6be:	f7f0 fddf 	bl	8000280 <__aeabi_uldivmod>
 800f6c2:	4602      	mov	r2, r0
 800f6c4:	460b      	mov	r3, r1
 800f6c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6c8:	895b      	ldrh	r3, [r3, #10]
 800f6ca:	3b01      	subs	r3, #1
 800f6cc:	4013      	ands	r3, r2
 800f6ce:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (csect == 0) {					/* On the cluster boundary? */
 800f6d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d132      	bne.n	800f73c <f_read+0x146>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800f6d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6d8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800f6dc:	4313      	orrs	r3, r2
 800f6de:	d103      	bne.n	800f6e8 <f_read+0xf2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800f6e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6e2:	689b      	ldr	r3, [r3, #8]
 800f6e4:	65bb      	str	r3, [r7, #88]	; 0x58
 800f6e6:	e013      	b.n	800f710 <f_read+0x11a>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800f6e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d007      	beq.n	800f700 <f_read+0x10a>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f6f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6f2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800f6f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f6f8:	f7fd fb83 	bl	800ce02 <clmt_clust>
 800f6fc:	65b8      	str	r0, [r7, #88]	; 0x58
 800f6fe:	e007      	b.n	800f710 <f_read+0x11a>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800f700:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f706:	4619      	mov	r1, r3
 800f708:	4610      	mov	r0, r2
 800f70a:	f7fc fdf3 	bl	800c2f4 <get_fat>
 800f70e:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800f710:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f712:	2b01      	cmp	r3, #1
 800f714:	d805      	bhi.n	800f722 <f_read+0x12c>
 800f716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f718:	2202      	movs	r2, #2
 800f71a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800f71e:	2302      	movs	r3, #2
 800f720:	e0fc      	b.n	800f91c <f_read+0x326>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f722:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f724:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f728:	d105      	bne.n	800f736 <f_read+0x140>
 800f72a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f72c:	2201      	movs	r2, #1
 800f72e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800f732:	2301      	movs	r3, #1
 800f734:	e0f2      	b.n	800f91c <f_read+0x326>
				fp->clust = clst;				/* Update current cluster */
 800f736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f738:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f73a:	641a      	str	r2, [r3, #64]	; 0x40
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800f73c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f73e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f742:	4619      	mov	r1, r3
 800f744:	4610      	mov	r0, r2
 800f746:	f7fc fdb5 	bl	800c2b4 <clust2sect>
 800f74a:	63b8      	str	r0, [r7, #56]	; 0x38
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f74c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d105      	bne.n	800f75e <f_read+0x168>
 800f752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f754:	2202      	movs	r2, #2
 800f756:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800f75a:	2302      	movs	r3, #2
 800f75c:	e0de      	b.n	800f91c <f_read+0x326>
			sect += csect;
 800f75e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f760:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f762:	4413      	add	r3, r2
 800f764:	63bb      	str	r3, [r7, #56]	; 0x38
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800f766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f768:	899b      	ldrh	r3, [r3, #12]
 800f76a:	461a      	mov	r2, r3
 800f76c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f76e:	fbb3 f3f2 	udiv	r3, r3, r2
 800f772:	653b      	str	r3, [r7, #80]	; 0x50
			if (cc) {							/* Read maximum contiguous sectors directly */
 800f774:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f776:	2b00      	cmp	r3, #0
 800f778:	d043      	beq.n	800f802 <f_read+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f77a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f77c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f77e:	4413      	add	r3, r2
 800f780:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f782:	8952      	ldrh	r2, [r2, #10]
 800f784:	4293      	cmp	r3, r2
 800f786:	d905      	bls.n	800f794 <f_read+0x19e>
					cc = fs->csize - csect;
 800f788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f78a:	895b      	ldrh	r3, [r3, #10]
 800f78c:	461a      	mov	r2, r3
 800f78e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f790:	1ad3      	subs	r3, r2, r3
 800f792:	653b      	str	r3, [r7, #80]	; 0x50
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f796:	7858      	ldrb	r0, [r3, #1]
 800f798:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f79a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f79c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800f79e:	f7fc f879 	bl	800b894 <disk_read>
 800f7a2:	4603      	mov	r3, r0
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d005      	beq.n	800f7b4 <f_read+0x1be>
 800f7a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7aa:	2201      	movs	r2, #1
 800f7ac:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800f7b0:	2301      	movs	r3, #1
 800f7b2:	e0b3      	b.n	800f91c <f_read+0x326>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800f7b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f7ba:	b25b      	sxtb	r3, r3
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	da18      	bge.n	800f7f2 <f_read+0x1fc>
 800f7c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f7c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7c6:	1ad3      	subs	r3, r2, r3
 800f7c8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f7ca:	429a      	cmp	r2, r3
 800f7cc:	d911      	bls.n	800f7f2 <f_read+0x1fc>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800f7ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f7d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7d4:	1ad3      	subs	r3, r2, r3
 800f7d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f7d8:	8992      	ldrh	r2, [r2, #12]
 800f7da:	fb02 f303 	mul.w	r3, r2, r3
 800f7de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f7e0:	18d0      	adds	r0, r2, r3
 800f7e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7e4:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800f7e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f7ea:	899b      	ldrh	r3, [r3, #12]
 800f7ec:	461a      	mov	r2, r3
 800f7ee:	f7fc fa94 	bl	800bd1a <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800f7f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f7f4:	899b      	ldrh	r3, [r3, #12]
 800f7f6:	461a      	mov	r2, r3
 800f7f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f7fa:	fb02 f303 	mul.w	r3, r2, r3
 800f7fe:	657b      	str	r3, [r7, #84]	; 0x54
				continue;
 800f800:	e067      	b.n	800f8d2 <f_read+0x2dc>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800f802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f806:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f808:	429a      	cmp	r2, r3
 800f80a:	d033      	beq.n	800f874 <f_read+0x27e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f80c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f80e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f812:	b25b      	sxtb	r3, r3
 800f814:	2b00      	cmp	r3, #0
 800f816:	da1b      	bge.n	800f850 <f_read+0x25a>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f81a:	7858      	ldrb	r0, [r3, #1]
 800f81c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f81e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800f822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f824:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f826:	2301      	movs	r3, #1
 800f828:	f7fc f854 	bl	800b8d4 <disk_write>
 800f82c:	4603      	mov	r3, r0
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d005      	beq.n	800f83e <f_read+0x248>
 800f832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f834:	2201      	movs	r2, #1
 800f836:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800f83a:	2301      	movs	r3, #1
 800f83c:	e06e      	b.n	800f91c <f_read+0x326>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f83e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f840:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f844:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f848:	b2da      	uxtb	r2, r3
 800f84a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f84c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f852:	7858      	ldrb	r0, [r3, #1]
 800f854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f856:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800f85a:	2301      	movs	r3, #1
 800f85c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f85e:	f7fc f819 	bl	800b894 <disk_read>
 800f862:	4603      	mov	r3, r0
 800f864:	2b00      	cmp	r3, #0
 800f866:	d005      	beq.n	800f874 <f_read+0x27e>
 800f868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f86a:	2201      	movs	r2, #1
 800f86c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800f870:	2301      	movs	r3, #1
 800f872:	e053      	b.n	800f91c <f_read+0x326>
			}
#endif
			fp->sect = sect;
 800f874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f876:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f878:	645a      	str	r2, [r3, #68]	; 0x44
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f87a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f87c:	899b      	ldrh	r3, [r3, #12]
 800f87e:	4618      	mov	r0, r3
 800f880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f882:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800f886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f888:	899b      	ldrh	r3, [r3, #12]
 800f88a:	fbb2 f1f3 	udiv	r1, r2, r3
 800f88e:	fb01 f303 	mul.w	r3, r1, r3
 800f892:	1ad3      	subs	r3, r2, r3
 800f894:	1ac3      	subs	r3, r0, r3
 800f896:	657b      	str	r3, [r7, #84]	; 0x54
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800f898:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f89a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f89c:	429a      	cmp	r2, r3
 800f89e:	d901      	bls.n	800f8a4 <f_read+0x2ae>
 800f8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8a2:	657b      	str	r3, [r7, #84]	; 0x54
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800f8a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8a6:	f103 0454 	add.w	r4, r3, #84	; 0x54
 800f8aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8ac:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800f8b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8b2:	899b      	ldrh	r3, [r3, #12]
 800f8b4:	b29b      	uxth	r3, r3
 800f8b6:	2200      	movs	r2, #0
 800f8b8:	60bb      	str	r3, [r7, #8]
 800f8ba:	60fa      	str	r2, [r7, #12]
 800f8bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f8c0:	f7f0 fcde 	bl	8000280 <__aeabi_uldivmod>
 800f8c4:	4613      	mov	r3, r2
 800f8c6:	4423      	add	r3, r4
 800f8c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f8ca:	4619      	mov	r1, r3
 800f8cc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f8ce:	f7fc fa24 	bl	800bd1a <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800f8d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f8d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f8d6:	4413      	add	r3, r2
 800f8d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f8da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8dc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800f8e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f8e2:	2000      	movs	r0, #0
 800f8e4:	468a      	mov	sl, r1
 800f8e6:	4683      	mov	fp, r0
 800f8e8:	eb12 010a 	adds.w	r1, r2, sl
 800f8ec:	6039      	str	r1, [r7, #0]
 800f8ee:	eb43 030b 	adc.w	r3, r3, fp
 800f8f2:	607b      	str	r3, [r7, #4]
 800f8f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8f6:	e9d7 1200 	ldrd	r1, r2, [r7]
 800f8fa:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
 800f8fe:	6a3b      	ldr	r3, [r7, #32]
 800f900:	681a      	ldr	r2, [r3, #0]
 800f902:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f904:	441a      	add	r2, r3
 800f906:	6a3b      	ldr	r3, [r7, #32]
 800f908:	601a      	str	r2, [r3, #0]
 800f90a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f90c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f90e:	1ad3      	subs	r3, r2, r3
 800f910:	627b      	str	r3, [r7, #36]	; 0x24
	for ( ;  btr;								/* Repeat until all data read */
 800f912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f914:	2b00      	cmp	r3, #0
 800f916:	f47f aeb7 	bne.w	800f688 <f_read+0x92>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800f91a:	2300      	movs	r3, #0
}
 800f91c:	4618      	mov	r0, r3
 800f91e:	3760      	adds	r7, #96	; 0x60
 800f920:	46bd      	mov	sp, r7
 800f922:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800f926 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800f926:	b580      	push	{r7, lr}
 800f928:	b09a      	sub	sp, #104	; 0x68
 800f92a:	af00      	add	r7, sp, #0
 800f92c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800f934:	4611      	mov	r1, r2
 800f936:	4618      	mov	r0, r3
 800f938:	f7ff fb0e 	bl	800ef58 <validate>
 800f93c:	4603      	mov	r3, r0
 800f93e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800f942:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f946:	2b00      	cmp	r3, #0
 800f948:	f040 8105 	bne.w	800fb56 <f_sync+0x230>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f956:	2b00      	cmp	r3, #0
 800f958:	f000 80fd 	beq.w	800fb56 <f_sync+0x230>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f962:	b25b      	sxtb	r3, r3
 800f964:	2b00      	cmp	r3, #0
 800f966:	da17      	bge.n	800f998 <f_sync+0x72>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f968:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f96a:	7858      	ldrb	r0, [r3, #1]
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f976:	2301      	movs	r3, #1
 800f978:	f7fb ffac 	bl	800b8d4 <disk_write>
 800f97c:	4603      	mov	r3, r0
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d001      	beq.n	800f986 <f_sync+0x60>
 800f982:	2301      	movs	r3, #1
 800f984:	e0e9      	b.n	800fb5a <f_sync+0x234>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f98c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f990:	b2da      	uxtb	r2, r3
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800f998:	f7f8 fe2e 	bl	80085f8 <get_fattime>
 800f99c:	6638      	str	r0, [r7, #96]	; 0x60
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800f99e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f9a0:	781b      	ldrb	r3, [r3, #0]
 800f9a2:	2b04      	cmp	r3, #4
 800f9a4:	f040 808c 	bne.w	800fac0 <f_sync+0x19a>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	4618      	mov	r0, r3
 800f9ac:	f7fd f814 	bl	800c9d8 <fill_first_frag>
 800f9b0:	4603      	mov	r3, r0
 800f9b2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 800f9b6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d10a      	bne.n	800f9d4 <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800f9be:	6878      	ldr	r0, [r7, #4]
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9c4:	f04f 32ff 	mov.w	r2, #4294967295
 800f9c8:	4619      	mov	r1, r3
 800f9ca:	f7fd f834 	bl	800ca36 <fill_last_frag>
 800f9ce:	4603      	mov	r3, r0
 800f9d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
				if (res == FR_OK) {
 800f9d4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	f040 80bc 	bne.w	800fb56 <f_sync+0x230>
					INIT_NAMBUF(fs);
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 800f9de:	687a      	ldr	r2, [r7, #4]
 800f9e0:	f107 0308 	add.w	r3, r7, #8
 800f9e4:	4611      	mov	r1, r2
 800f9e6:	4618      	mov	r0, r3
 800f9e8:	f7fd ff7c 	bl	800d8e4 <load_obj_dir>
 800f9ec:	4603      	mov	r3, r0
 800f9ee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (res == FR_OK) {
 800f9f2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	f040 80ad 	bne.w	800fb56 <f_sync+0x230>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 800f9fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f9fe:	695b      	ldr	r3, [r3, #20]
 800fa00:	3304      	adds	r3, #4
 800fa02:	781a      	ldrb	r2, [r3, #0]
 800fa04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fa06:	695b      	ldr	r3, [r3, #20]
 800fa08:	3304      	adds	r3, #4
 800fa0a:	f042 0220 	orr.w	r2, r2, #32
 800fa0e:	b2d2      	uxtb	r2, r2
 800fa10:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	79da      	ldrb	r2, [r3, #7]
 800fa16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fa18:	695b      	ldr	r3, [r3, #20]
 800fa1a:	3321      	adds	r3, #33	; 0x21
 800fa1c:	f042 0201 	orr.w	r2, r2, #1
 800fa20:	b2d2      	uxtb	r2, r2
 800fa22:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 800fa24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fa26:	695b      	ldr	r3, [r3, #20]
 800fa28:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	689b      	ldr	r3, [r3, #8]
 800fa30:	4619      	mov	r1, r3
 800fa32:	4610      	mov	r0, r2
 800fa34:	f7fc f8bd 	bl	800bbb2 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 800fa38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fa3a:	695b      	ldr	r3, [r3, #20]
 800fa3c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800fa46:	4608      	mov	r0, r1
 800fa48:	f7fc f8df 	bl	800bc0a <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 800fa4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fa4e:	695b      	ldr	r3, [r3, #20]
 800fa50:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800fa5a:	4608      	mov	r0, r1
 800fa5c:	f7fc f8d5 	bl	800bc0a <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 800fa60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fa62:	695b      	ldr	r3, [r3, #20]
 800fa64:	330c      	adds	r3, #12
 800fa66:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800fa68:	4618      	mov	r0, r3
 800fa6a:	f7fc f8a2 	bl	800bbb2 <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 800fa6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fa70:	695b      	ldr	r3, [r3, #20]
 800fa72:	3315      	adds	r3, #21
 800fa74:	2200      	movs	r2, #0
 800fa76:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 800fa78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fa7a:	695b      	ldr	r3, [r3, #20]
 800fa7c:	3310      	adds	r3, #16
 800fa7e:	2100      	movs	r1, #0
 800fa80:	4618      	mov	r0, r3
 800fa82:	f7fc f896 	bl	800bbb2 <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 800fa86:	f107 0308 	add.w	r3, r7, #8
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	f7fd ff60 	bl	800d950 <store_xdir>
 800fa90:	4603      	mov	r3, r0
 800fa92:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800fa96:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d15b      	bne.n	800fb56 <f_sync+0x230>
							res = sync_fs(fs);
 800fa9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800faa0:	4618      	mov	r0, r3
 800faa2:	f7fc fb97 	bl	800c1d4 <sync_fs>
 800faa6:	4603      	mov	r3, r0
 800faa8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fp->flag &= (BYTE)~FA_MODIFIED;
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fab2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fab6:	b2da      	uxtb	r2, r3
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800fabe:	e04a      	b.n	800fb56 <f_sync+0x230>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800fac0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fac6:	4619      	mov	r1, r3
 800fac8:	4610      	mov	r0, r2
 800faca:	f7fc fb55 	bl	800c178 <move_window>
 800face:	4603      	mov	r3, r0
 800fad0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 800fad4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d13c      	bne.n	800fb56 <f_sync+0x230>
					dir = fp->dir_ptr;
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fae0:	65fb      	str	r3, [r7, #92]	; 0x5c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800fae2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fae4:	330b      	adds	r3, #11
 800fae6:	781a      	ldrb	r2, [r3, #0]
 800fae8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800faea:	330b      	adds	r3, #11
 800faec:	f042 0220 	orr.w	r2, r2, #32
 800faf0:	b2d2      	uxtb	r2, r2
 800faf2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	6818      	ldr	r0, [r3, #0]
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	689b      	ldr	r3, [r3, #8]
 800fafc:	461a      	mov	r2, r3
 800fafe:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800fb00:	f7fd fbc0 	bl	800d284 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800fb04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fb06:	f103 001c 	add.w	r0, r3, #28
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800fb10:	4613      	mov	r3, r2
 800fb12:	4619      	mov	r1, r3
 800fb14:	f7fc f84d 	bl	800bbb2 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800fb18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fb1a:	3316      	adds	r3, #22
 800fb1c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800fb1e:	4618      	mov	r0, r3
 800fb20:	f7fc f847 	bl	800bbb2 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800fb24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fb26:	3312      	adds	r3, #18
 800fb28:	2100      	movs	r1, #0
 800fb2a:	4618      	mov	r0, r3
 800fb2c:	f7fc f826 	bl	800bb7c <st_word>
					fs->wflag = 1;
 800fb30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fb32:	2201      	movs	r2, #1
 800fb34:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800fb36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fb38:	4618      	mov	r0, r3
 800fb3a:	f7fc fb4b 	bl	800c1d4 <sync_fs>
 800fb3e:	4603      	mov	r3, r0
 800fb40:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					fp->flag &= (BYTE)~FA_MODIFIED;
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fb4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fb4e:	b2da      	uxtb	r2, r3
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800fb56:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800fb5a:	4618      	mov	r0, r3
 800fb5c:	3768      	adds	r7, #104	; 0x68
 800fb5e:	46bd      	mov	sp, r7
 800fb60:	bd80      	pop	{r7, pc}

0800fb62 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800fb62:	b580      	push	{r7, lr}
 800fb64:	b084      	sub	sp, #16
 800fb66:	af00      	add	r7, sp, #0
 800fb68:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800fb6a:	6878      	ldr	r0, [r7, #4]
 800fb6c:	f7ff fedb 	bl	800f926 <f_sync>
 800fb70:	4603      	mov	r3, r0
 800fb72:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800fb74:	7bfb      	ldrb	r3, [r7, #15]
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d118      	bne.n	800fbac <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	f107 0208 	add.w	r2, r7, #8
 800fb80:	4611      	mov	r1, r2
 800fb82:	4618      	mov	r0, r3
 800fb84:	f7ff f9e8 	bl	800ef58 <validate>
 800fb88:	4603      	mov	r3, r0
 800fb8a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800fb8c:	7bfb      	ldrb	r3, [r7, #15]
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d10c      	bne.n	800fbac <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb96:	4618      	mov	r0, r3
 800fb98:	f7fc fa4a 	bl	800c030 <dec_lock>
 800fb9c:	4603      	mov	r3, r0
 800fb9e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800fba0:	7bfb      	ldrb	r3, [r7, #15]
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d102      	bne.n	800fbac <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	2200      	movs	r2, #0
 800fbaa:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800fbac:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbae:	4618      	mov	r0, r3
 800fbb0:	3710      	adds	r7, #16
 800fbb2:	46bd      	mov	sp, r7
 800fbb4:	bd80      	pop	{r7, pc}

0800fbb6 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800fbb6:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fbba:	b0ba      	sub	sp, #232	; 0xe8
 800fbbc:	af00      	add	r7, sp, #0
 800fbbe:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
 800fbc2:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800fbc6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800fbca:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800fbce:	4619      	mov	r1, r3
 800fbd0:	4610      	mov	r0, r2
 800fbd2:	f7ff f9c1 	bl	800ef58 <validate>
 800fbd6:	4603      	mov	r3, r0
 800fbd8:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
	if (res == FR_OK) res = (FRESULT)fp->err;
 800fbdc:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d105      	bne.n	800fbf0 <f_lseek+0x3a>
 800fbe4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fbe8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800fbec:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
 800fbf0:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	d111      	bne.n	800fc1c <f_lseek+0x66>
 800fbf8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fbfc:	781b      	ldrb	r3, [r3, #0]
 800fbfe:	2b04      	cmp	r3, #4
 800fc00:	d10c      	bne.n	800fc1c <f_lseek+0x66>
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800fc02:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800fc06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fc0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc0c:	f04f 32ff 	mov.w	r2, #4294967295
 800fc10:	4619      	mov	r1, r3
 800fc12:	f7fc ff10 	bl	800ca36 <fill_last_frag>
 800fc16:	4603      	mov	r3, r0
 800fc18:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800fc1c:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d002      	beq.n	800fc2a <f_lseek+0x74>
 800fc24:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 800fc28:	e3ab      	b.n	8010382 <f_lseek+0x7cc>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800fc2a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fc2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	f000 8152 	beq.w	800feda <f_lseek+0x324>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800fc36:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800fc3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc3e:	bf08      	it	eq
 800fc40:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 800fc44:	f040 8087 	bne.w	800fd56 <f_lseek+0x1a0>
			tbl = fp->cltbl;
 800fc48:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fc4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fc4e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800fc52:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800fc56:	1d1a      	adds	r2, r3, #4
 800fc58:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800fc62:	2302      	movs	r3, #2
 800fc64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
			cl = fp->obj.sclust;		/* Origin of the chain */
 800fc68:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fc6c:	689b      	ldr	r3, [r3, #8]
 800fc6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
			if (cl) {
 800fc72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d058      	beq.n	800fd2c <f_lseek+0x176>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800fc7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800fc7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800fc82:	2300      	movs	r3, #0
 800fc84:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800fc88:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800fc8c:	3302      	adds	r3, #2
 800fc8e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
					do {
						pcl = cl; ncl++;
 800fc92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800fc96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800fc9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800fc9e:	3301      	adds	r3, #1
 800fca0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
						cl = get_fat(&fp->obj, cl);
 800fca4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fca8:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800fcac:	4618      	mov	r0, r3
 800fcae:	f7fc fb21 	bl	800c2f4 <get_fat>
 800fcb2:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800fcb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800fcba:	2b01      	cmp	r3, #1
 800fcbc:	d806      	bhi.n	800fccc <f_lseek+0x116>
 800fcbe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fcc2:	2202      	movs	r2, #2
 800fcc4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800fcc8:	2302      	movs	r3, #2
 800fcca:	e35a      	b.n	8010382 <f_lseek+0x7cc>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fccc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800fcd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fcd4:	d106      	bne.n	800fce4 <f_lseek+0x12e>
 800fcd6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fcda:	2201      	movs	r2, #1
 800fcdc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800fce0:	2301      	movs	r3, #1
 800fce2:	e34e      	b.n	8010382 <f_lseek+0x7cc>
					} while (cl == pcl + 1);
 800fce4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fce8:	3301      	adds	r3, #1
 800fcea:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800fcee:	429a      	cmp	r2, r3
 800fcf0:	d0cf      	beq.n	800fc92 <f_lseek+0xdc>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800fcf2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800fcf6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800fcfa:	429a      	cmp	r2, r3
 800fcfc:	d80f      	bhi.n	800fd1e <f_lseek+0x168>
						*tbl++ = ncl; *tbl++ = tcl;
 800fcfe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800fd02:	1d1a      	adds	r2, r3, #4
 800fd04:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800fd08:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800fd0c:	601a      	str	r2, [r3, #0]
 800fd0e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800fd12:	1d1a      	adds	r2, r3, #4
 800fd14:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800fd18:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800fd1c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800fd1e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fd22:	6a1b      	ldr	r3, [r3, #32]
 800fd24:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800fd28:	429a      	cmp	r2, r3
 800fd2a:	d3a6      	bcc.n	800fc7a <f_lseek+0xc4>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800fd2c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fd30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fd32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800fd36:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800fd38:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800fd3c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800fd40:	429a      	cmp	r2, r3
 800fd42:	d804      	bhi.n	800fd4e <f_lseek+0x198>
				*tbl = 0;		/* Terminate table */
 800fd44:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800fd48:	2200      	movs	r2, #0
 800fd4a:	601a      	str	r2, [r3, #0]
 800fd4c:	e317      	b.n	801037e <f_lseek+0x7c8>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800fd4e:	2311      	movs	r3, #17
 800fd50:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 800fd54:	e313      	b.n	801037e <f_lseek+0x7c8>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800fd56:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fd5a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800fd5e:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800fd62:	4290      	cmp	r0, r2
 800fd64:	eb71 0303 	sbcs.w	r3, r1, r3
 800fd68:	d205      	bcs.n	800fd76 <f_lseek+0x1c0>
 800fd6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fd6e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800fd72:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
			fp->fptr = ofs;				/* Set file pointer */
 800fd76:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800fd7a:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800fd7e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
			if (ofs) {
 800fd82:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800fd86:	4313      	orrs	r3, r2
 800fd88:	f000 82f9 	beq.w	801037e <f_lseek+0x7c8>
				fp->clust = clmt_clust(fp, ofs - 1);
 800fd8c:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800fd90:	f112 38ff 	adds.w	r8, r2, #4294967295
 800fd94:	f143 39ff 	adc.w	r9, r3, #4294967295
 800fd98:	4642      	mov	r2, r8
 800fd9a:	464b      	mov	r3, r9
 800fd9c:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800fda0:	f7fd f82f 	bl	800ce02 <clmt_clust>
 800fda4:	4602      	mov	r2, r0
 800fda6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fdaa:	641a      	str	r2, [r3, #64]	; 0x40
				dsc = clust2sect(fs, fp->clust);
 800fdac:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800fdb0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fdb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fdb6:	4619      	mov	r1, r3
 800fdb8:	4610      	mov	r0, r2
 800fdba:	f7fc fa7b 	bl	800c2b4 <clust2sect>
 800fdbe:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800fdc2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d106      	bne.n	800fdd8 <f_lseek+0x222>
 800fdca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fdce:	2202      	movs	r2, #2
 800fdd0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800fdd4:	2302      	movs	r3, #2
 800fdd6:	e2d4      	b.n	8010382 <f_lseek+0x7cc>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800fdd8:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800fddc:	1e54      	subs	r4, r2, #1
 800fdde:	f143 35ff 	adc.w	r5, r3, #4294967295
 800fde2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fde6:	899b      	ldrh	r3, [r3, #12]
 800fde8:	b29b      	uxth	r3, r3
 800fdea:	2200      	movs	r2, #0
 800fdec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800fdf0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800fdf4:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800fdf8:	4620      	mov	r0, r4
 800fdfa:	4629      	mov	r1, r5
 800fdfc:	f7f0 fa40 	bl	8000280 <__aeabi_uldivmod>
 800fe00:	4602      	mov	r2, r0
 800fe02:	460b      	mov	r3, r1
 800fe04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fe08:	895b      	ldrh	r3, [r3, #10]
 800fe0a:	3b01      	subs	r3, #1
 800fe0c:	4013      	ands	r3, r2
 800fe0e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800fe12:	4413      	add	r3, r2
 800fe14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800fe18:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fe1c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800fe20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fe24:	899b      	ldrh	r3, [r3, #12]
 800fe26:	b29b      	uxth	r3, r3
 800fe28:	2200      	movs	r2, #0
 800fe2a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800fe2e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800fe32:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800fe36:	f7f0 fa23 	bl	8000280 <__aeabi_uldivmod>
 800fe3a:	4313      	orrs	r3, r2
 800fe3c:	f000 829f 	beq.w	801037e <f_lseek+0x7c8>
 800fe40:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fe44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe46:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800fe4a:	429a      	cmp	r2, r3
 800fe4c:	f000 8297 	beq.w	801037e <f_lseek+0x7c8>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800fe50:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fe54:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fe58:	b25b      	sxtb	r3, r3
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	da21      	bge.n	800fea2 <f_lseek+0x2ec>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fe5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fe62:	7858      	ldrb	r0, [r3, #1]
 800fe64:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fe68:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800fe6c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fe70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fe72:	2301      	movs	r3, #1
 800fe74:	f7fb fd2e 	bl	800b8d4 <disk_write>
 800fe78:	4603      	mov	r3, r0
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d006      	beq.n	800fe8c <f_lseek+0x2d6>
 800fe7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fe82:	2201      	movs	r2, #1
 800fe84:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800fe88:	2301      	movs	r3, #1
 800fe8a:	e27a      	b.n	8010382 <f_lseek+0x7cc>
						fp->flag &= (BYTE)~FA_DIRTY;
 800fe8c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fe90:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fe94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fe98:	b2da      	uxtb	r2, r3
 800fe9a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fe9e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800fea2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fea6:	7858      	ldrb	r0, [r3, #1]
 800fea8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800feac:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800feb0:	2301      	movs	r3, #1
 800feb2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800feb6:	f7fb fced 	bl	800b894 <disk_read>
 800feba:	4603      	mov	r3, r0
 800febc:	2b00      	cmp	r3, #0
 800febe:	d006      	beq.n	800fece <f_lseek+0x318>
 800fec0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fec4:	2201      	movs	r2, #1
 800fec6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800feca:	2301      	movs	r3, #1
 800fecc:	e259      	b.n	8010382 <f_lseek+0x7cc>
#endif
					fp->sect = dsc;
 800fece:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fed2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800fed6:	645a      	str	r2, [r3, #68]	; 0x44
 800fed8:	e251      	b.n	801037e <f_lseek+0x7c8>
#endif

	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
 800feda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fede:	781b      	ldrb	r3, [r3, #0]
 800fee0:	2b04      	cmp	r3, #4
 800fee2:	d009      	beq.n	800fef8 <f_lseek+0x342>
 800fee4:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800fee8:	2b01      	cmp	r3, #1
 800feea:	d305      	bcc.n	800fef8 <f_lseek+0x342>
 800feec:	f04f 32ff 	mov.w	r2, #4294967295
 800fef0:	f04f 0300 	mov.w	r3, #0
 800fef4:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800fef8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fefc:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800ff00:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800ff04:	4290      	cmp	r0, r2
 800ff06:	eb71 0303 	sbcs.w	r3, r1, r3
 800ff0a:	d20d      	bcs.n	800ff28 <f_lseek+0x372>
 800ff0c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ff10:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ff14:	f003 0302 	and.w	r3, r3, #2
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d105      	bne.n	800ff28 <f_lseek+0x372>
			ofs = fp->obj.objsize;
 800ff1c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ff20:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ff24:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
		}
		ifptr = fp->fptr;
 800ff28:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ff2c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800ff30:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
		fp->fptr = nsect = 0;
 800ff34:	2300      	movs	r3, #0
 800ff36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ff3a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ff3e:	f04f 0200 	mov.w	r2, #0
 800ff42:	f04f 0300 	mov.w	r3, #0
 800ff46:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		if (ofs) {
 800ff4a:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800ff4e:	4313      	orrs	r3, r2
 800ff50:	f000 819a 	beq.w	8010288 <f_lseek+0x6d2>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800ff54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ff58:	895b      	ldrh	r3, [r3, #10]
 800ff5a:	461a      	mov	r2, r3
 800ff5c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ff60:	899b      	ldrh	r3, [r3, #12]
 800ff62:	fb02 f303 	mul.w	r3, r2, r3
 800ff66:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			if (ifptr > 0 &&
 800ff6a:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800ff6e:	4313      	orrs	r3, r2
 800ff70:	d069      	beq.n	8010046 <f_lseek+0x490>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800ff72:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800ff76:	1e51      	subs	r1, r2, #1
 800ff78:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800ff7c:	f143 33ff 	adc.w	r3, r3, #4294967295
 800ff80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ff84:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ff88:	2200      	movs	r2, #0
 800ff8a:	67bb      	str	r3, [r7, #120]	; 0x78
 800ff8c:	67fa      	str	r2, [r7, #124]	; 0x7c
 800ff8e:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800ff92:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800ff96:	f7f0 f973 	bl	8000280 <__aeabi_uldivmod>
 800ff9a:	4602      	mov	r2, r0
 800ff9c:	460b      	mov	r3, r1
 800ff9e:	4614      	mov	r4, r2
 800ffa0:	461d      	mov	r5, r3
 800ffa2:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800ffa6:	1e51      	subs	r1, r2, #1
 800ffa8:	6739      	str	r1, [r7, #112]	; 0x70
 800ffaa:	f143 33ff 	adc.w	r3, r3, #4294967295
 800ffae:	677b      	str	r3, [r7, #116]	; 0x74
 800ffb0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ffb4:	2200      	movs	r2, #0
 800ffb6:	66bb      	str	r3, [r7, #104]	; 0x68
 800ffb8:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ffba:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800ffbe:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800ffc2:	f7f0 f95d 	bl	8000280 <__aeabi_uldivmod>
 800ffc6:	4602      	mov	r2, r0
 800ffc8:	460b      	mov	r3, r1
			if (ifptr > 0 &&
 800ffca:	4294      	cmp	r4, r2
 800ffcc:	eb75 0303 	sbcs.w	r3, r5, r3
 800ffd0:	d339      	bcc.n	8010046 <f_lseek+0x490>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800ffd2:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800ffd6:	1e51      	subs	r1, r2, #1
 800ffd8:	6639      	str	r1, [r7, #96]	; 0x60
 800ffda:	f143 33ff 	adc.w	r3, r3, #4294967295
 800ffde:	667b      	str	r3, [r7, #100]	; 0x64
 800ffe0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ffe4:	3b01      	subs	r3, #1
 800ffe6:	2200      	movs	r2, #0
 800ffe8:	65bb      	str	r3, [r7, #88]	; 0x58
 800ffea:	65fa      	str	r2, [r7, #92]	; 0x5c
 800ffec:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800fff0:	460b      	mov	r3, r1
 800fff2:	ea6f 0a03 	mvn.w	sl, r3
 800fff6:	4613      	mov	r3, r2
 800fff8:	ea6f 0b03 	mvn.w	fp, r3
 800fffc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8010000:	460b      	mov	r3, r1
 8010002:	ea03 030a 	and.w	r3, r3, sl
 8010006:	653b      	str	r3, [r7, #80]	; 0x50
 8010008:	4613      	mov	r3, r2
 801000a:	ea03 030b 	and.w	r3, r3, fp
 801000e:	657b      	str	r3, [r7, #84]	; 0x54
 8010010:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010014:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8010018:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
				ofs -= fp->fptr;
 801001c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010020:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8010024:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8010028:	1a14      	subs	r4, r2, r0
 801002a:	60bc      	str	r4, [r7, #8]
 801002c:	eb63 0301 	sbc.w	r3, r3, r1
 8010030:	60fb      	str	r3, [r7, #12]
 8010032:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8010036:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
				clst = fp->clust;
 801003a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801003e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010040:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8010044:	e031      	b.n	80100aa <f_lseek+0x4f4>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8010046:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801004a:	689b      	ldr	r3, [r3, #8]
 801004c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8010050:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010054:	2b00      	cmp	r3, #0
 8010056:	d123      	bne.n	80100a0 <f_lseek+0x4ea>
					clst = create_chain(&fp->obj, 0);
 8010058:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801005c:	2100      	movs	r1, #0
 801005e:	4618      	mov	r0, r3
 8010060:	f7fc fdce 	bl	800cc00 <create_chain>
 8010064:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801006c:	2b01      	cmp	r3, #1
 801006e:	d106      	bne.n	801007e <f_lseek+0x4c8>
 8010070:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010074:	2202      	movs	r2, #2
 8010076:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801007a:	2302      	movs	r3, #2
 801007c:	e181      	b.n	8010382 <f_lseek+0x7cc>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801007e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010086:	d106      	bne.n	8010096 <f_lseek+0x4e0>
 8010088:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801008c:	2201      	movs	r2, #1
 801008e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010092:	2301      	movs	r3, #1
 8010094:	e175      	b.n	8010382 <f_lseek+0x7cc>
					fp->obj.sclust = clst;
 8010096:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801009a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801009e:	6093      	str	r3, [r2, #8]
				}
#endif
				fp->clust = clst;
 80100a0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80100a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80100a8:	6413      	str	r3, [r2, #64]	; 0x40
			}
			if (clst != 0) {
 80100aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	f000 80ea 	beq.w	8010288 <f_lseek+0x6d2>
				while (ofs > bcs) {						/* Cluster following loop */
 80100b4:	e090      	b.n	80101d8 <f_lseek+0x622>
					ofs -= bcs; fp->fptr += bcs;
 80100b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80100ba:	2200      	movs	r2, #0
 80100bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80100be:	64fa      	str	r2, [r7, #76]	; 0x4c
 80100c0:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80100c4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80100c8:	4621      	mov	r1, r4
 80100ca:	1a51      	subs	r1, r2, r1
 80100cc:	6039      	str	r1, [r7, #0]
 80100ce:	4629      	mov	r1, r5
 80100d0:	eb63 0301 	sbc.w	r3, r3, r1
 80100d4:	607b      	str	r3, [r7, #4]
 80100d6:	e9d7 3400 	ldrd	r3, r4, [r7]
 80100da:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
 80100de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80100e2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80100e6:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 80100ea:	2000      	movs	r0, #0
 80100ec:	6439      	str	r1, [r7, #64]	; 0x40
 80100ee:	6478      	str	r0, [r7, #68]	; 0x44
 80100f0:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 80100f4:	4621      	mov	r1, r4
 80100f6:	1851      	adds	r1, r2, r1
 80100f8:	63b9      	str	r1, [r7, #56]	; 0x38
 80100fa:	4629      	mov	r1, r5
 80100fc:	414b      	adcs	r3, r1
 80100fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010100:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010104:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8010108:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 801010c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010110:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010114:	f003 0302 	and.w	r3, r3, #2
 8010118:	2b00      	cmp	r3, #0
 801011a:	d031      	beq.n	8010180 <f_lseek+0x5ca>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
 801011c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010120:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8010124:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010128:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801012c:	4282      	cmp	r2, r0
 801012e:	418b      	sbcs	r3, r1
 8010130:	d212      	bcs.n	8010158 <f_lseek+0x5a2>
							fp->obj.objsize = fp->fptr;
 8010132:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010136:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 801013a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801013e:	e9c3 0104 	strd	r0, r1, [r3, #16]
							fp->flag |= FA_MODIFIED;
 8010142:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010146:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801014a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801014e:	b2db      	uxtb	r3, r3
 8010150:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8010154:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8010158:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801015c:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8010160:	4618      	mov	r0, r3
 8010162:	f7fc fd4d 	bl	800cc00 <create_chain>
 8010166:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
						if (clst == 0) {				/* Clip file size in case of disk full */
 801016a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801016e:	2b00      	cmp	r3, #0
 8010170:	d10f      	bne.n	8010192 <f_lseek+0x5dc>
							ofs = 0; break;
 8010172:	f04f 0200 	mov.w	r2, #0
 8010176:	f04f 0300 	mov.w	r3, #0
 801017a:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
 801017e:	e03b      	b.n	80101f8 <f_lseek+0x642>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8010180:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010184:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8010188:	4618      	mov	r0, r3
 801018a:	f7fc f8b3 	bl	800c2f4 <get_fat>
 801018e:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010192:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010196:	f1b3 3fff 	cmp.w	r3, #4294967295
 801019a:	d106      	bne.n	80101aa <f_lseek+0x5f4>
 801019c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80101a0:	2201      	movs	r2, #1
 80101a2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80101a6:	2301      	movs	r3, #1
 80101a8:	e0eb      	b.n	8010382 <f_lseek+0x7cc>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80101aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80101ae:	2b01      	cmp	r3, #1
 80101b0:	d906      	bls.n	80101c0 <f_lseek+0x60a>
 80101b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80101b6:	6a1a      	ldr	r2, [r3, #32]
 80101b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80101bc:	4293      	cmp	r3, r2
 80101be:	d306      	bcc.n	80101ce <f_lseek+0x618>
 80101c0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80101c4:	2202      	movs	r2, #2
 80101c6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80101ca:	2302      	movs	r3, #2
 80101cc:	e0d9      	b.n	8010382 <f_lseek+0x7cc>
					fp->clust = clst;
 80101ce:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80101d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80101d6:	6413      	str	r3, [r2, #64]	; 0x40
				while (ofs > bcs) {						/* Cluster following loop */
 80101d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80101dc:	2200      	movs	r2, #0
 80101de:	633b      	str	r3, [r7, #48]	; 0x30
 80101e0:	637a      	str	r2, [r7, #52]	; 0x34
 80101e2:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80101e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80101ea:	4621      	mov	r1, r4
 80101ec:	4291      	cmp	r1, r2
 80101ee:	4629      	mov	r1, r5
 80101f0:	eb71 0303 	sbcs.w	r3, r1, r3
 80101f4:	f4ff af5f 	bcc.w	80100b6 <f_lseek+0x500>
				}
				fp->fptr += ofs;
 80101f8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80101fc:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8010200:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8010204:	1884      	adds	r4, r0, r2
 8010206:	62bc      	str	r4, [r7, #40]	; 0x28
 8010208:	eb41 0303 	adc.w	r3, r1, r3
 801020c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801020e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010212:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8010216:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
				if (ofs % SS(fs)) {
 801021a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801021e:	899b      	ldrh	r3, [r3, #12]
 8010220:	b29b      	uxth	r3, r3
 8010222:	2200      	movs	r2, #0
 8010224:	623b      	str	r3, [r7, #32]
 8010226:	627a      	str	r2, [r7, #36]	; 0x24
 8010228:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 801022c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8010230:	f7f0 f826 	bl	8000280 <__aeabi_uldivmod>
 8010234:	4313      	orrs	r3, r2
 8010236:	d027      	beq.n	8010288 <f_lseek+0x6d2>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8010238:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801023c:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8010240:	4618      	mov	r0, r3
 8010242:	f7fc f837 	bl	800c2b4 <clust2sect>
 8010246:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
					if (!nsect) ABORT(fs, FR_INT_ERR);
 801024a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801024e:	2b00      	cmp	r3, #0
 8010250:	d106      	bne.n	8010260 <f_lseek+0x6aa>
 8010252:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010256:	2202      	movs	r2, #2
 8010258:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801025c:	2302      	movs	r3, #2
 801025e:	e090      	b.n	8010382 <f_lseek+0x7cc>
					nsect += (DWORD)(ofs / SS(fs));
 8010260:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010264:	899b      	ldrh	r3, [r3, #12]
 8010266:	b29b      	uxth	r3, r3
 8010268:	2200      	movs	r2, #0
 801026a:	61bb      	str	r3, [r7, #24]
 801026c:	61fa      	str	r2, [r7, #28]
 801026e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8010272:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8010276:	f7f0 f803 	bl	8000280 <__aeabi_uldivmod>
 801027a:	4602      	mov	r2, r0
 801027c:	460b      	mov	r3, r1
 801027e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010282:	4413      	add	r3, r2
 8010284:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8010288:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801028c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010290:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8010294:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8010298:	4290      	cmp	r0, r2
 801029a:	eb71 0303 	sbcs.w	r3, r1, r3
 801029e:	d212      	bcs.n	80102c6 <f_lseek+0x710>
			fp->obj.objsize = fp->fptr;
 80102a0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80102a4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80102a8:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80102ac:	e9c1 2304 	strd	r2, r3, [r1, #16]
			fp->flag |= FA_MODIFIED;
 80102b0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80102b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80102b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80102bc:	b2da      	uxtb	r2, r3
 80102be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80102c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80102c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80102ca:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80102ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80102d2:	899b      	ldrh	r3, [r3, #12]
 80102d4:	b29b      	uxth	r3, r3
 80102d6:	2200      	movs	r2, #0
 80102d8:	613b      	str	r3, [r7, #16]
 80102da:	617a      	str	r2, [r7, #20]
 80102dc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80102e0:	f7ef ffce 	bl	8000280 <__aeabi_uldivmod>
 80102e4:	4313      	orrs	r3, r2
 80102e6:	d04a      	beq.n	801037e <f_lseek+0x7c8>
 80102e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80102ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80102ee:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80102f2:	429a      	cmp	r2, r3
 80102f4:	d043      	beq.n	801037e <f_lseek+0x7c8>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80102f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80102fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80102fe:	b25b      	sxtb	r3, r3
 8010300:	2b00      	cmp	r3, #0
 8010302:	da21      	bge.n	8010348 <f_lseek+0x792>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010304:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010308:	7858      	ldrb	r0, [r3, #1]
 801030a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801030e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8010312:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010316:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010318:	2301      	movs	r3, #1
 801031a:	f7fb fadb 	bl	800b8d4 <disk_write>
 801031e:	4603      	mov	r3, r0
 8010320:	2b00      	cmp	r3, #0
 8010322:	d006      	beq.n	8010332 <f_lseek+0x77c>
 8010324:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010328:	2201      	movs	r2, #1
 801032a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801032e:	2301      	movs	r3, #1
 8010330:	e027      	b.n	8010382 <f_lseek+0x7cc>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010332:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010336:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801033a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801033e:	b2da      	uxtb	r2, r3
 8010340:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010344:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8010348:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801034c:	7858      	ldrb	r0, [r3, #1]
 801034e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010352:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8010356:	2301      	movs	r3, #1
 8010358:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801035c:	f7fb fa9a 	bl	800b894 <disk_read>
 8010360:	4603      	mov	r3, r0
 8010362:	2b00      	cmp	r3, #0
 8010364:	d006      	beq.n	8010374 <f_lseek+0x7be>
 8010366:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801036a:	2201      	movs	r2, #1
 801036c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010370:	2301      	movs	r3, #1
 8010372:	e006      	b.n	8010382 <f_lseek+0x7cc>
#endif
			fp->sect = nsect;
 8010374:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010378:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801037c:	645a      	str	r2, [r3, #68]	; 0x44
		}
	}

	LEAVE_FF(fs, res);
 801037e:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
}
 8010382:	4618      	mov	r0, r3
 8010384:	37e8      	adds	r7, #232	; 0xe8
 8010386:	46bd      	mov	sp, r7
 8010388:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801038c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801038c:	b480      	push	{r7}
 801038e:	b087      	sub	sp, #28
 8010390:	af00      	add	r7, sp, #0
 8010392:	60f8      	str	r0, [r7, #12]
 8010394:	60b9      	str	r1, [r7, #8]
 8010396:	4613      	mov	r3, r2
 8010398:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801039a:	2301      	movs	r3, #1
 801039c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801039e:	2300      	movs	r3, #0
 80103a0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80103a2:	4b1f      	ldr	r3, [pc, #124]	; (8010420 <FATFS_LinkDriverEx+0x94>)
 80103a4:	7a5b      	ldrb	r3, [r3, #9]
 80103a6:	b2db      	uxtb	r3, r3
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d131      	bne.n	8010410 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80103ac:	4b1c      	ldr	r3, [pc, #112]	; (8010420 <FATFS_LinkDriverEx+0x94>)
 80103ae:	7a5b      	ldrb	r3, [r3, #9]
 80103b0:	b2db      	uxtb	r3, r3
 80103b2:	461a      	mov	r2, r3
 80103b4:	4b1a      	ldr	r3, [pc, #104]	; (8010420 <FATFS_LinkDriverEx+0x94>)
 80103b6:	2100      	movs	r1, #0
 80103b8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80103ba:	4b19      	ldr	r3, [pc, #100]	; (8010420 <FATFS_LinkDriverEx+0x94>)
 80103bc:	7a5b      	ldrb	r3, [r3, #9]
 80103be:	b2db      	uxtb	r3, r3
 80103c0:	4a17      	ldr	r2, [pc, #92]	; (8010420 <FATFS_LinkDriverEx+0x94>)
 80103c2:	009b      	lsls	r3, r3, #2
 80103c4:	4413      	add	r3, r2
 80103c6:	68fa      	ldr	r2, [r7, #12]
 80103c8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80103ca:	4b15      	ldr	r3, [pc, #84]	; (8010420 <FATFS_LinkDriverEx+0x94>)
 80103cc:	7a5b      	ldrb	r3, [r3, #9]
 80103ce:	b2db      	uxtb	r3, r3
 80103d0:	461a      	mov	r2, r3
 80103d2:	4b13      	ldr	r3, [pc, #76]	; (8010420 <FATFS_LinkDriverEx+0x94>)
 80103d4:	4413      	add	r3, r2
 80103d6:	79fa      	ldrb	r2, [r7, #7]
 80103d8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80103da:	4b11      	ldr	r3, [pc, #68]	; (8010420 <FATFS_LinkDriverEx+0x94>)
 80103dc:	7a5b      	ldrb	r3, [r3, #9]
 80103de:	b2db      	uxtb	r3, r3
 80103e0:	1c5a      	adds	r2, r3, #1
 80103e2:	b2d1      	uxtb	r1, r2
 80103e4:	4a0e      	ldr	r2, [pc, #56]	; (8010420 <FATFS_LinkDriverEx+0x94>)
 80103e6:	7251      	strb	r1, [r2, #9]
 80103e8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80103ea:	7dbb      	ldrb	r3, [r7, #22]
 80103ec:	3330      	adds	r3, #48	; 0x30
 80103ee:	b2da      	uxtb	r2, r3
 80103f0:	68bb      	ldr	r3, [r7, #8]
 80103f2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80103f4:	68bb      	ldr	r3, [r7, #8]
 80103f6:	3301      	adds	r3, #1
 80103f8:	223a      	movs	r2, #58	; 0x3a
 80103fa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80103fc:	68bb      	ldr	r3, [r7, #8]
 80103fe:	3302      	adds	r3, #2
 8010400:	222f      	movs	r2, #47	; 0x2f
 8010402:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010404:	68bb      	ldr	r3, [r7, #8]
 8010406:	3303      	adds	r3, #3
 8010408:	2200      	movs	r2, #0
 801040a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801040c:	2300      	movs	r3, #0
 801040e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010410:	7dfb      	ldrb	r3, [r7, #23]
}
 8010412:	4618      	mov	r0, r3
 8010414:	371c      	adds	r7, #28
 8010416:	46bd      	mov	sp, r7
 8010418:	f85d 7b04 	ldr.w	r7, [sp], #4
 801041c:	4770      	bx	lr
 801041e:	bf00      	nop
 8010420:	20004a64 	.word	0x20004a64

08010424 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010424:	b580      	push	{r7, lr}
 8010426:	b082      	sub	sp, #8
 8010428:	af00      	add	r7, sp, #0
 801042a:	6078      	str	r0, [r7, #4]
 801042c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801042e:	2200      	movs	r2, #0
 8010430:	6839      	ldr	r1, [r7, #0]
 8010432:	6878      	ldr	r0, [r7, #4]
 8010434:	f7ff ffaa 	bl	801038c <FATFS_LinkDriverEx>
 8010438:	4603      	mov	r3, r0
}
 801043a:	4618      	mov	r0, r3
 801043c:	3708      	adds	r7, #8
 801043e:	46bd      	mov	sp, r7
 8010440:	bd80      	pop	{r7, pc}
	...

08010444 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8010444:	b480      	push	{r7}
 8010446:	b085      	sub	sp, #20
 8010448:	af00      	add	r7, sp, #0
 801044a:	4603      	mov	r3, r0
 801044c:	6039      	str	r1, [r7, #0]
 801044e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8010450:	88fb      	ldrh	r3, [r7, #6]
 8010452:	2b7f      	cmp	r3, #127	; 0x7f
 8010454:	d802      	bhi.n	801045c <ff_convert+0x18>
		c = chr;
 8010456:	88fb      	ldrh	r3, [r7, #6]
 8010458:	81fb      	strh	r3, [r7, #14]
 801045a:	e025      	b.n	80104a8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 801045c:	683b      	ldr	r3, [r7, #0]
 801045e:	2b00      	cmp	r3, #0
 8010460:	d00b      	beq.n	801047a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8010462:	88fb      	ldrh	r3, [r7, #6]
 8010464:	2bff      	cmp	r3, #255	; 0xff
 8010466:	d805      	bhi.n	8010474 <ff_convert+0x30>
 8010468:	88fb      	ldrh	r3, [r7, #6]
 801046a:	3b80      	subs	r3, #128	; 0x80
 801046c:	4a12      	ldr	r2, [pc, #72]	; (80104b8 <ff_convert+0x74>)
 801046e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010472:	e000      	b.n	8010476 <ff_convert+0x32>
 8010474:	2300      	movs	r3, #0
 8010476:	81fb      	strh	r3, [r7, #14]
 8010478:	e016      	b.n	80104a8 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801047a:	2300      	movs	r3, #0
 801047c:	81fb      	strh	r3, [r7, #14]
 801047e:	e009      	b.n	8010494 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8010480:	89fb      	ldrh	r3, [r7, #14]
 8010482:	4a0d      	ldr	r2, [pc, #52]	; (80104b8 <ff_convert+0x74>)
 8010484:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010488:	88fa      	ldrh	r2, [r7, #6]
 801048a:	429a      	cmp	r2, r3
 801048c:	d006      	beq.n	801049c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801048e:	89fb      	ldrh	r3, [r7, #14]
 8010490:	3301      	adds	r3, #1
 8010492:	81fb      	strh	r3, [r7, #14]
 8010494:	89fb      	ldrh	r3, [r7, #14]
 8010496:	2b7f      	cmp	r3, #127	; 0x7f
 8010498:	d9f2      	bls.n	8010480 <ff_convert+0x3c>
 801049a:	e000      	b.n	801049e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801049c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801049e:	89fb      	ldrh	r3, [r7, #14]
 80104a0:	3380      	adds	r3, #128	; 0x80
 80104a2:	b29b      	uxth	r3, r3
 80104a4:	b2db      	uxtb	r3, r3
 80104a6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80104a8:	89fb      	ldrh	r3, [r7, #14]
}
 80104aa:	4618      	mov	r0, r3
 80104ac:	3714      	adds	r7, #20
 80104ae:	46bd      	mov	sp, r7
 80104b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104b4:	4770      	bx	lr
 80104b6:	bf00      	nop
 80104b8:	08012220 	.word	0x08012220

080104bc <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80104bc:	b480      	push	{r7}
 80104be:	b087      	sub	sp, #28
 80104c0:	af00      	add	r7, sp, #0
 80104c2:	4603      	mov	r3, r0
 80104c4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80104c6:	88fb      	ldrh	r3, [r7, #6]
 80104c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80104cc:	d201      	bcs.n	80104d2 <ff_wtoupper+0x16>
 80104ce:	4b3e      	ldr	r3, [pc, #248]	; (80105c8 <ff_wtoupper+0x10c>)
 80104d0:	e000      	b.n	80104d4 <ff_wtoupper+0x18>
 80104d2:	4b3e      	ldr	r3, [pc, #248]	; (80105cc <ff_wtoupper+0x110>)
 80104d4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80104d6:	697b      	ldr	r3, [r7, #20]
 80104d8:	1c9a      	adds	r2, r3, #2
 80104da:	617a      	str	r2, [r7, #20]
 80104dc:	881b      	ldrh	r3, [r3, #0]
 80104de:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80104e0:	8a7b      	ldrh	r3, [r7, #18]
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d068      	beq.n	80105b8 <ff_wtoupper+0xfc>
 80104e6:	88fa      	ldrh	r2, [r7, #6]
 80104e8:	8a7b      	ldrh	r3, [r7, #18]
 80104ea:	429a      	cmp	r2, r3
 80104ec:	d364      	bcc.n	80105b8 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80104ee:	697b      	ldr	r3, [r7, #20]
 80104f0:	1c9a      	adds	r2, r3, #2
 80104f2:	617a      	str	r2, [r7, #20]
 80104f4:	881b      	ldrh	r3, [r3, #0]
 80104f6:	823b      	strh	r3, [r7, #16]
 80104f8:	8a3b      	ldrh	r3, [r7, #16]
 80104fa:	0a1b      	lsrs	r3, r3, #8
 80104fc:	81fb      	strh	r3, [r7, #14]
 80104fe:	8a3b      	ldrh	r3, [r7, #16]
 8010500:	b2db      	uxtb	r3, r3
 8010502:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8010504:	88fa      	ldrh	r2, [r7, #6]
 8010506:	8a79      	ldrh	r1, [r7, #18]
 8010508:	8a3b      	ldrh	r3, [r7, #16]
 801050a:	440b      	add	r3, r1
 801050c:	429a      	cmp	r2, r3
 801050e:	da49      	bge.n	80105a4 <ff_wtoupper+0xe8>
			switch (cmd) {
 8010510:	89fb      	ldrh	r3, [r7, #14]
 8010512:	2b08      	cmp	r3, #8
 8010514:	d84f      	bhi.n	80105b6 <ff_wtoupper+0xfa>
 8010516:	a201      	add	r2, pc, #4	; (adr r2, 801051c <ff_wtoupper+0x60>)
 8010518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801051c:	08010541 	.word	0x08010541
 8010520:	08010553 	.word	0x08010553
 8010524:	08010569 	.word	0x08010569
 8010528:	08010571 	.word	0x08010571
 801052c:	08010579 	.word	0x08010579
 8010530:	08010581 	.word	0x08010581
 8010534:	08010589 	.word	0x08010589
 8010538:	08010591 	.word	0x08010591
 801053c:	08010599 	.word	0x08010599
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8010540:	88fa      	ldrh	r2, [r7, #6]
 8010542:	8a7b      	ldrh	r3, [r7, #18]
 8010544:	1ad3      	subs	r3, r2, r3
 8010546:	005b      	lsls	r3, r3, #1
 8010548:	697a      	ldr	r2, [r7, #20]
 801054a:	4413      	add	r3, r2
 801054c:	881b      	ldrh	r3, [r3, #0]
 801054e:	80fb      	strh	r3, [r7, #6]
 8010550:	e027      	b.n	80105a2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8010552:	88fa      	ldrh	r2, [r7, #6]
 8010554:	8a7b      	ldrh	r3, [r7, #18]
 8010556:	1ad3      	subs	r3, r2, r3
 8010558:	b29b      	uxth	r3, r3
 801055a:	f003 0301 	and.w	r3, r3, #1
 801055e:	b29b      	uxth	r3, r3
 8010560:	88fa      	ldrh	r2, [r7, #6]
 8010562:	1ad3      	subs	r3, r2, r3
 8010564:	80fb      	strh	r3, [r7, #6]
 8010566:	e01c      	b.n	80105a2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8010568:	88fb      	ldrh	r3, [r7, #6]
 801056a:	3b10      	subs	r3, #16
 801056c:	80fb      	strh	r3, [r7, #6]
 801056e:	e018      	b.n	80105a2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8010570:	88fb      	ldrh	r3, [r7, #6]
 8010572:	3b20      	subs	r3, #32
 8010574:	80fb      	strh	r3, [r7, #6]
 8010576:	e014      	b.n	80105a2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8010578:	88fb      	ldrh	r3, [r7, #6]
 801057a:	3b30      	subs	r3, #48	; 0x30
 801057c:	80fb      	strh	r3, [r7, #6]
 801057e:	e010      	b.n	80105a2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8010580:	88fb      	ldrh	r3, [r7, #6]
 8010582:	3b1a      	subs	r3, #26
 8010584:	80fb      	strh	r3, [r7, #6]
 8010586:	e00c      	b.n	80105a2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8010588:	88fb      	ldrh	r3, [r7, #6]
 801058a:	3308      	adds	r3, #8
 801058c:	80fb      	strh	r3, [r7, #6]
 801058e:	e008      	b.n	80105a2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8010590:	88fb      	ldrh	r3, [r7, #6]
 8010592:	3b50      	subs	r3, #80	; 0x50
 8010594:	80fb      	strh	r3, [r7, #6]
 8010596:	e004      	b.n	80105a2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8010598:	88fb      	ldrh	r3, [r7, #6]
 801059a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 801059e:	80fb      	strh	r3, [r7, #6]
 80105a0:	bf00      	nop
			}
			break;
 80105a2:	e008      	b.n	80105b6 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80105a4:	89fb      	ldrh	r3, [r7, #14]
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d195      	bne.n	80104d6 <ff_wtoupper+0x1a>
 80105aa:	8a3b      	ldrh	r3, [r7, #16]
 80105ac:	005b      	lsls	r3, r3, #1
 80105ae:	697a      	ldr	r2, [r7, #20]
 80105b0:	4413      	add	r3, r2
 80105b2:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80105b4:	e78f      	b.n	80104d6 <ff_wtoupper+0x1a>
			break;
 80105b6:	bf00      	nop
	}

	return chr;
 80105b8:	88fb      	ldrh	r3, [r7, #6]
}
 80105ba:	4618      	mov	r0, r3
 80105bc:	371c      	adds	r7, #28
 80105be:	46bd      	mov	sp, r7
 80105c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105c4:	4770      	bx	lr
 80105c6:	bf00      	nop
 80105c8:	08012320 	.word	0x08012320
 80105cc:	08012514 	.word	0x08012514

080105d0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80105d0:	b580      	push	{r7, lr}
 80105d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80105d4:	2201      	movs	r2, #1
 80105d6:	490e      	ldr	r1, [pc, #56]	; (8010610 <MX_USB_HOST_Init+0x40>)
 80105d8:	480e      	ldr	r0, [pc, #56]	; (8010614 <MX_USB_HOST_Init+0x44>)
 80105da:	f7f9 fcc9 	bl	8009f70 <USBH_Init>
 80105de:	4603      	mov	r3, r0
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d001      	beq.n	80105e8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80105e4:	f7f1 f8fe 	bl	80017e4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 80105e8:	490b      	ldr	r1, [pc, #44]	; (8010618 <MX_USB_HOST_Init+0x48>)
 80105ea:	480a      	ldr	r0, [pc, #40]	; (8010614 <MX_USB_HOST_Init+0x44>)
 80105ec:	f7f9 fd4e 	bl	800a08c <USBH_RegisterClass>
 80105f0:	4603      	mov	r3, r0
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d001      	beq.n	80105fa <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80105f6:	f7f1 f8f5 	bl	80017e4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80105fa:	4806      	ldr	r0, [pc, #24]	; (8010614 <MX_USB_HOST_Init+0x44>)
 80105fc:	f7f9 fdd2 	bl	800a1a4 <USBH_Start>
 8010600:	4603      	mov	r3, r0
 8010602:	2b00      	cmp	r3, #0
 8010604:	d001      	beq.n	801060a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8010606:	f7f1 f8ed 	bl	80017e4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 801060a:	bf00      	nop
 801060c:	bd80      	pop	{r7, pc}
 801060e:	bf00      	nop
 8010610:	08010631 	.word	0x08010631
 8010614:	20004a70 	.word	0x20004a70
 8010618:	2000005c 	.word	0x2000005c

0801061c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 801061c:	b580      	push	{r7, lr}
 801061e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8010620:	4802      	ldr	r0, [pc, #8]	; (801062c <MX_USB_HOST_Process+0x10>)
 8010622:	f7f9 fdcf 	bl	800a1c4 <USBH_Process>
}
 8010626:	bf00      	nop
 8010628:	bd80      	pop	{r7, pc}
 801062a:	bf00      	nop
 801062c:	20004a70 	.word	0x20004a70

08010630 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8010630:	b480      	push	{r7}
 8010632:	b083      	sub	sp, #12
 8010634:	af00      	add	r7, sp, #0
 8010636:	6078      	str	r0, [r7, #4]
 8010638:	460b      	mov	r3, r1
 801063a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 801063c:	78fb      	ldrb	r3, [r7, #3]
 801063e:	3b01      	subs	r3, #1
 8010640:	2b04      	cmp	r3, #4
 8010642:	d819      	bhi.n	8010678 <USBH_UserProcess+0x48>
 8010644:	a201      	add	r2, pc, #4	; (adr r2, 801064c <USBH_UserProcess+0x1c>)
 8010646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801064a:	bf00      	nop
 801064c:	08010679 	.word	0x08010679
 8010650:	08010669 	.word	0x08010669
 8010654:	08010679 	.word	0x08010679
 8010658:	08010671 	.word	0x08010671
 801065c:	08010661 	.word	0x08010661
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8010660:	4b09      	ldr	r3, [pc, #36]	; (8010688 <USBH_UserProcess+0x58>)
 8010662:	2203      	movs	r2, #3
 8010664:	701a      	strb	r2, [r3, #0]
  break;
 8010666:	e008      	b.n	801067a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8010668:	4b07      	ldr	r3, [pc, #28]	; (8010688 <USBH_UserProcess+0x58>)
 801066a:	2202      	movs	r2, #2
 801066c:	701a      	strb	r2, [r3, #0]
  break;
 801066e:	e004      	b.n	801067a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8010670:	4b05      	ldr	r3, [pc, #20]	; (8010688 <USBH_UserProcess+0x58>)
 8010672:	2201      	movs	r2, #1
 8010674:	701a      	strb	r2, [r3, #0]
  break;
 8010676:	e000      	b.n	801067a <USBH_UserProcess+0x4a>

  default:
  break;
 8010678:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801067a:	bf00      	nop
 801067c:	370c      	adds	r7, #12
 801067e:	46bd      	mov	sp, r7
 8010680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010684:	4770      	bx	lr
 8010686:	bf00      	nop
 8010688:	20004e48 	.word	0x20004e48

0801068c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 801068c:	b580      	push	{r7, lr}
 801068e:	b08a      	sub	sp, #40	; 0x28
 8010690:	af00      	add	r7, sp, #0
 8010692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010694:	f107 0314 	add.w	r3, r7, #20
 8010698:	2200      	movs	r2, #0
 801069a:	601a      	str	r2, [r3, #0]
 801069c:	605a      	str	r2, [r3, #4]
 801069e:	609a      	str	r2, [r3, #8]
 80106a0:	60da      	str	r2, [r3, #12]
 80106a2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80106ac:	d147      	bne.n	801073e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80106ae:	2300      	movs	r3, #0
 80106b0:	613b      	str	r3, [r7, #16]
 80106b2:	4b25      	ldr	r3, [pc, #148]	; (8010748 <HAL_HCD_MspInit+0xbc>)
 80106b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106b6:	4a24      	ldr	r2, [pc, #144]	; (8010748 <HAL_HCD_MspInit+0xbc>)
 80106b8:	f043 0301 	orr.w	r3, r3, #1
 80106bc:	6313      	str	r3, [r2, #48]	; 0x30
 80106be:	4b22      	ldr	r3, [pc, #136]	; (8010748 <HAL_HCD_MspInit+0xbc>)
 80106c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106c2:	f003 0301 	and.w	r3, r3, #1
 80106c6:	613b      	str	r3, [r7, #16]
 80106c8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80106ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80106ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80106d0:	2300      	movs	r3, #0
 80106d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80106d4:	2300      	movs	r3, #0
 80106d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80106d8:	f107 0314 	add.w	r3, r7, #20
 80106dc:	4619      	mov	r1, r3
 80106de:	481b      	ldr	r0, [pc, #108]	; (801074c <HAL_HCD_MspInit+0xc0>)
 80106e0:	f7f2 f8f6 	bl	80028d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80106e4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80106e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80106ea:	2302      	movs	r3, #2
 80106ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80106ee:	2300      	movs	r3, #0
 80106f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80106f2:	2303      	movs	r3, #3
 80106f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80106f6:	230a      	movs	r3, #10
 80106f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80106fa:	f107 0314 	add.w	r3, r7, #20
 80106fe:	4619      	mov	r1, r3
 8010700:	4812      	ldr	r0, [pc, #72]	; (801074c <HAL_HCD_MspInit+0xc0>)
 8010702:	f7f2 f8e5 	bl	80028d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010706:	4b10      	ldr	r3, [pc, #64]	; (8010748 <HAL_HCD_MspInit+0xbc>)
 8010708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801070a:	4a0f      	ldr	r2, [pc, #60]	; (8010748 <HAL_HCD_MspInit+0xbc>)
 801070c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010710:	6353      	str	r3, [r2, #52]	; 0x34
 8010712:	2300      	movs	r3, #0
 8010714:	60fb      	str	r3, [r7, #12]
 8010716:	4b0c      	ldr	r3, [pc, #48]	; (8010748 <HAL_HCD_MspInit+0xbc>)
 8010718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801071a:	4a0b      	ldr	r2, [pc, #44]	; (8010748 <HAL_HCD_MspInit+0xbc>)
 801071c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010720:	6453      	str	r3, [r2, #68]	; 0x44
 8010722:	4b09      	ldr	r3, [pc, #36]	; (8010748 <HAL_HCD_MspInit+0xbc>)
 8010724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010726:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801072a:	60fb      	str	r3, [r7, #12]
 801072c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801072e:	2200      	movs	r2, #0
 8010730:	2100      	movs	r1, #0
 8010732:	2043      	movs	r0, #67	; 0x43
 8010734:	f7f1 fcb5 	bl	80020a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010738:	2043      	movs	r0, #67	; 0x43
 801073a:	f7f1 fcce 	bl	80020da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801073e:	bf00      	nop
 8010740:	3728      	adds	r7, #40	; 0x28
 8010742:	46bd      	mov	sp, r7
 8010744:	bd80      	pop	{r7, pc}
 8010746:	bf00      	nop
 8010748:	40023800 	.word	0x40023800
 801074c:	40020000 	.word	0x40020000

08010750 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8010750:	b580      	push	{r7, lr}
 8010752:	b082      	sub	sp, #8
 8010754:	af00      	add	r7, sp, #0
 8010756:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801075e:	4618      	mov	r0, r3
 8010760:	f7fa f90f 	bl	800a982 <USBH_LL_IncTimer>
}
 8010764:	bf00      	nop
 8010766:	3708      	adds	r7, #8
 8010768:	46bd      	mov	sp, r7
 801076a:	bd80      	pop	{r7, pc}

0801076c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 801076c:	b580      	push	{r7, lr}
 801076e:	b082      	sub	sp, #8
 8010770:	af00      	add	r7, sp, #0
 8010772:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801077a:	4618      	mov	r0, r3
 801077c:	f7fa f947 	bl	800aa0e <USBH_LL_Connect>
}
 8010780:	bf00      	nop
 8010782:	3708      	adds	r7, #8
 8010784:	46bd      	mov	sp, r7
 8010786:	bd80      	pop	{r7, pc}

08010788 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010788:	b580      	push	{r7, lr}
 801078a:	b082      	sub	sp, #8
 801078c:	af00      	add	r7, sp, #0
 801078e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010796:	4618      	mov	r0, r3
 8010798:	f7fa f950 	bl	800aa3c <USBH_LL_Disconnect>
}
 801079c:	bf00      	nop
 801079e:	3708      	adds	r7, #8
 80107a0:	46bd      	mov	sp, r7
 80107a2:	bd80      	pop	{r7, pc}

080107a4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80107a4:	b480      	push	{r7}
 80107a6:	b083      	sub	sp, #12
 80107a8:	af00      	add	r7, sp, #0
 80107aa:	6078      	str	r0, [r7, #4]
 80107ac:	460b      	mov	r3, r1
 80107ae:	70fb      	strb	r3, [r7, #3]
 80107b0:	4613      	mov	r3, r2
 80107b2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80107b4:	bf00      	nop
 80107b6:	370c      	adds	r7, #12
 80107b8:	46bd      	mov	sp, r7
 80107ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107be:	4770      	bx	lr

080107c0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80107c0:	b580      	push	{r7, lr}
 80107c2:	b082      	sub	sp, #8
 80107c4:	af00      	add	r7, sp, #0
 80107c6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80107ce:	4618      	mov	r0, r3
 80107d0:	f7fa f901 	bl	800a9d6 <USBH_LL_PortEnabled>
}
 80107d4:	bf00      	nop
 80107d6:	3708      	adds	r7, #8
 80107d8:	46bd      	mov	sp, r7
 80107da:	bd80      	pop	{r7, pc}

080107dc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80107dc:	b580      	push	{r7, lr}
 80107de:	b082      	sub	sp, #8
 80107e0:	af00      	add	r7, sp, #0
 80107e2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80107ea:	4618      	mov	r0, r3
 80107ec:	f7fa f901 	bl	800a9f2 <USBH_LL_PortDisabled>
}
 80107f0:	bf00      	nop
 80107f2:	3708      	adds	r7, #8
 80107f4:	46bd      	mov	sp, r7
 80107f6:	bd80      	pop	{r7, pc}

080107f8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80107f8:	b580      	push	{r7, lr}
 80107fa:	b082      	sub	sp, #8
 80107fc:	af00      	add	r7, sp, #0
 80107fe:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8010806:	2b01      	cmp	r3, #1
 8010808:	d12a      	bne.n	8010860 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 801080a:	4a18      	ldr	r2, [pc, #96]	; (801086c <USBH_LL_Init+0x74>)
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	4a15      	ldr	r2, [pc, #84]	; (801086c <USBH_LL_Init+0x74>)
 8010816:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801081a:	4b14      	ldr	r3, [pc, #80]	; (801086c <USBH_LL_Init+0x74>)
 801081c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8010820:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8010822:	4b12      	ldr	r3, [pc, #72]	; (801086c <USBH_LL_Init+0x74>)
 8010824:	2208      	movs	r2, #8
 8010826:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8010828:	4b10      	ldr	r3, [pc, #64]	; (801086c <USBH_LL_Init+0x74>)
 801082a:	2201      	movs	r2, #1
 801082c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801082e:	4b0f      	ldr	r3, [pc, #60]	; (801086c <USBH_LL_Init+0x74>)
 8010830:	2200      	movs	r2, #0
 8010832:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8010834:	4b0d      	ldr	r3, [pc, #52]	; (801086c <USBH_LL_Init+0x74>)
 8010836:	2202      	movs	r2, #2
 8010838:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801083a:	4b0c      	ldr	r3, [pc, #48]	; (801086c <USBH_LL_Init+0x74>)
 801083c:	2200      	movs	r2, #0
 801083e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8010840:	480a      	ldr	r0, [pc, #40]	; (801086c <USBH_LL_Init+0x74>)
 8010842:	f7f2 fa50 	bl	8002ce6 <HAL_HCD_Init>
 8010846:	4603      	mov	r3, r0
 8010848:	2b00      	cmp	r3, #0
 801084a:	d001      	beq.n	8010850 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 801084c:	f7f0 ffca 	bl	80017e4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8010850:	4806      	ldr	r0, [pc, #24]	; (801086c <USBH_LL_Init+0x74>)
 8010852:	f7f2 fe34 	bl	80034be <HAL_HCD_GetCurrentFrame>
 8010856:	4603      	mov	r3, r0
 8010858:	4619      	mov	r1, r3
 801085a:	6878      	ldr	r0, [r7, #4]
 801085c:	f7fa f882 	bl	800a964 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8010860:	2300      	movs	r3, #0
}
 8010862:	4618      	mov	r0, r3
 8010864:	3708      	adds	r7, #8
 8010866:	46bd      	mov	sp, r7
 8010868:	bd80      	pop	{r7, pc}
 801086a:	bf00      	nop
 801086c:	20004e4c 	.word	0x20004e4c

08010870 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8010870:	b580      	push	{r7, lr}
 8010872:	b084      	sub	sp, #16
 8010874:	af00      	add	r7, sp, #0
 8010876:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010878:	2300      	movs	r3, #0
 801087a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801087c:	2300      	movs	r3, #0
 801087e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010886:	4618      	mov	r0, r3
 8010888:	f7f2 fda3 	bl	80033d2 <HAL_HCD_Start>
 801088c:	4603      	mov	r3, r0
 801088e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010890:	7bfb      	ldrb	r3, [r7, #15]
 8010892:	4618      	mov	r0, r3
 8010894:	f000 f982 	bl	8010b9c <USBH_Get_USB_Status>
 8010898:	4603      	mov	r3, r0
 801089a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801089c:	7bbb      	ldrb	r3, [r7, #14]
}
 801089e:	4618      	mov	r0, r3
 80108a0:	3710      	adds	r7, #16
 80108a2:	46bd      	mov	sp, r7
 80108a4:	bd80      	pop	{r7, pc}

080108a6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80108a6:	b580      	push	{r7, lr}
 80108a8:	b084      	sub	sp, #16
 80108aa:	af00      	add	r7, sp, #0
 80108ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80108ae:	2300      	movs	r3, #0
 80108b0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80108b2:	2300      	movs	r3, #0
 80108b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80108bc:	4618      	mov	r0, r3
 80108be:	f7f2 fdab 	bl	8003418 <HAL_HCD_Stop>
 80108c2:	4603      	mov	r3, r0
 80108c4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80108c6:	7bfb      	ldrb	r3, [r7, #15]
 80108c8:	4618      	mov	r0, r3
 80108ca:	f000 f967 	bl	8010b9c <USBH_Get_USB_Status>
 80108ce:	4603      	mov	r3, r0
 80108d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80108d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80108d4:	4618      	mov	r0, r3
 80108d6:	3710      	adds	r7, #16
 80108d8:	46bd      	mov	sp, r7
 80108da:	bd80      	pop	{r7, pc}

080108dc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80108dc:	b580      	push	{r7, lr}
 80108de:	b084      	sub	sp, #16
 80108e0:	af00      	add	r7, sp, #0
 80108e2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80108e4:	2301      	movs	r3, #1
 80108e6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80108ee:	4618      	mov	r0, r3
 80108f0:	f7f2 fdf3 	bl	80034da <HAL_HCD_GetCurrentSpeed>
 80108f4:	4603      	mov	r3, r0
 80108f6:	2b02      	cmp	r3, #2
 80108f8:	d00c      	beq.n	8010914 <USBH_LL_GetSpeed+0x38>
 80108fa:	2b02      	cmp	r3, #2
 80108fc:	d80d      	bhi.n	801091a <USBH_LL_GetSpeed+0x3e>
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d002      	beq.n	8010908 <USBH_LL_GetSpeed+0x2c>
 8010902:	2b01      	cmp	r3, #1
 8010904:	d003      	beq.n	801090e <USBH_LL_GetSpeed+0x32>
 8010906:	e008      	b.n	801091a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8010908:	2300      	movs	r3, #0
 801090a:	73fb      	strb	r3, [r7, #15]
    break;
 801090c:	e008      	b.n	8010920 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 801090e:	2301      	movs	r3, #1
 8010910:	73fb      	strb	r3, [r7, #15]
    break;
 8010912:	e005      	b.n	8010920 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8010914:	2302      	movs	r3, #2
 8010916:	73fb      	strb	r3, [r7, #15]
    break;
 8010918:	e002      	b.n	8010920 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 801091a:	2301      	movs	r3, #1
 801091c:	73fb      	strb	r3, [r7, #15]
    break;
 801091e:	bf00      	nop
  }
  return  speed;
 8010920:	7bfb      	ldrb	r3, [r7, #15]
}
 8010922:	4618      	mov	r0, r3
 8010924:	3710      	adds	r7, #16
 8010926:	46bd      	mov	sp, r7
 8010928:	bd80      	pop	{r7, pc}

0801092a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 801092a:	b580      	push	{r7, lr}
 801092c:	b084      	sub	sp, #16
 801092e:	af00      	add	r7, sp, #0
 8010930:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010932:	2300      	movs	r3, #0
 8010934:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010936:	2300      	movs	r3, #0
 8010938:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010940:	4618      	mov	r0, r3
 8010942:	f7f2 fd86 	bl	8003452 <HAL_HCD_ResetPort>
 8010946:	4603      	mov	r3, r0
 8010948:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801094a:	7bfb      	ldrb	r3, [r7, #15]
 801094c:	4618      	mov	r0, r3
 801094e:	f000 f925 	bl	8010b9c <USBH_Get_USB_Status>
 8010952:	4603      	mov	r3, r0
 8010954:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010956:	7bbb      	ldrb	r3, [r7, #14]
}
 8010958:	4618      	mov	r0, r3
 801095a:	3710      	adds	r7, #16
 801095c:	46bd      	mov	sp, r7
 801095e:	bd80      	pop	{r7, pc}

08010960 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010960:	b580      	push	{r7, lr}
 8010962:	b082      	sub	sp, #8
 8010964:	af00      	add	r7, sp, #0
 8010966:	6078      	str	r0, [r7, #4]
 8010968:	460b      	mov	r3, r1
 801096a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010972:	78fa      	ldrb	r2, [r7, #3]
 8010974:	4611      	mov	r1, r2
 8010976:	4618      	mov	r0, r3
 8010978:	f7f2 fd8d 	bl	8003496 <HAL_HCD_HC_GetXferCount>
 801097c:	4603      	mov	r3, r0
}
 801097e:	4618      	mov	r0, r3
 8010980:	3708      	adds	r7, #8
 8010982:	46bd      	mov	sp, r7
 8010984:	bd80      	pop	{r7, pc}

08010986 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8010986:	b590      	push	{r4, r7, lr}
 8010988:	b089      	sub	sp, #36	; 0x24
 801098a:	af04      	add	r7, sp, #16
 801098c:	6078      	str	r0, [r7, #4]
 801098e:	4608      	mov	r0, r1
 8010990:	4611      	mov	r1, r2
 8010992:	461a      	mov	r2, r3
 8010994:	4603      	mov	r3, r0
 8010996:	70fb      	strb	r3, [r7, #3]
 8010998:	460b      	mov	r3, r1
 801099a:	70bb      	strb	r3, [r7, #2]
 801099c:	4613      	mov	r3, r2
 801099e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80109a0:	2300      	movs	r3, #0
 80109a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80109a4:	2300      	movs	r3, #0
 80109a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80109ae:	787c      	ldrb	r4, [r7, #1]
 80109b0:	78ba      	ldrb	r2, [r7, #2]
 80109b2:	78f9      	ldrb	r1, [r7, #3]
 80109b4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80109b6:	9302      	str	r3, [sp, #8]
 80109b8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80109bc:	9301      	str	r3, [sp, #4]
 80109be:	f897 3020 	ldrb.w	r3, [r7, #32]
 80109c2:	9300      	str	r3, [sp, #0]
 80109c4:	4623      	mov	r3, r4
 80109c6:	f7f2 f9f0 	bl	8002daa <HAL_HCD_HC_Init>
 80109ca:	4603      	mov	r3, r0
 80109cc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80109ce:	7bfb      	ldrb	r3, [r7, #15]
 80109d0:	4618      	mov	r0, r3
 80109d2:	f000 f8e3 	bl	8010b9c <USBH_Get_USB_Status>
 80109d6:	4603      	mov	r3, r0
 80109d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80109da:	7bbb      	ldrb	r3, [r7, #14]
}
 80109dc:	4618      	mov	r0, r3
 80109de:	3714      	adds	r7, #20
 80109e0:	46bd      	mov	sp, r7
 80109e2:	bd90      	pop	{r4, r7, pc}

080109e4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80109e4:	b580      	push	{r7, lr}
 80109e6:	b084      	sub	sp, #16
 80109e8:	af00      	add	r7, sp, #0
 80109ea:	6078      	str	r0, [r7, #4]
 80109ec:	460b      	mov	r3, r1
 80109ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80109f0:	2300      	movs	r3, #0
 80109f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80109f4:	2300      	movs	r3, #0
 80109f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80109fe:	78fa      	ldrb	r2, [r7, #3]
 8010a00:	4611      	mov	r1, r2
 8010a02:	4618      	mov	r0, r3
 8010a04:	f7f2 fa60 	bl	8002ec8 <HAL_HCD_HC_Halt>
 8010a08:	4603      	mov	r3, r0
 8010a0a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010a0c:	7bfb      	ldrb	r3, [r7, #15]
 8010a0e:	4618      	mov	r0, r3
 8010a10:	f000 f8c4 	bl	8010b9c <USBH_Get_USB_Status>
 8010a14:	4603      	mov	r3, r0
 8010a16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010a18:	7bbb      	ldrb	r3, [r7, #14]
}
 8010a1a:	4618      	mov	r0, r3
 8010a1c:	3710      	adds	r7, #16
 8010a1e:	46bd      	mov	sp, r7
 8010a20:	bd80      	pop	{r7, pc}

08010a22 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8010a22:	b590      	push	{r4, r7, lr}
 8010a24:	b089      	sub	sp, #36	; 0x24
 8010a26:	af04      	add	r7, sp, #16
 8010a28:	6078      	str	r0, [r7, #4]
 8010a2a:	4608      	mov	r0, r1
 8010a2c:	4611      	mov	r1, r2
 8010a2e:	461a      	mov	r2, r3
 8010a30:	4603      	mov	r3, r0
 8010a32:	70fb      	strb	r3, [r7, #3]
 8010a34:	460b      	mov	r3, r1
 8010a36:	70bb      	strb	r3, [r7, #2]
 8010a38:	4613      	mov	r3, r2
 8010a3a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010a3c:	2300      	movs	r3, #0
 8010a3e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010a40:	2300      	movs	r3, #0
 8010a42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8010a4a:	787c      	ldrb	r4, [r7, #1]
 8010a4c:	78ba      	ldrb	r2, [r7, #2]
 8010a4e:	78f9      	ldrb	r1, [r7, #3]
 8010a50:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010a54:	9303      	str	r3, [sp, #12]
 8010a56:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010a58:	9302      	str	r3, [sp, #8]
 8010a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a5c:	9301      	str	r3, [sp, #4]
 8010a5e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010a62:	9300      	str	r3, [sp, #0]
 8010a64:	4623      	mov	r3, r4
 8010a66:	f7f2 fa53 	bl	8002f10 <HAL_HCD_HC_SubmitRequest>
 8010a6a:	4603      	mov	r3, r0
 8010a6c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8010a6e:	7bfb      	ldrb	r3, [r7, #15]
 8010a70:	4618      	mov	r0, r3
 8010a72:	f000 f893 	bl	8010b9c <USBH_Get_USB_Status>
 8010a76:	4603      	mov	r3, r0
 8010a78:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010a7a:	7bbb      	ldrb	r3, [r7, #14]
}
 8010a7c:	4618      	mov	r0, r3
 8010a7e:	3714      	adds	r7, #20
 8010a80:	46bd      	mov	sp, r7
 8010a82:	bd90      	pop	{r4, r7, pc}

08010a84 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010a84:	b580      	push	{r7, lr}
 8010a86:	b082      	sub	sp, #8
 8010a88:	af00      	add	r7, sp, #0
 8010a8a:	6078      	str	r0, [r7, #4]
 8010a8c:	460b      	mov	r3, r1
 8010a8e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010a96:	78fa      	ldrb	r2, [r7, #3]
 8010a98:	4611      	mov	r1, r2
 8010a9a:	4618      	mov	r0, r3
 8010a9c:	f7f2 fce7 	bl	800346e <HAL_HCD_HC_GetURBState>
 8010aa0:	4603      	mov	r3, r0
}
 8010aa2:	4618      	mov	r0, r3
 8010aa4:	3708      	adds	r7, #8
 8010aa6:	46bd      	mov	sp, r7
 8010aa8:	bd80      	pop	{r7, pc}

08010aaa <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8010aaa:	b580      	push	{r7, lr}
 8010aac:	b082      	sub	sp, #8
 8010aae:	af00      	add	r7, sp, #0
 8010ab0:	6078      	str	r0, [r7, #4]
 8010ab2:	460b      	mov	r3, r1
 8010ab4:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 8010ab6:	20c8      	movs	r0, #200	; 0xc8
 8010ab8:	f7f1 f9f4 	bl	8001ea4 <HAL_Delay>
  return USBH_OK;
 8010abc:	2300      	movs	r3, #0
}
 8010abe:	4618      	mov	r0, r3
 8010ac0:	3708      	adds	r7, #8
 8010ac2:	46bd      	mov	sp, r7
 8010ac4:	bd80      	pop	{r7, pc}

08010ac6 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8010ac6:	b480      	push	{r7}
 8010ac8:	b085      	sub	sp, #20
 8010aca:	af00      	add	r7, sp, #0
 8010acc:	6078      	str	r0, [r7, #4]
 8010ace:	460b      	mov	r3, r1
 8010ad0:	70fb      	strb	r3, [r7, #3]
 8010ad2:	4613      	mov	r3, r2
 8010ad4:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010adc:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8010ade:	78fb      	ldrb	r3, [r7, #3]
 8010ae0:	68fa      	ldr	r2, [r7, #12]
 8010ae2:	212c      	movs	r1, #44	; 0x2c
 8010ae4:	fb01 f303 	mul.w	r3, r1, r3
 8010ae8:	4413      	add	r3, r2
 8010aea:	333b      	adds	r3, #59	; 0x3b
 8010aec:	781b      	ldrb	r3, [r3, #0]
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d009      	beq.n	8010b06 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8010af2:	78fb      	ldrb	r3, [r7, #3]
 8010af4:	68fa      	ldr	r2, [r7, #12]
 8010af6:	212c      	movs	r1, #44	; 0x2c
 8010af8:	fb01 f303 	mul.w	r3, r1, r3
 8010afc:	4413      	add	r3, r2
 8010afe:	3354      	adds	r3, #84	; 0x54
 8010b00:	78ba      	ldrb	r2, [r7, #2]
 8010b02:	701a      	strb	r2, [r3, #0]
 8010b04:	e008      	b.n	8010b18 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8010b06:	78fb      	ldrb	r3, [r7, #3]
 8010b08:	68fa      	ldr	r2, [r7, #12]
 8010b0a:	212c      	movs	r1, #44	; 0x2c
 8010b0c:	fb01 f303 	mul.w	r3, r1, r3
 8010b10:	4413      	add	r3, r2
 8010b12:	3355      	adds	r3, #85	; 0x55
 8010b14:	78ba      	ldrb	r2, [r7, #2]
 8010b16:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8010b18:	2300      	movs	r3, #0
}
 8010b1a:	4618      	mov	r0, r3
 8010b1c:	3714      	adds	r7, #20
 8010b1e:	46bd      	mov	sp, r7
 8010b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b24:	4770      	bx	lr

08010b26 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010b26:	b480      	push	{r7}
 8010b28:	b085      	sub	sp, #20
 8010b2a:	af00      	add	r7, sp, #0
 8010b2c:	6078      	str	r0, [r7, #4]
 8010b2e:	460b      	mov	r3, r1
 8010b30:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 8010b32:	2300      	movs	r3, #0
 8010b34:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010b3c:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 8010b3e:	78fb      	ldrb	r3, [r7, #3]
 8010b40:	68ba      	ldr	r2, [r7, #8]
 8010b42:	212c      	movs	r1, #44	; 0x2c
 8010b44:	fb01 f303 	mul.w	r3, r1, r3
 8010b48:	4413      	add	r3, r2
 8010b4a:	333b      	adds	r3, #59	; 0x3b
 8010b4c:	781b      	ldrb	r3, [r3, #0]
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d009      	beq.n	8010b66 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 8010b52:	78fb      	ldrb	r3, [r7, #3]
 8010b54:	68ba      	ldr	r2, [r7, #8]
 8010b56:	212c      	movs	r1, #44	; 0x2c
 8010b58:	fb01 f303 	mul.w	r3, r1, r3
 8010b5c:	4413      	add	r3, r2
 8010b5e:	3354      	adds	r3, #84	; 0x54
 8010b60:	781b      	ldrb	r3, [r3, #0]
 8010b62:	73fb      	strb	r3, [r7, #15]
 8010b64:	e008      	b.n	8010b78 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 8010b66:	78fb      	ldrb	r3, [r7, #3]
 8010b68:	68ba      	ldr	r2, [r7, #8]
 8010b6a:	212c      	movs	r1, #44	; 0x2c
 8010b6c:	fb01 f303 	mul.w	r3, r1, r3
 8010b70:	4413      	add	r3, r2
 8010b72:	3355      	adds	r3, #85	; 0x55
 8010b74:	781b      	ldrb	r3, [r3, #0]
 8010b76:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 8010b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b7a:	4618      	mov	r0, r3
 8010b7c:	3714      	adds	r7, #20
 8010b7e:	46bd      	mov	sp, r7
 8010b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b84:	4770      	bx	lr

08010b86 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8010b86:	b580      	push	{r7, lr}
 8010b88:	b082      	sub	sp, #8
 8010b8a:	af00      	add	r7, sp, #0
 8010b8c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8010b8e:	6878      	ldr	r0, [r7, #4]
 8010b90:	f7f1 f988 	bl	8001ea4 <HAL_Delay>
}
 8010b94:	bf00      	nop
 8010b96:	3708      	adds	r7, #8
 8010b98:	46bd      	mov	sp, r7
 8010b9a:	bd80      	pop	{r7, pc}

08010b9c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010b9c:	b480      	push	{r7}
 8010b9e:	b085      	sub	sp, #20
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	4603      	mov	r3, r0
 8010ba4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010ba6:	2300      	movs	r3, #0
 8010ba8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010baa:	79fb      	ldrb	r3, [r7, #7]
 8010bac:	2b03      	cmp	r3, #3
 8010bae:	d817      	bhi.n	8010be0 <USBH_Get_USB_Status+0x44>
 8010bb0:	a201      	add	r2, pc, #4	; (adr r2, 8010bb8 <USBH_Get_USB_Status+0x1c>)
 8010bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010bb6:	bf00      	nop
 8010bb8:	08010bc9 	.word	0x08010bc9
 8010bbc:	08010bcf 	.word	0x08010bcf
 8010bc0:	08010bd5 	.word	0x08010bd5
 8010bc4:	08010bdb 	.word	0x08010bdb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8010bc8:	2300      	movs	r3, #0
 8010bca:	73fb      	strb	r3, [r7, #15]
    break;
 8010bcc:	e00b      	b.n	8010be6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8010bce:	2302      	movs	r3, #2
 8010bd0:	73fb      	strb	r3, [r7, #15]
    break;
 8010bd2:	e008      	b.n	8010be6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8010bd4:	2301      	movs	r3, #1
 8010bd6:	73fb      	strb	r3, [r7, #15]
    break;
 8010bd8:	e005      	b.n	8010be6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8010bda:	2302      	movs	r3, #2
 8010bdc:	73fb      	strb	r3, [r7, #15]
    break;
 8010bde:	e002      	b.n	8010be6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8010be0:	2302      	movs	r3, #2
 8010be2:	73fb      	strb	r3, [r7, #15]
    break;
 8010be4:	bf00      	nop
  }
  return usb_status;
 8010be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8010be8:	4618      	mov	r0, r3
 8010bea:	3714      	adds	r7, #20
 8010bec:	46bd      	mov	sp, r7
 8010bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bf2:	4770      	bx	lr

08010bf4 <__errno>:
 8010bf4:	4b01      	ldr	r3, [pc, #4]	; (8010bfc <__errno+0x8>)
 8010bf6:	6818      	ldr	r0, [r3, #0]
 8010bf8:	4770      	bx	lr
 8010bfa:	bf00      	nop
 8010bfc:	2000007c 	.word	0x2000007c

08010c00 <__libc_init_array>:
 8010c00:	b570      	push	{r4, r5, r6, lr}
 8010c02:	4d0d      	ldr	r5, [pc, #52]	; (8010c38 <__libc_init_array+0x38>)
 8010c04:	4c0d      	ldr	r4, [pc, #52]	; (8010c3c <__libc_init_array+0x3c>)
 8010c06:	1b64      	subs	r4, r4, r5
 8010c08:	10a4      	asrs	r4, r4, #2
 8010c0a:	2600      	movs	r6, #0
 8010c0c:	42a6      	cmp	r6, r4
 8010c0e:	d109      	bne.n	8010c24 <__libc_init_array+0x24>
 8010c10:	4d0b      	ldr	r5, [pc, #44]	; (8010c40 <__libc_init_array+0x40>)
 8010c12:	4c0c      	ldr	r4, [pc, #48]	; (8010c44 <__libc_init_array+0x44>)
 8010c14:	f001 fa18 	bl	8012048 <_init>
 8010c18:	1b64      	subs	r4, r4, r5
 8010c1a:	10a4      	asrs	r4, r4, #2
 8010c1c:	2600      	movs	r6, #0
 8010c1e:	42a6      	cmp	r6, r4
 8010c20:	d105      	bne.n	8010c2e <__libc_init_array+0x2e>
 8010c22:	bd70      	pop	{r4, r5, r6, pc}
 8010c24:	f855 3b04 	ldr.w	r3, [r5], #4
 8010c28:	4798      	blx	r3
 8010c2a:	3601      	adds	r6, #1
 8010c2c:	e7ee      	b.n	8010c0c <__libc_init_array+0xc>
 8010c2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010c32:	4798      	blx	r3
 8010c34:	3601      	adds	r6, #1
 8010c36:	e7f2      	b.n	8010c1e <__libc_init_array+0x1e>
 8010c38:	08012670 	.word	0x08012670
 8010c3c:	08012670 	.word	0x08012670
 8010c40:	08012670 	.word	0x08012670
 8010c44:	08012674 	.word	0x08012674

08010c48 <malloc>:
 8010c48:	4b02      	ldr	r3, [pc, #8]	; (8010c54 <malloc+0xc>)
 8010c4a:	4601      	mov	r1, r0
 8010c4c:	6818      	ldr	r0, [r3, #0]
 8010c4e:	f000 b88d 	b.w	8010d6c <_malloc_r>
 8010c52:	bf00      	nop
 8010c54:	2000007c 	.word	0x2000007c

08010c58 <free>:
 8010c58:	4b02      	ldr	r3, [pc, #8]	; (8010c64 <free+0xc>)
 8010c5a:	4601      	mov	r1, r0
 8010c5c:	6818      	ldr	r0, [r3, #0]
 8010c5e:	f000 b819 	b.w	8010c94 <_free_r>
 8010c62:	bf00      	nop
 8010c64:	2000007c 	.word	0x2000007c

08010c68 <memcpy>:
 8010c68:	440a      	add	r2, r1
 8010c6a:	4291      	cmp	r1, r2
 8010c6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8010c70:	d100      	bne.n	8010c74 <memcpy+0xc>
 8010c72:	4770      	bx	lr
 8010c74:	b510      	push	{r4, lr}
 8010c76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010c7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010c7e:	4291      	cmp	r1, r2
 8010c80:	d1f9      	bne.n	8010c76 <memcpy+0xe>
 8010c82:	bd10      	pop	{r4, pc}

08010c84 <memset>:
 8010c84:	4402      	add	r2, r0
 8010c86:	4603      	mov	r3, r0
 8010c88:	4293      	cmp	r3, r2
 8010c8a:	d100      	bne.n	8010c8e <memset+0xa>
 8010c8c:	4770      	bx	lr
 8010c8e:	f803 1b01 	strb.w	r1, [r3], #1
 8010c92:	e7f9      	b.n	8010c88 <memset+0x4>

08010c94 <_free_r>:
 8010c94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010c96:	2900      	cmp	r1, #0
 8010c98:	d044      	beq.n	8010d24 <_free_r+0x90>
 8010c9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010c9e:	9001      	str	r0, [sp, #4]
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	f1a1 0404 	sub.w	r4, r1, #4
 8010ca6:	bfb8      	it	lt
 8010ca8:	18e4      	addlt	r4, r4, r3
 8010caa:	f000 fc79 	bl	80115a0 <__malloc_lock>
 8010cae:	4a1e      	ldr	r2, [pc, #120]	; (8010d28 <_free_r+0x94>)
 8010cb0:	9801      	ldr	r0, [sp, #4]
 8010cb2:	6813      	ldr	r3, [r2, #0]
 8010cb4:	b933      	cbnz	r3, 8010cc4 <_free_r+0x30>
 8010cb6:	6063      	str	r3, [r4, #4]
 8010cb8:	6014      	str	r4, [r2, #0]
 8010cba:	b003      	add	sp, #12
 8010cbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010cc0:	f000 bc74 	b.w	80115ac <__malloc_unlock>
 8010cc4:	42a3      	cmp	r3, r4
 8010cc6:	d908      	bls.n	8010cda <_free_r+0x46>
 8010cc8:	6825      	ldr	r5, [r4, #0]
 8010cca:	1961      	adds	r1, r4, r5
 8010ccc:	428b      	cmp	r3, r1
 8010cce:	bf01      	itttt	eq
 8010cd0:	6819      	ldreq	r1, [r3, #0]
 8010cd2:	685b      	ldreq	r3, [r3, #4]
 8010cd4:	1949      	addeq	r1, r1, r5
 8010cd6:	6021      	streq	r1, [r4, #0]
 8010cd8:	e7ed      	b.n	8010cb6 <_free_r+0x22>
 8010cda:	461a      	mov	r2, r3
 8010cdc:	685b      	ldr	r3, [r3, #4]
 8010cde:	b10b      	cbz	r3, 8010ce4 <_free_r+0x50>
 8010ce0:	42a3      	cmp	r3, r4
 8010ce2:	d9fa      	bls.n	8010cda <_free_r+0x46>
 8010ce4:	6811      	ldr	r1, [r2, #0]
 8010ce6:	1855      	adds	r5, r2, r1
 8010ce8:	42a5      	cmp	r5, r4
 8010cea:	d10b      	bne.n	8010d04 <_free_r+0x70>
 8010cec:	6824      	ldr	r4, [r4, #0]
 8010cee:	4421      	add	r1, r4
 8010cf0:	1854      	adds	r4, r2, r1
 8010cf2:	42a3      	cmp	r3, r4
 8010cf4:	6011      	str	r1, [r2, #0]
 8010cf6:	d1e0      	bne.n	8010cba <_free_r+0x26>
 8010cf8:	681c      	ldr	r4, [r3, #0]
 8010cfa:	685b      	ldr	r3, [r3, #4]
 8010cfc:	6053      	str	r3, [r2, #4]
 8010cfe:	4421      	add	r1, r4
 8010d00:	6011      	str	r1, [r2, #0]
 8010d02:	e7da      	b.n	8010cba <_free_r+0x26>
 8010d04:	d902      	bls.n	8010d0c <_free_r+0x78>
 8010d06:	230c      	movs	r3, #12
 8010d08:	6003      	str	r3, [r0, #0]
 8010d0a:	e7d6      	b.n	8010cba <_free_r+0x26>
 8010d0c:	6825      	ldr	r5, [r4, #0]
 8010d0e:	1961      	adds	r1, r4, r5
 8010d10:	428b      	cmp	r3, r1
 8010d12:	bf04      	itt	eq
 8010d14:	6819      	ldreq	r1, [r3, #0]
 8010d16:	685b      	ldreq	r3, [r3, #4]
 8010d18:	6063      	str	r3, [r4, #4]
 8010d1a:	bf04      	itt	eq
 8010d1c:	1949      	addeq	r1, r1, r5
 8010d1e:	6021      	streq	r1, [r4, #0]
 8010d20:	6054      	str	r4, [r2, #4]
 8010d22:	e7ca      	b.n	8010cba <_free_r+0x26>
 8010d24:	b003      	add	sp, #12
 8010d26:	bd30      	pop	{r4, r5, pc}
 8010d28:	20005150 	.word	0x20005150

08010d2c <sbrk_aligned>:
 8010d2c:	b570      	push	{r4, r5, r6, lr}
 8010d2e:	4e0e      	ldr	r6, [pc, #56]	; (8010d68 <sbrk_aligned+0x3c>)
 8010d30:	460c      	mov	r4, r1
 8010d32:	6831      	ldr	r1, [r6, #0]
 8010d34:	4605      	mov	r5, r0
 8010d36:	b911      	cbnz	r1, 8010d3e <sbrk_aligned+0x12>
 8010d38:	f000 f91a 	bl	8010f70 <_sbrk_r>
 8010d3c:	6030      	str	r0, [r6, #0]
 8010d3e:	4621      	mov	r1, r4
 8010d40:	4628      	mov	r0, r5
 8010d42:	f000 f915 	bl	8010f70 <_sbrk_r>
 8010d46:	1c43      	adds	r3, r0, #1
 8010d48:	d00a      	beq.n	8010d60 <sbrk_aligned+0x34>
 8010d4a:	1cc4      	adds	r4, r0, #3
 8010d4c:	f024 0403 	bic.w	r4, r4, #3
 8010d50:	42a0      	cmp	r0, r4
 8010d52:	d007      	beq.n	8010d64 <sbrk_aligned+0x38>
 8010d54:	1a21      	subs	r1, r4, r0
 8010d56:	4628      	mov	r0, r5
 8010d58:	f000 f90a 	bl	8010f70 <_sbrk_r>
 8010d5c:	3001      	adds	r0, #1
 8010d5e:	d101      	bne.n	8010d64 <sbrk_aligned+0x38>
 8010d60:	f04f 34ff 	mov.w	r4, #4294967295
 8010d64:	4620      	mov	r0, r4
 8010d66:	bd70      	pop	{r4, r5, r6, pc}
 8010d68:	20005154 	.word	0x20005154

08010d6c <_malloc_r>:
 8010d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d70:	1ccd      	adds	r5, r1, #3
 8010d72:	f025 0503 	bic.w	r5, r5, #3
 8010d76:	3508      	adds	r5, #8
 8010d78:	2d0c      	cmp	r5, #12
 8010d7a:	bf38      	it	cc
 8010d7c:	250c      	movcc	r5, #12
 8010d7e:	2d00      	cmp	r5, #0
 8010d80:	4607      	mov	r7, r0
 8010d82:	db01      	blt.n	8010d88 <_malloc_r+0x1c>
 8010d84:	42a9      	cmp	r1, r5
 8010d86:	d905      	bls.n	8010d94 <_malloc_r+0x28>
 8010d88:	230c      	movs	r3, #12
 8010d8a:	603b      	str	r3, [r7, #0]
 8010d8c:	2600      	movs	r6, #0
 8010d8e:	4630      	mov	r0, r6
 8010d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d94:	4e2e      	ldr	r6, [pc, #184]	; (8010e50 <_malloc_r+0xe4>)
 8010d96:	f000 fc03 	bl	80115a0 <__malloc_lock>
 8010d9a:	6833      	ldr	r3, [r6, #0]
 8010d9c:	461c      	mov	r4, r3
 8010d9e:	bb34      	cbnz	r4, 8010dee <_malloc_r+0x82>
 8010da0:	4629      	mov	r1, r5
 8010da2:	4638      	mov	r0, r7
 8010da4:	f7ff ffc2 	bl	8010d2c <sbrk_aligned>
 8010da8:	1c43      	adds	r3, r0, #1
 8010daa:	4604      	mov	r4, r0
 8010dac:	d14d      	bne.n	8010e4a <_malloc_r+0xde>
 8010dae:	6834      	ldr	r4, [r6, #0]
 8010db0:	4626      	mov	r6, r4
 8010db2:	2e00      	cmp	r6, #0
 8010db4:	d140      	bne.n	8010e38 <_malloc_r+0xcc>
 8010db6:	6823      	ldr	r3, [r4, #0]
 8010db8:	4631      	mov	r1, r6
 8010dba:	4638      	mov	r0, r7
 8010dbc:	eb04 0803 	add.w	r8, r4, r3
 8010dc0:	f000 f8d6 	bl	8010f70 <_sbrk_r>
 8010dc4:	4580      	cmp	r8, r0
 8010dc6:	d13a      	bne.n	8010e3e <_malloc_r+0xd2>
 8010dc8:	6821      	ldr	r1, [r4, #0]
 8010dca:	3503      	adds	r5, #3
 8010dcc:	1a6d      	subs	r5, r5, r1
 8010dce:	f025 0503 	bic.w	r5, r5, #3
 8010dd2:	3508      	adds	r5, #8
 8010dd4:	2d0c      	cmp	r5, #12
 8010dd6:	bf38      	it	cc
 8010dd8:	250c      	movcc	r5, #12
 8010dda:	4629      	mov	r1, r5
 8010ddc:	4638      	mov	r0, r7
 8010dde:	f7ff ffa5 	bl	8010d2c <sbrk_aligned>
 8010de2:	3001      	adds	r0, #1
 8010de4:	d02b      	beq.n	8010e3e <_malloc_r+0xd2>
 8010de6:	6823      	ldr	r3, [r4, #0]
 8010de8:	442b      	add	r3, r5
 8010dea:	6023      	str	r3, [r4, #0]
 8010dec:	e00e      	b.n	8010e0c <_malloc_r+0xa0>
 8010dee:	6822      	ldr	r2, [r4, #0]
 8010df0:	1b52      	subs	r2, r2, r5
 8010df2:	d41e      	bmi.n	8010e32 <_malloc_r+0xc6>
 8010df4:	2a0b      	cmp	r2, #11
 8010df6:	d916      	bls.n	8010e26 <_malloc_r+0xba>
 8010df8:	1961      	adds	r1, r4, r5
 8010dfa:	42a3      	cmp	r3, r4
 8010dfc:	6025      	str	r5, [r4, #0]
 8010dfe:	bf18      	it	ne
 8010e00:	6059      	strne	r1, [r3, #4]
 8010e02:	6863      	ldr	r3, [r4, #4]
 8010e04:	bf08      	it	eq
 8010e06:	6031      	streq	r1, [r6, #0]
 8010e08:	5162      	str	r2, [r4, r5]
 8010e0a:	604b      	str	r3, [r1, #4]
 8010e0c:	4638      	mov	r0, r7
 8010e0e:	f104 060b 	add.w	r6, r4, #11
 8010e12:	f000 fbcb 	bl	80115ac <__malloc_unlock>
 8010e16:	f026 0607 	bic.w	r6, r6, #7
 8010e1a:	1d23      	adds	r3, r4, #4
 8010e1c:	1af2      	subs	r2, r6, r3
 8010e1e:	d0b6      	beq.n	8010d8e <_malloc_r+0x22>
 8010e20:	1b9b      	subs	r3, r3, r6
 8010e22:	50a3      	str	r3, [r4, r2]
 8010e24:	e7b3      	b.n	8010d8e <_malloc_r+0x22>
 8010e26:	6862      	ldr	r2, [r4, #4]
 8010e28:	42a3      	cmp	r3, r4
 8010e2a:	bf0c      	ite	eq
 8010e2c:	6032      	streq	r2, [r6, #0]
 8010e2e:	605a      	strne	r2, [r3, #4]
 8010e30:	e7ec      	b.n	8010e0c <_malloc_r+0xa0>
 8010e32:	4623      	mov	r3, r4
 8010e34:	6864      	ldr	r4, [r4, #4]
 8010e36:	e7b2      	b.n	8010d9e <_malloc_r+0x32>
 8010e38:	4634      	mov	r4, r6
 8010e3a:	6876      	ldr	r6, [r6, #4]
 8010e3c:	e7b9      	b.n	8010db2 <_malloc_r+0x46>
 8010e3e:	230c      	movs	r3, #12
 8010e40:	603b      	str	r3, [r7, #0]
 8010e42:	4638      	mov	r0, r7
 8010e44:	f000 fbb2 	bl	80115ac <__malloc_unlock>
 8010e48:	e7a1      	b.n	8010d8e <_malloc_r+0x22>
 8010e4a:	6025      	str	r5, [r4, #0]
 8010e4c:	e7de      	b.n	8010e0c <_malloc_r+0xa0>
 8010e4e:	bf00      	nop
 8010e50:	20005150 	.word	0x20005150

08010e54 <iprintf>:
 8010e54:	b40f      	push	{r0, r1, r2, r3}
 8010e56:	4b0a      	ldr	r3, [pc, #40]	; (8010e80 <iprintf+0x2c>)
 8010e58:	b513      	push	{r0, r1, r4, lr}
 8010e5a:	681c      	ldr	r4, [r3, #0]
 8010e5c:	b124      	cbz	r4, 8010e68 <iprintf+0x14>
 8010e5e:	69a3      	ldr	r3, [r4, #24]
 8010e60:	b913      	cbnz	r3, 8010e68 <iprintf+0x14>
 8010e62:	4620      	mov	r0, r4
 8010e64:	f000 fa96 	bl	8011394 <__sinit>
 8010e68:	ab05      	add	r3, sp, #20
 8010e6a:	9a04      	ldr	r2, [sp, #16]
 8010e6c:	68a1      	ldr	r1, [r4, #8]
 8010e6e:	9301      	str	r3, [sp, #4]
 8010e70:	4620      	mov	r0, r4
 8010e72:	f000 fd27 	bl	80118c4 <_vfiprintf_r>
 8010e76:	b002      	add	sp, #8
 8010e78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e7c:	b004      	add	sp, #16
 8010e7e:	4770      	bx	lr
 8010e80:	2000007c 	.word	0x2000007c

08010e84 <_puts_r>:
 8010e84:	b570      	push	{r4, r5, r6, lr}
 8010e86:	460e      	mov	r6, r1
 8010e88:	4605      	mov	r5, r0
 8010e8a:	b118      	cbz	r0, 8010e94 <_puts_r+0x10>
 8010e8c:	6983      	ldr	r3, [r0, #24]
 8010e8e:	b90b      	cbnz	r3, 8010e94 <_puts_r+0x10>
 8010e90:	f000 fa80 	bl	8011394 <__sinit>
 8010e94:	69ab      	ldr	r3, [r5, #24]
 8010e96:	68ac      	ldr	r4, [r5, #8]
 8010e98:	b913      	cbnz	r3, 8010ea0 <_puts_r+0x1c>
 8010e9a:	4628      	mov	r0, r5
 8010e9c:	f000 fa7a 	bl	8011394 <__sinit>
 8010ea0:	4b2c      	ldr	r3, [pc, #176]	; (8010f54 <_puts_r+0xd0>)
 8010ea2:	429c      	cmp	r4, r3
 8010ea4:	d120      	bne.n	8010ee8 <_puts_r+0x64>
 8010ea6:	686c      	ldr	r4, [r5, #4]
 8010ea8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010eaa:	07db      	lsls	r3, r3, #31
 8010eac:	d405      	bmi.n	8010eba <_puts_r+0x36>
 8010eae:	89a3      	ldrh	r3, [r4, #12]
 8010eb0:	0598      	lsls	r0, r3, #22
 8010eb2:	d402      	bmi.n	8010eba <_puts_r+0x36>
 8010eb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010eb6:	f000 fb0b 	bl	80114d0 <__retarget_lock_acquire_recursive>
 8010eba:	89a3      	ldrh	r3, [r4, #12]
 8010ebc:	0719      	lsls	r1, r3, #28
 8010ebe:	d51d      	bpl.n	8010efc <_puts_r+0x78>
 8010ec0:	6923      	ldr	r3, [r4, #16]
 8010ec2:	b1db      	cbz	r3, 8010efc <_puts_r+0x78>
 8010ec4:	3e01      	subs	r6, #1
 8010ec6:	68a3      	ldr	r3, [r4, #8]
 8010ec8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010ecc:	3b01      	subs	r3, #1
 8010ece:	60a3      	str	r3, [r4, #8]
 8010ed0:	bb39      	cbnz	r1, 8010f22 <_puts_r+0x9e>
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	da38      	bge.n	8010f48 <_puts_r+0xc4>
 8010ed6:	4622      	mov	r2, r4
 8010ed8:	210a      	movs	r1, #10
 8010eda:	4628      	mov	r0, r5
 8010edc:	f000 f880 	bl	8010fe0 <__swbuf_r>
 8010ee0:	3001      	adds	r0, #1
 8010ee2:	d011      	beq.n	8010f08 <_puts_r+0x84>
 8010ee4:	250a      	movs	r5, #10
 8010ee6:	e011      	b.n	8010f0c <_puts_r+0x88>
 8010ee8:	4b1b      	ldr	r3, [pc, #108]	; (8010f58 <_puts_r+0xd4>)
 8010eea:	429c      	cmp	r4, r3
 8010eec:	d101      	bne.n	8010ef2 <_puts_r+0x6e>
 8010eee:	68ac      	ldr	r4, [r5, #8]
 8010ef0:	e7da      	b.n	8010ea8 <_puts_r+0x24>
 8010ef2:	4b1a      	ldr	r3, [pc, #104]	; (8010f5c <_puts_r+0xd8>)
 8010ef4:	429c      	cmp	r4, r3
 8010ef6:	bf08      	it	eq
 8010ef8:	68ec      	ldreq	r4, [r5, #12]
 8010efa:	e7d5      	b.n	8010ea8 <_puts_r+0x24>
 8010efc:	4621      	mov	r1, r4
 8010efe:	4628      	mov	r0, r5
 8010f00:	f000 f8c0 	bl	8011084 <__swsetup_r>
 8010f04:	2800      	cmp	r0, #0
 8010f06:	d0dd      	beq.n	8010ec4 <_puts_r+0x40>
 8010f08:	f04f 35ff 	mov.w	r5, #4294967295
 8010f0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010f0e:	07da      	lsls	r2, r3, #31
 8010f10:	d405      	bmi.n	8010f1e <_puts_r+0x9a>
 8010f12:	89a3      	ldrh	r3, [r4, #12]
 8010f14:	059b      	lsls	r3, r3, #22
 8010f16:	d402      	bmi.n	8010f1e <_puts_r+0x9a>
 8010f18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010f1a:	f000 fada 	bl	80114d2 <__retarget_lock_release_recursive>
 8010f1e:	4628      	mov	r0, r5
 8010f20:	bd70      	pop	{r4, r5, r6, pc}
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	da04      	bge.n	8010f30 <_puts_r+0xac>
 8010f26:	69a2      	ldr	r2, [r4, #24]
 8010f28:	429a      	cmp	r2, r3
 8010f2a:	dc06      	bgt.n	8010f3a <_puts_r+0xb6>
 8010f2c:	290a      	cmp	r1, #10
 8010f2e:	d004      	beq.n	8010f3a <_puts_r+0xb6>
 8010f30:	6823      	ldr	r3, [r4, #0]
 8010f32:	1c5a      	adds	r2, r3, #1
 8010f34:	6022      	str	r2, [r4, #0]
 8010f36:	7019      	strb	r1, [r3, #0]
 8010f38:	e7c5      	b.n	8010ec6 <_puts_r+0x42>
 8010f3a:	4622      	mov	r2, r4
 8010f3c:	4628      	mov	r0, r5
 8010f3e:	f000 f84f 	bl	8010fe0 <__swbuf_r>
 8010f42:	3001      	adds	r0, #1
 8010f44:	d1bf      	bne.n	8010ec6 <_puts_r+0x42>
 8010f46:	e7df      	b.n	8010f08 <_puts_r+0x84>
 8010f48:	6823      	ldr	r3, [r4, #0]
 8010f4a:	250a      	movs	r5, #10
 8010f4c:	1c5a      	adds	r2, r3, #1
 8010f4e:	6022      	str	r2, [r4, #0]
 8010f50:	701d      	strb	r5, [r3, #0]
 8010f52:	e7db      	b.n	8010f0c <_puts_r+0x88>
 8010f54:	080125f4 	.word	0x080125f4
 8010f58:	08012614 	.word	0x08012614
 8010f5c:	080125d4 	.word	0x080125d4

08010f60 <puts>:
 8010f60:	4b02      	ldr	r3, [pc, #8]	; (8010f6c <puts+0xc>)
 8010f62:	4601      	mov	r1, r0
 8010f64:	6818      	ldr	r0, [r3, #0]
 8010f66:	f7ff bf8d 	b.w	8010e84 <_puts_r>
 8010f6a:	bf00      	nop
 8010f6c:	2000007c 	.word	0x2000007c

08010f70 <_sbrk_r>:
 8010f70:	b538      	push	{r3, r4, r5, lr}
 8010f72:	4d06      	ldr	r5, [pc, #24]	; (8010f8c <_sbrk_r+0x1c>)
 8010f74:	2300      	movs	r3, #0
 8010f76:	4604      	mov	r4, r0
 8010f78:	4608      	mov	r0, r1
 8010f7a:	602b      	str	r3, [r5, #0]
 8010f7c:	f7f0 feae 	bl	8001cdc <_sbrk>
 8010f80:	1c43      	adds	r3, r0, #1
 8010f82:	d102      	bne.n	8010f8a <_sbrk_r+0x1a>
 8010f84:	682b      	ldr	r3, [r5, #0]
 8010f86:	b103      	cbz	r3, 8010f8a <_sbrk_r+0x1a>
 8010f88:	6023      	str	r3, [r4, #0]
 8010f8a:	bd38      	pop	{r3, r4, r5, pc}
 8010f8c:	2000515c 	.word	0x2000515c

08010f90 <siprintf>:
 8010f90:	b40e      	push	{r1, r2, r3}
 8010f92:	b500      	push	{lr}
 8010f94:	b09c      	sub	sp, #112	; 0x70
 8010f96:	ab1d      	add	r3, sp, #116	; 0x74
 8010f98:	9002      	str	r0, [sp, #8]
 8010f9a:	9006      	str	r0, [sp, #24]
 8010f9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010fa0:	4809      	ldr	r0, [pc, #36]	; (8010fc8 <siprintf+0x38>)
 8010fa2:	9107      	str	r1, [sp, #28]
 8010fa4:	9104      	str	r1, [sp, #16]
 8010fa6:	4909      	ldr	r1, [pc, #36]	; (8010fcc <siprintf+0x3c>)
 8010fa8:	f853 2b04 	ldr.w	r2, [r3], #4
 8010fac:	9105      	str	r1, [sp, #20]
 8010fae:	6800      	ldr	r0, [r0, #0]
 8010fb0:	9301      	str	r3, [sp, #4]
 8010fb2:	a902      	add	r1, sp, #8
 8010fb4:	f000 fb5c 	bl	8011670 <_svfiprintf_r>
 8010fb8:	9b02      	ldr	r3, [sp, #8]
 8010fba:	2200      	movs	r2, #0
 8010fbc:	701a      	strb	r2, [r3, #0]
 8010fbe:	b01c      	add	sp, #112	; 0x70
 8010fc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8010fc4:	b003      	add	sp, #12
 8010fc6:	4770      	bx	lr
 8010fc8:	2000007c 	.word	0x2000007c
 8010fcc:	ffff0208 	.word	0xffff0208

08010fd0 <strcpy>:
 8010fd0:	4603      	mov	r3, r0
 8010fd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010fd6:	f803 2b01 	strb.w	r2, [r3], #1
 8010fda:	2a00      	cmp	r2, #0
 8010fdc:	d1f9      	bne.n	8010fd2 <strcpy+0x2>
 8010fde:	4770      	bx	lr

08010fe0 <__swbuf_r>:
 8010fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010fe2:	460e      	mov	r6, r1
 8010fe4:	4614      	mov	r4, r2
 8010fe6:	4605      	mov	r5, r0
 8010fe8:	b118      	cbz	r0, 8010ff2 <__swbuf_r+0x12>
 8010fea:	6983      	ldr	r3, [r0, #24]
 8010fec:	b90b      	cbnz	r3, 8010ff2 <__swbuf_r+0x12>
 8010fee:	f000 f9d1 	bl	8011394 <__sinit>
 8010ff2:	4b21      	ldr	r3, [pc, #132]	; (8011078 <__swbuf_r+0x98>)
 8010ff4:	429c      	cmp	r4, r3
 8010ff6:	d12b      	bne.n	8011050 <__swbuf_r+0x70>
 8010ff8:	686c      	ldr	r4, [r5, #4]
 8010ffa:	69a3      	ldr	r3, [r4, #24]
 8010ffc:	60a3      	str	r3, [r4, #8]
 8010ffe:	89a3      	ldrh	r3, [r4, #12]
 8011000:	071a      	lsls	r2, r3, #28
 8011002:	d52f      	bpl.n	8011064 <__swbuf_r+0x84>
 8011004:	6923      	ldr	r3, [r4, #16]
 8011006:	b36b      	cbz	r3, 8011064 <__swbuf_r+0x84>
 8011008:	6923      	ldr	r3, [r4, #16]
 801100a:	6820      	ldr	r0, [r4, #0]
 801100c:	1ac0      	subs	r0, r0, r3
 801100e:	6963      	ldr	r3, [r4, #20]
 8011010:	b2f6      	uxtb	r6, r6
 8011012:	4283      	cmp	r3, r0
 8011014:	4637      	mov	r7, r6
 8011016:	dc04      	bgt.n	8011022 <__swbuf_r+0x42>
 8011018:	4621      	mov	r1, r4
 801101a:	4628      	mov	r0, r5
 801101c:	f000 f926 	bl	801126c <_fflush_r>
 8011020:	bb30      	cbnz	r0, 8011070 <__swbuf_r+0x90>
 8011022:	68a3      	ldr	r3, [r4, #8]
 8011024:	3b01      	subs	r3, #1
 8011026:	60a3      	str	r3, [r4, #8]
 8011028:	6823      	ldr	r3, [r4, #0]
 801102a:	1c5a      	adds	r2, r3, #1
 801102c:	6022      	str	r2, [r4, #0]
 801102e:	701e      	strb	r6, [r3, #0]
 8011030:	6963      	ldr	r3, [r4, #20]
 8011032:	3001      	adds	r0, #1
 8011034:	4283      	cmp	r3, r0
 8011036:	d004      	beq.n	8011042 <__swbuf_r+0x62>
 8011038:	89a3      	ldrh	r3, [r4, #12]
 801103a:	07db      	lsls	r3, r3, #31
 801103c:	d506      	bpl.n	801104c <__swbuf_r+0x6c>
 801103e:	2e0a      	cmp	r6, #10
 8011040:	d104      	bne.n	801104c <__swbuf_r+0x6c>
 8011042:	4621      	mov	r1, r4
 8011044:	4628      	mov	r0, r5
 8011046:	f000 f911 	bl	801126c <_fflush_r>
 801104a:	b988      	cbnz	r0, 8011070 <__swbuf_r+0x90>
 801104c:	4638      	mov	r0, r7
 801104e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011050:	4b0a      	ldr	r3, [pc, #40]	; (801107c <__swbuf_r+0x9c>)
 8011052:	429c      	cmp	r4, r3
 8011054:	d101      	bne.n	801105a <__swbuf_r+0x7a>
 8011056:	68ac      	ldr	r4, [r5, #8]
 8011058:	e7cf      	b.n	8010ffa <__swbuf_r+0x1a>
 801105a:	4b09      	ldr	r3, [pc, #36]	; (8011080 <__swbuf_r+0xa0>)
 801105c:	429c      	cmp	r4, r3
 801105e:	bf08      	it	eq
 8011060:	68ec      	ldreq	r4, [r5, #12]
 8011062:	e7ca      	b.n	8010ffa <__swbuf_r+0x1a>
 8011064:	4621      	mov	r1, r4
 8011066:	4628      	mov	r0, r5
 8011068:	f000 f80c 	bl	8011084 <__swsetup_r>
 801106c:	2800      	cmp	r0, #0
 801106e:	d0cb      	beq.n	8011008 <__swbuf_r+0x28>
 8011070:	f04f 37ff 	mov.w	r7, #4294967295
 8011074:	e7ea      	b.n	801104c <__swbuf_r+0x6c>
 8011076:	bf00      	nop
 8011078:	080125f4 	.word	0x080125f4
 801107c:	08012614 	.word	0x08012614
 8011080:	080125d4 	.word	0x080125d4

08011084 <__swsetup_r>:
 8011084:	4b32      	ldr	r3, [pc, #200]	; (8011150 <__swsetup_r+0xcc>)
 8011086:	b570      	push	{r4, r5, r6, lr}
 8011088:	681d      	ldr	r5, [r3, #0]
 801108a:	4606      	mov	r6, r0
 801108c:	460c      	mov	r4, r1
 801108e:	b125      	cbz	r5, 801109a <__swsetup_r+0x16>
 8011090:	69ab      	ldr	r3, [r5, #24]
 8011092:	b913      	cbnz	r3, 801109a <__swsetup_r+0x16>
 8011094:	4628      	mov	r0, r5
 8011096:	f000 f97d 	bl	8011394 <__sinit>
 801109a:	4b2e      	ldr	r3, [pc, #184]	; (8011154 <__swsetup_r+0xd0>)
 801109c:	429c      	cmp	r4, r3
 801109e:	d10f      	bne.n	80110c0 <__swsetup_r+0x3c>
 80110a0:	686c      	ldr	r4, [r5, #4]
 80110a2:	89a3      	ldrh	r3, [r4, #12]
 80110a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80110a8:	0719      	lsls	r1, r3, #28
 80110aa:	d42c      	bmi.n	8011106 <__swsetup_r+0x82>
 80110ac:	06dd      	lsls	r5, r3, #27
 80110ae:	d411      	bmi.n	80110d4 <__swsetup_r+0x50>
 80110b0:	2309      	movs	r3, #9
 80110b2:	6033      	str	r3, [r6, #0]
 80110b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80110b8:	81a3      	strh	r3, [r4, #12]
 80110ba:	f04f 30ff 	mov.w	r0, #4294967295
 80110be:	e03e      	b.n	801113e <__swsetup_r+0xba>
 80110c0:	4b25      	ldr	r3, [pc, #148]	; (8011158 <__swsetup_r+0xd4>)
 80110c2:	429c      	cmp	r4, r3
 80110c4:	d101      	bne.n	80110ca <__swsetup_r+0x46>
 80110c6:	68ac      	ldr	r4, [r5, #8]
 80110c8:	e7eb      	b.n	80110a2 <__swsetup_r+0x1e>
 80110ca:	4b24      	ldr	r3, [pc, #144]	; (801115c <__swsetup_r+0xd8>)
 80110cc:	429c      	cmp	r4, r3
 80110ce:	bf08      	it	eq
 80110d0:	68ec      	ldreq	r4, [r5, #12]
 80110d2:	e7e6      	b.n	80110a2 <__swsetup_r+0x1e>
 80110d4:	0758      	lsls	r0, r3, #29
 80110d6:	d512      	bpl.n	80110fe <__swsetup_r+0x7a>
 80110d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80110da:	b141      	cbz	r1, 80110ee <__swsetup_r+0x6a>
 80110dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80110e0:	4299      	cmp	r1, r3
 80110e2:	d002      	beq.n	80110ea <__swsetup_r+0x66>
 80110e4:	4630      	mov	r0, r6
 80110e6:	f7ff fdd5 	bl	8010c94 <_free_r>
 80110ea:	2300      	movs	r3, #0
 80110ec:	6363      	str	r3, [r4, #52]	; 0x34
 80110ee:	89a3      	ldrh	r3, [r4, #12]
 80110f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80110f4:	81a3      	strh	r3, [r4, #12]
 80110f6:	2300      	movs	r3, #0
 80110f8:	6063      	str	r3, [r4, #4]
 80110fa:	6923      	ldr	r3, [r4, #16]
 80110fc:	6023      	str	r3, [r4, #0]
 80110fe:	89a3      	ldrh	r3, [r4, #12]
 8011100:	f043 0308 	orr.w	r3, r3, #8
 8011104:	81a3      	strh	r3, [r4, #12]
 8011106:	6923      	ldr	r3, [r4, #16]
 8011108:	b94b      	cbnz	r3, 801111e <__swsetup_r+0x9a>
 801110a:	89a3      	ldrh	r3, [r4, #12]
 801110c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011110:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011114:	d003      	beq.n	801111e <__swsetup_r+0x9a>
 8011116:	4621      	mov	r1, r4
 8011118:	4630      	mov	r0, r6
 801111a:	f000 fa01 	bl	8011520 <__smakebuf_r>
 801111e:	89a0      	ldrh	r0, [r4, #12]
 8011120:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011124:	f010 0301 	ands.w	r3, r0, #1
 8011128:	d00a      	beq.n	8011140 <__swsetup_r+0xbc>
 801112a:	2300      	movs	r3, #0
 801112c:	60a3      	str	r3, [r4, #8]
 801112e:	6963      	ldr	r3, [r4, #20]
 8011130:	425b      	negs	r3, r3
 8011132:	61a3      	str	r3, [r4, #24]
 8011134:	6923      	ldr	r3, [r4, #16]
 8011136:	b943      	cbnz	r3, 801114a <__swsetup_r+0xc6>
 8011138:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801113c:	d1ba      	bne.n	80110b4 <__swsetup_r+0x30>
 801113e:	bd70      	pop	{r4, r5, r6, pc}
 8011140:	0781      	lsls	r1, r0, #30
 8011142:	bf58      	it	pl
 8011144:	6963      	ldrpl	r3, [r4, #20]
 8011146:	60a3      	str	r3, [r4, #8]
 8011148:	e7f4      	b.n	8011134 <__swsetup_r+0xb0>
 801114a:	2000      	movs	r0, #0
 801114c:	e7f7      	b.n	801113e <__swsetup_r+0xba>
 801114e:	bf00      	nop
 8011150:	2000007c 	.word	0x2000007c
 8011154:	080125f4 	.word	0x080125f4
 8011158:	08012614 	.word	0x08012614
 801115c:	080125d4 	.word	0x080125d4

08011160 <__sflush_r>:
 8011160:	898a      	ldrh	r2, [r1, #12]
 8011162:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011166:	4605      	mov	r5, r0
 8011168:	0710      	lsls	r0, r2, #28
 801116a:	460c      	mov	r4, r1
 801116c:	d458      	bmi.n	8011220 <__sflush_r+0xc0>
 801116e:	684b      	ldr	r3, [r1, #4]
 8011170:	2b00      	cmp	r3, #0
 8011172:	dc05      	bgt.n	8011180 <__sflush_r+0x20>
 8011174:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011176:	2b00      	cmp	r3, #0
 8011178:	dc02      	bgt.n	8011180 <__sflush_r+0x20>
 801117a:	2000      	movs	r0, #0
 801117c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011180:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011182:	2e00      	cmp	r6, #0
 8011184:	d0f9      	beq.n	801117a <__sflush_r+0x1a>
 8011186:	2300      	movs	r3, #0
 8011188:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801118c:	682f      	ldr	r7, [r5, #0]
 801118e:	602b      	str	r3, [r5, #0]
 8011190:	d032      	beq.n	80111f8 <__sflush_r+0x98>
 8011192:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011194:	89a3      	ldrh	r3, [r4, #12]
 8011196:	075a      	lsls	r2, r3, #29
 8011198:	d505      	bpl.n	80111a6 <__sflush_r+0x46>
 801119a:	6863      	ldr	r3, [r4, #4]
 801119c:	1ac0      	subs	r0, r0, r3
 801119e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80111a0:	b10b      	cbz	r3, 80111a6 <__sflush_r+0x46>
 80111a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80111a4:	1ac0      	subs	r0, r0, r3
 80111a6:	2300      	movs	r3, #0
 80111a8:	4602      	mov	r2, r0
 80111aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80111ac:	6a21      	ldr	r1, [r4, #32]
 80111ae:	4628      	mov	r0, r5
 80111b0:	47b0      	blx	r6
 80111b2:	1c43      	adds	r3, r0, #1
 80111b4:	89a3      	ldrh	r3, [r4, #12]
 80111b6:	d106      	bne.n	80111c6 <__sflush_r+0x66>
 80111b8:	6829      	ldr	r1, [r5, #0]
 80111ba:	291d      	cmp	r1, #29
 80111bc:	d82c      	bhi.n	8011218 <__sflush_r+0xb8>
 80111be:	4a2a      	ldr	r2, [pc, #168]	; (8011268 <__sflush_r+0x108>)
 80111c0:	40ca      	lsrs	r2, r1
 80111c2:	07d6      	lsls	r6, r2, #31
 80111c4:	d528      	bpl.n	8011218 <__sflush_r+0xb8>
 80111c6:	2200      	movs	r2, #0
 80111c8:	6062      	str	r2, [r4, #4]
 80111ca:	04d9      	lsls	r1, r3, #19
 80111cc:	6922      	ldr	r2, [r4, #16]
 80111ce:	6022      	str	r2, [r4, #0]
 80111d0:	d504      	bpl.n	80111dc <__sflush_r+0x7c>
 80111d2:	1c42      	adds	r2, r0, #1
 80111d4:	d101      	bne.n	80111da <__sflush_r+0x7a>
 80111d6:	682b      	ldr	r3, [r5, #0]
 80111d8:	b903      	cbnz	r3, 80111dc <__sflush_r+0x7c>
 80111da:	6560      	str	r0, [r4, #84]	; 0x54
 80111dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80111de:	602f      	str	r7, [r5, #0]
 80111e0:	2900      	cmp	r1, #0
 80111e2:	d0ca      	beq.n	801117a <__sflush_r+0x1a>
 80111e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80111e8:	4299      	cmp	r1, r3
 80111ea:	d002      	beq.n	80111f2 <__sflush_r+0x92>
 80111ec:	4628      	mov	r0, r5
 80111ee:	f7ff fd51 	bl	8010c94 <_free_r>
 80111f2:	2000      	movs	r0, #0
 80111f4:	6360      	str	r0, [r4, #52]	; 0x34
 80111f6:	e7c1      	b.n	801117c <__sflush_r+0x1c>
 80111f8:	6a21      	ldr	r1, [r4, #32]
 80111fa:	2301      	movs	r3, #1
 80111fc:	4628      	mov	r0, r5
 80111fe:	47b0      	blx	r6
 8011200:	1c41      	adds	r1, r0, #1
 8011202:	d1c7      	bne.n	8011194 <__sflush_r+0x34>
 8011204:	682b      	ldr	r3, [r5, #0]
 8011206:	2b00      	cmp	r3, #0
 8011208:	d0c4      	beq.n	8011194 <__sflush_r+0x34>
 801120a:	2b1d      	cmp	r3, #29
 801120c:	d001      	beq.n	8011212 <__sflush_r+0xb2>
 801120e:	2b16      	cmp	r3, #22
 8011210:	d101      	bne.n	8011216 <__sflush_r+0xb6>
 8011212:	602f      	str	r7, [r5, #0]
 8011214:	e7b1      	b.n	801117a <__sflush_r+0x1a>
 8011216:	89a3      	ldrh	r3, [r4, #12]
 8011218:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801121c:	81a3      	strh	r3, [r4, #12]
 801121e:	e7ad      	b.n	801117c <__sflush_r+0x1c>
 8011220:	690f      	ldr	r7, [r1, #16]
 8011222:	2f00      	cmp	r7, #0
 8011224:	d0a9      	beq.n	801117a <__sflush_r+0x1a>
 8011226:	0793      	lsls	r3, r2, #30
 8011228:	680e      	ldr	r6, [r1, #0]
 801122a:	bf08      	it	eq
 801122c:	694b      	ldreq	r3, [r1, #20]
 801122e:	600f      	str	r7, [r1, #0]
 8011230:	bf18      	it	ne
 8011232:	2300      	movne	r3, #0
 8011234:	eba6 0807 	sub.w	r8, r6, r7
 8011238:	608b      	str	r3, [r1, #8]
 801123a:	f1b8 0f00 	cmp.w	r8, #0
 801123e:	dd9c      	ble.n	801117a <__sflush_r+0x1a>
 8011240:	6a21      	ldr	r1, [r4, #32]
 8011242:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011244:	4643      	mov	r3, r8
 8011246:	463a      	mov	r2, r7
 8011248:	4628      	mov	r0, r5
 801124a:	47b0      	blx	r6
 801124c:	2800      	cmp	r0, #0
 801124e:	dc06      	bgt.n	801125e <__sflush_r+0xfe>
 8011250:	89a3      	ldrh	r3, [r4, #12]
 8011252:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011256:	81a3      	strh	r3, [r4, #12]
 8011258:	f04f 30ff 	mov.w	r0, #4294967295
 801125c:	e78e      	b.n	801117c <__sflush_r+0x1c>
 801125e:	4407      	add	r7, r0
 8011260:	eba8 0800 	sub.w	r8, r8, r0
 8011264:	e7e9      	b.n	801123a <__sflush_r+0xda>
 8011266:	bf00      	nop
 8011268:	20400001 	.word	0x20400001

0801126c <_fflush_r>:
 801126c:	b538      	push	{r3, r4, r5, lr}
 801126e:	690b      	ldr	r3, [r1, #16]
 8011270:	4605      	mov	r5, r0
 8011272:	460c      	mov	r4, r1
 8011274:	b913      	cbnz	r3, 801127c <_fflush_r+0x10>
 8011276:	2500      	movs	r5, #0
 8011278:	4628      	mov	r0, r5
 801127a:	bd38      	pop	{r3, r4, r5, pc}
 801127c:	b118      	cbz	r0, 8011286 <_fflush_r+0x1a>
 801127e:	6983      	ldr	r3, [r0, #24]
 8011280:	b90b      	cbnz	r3, 8011286 <_fflush_r+0x1a>
 8011282:	f000 f887 	bl	8011394 <__sinit>
 8011286:	4b14      	ldr	r3, [pc, #80]	; (80112d8 <_fflush_r+0x6c>)
 8011288:	429c      	cmp	r4, r3
 801128a:	d11b      	bne.n	80112c4 <_fflush_r+0x58>
 801128c:	686c      	ldr	r4, [r5, #4]
 801128e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011292:	2b00      	cmp	r3, #0
 8011294:	d0ef      	beq.n	8011276 <_fflush_r+0xa>
 8011296:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011298:	07d0      	lsls	r0, r2, #31
 801129a:	d404      	bmi.n	80112a6 <_fflush_r+0x3a>
 801129c:	0599      	lsls	r1, r3, #22
 801129e:	d402      	bmi.n	80112a6 <_fflush_r+0x3a>
 80112a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80112a2:	f000 f915 	bl	80114d0 <__retarget_lock_acquire_recursive>
 80112a6:	4628      	mov	r0, r5
 80112a8:	4621      	mov	r1, r4
 80112aa:	f7ff ff59 	bl	8011160 <__sflush_r>
 80112ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80112b0:	07da      	lsls	r2, r3, #31
 80112b2:	4605      	mov	r5, r0
 80112b4:	d4e0      	bmi.n	8011278 <_fflush_r+0xc>
 80112b6:	89a3      	ldrh	r3, [r4, #12]
 80112b8:	059b      	lsls	r3, r3, #22
 80112ba:	d4dd      	bmi.n	8011278 <_fflush_r+0xc>
 80112bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80112be:	f000 f908 	bl	80114d2 <__retarget_lock_release_recursive>
 80112c2:	e7d9      	b.n	8011278 <_fflush_r+0xc>
 80112c4:	4b05      	ldr	r3, [pc, #20]	; (80112dc <_fflush_r+0x70>)
 80112c6:	429c      	cmp	r4, r3
 80112c8:	d101      	bne.n	80112ce <_fflush_r+0x62>
 80112ca:	68ac      	ldr	r4, [r5, #8]
 80112cc:	e7df      	b.n	801128e <_fflush_r+0x22>
 80112ce:	4b04      	ldr	r3, [pc, #16]	; (80112e0 <_fflush_r+0x74>)
 80112d0:	429c      	cmp	r4, r3
 80112d2:	bf08      	it	eq
 80112d4:	68ec      	ldreq	r4, [r5, #12]
 80112d6:	e7da      	b.n	801128e <_fflush_r+0x22>
 80112d8:	080125f4 	.word	0x080125f4
 80112dc:	08012614 	.word	0x08012614
 80112e0:	080125d4 	.word	0x080125d4

080112e4 <std>:
 80112e4:	2300      	movs	r3, #0
 80112e6:	b510      	push	{r4, lr}
 80112e8:	4604      	mov	r4, r0
 80112ea:	e9c0 3300 	strd	r3, r3, [r0]
 80112ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80112f2:	6083      	str	r3, [r0, #8]
 80112f4:	8181      	strh	r1, [r0, #12]
 80112f6:	6643      	str	r3, [r0, #100]	; 0x64
 80112f8:	81c2      	strh	r2, [r0, #14]
 80112fa:	6183      	str	r3, [r0, #24]
 80112fc:	4619      	mov	r1, r3
 80112fe:	2208      	movs	r2, #8
 8011300:	305c      	adds	r0, #92	; 0x5c
 8011302:	f7ff fcbf 	bl	8010c84 <memset>
 8011306:	4b05      	ldr	r3, [pc, #20]	; (801131c <std+0x38>)
 8011308:	6263      	str	r3, [r4, #36]	; 0x24
 801130a:	4b05      	ldr	r3, [pc, #20]	; (8011320 <std+0x3c>)
 801130c:	62a3      	str	r3, [r4, #40]	; 0x28
 801130e:	4b05      	ldr	r3, [pc, #20]	; (8011324 <std+0x40>)
 8011310:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011312:	4b05      	ldr	r3, [pc, #20]	; (8011328 <std+0x44>)
 8011314:	6224      	str	r4, [r4, #32]
 8011316:	6323      	str	r3, [r4, #48]	; 0x30
 8011318:	bd10      	pop	{r4, pc}
 801131a:	bf00      	nop
 801131c:	08011e4d 	.word	0x08011e4d
 8011320:	08011e6f 	.word	0x08011e6f
 8011324:	08011ea7 	.word	0x08011ea7
 8011328:	08011ecb 	.word	0x08011ecb

0801132c <_cleanup_r>:
 801132c:	4901      	ldr	r1, [pc, #4]	; (8011334 <_cleanup_r+0x8>)
 801132e:	f000 b8af 	b.w	8011490 <_fwalk_reent>
 8011332:	bf00      	nop
 8011334:	0801126d 	.word	0x0801126d

08011338 <__sfmoreglue>:
 8011338:	b570      	push	{r4, r5, r6, lr}
 801133a:	2268      	movs	r2, #104	; 0x68
 801133c:	1e4d      	subs	r5, r1, #1
 801133e:	4355      	muls	r5, r2
 8011340:	460e      	mov	r6, r1
 8011342:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011346:	f7ff fd11 	bl	8010d6c <_malloc_r>
 801134a:	4604      	mov	r4, r0
 801134c:	b140      	cbz	r0, 8011360 <__sfmoreglue+0x28>
 801134e:	2100      	movs	r1, #0
 8011350:	e9c0 1600 	strd	r1, r6, [r0]
 8011354:	300c      	adds	r0, #12
 8011356:	60a0      	str	r0, [r4, #8]
 8011358:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801135c:	f7ff fc92 	bl	8010c84 <memset>
 8011360:	4620      	mov	r0, r4
 8011362:	bd70      	pop	{r4, r5, r6, pc}

08011364 <__sfp_lock_acquire>:
 8011364:	4801      	ldr	r0, [pc, #4]	; (801136c <__sfp_lock_acquire+0x8>)
 8011366:	f000 b8b3 	b.w	80114d0 <__retarget_lock_acquire_recursive>
 801136a:	bf00      	nop
 801136c:	20005159 	.word	0x20005159

08011370 <__sfp_lock_release>:
 8011370:	4801      	ldr	r0, [pc, #4]	; (8011378 <__sfp_lock_release+0x8>)
 8011372:	f000 b8ae 	b.w	80114d2 <__retarget_lock_release_recursive>
 8011376:	bf00      	nop
 8011378:	20005159 	.word	0x20005159

0801137c <__sinit_lock_acquire>:
 801137c:	4801      	ldr	r0, [pc, #4]	; (8011384 <__sinit_lock_acquire+0x8>)
 801137e:	f000 b8a7 	b.w	80114d0 <__retarget_lock_acquire_recursive>
 8011382:	bf00      	nop
 8011384:	2000515a 	.word	0x2000515a

08011388 <__sinit_lock_release>:
 8011388:	4801      	ldr	r0, [pc, #4]	; (8011390 <__sinit_lock_release+0x8>)
 801138a:	f000 b8a2 	b.w	80114d2 <__retarget_lock_release_recursive>
 801138e:	bf00      	nop
 8011390:	2000515a 	.word	0x2000515a

08011394 <__sinit>:
 8011394:	b510      	push	{r4, lr}
 8011396:	4604      	mov	r4, r0
 8011398:	f7ff fff0 	bl	801137c <__sinit_lock_acquire>
 801139c:	69a3      	ldr	r3, [r4, #24]
 801139e:	b11b      	cbz	r3, 80113a8 <__sinit+0x14>
 80113a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80113a4:	f7ff bff0 	b.w	8011388 <__sinit_lock_release>
 80113a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80113ac:	6523      	str	r3, [r4, #80]	; 0x50
 80113ae:	4b13      	ldr	r3, [pc, #76]	; (80113fc <__sinit+0x68>)
 80113b0:	4a13      	ldr	r2, [pc, #76]	; (8011400 <__sinit+0x6c>)
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80113b6:	42a3      	cmp	r3, r4
 80113b8:	bf04      	itt	eq
 80113ba:	2301      	moveq	r3, #1
 80113bc:	61a3      	streq	r3, [r4, #24]
 80113be:	4620      	mov	r0, r4
 80113c0:	f000 f820 	bl	8011404 <__sfp>
 80113c4:	6060      	str	r0, [r4, #4]
 80113c6:	4620      	mov	r0, r4
 80113c8:	f000 f81c 	bl	8011404 <__sfp>
 80113cc:	60a0      	str	r0, [r4, #8]
 80113ce:	4620      	mov	r0, r4
 80113d0:	f000 f818 	bl	8011404 <__sfp>
 80113d4:	2200      	movs	r2, #0
 80113d6:	60e0      	str	r0, [r4, #12]
 80113d8:	2104      	movs	r1, #4
 80113da:	6860      	ldr	r0, [r4, #4]
 80113dc:	f7ff ff82 	bl	80112e4 <std>
 80113e0:	68a0      	ldr	r0, [r4, #8]
 80113e2:	2201      	movs	r2, #1
 80113e4:	2109      	movs	r1, #9
 80113e6:	f7ff ff7d 	bl	80112e4 <std>
 80113ea:	68e0      	ldr	r0, [r4, #12]
 80113ec:	2202      	movs	r2, #2
 80113ee:	2112      	movs	r1, #18
 80113f0:	f7ff ff78 	bl	80112e4 <std>
 80113f4:	2301      	movs	r3, #1
 80113f6:	61a3      	str	r3, [r4, #24]
 80113f8:	e7d2      	b.n	80113a0 <__sinit+0xc>
 80113fa:	bf00      	nop
 80113fc:	080125d0 	.word	0x080125d0
 8011400:	0801132d 	.word	0x0801132d

08011404 <__sfp>:
 8011404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011406:	4607      	mov	r7, r0
 8011408:	f7ff ffac 	bl	8011364 <__sfp_lock_acquire>
 801140c:	4b1e      	ldr	r3, [pc, #120]	; (8011488 <__sfp+0x84>)
 801140e:	681e      	ldr	r6, [r3, #0]
 8011410:	69b3      	ldr	r3, [r6, #24]
 8011412:	b913      	cbnz	r3, 801141a <__sfp+0x16>
 8011414:	4630      	mov	r0, r6
 8011416:	f7ff ffbd 	bl	8011394 <__sinit>
 801141a:	3648      	adds	r6, #72	; 0x48
 801141c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011420:	3b01      	subs	r3, #1
 8011422:	d503      	bpl.n	801142c <__sfp+0x28>
 8011424:	6833      	ldr	r3, [r6, #0]
 8011426:	b30b      	cbz	r3, 801146c <__sfp+0x68>
 8011428:	6836      	ldr	r6, [r6, #0]
 801142a:	e7f7      	b.n	801141c <__sfp+0x18>
 801142c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011430:	b9d5      	cbnz	r5, 8011468 <__sfp+0x64>
 8011432:	4b16      	ldr	r3, [pc, #88]	; (801148c <__sfp+0x88>)
 8011434:	60e3      	str	r3, [r4, #12]
 8011436:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801143a:	6665      	str	r5, [r4, #100]	; 0x64
 801143c:	f000 f847 	bl	80114ce <__retarget_lock_init_recursive>
 8011440:	f7ff ff96 	bl	8011370 <__sfp_lock_release>
 8011444:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011448:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801144c:	6025      	str	r5, [r4, #0]
 801144e:	61a5      	str	r5, [r4, #24]
 8011450:	2208      	movs	r2, #8
 8011452:	4629      	mov	r1, r5
 8011454:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011458:	f7ff fc14 	bl	8010c84 <memset>
 801145c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011460:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011464:	4620      	mov	r0, r4
 8011466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011468:	3468      	adds	r4, #104	; 0x68
 801146a:	e7d9      	b.n	8011420 <__sfp+0x1c>
 801146c:	2104      	movs	r1, #4
 801146e:	4638      	mov	r0, r7
 8011470:	f7ff ff62 	bl	8011338 <__sfmoreglue>
 8011474:	4604      	mov	r4, r0
 8011476:	6030      	str	r0, [r6, #0]
 8011478:	2800      	cmp	r0, #0
 801147a:	d1d5      	bne.n	8011428 <__sfp+0x24>
 801147c:	f7ff ff78 	bl	8011370 <__sfp_lock_release>
 8011480:	230c      	movs	r3, #12
 8011482:	603b      	str	r3, [r7, #0]
 8011484:	e7ee      	b.n	8011464 <__sfp+0x60>
 8011486:	bf00      	nop
 8011488:	080125d0 	.word	0x080125d0
 801148c:	ffff0001 	.word	0xffff0001

08011490 <_fwalk_reent>:
 8011490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011494:	4606      	mov	r6, r0
 8011496:	4688      	mov	r8, r1
 8011498:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801149c:	2700      	movs	r7, #0
 801149e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80114a2:	f1b9 0901 	subs.w	r9, r9, #1
 80114a6:	d505      	bpl.n	80114b4 <_fwalk_reent+0x24>
 80114a8:	6824      	ldr	r4, [r4, #0]
 80114aa:	2c00      	cmp	r4, #0
 80114ac:	d1f7      	bne.n	801149e <_fwalk_reent+0xe>
 80114ae:	4638      	mov	r0, r7
 80114b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80114b4:	89ab      	ldrh	r3, [r5, #12]
 80114b6:	2b01      	cmp	r3, #1
 80114b8:	d907      	bls.n	80114ca <_fwalk_reent+0x3a>
 80114ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80114be:	3301      	adds	r3, #1
 80114c0:	d003      	beq.n	80114ca <_fwalk_reent+0x3a>
 80114c2:	4629      	mov	r1, r5
 80114c4:	4630      	mov	r0, r6
 80114c6:	47c0      	blx	r8
 80114c8:	4307      	orrs	r7, r0
 80114ca:	3568      	adds	r5, #104	; 0x68
 80114cc:	e7e9      	b.n	80114a2 <_fwalk_reent+0x12>

080114ce <__retarget_lock_init_recursive>:
 80114ce:	4770      	bx	lr

080114d0 <__retarget_lock_acquire_recursive>:
 80114d0:	4770      	bx	lr

080114d2 <__retarget_lock_release_recursive>:
 80114d2:	4770      	bx	lr

080114d4 <__swhatbuf_r>:
 80114d4:	b570      	push	{r4, r5, r6, lr}
 80114d6:	460e      	mov	r6, r1
 80114d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80114dc:	2900      	cmp	r1, #0
 80114de:	b096      	sub	sp, #88	; 0x58
 80114e0:	4614      	mov	r4, r2
 80114e2:	461d      	mov	r5, r3
 80114e4:	da08      	bge.n	80114f8 <__swhatbuf_r+0x24>
 80114e6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80114ea:	2200      	movs	r2, #0
 80114ec:	602a      	str	r2, [r5, #0]
 80114ee:	061a      	lsls	r2, r3, #24
 80114f0:	d410      	bmi.n	8011514 <__swhatbuf_r+0x40>
 80114f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80114f6:	e00e      	b.n	8011516 <__swhatbuf_r+0x42>
 80114f8:	466a      	mov	r2, sp
 80114fa:	f000 fd0d 	bl	8011f18 <_fstat_r>
 80114fe:	2800      	cmp	r0, #0
 8011500:	dbf1      	blt.n	80114e6 <__swhatbuf_r+0x12>
 8011502:	9a01      	ldr	r2, [sp, #4]
 8011504:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011508:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801150c:	425a      	negs	r2, r3
 801150e:	415a      	adcs	r2, r3
 8011510:	602a      	str	r2, [r5, #0]
 8011512:	e7ee      	b.n	80114f2 <__swhatbuf_r+0x1e>
 8011514:	2340      	movs	r3, #64	; 0x40
 8011516:	2000      	movs	r0, #0
 8011518:	6023      	str	r3, [r4, #0]
 801151a:	b016      	add	sp, #88	; 0x58
 801151c:	bd70      	pop	{r4, r5, r6, pc}
	...

08011520 <__smakebuf_r>:
 8011520:	898b      	ldrh	r3, [r1, #12]
 8011522:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011524:	079d      	lsls	r5, r3, #30
 8011526:	4606      	mov	r6, r0
 8011528:	460c      	mov	r4, r1
 801152a:	d507      	bpl.n	801153c <__smakebuf_r+0x1c>
 801152c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011530:	6023      	str	r3, [r4, #0]
 8011532:	6123      	str	r3, [r4, #16]
 8011534:	2301      	movs	r3, #1
 8011536:	6163      	str	r3, [r4, #20]
 8011538:	b002      	add	sp, #8
 801153a:	bd70      	pop	{r4, r5, r6, pc}
 801153c:	ab01      	add	r3, sp, #4
 801153e:	466a      	mov	r2, sp
 8011540:	f7ff ffc8 	bl	80114d4 <__swhatbuf_r>
 8011544:	9900      	ldr	r1, [sp, #0]
 8011546:	4605      	mov	r5, r0
 8011548:	4630      	mov	r0, r6
 801154a:	f7ff fc0f 	bl	8010d6c <_malloc_r>
 801154e:	b948      	cbnz	r0, 8011564 <__smakebuf_r+0x44>
 8011550:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011554:	059a      	lsls	r2, r3, #22
 8011556:	d4ef      	bmi.n	8011538 <__smakebuf_r+0x18>
 8011558:	f023 0303 	bic.w	r3, r3, #3
 801155c:	f043 0302 	orr.w	r3, r3, #2
 8011560:	81a3      	strh	r3, [r4, #12]
 8011562:	e7e3      	b.n	801152c <__smakebuf_r+0xc>
 8011564:	4b0d      	ldr	r3, [pc, #52]	; (801159c <__smakebuf_r+0x7c>)
 8011566:	62b3      	str	r3, [r6, #40]	; 0x28
 8011568:	89a3      	ldrh	r3, [r4, #12]
 801156a:	6020      	str	r0, [r4, #0]
 801156c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011570:	81a3      	strh	r3, [r4, #12]
 8011572:	9b00      	ldr	r3, [sp, #0]
 8011574:	6163      	str	r3, [r4, #20]
 8011576:	9b01      	ldr	r3, [sp, #4]
 8011578:	6120      	str	r0, [r4, #16]
 801157a:	b15b      	cbz	r3, 8011594 <__smakebuf_r+0x74>
 801157c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011580:	4630      	mov	r0, r6
 8011582:	f000 fcdb 	bl	8011f3c <_isatty_r>
 8011586:	b128      	cbz	r0, 8011594 <__smakebuf_r+0x74>
 8011588:	89a3      	ldrh	r3, [r4, #12]
 801158a:	f023 0303 	bic.w	r3, r3, #3
 801158e:	f043 0301 	orr.w	r3, r3, #1
 8011592:	81a3      	strh	r3, [r4, #12]
 8011594:	89a0      	ldrh	r0, [r4, #12]
 8011596:	4305      	orrs	r5, r0
 8011598:	81a5      	strh	r5, [r4, #12]
 801159a:	e7cd      	b.n	8011538 <__smakebuf_r+0x18>
 801159c:	0801132d 	.word	0x0801132d

080115a0 <__malloc_lock>:
 80115a0:	4801      	ldr	r0, [pc, #4]	; (80115a8 <__malloc_lock+0x8>)
 80115a2:	f7ff bf95 	b.w	80114d0 <__retarget_lock_acquire_recursive>
 80115a6:	bf00      	nop
 80115a8:	20005158 	.word	0x20005158

080115ac <__malloc_unlock>:
 80115ac:	4801      	ldr	r0, [pc, #4]	; (80115b4 <__malloc_unlock+0x8>)
 80115ae:	f7ff bf90 	b.w	80114d2 <__retarget_lock_release_recursive>
 80115b2:	bf00      	nop
 80115b4:	20005158 	.word	0x20005158

080115b8 <__ssputs_r>:
 80115b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80115bc:	688e      	ldr	r6, [r1, #8]
 80115be:	429e      	cmp	r6, r3
 80115c0:	4682      	mov	sl, r0
 80115c2:	460c      	mov	r4, r1
 80115c4:	4690      	mov	r8, r2
 80115c6:	461f      	mov	r7, r3
 80115c8:	d838      	bhi.n	801163c <__ssputs_r+0x84>
 80115ca:	898a      	ldrh	r2, [r1, #12]
 80115cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80115d0:	d032      	beq.n	8011638 <__ssputs_r+0x80>
 80115d2:	6825      	ldr	r5, [r4, #0]
 80115d4:	6909      	ldr	r1, [r1, #16]
 80115d6:	eba5 0901 	sub.w	r9, r5, r1
 80115da:	6965      	ldr	r5, [r4, #20]
 80115dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80115e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80115e4:	3301      	adds	r3, #1
 80115e6:	444b      	add	r3, r9
 80115e8:	106d      	asrs	r5, r5, #1
 80115ea:	429d      	cmp	r5, r3
 80115ec:	bf38      	it	cc
 80115ee:	461d      	movcc	r5, r3
 80115f0:	0553      	lsls	r3, r2, #21
 80115f2:	d531      	bpl.n	8011658 <__ssputs_r+0xa0>
 80115f4:	4629      	mov	r1, r5
 80115f6:	f7ff fbb9 	bl	8010d6c <_malloc_r>
 80115fa:	4606      	mov	r6, r0
 80115fc:	b950      	cbnz	r0, 8011614 <__ssputs_r+0x5c>
 80115fe:	230c      	movs	r3, #12
 8011600:	f8ca 3000 	str.w	r3, [sl]
 8011604:	89a3      	ldrh	r3, [r4, #12]
 8011606:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801160a:	81a3      	strh	r3, [r4, #12]
 801160c:	f04f 30ff 	mov.w	r0, #4294967295
 8011610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011614:	6921      	ldr	r1, [r4, #16]
 8011616:	464a      	mov	r2, r9
 8011618:	f7ff fb26 	bl	8010c68 <memcpy>
 801161c:	89a3      	ldrh	r3, [r4, #12]
 801161e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011622:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011626:	81a3      	strh	r3, [r4, #12]
 8011628:	6126      	str	r6, [r4, #16]
 801162a:	6165      	str	r5, [r4, #20]
 801162c:	444e      	add	r6, r9
 801162e:	eba5 0509 	sub.w	r5, r5, r9
 8011632:	6026      	str	r6, [r4, #0]
 8011634:	60a5      	str	r5, [r4, #8]
 8011636:	463e      	mov	r6, r7
 8011638:	42be      	cmp	r6, r7
 801163a:	d900      	bls.n	801163e <__ssputs_r+0x86>
 801163c:	463e      	mov	r6, r7
 801163e:	6820      	ldr	r0, [r4, #0]
 8011640:	4632      	mov	r2, r6
 8011642:	4641      	mov	r1, r8
 8011644:	f000 fc9c 	bl	8011f80 <memmove>
 8011648:	68a3      	ldr	r3, [r4, #8]
 801164a:	1b9b      	subs	r3, r3, r6
 801164c:	60a3      	str	r3, [r4, #8]
 801164e:	6823      	ldr	r3, [r4, #0]
 8011650:	4433      	add	r3, r6
 8011652:	6023      	str	r3, [r4, #0]
 8011654:	2000      	movs	r0, #0
 8011656:	e7db      	b.n	8011610 <__ssputs_r+0x58>
 8011658:	462a      	mov	r2, r5
 801165a:	f000 fcab 	bl	8011fb4 <_realloc_r>
 801165e:	4606      	mov	r6, r0
 8011660:	2800      	cmp	r0, #0
 8011662:	d1e1      	bne.n	8011628 <__ssputs_r+0x70>
 8011664:	6921      	ldr	r1, [r4, #16]
 8011666:	4650      	mov	r0, sl
 8011668:	f7ff fb14 	bl	8010c94 <_free_r>
 801166c:	e7c7      	b.n	80115fe <__ssputs_r+0x46>
	...

08011670 <_svfiprintf_r>:
 8011670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011674:	4698      	mov	r8, r3
 8011676:	898b      	ldrh	r3, [r1, #12]
 8011678:	061b      	lsls	r3, r3, #24
 801167a:	b09d      	sub	sp, #116	; 0x74
 801167c:	4607      	mov	r7, r0
 801167e:	460d      	mov	r5, r1
 8011680:	4614      	mov	r4, r2
 8011682:	d50e      	bpl.n	80116a2 <_svfiprintf_r+0x32>
 8011684:	690b      	ldr	r3, [r1, #16]
 8011686:	b963      	cbnz	r3, 80116a2 <_svfiprintf_r+0x32>
 8011688:	2140      	movs	r1, #64	; 0x40
 801168a:	f7ff fb6f 	bl	8010d6c <_malloc_r>
 801168e:	6028      	str	r0, [r5, #0]
 8011690:	6128      	str	r0, [r5, #16]
 8011692:	b920      	cbnz	r0, 801169e <_svfiprintf_r+0x2e>
 8011694:	230c      	movs	r3, #12
 8011696:	603b      	str	r3, [r7, #0]
 8011698:	f04f 30ff 	mov.w	r0, #4294967295
 801169c:	e0d1      	b.n	8011842 <_svfiprintf_r+0x1d2>
 801169e:	2340      	movs	r3, #64	; 0x40
 80116a0:	616b      	str	r3, [r5, #20]
 80116a2:	2300      	movs	r3, #0
 80116a4:	9309      	str	r3, [sp, #36]	; 0x24
 80116a6:	2320      	movs	r3, #32
 80116a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80116ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80116b0:	2330      	movs	r3, #48	; 0x30
 80116b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801185c <_svfiprintf_r+0x1ec>
 80116b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80116ba:	f04f 0901 	mov.w	r9, #1
 80116be:	4623      	mov	r3, r4
 80116c0:	469a      	mov	sl, r3
 80116c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80116c6:	b10a      	cbz	r2, 80116cc <_svfiprintf_r+0x5c>
 80116c8:	2a25      	cmp	r2, #37	; 0x25
 80116ca:	d1f9      	bne.n	80116c0 <_svfiprintf_r+0x50>
 80116cc:	ebba 0b04 	subs.w	fp, sl, r4
 80116d0:	d00b      	beq.n	80116ea <_svfiprintf_r+0x7a>
 80116d2:	465b      	mov	r3, fp
 80116d4:	4622      	mov	r2, r4
 80116d6:	4629      	mov	r1, r5
 80116d8:	4638      	mov	r0, r7
 80116da:	f7ff ff6d 	bl	80115b8 <__ssputs_r>
 80116de:	3001      	adds	r0, #1
 80116e0:	f000 80aa 	beq.w	8011838 <_svfiprintf_r+0x1c8>
 80116e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80116e6:	445a      	add	r2, fp
 80116e8:	9209      	str	r2, [sp, #36]	; 0x24
 80116ea:	f89a 3000 	ldrb.w	r3, [sl]
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	f000 80a2 	beq.w	8011838 <_svfiprintf_r+0x1c8>
 80116f4:	2300      	movs	r3, #0
 80116f6:	f04f 32ff 	mov.w	r2, #4294967295
 80116fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80116fe:	f10a 0a01 	add.w	sl, sl, #1
 8011702:	9304      	str	r3, [sp, #16]
 8011704:	9307      	str	r3, [sp, #28]
 8011706:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801170a:	931a      	str	r3, [sp, #104]	; 0x68
 801170c:	4654      	mov	r4, sl
 801170e:	2205      	movs	r2, #5
 8011710:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011714:	4851      	ldr	r0, [pc, #324]	; (801185c <_svfiprintf_r+0x1ec>)
 8011716:	f7ee fd63 	bl	80001e0 <memchr>
 801171a:	9a04      	ldr	r2, [sp, #16]
 801171c:	b9d8      	cbnz	r0, 8011756 <_svfiprintf_r+0xe6>
 801171e:	06d0      	lsls	r0, r2, #27
 8011720:	bf44      	itt	mi
 8011722:	2320      	movmi	r3, #32
 8011724:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011728:	0711      	lsls	r1, r2, #28
 801172a:	bf44      	itt	mi
 801172c:	232b      	movmi	r3, #43	; 0x2b
 801172e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011732:	f89a 3000 	ldrb.w	r3, [sl]
 8011736:	2b2a      	cmp	r3, #42	; 0x2a
 8011738:	d015      	beq.n	8011766 <_svfiprintf_r+0xf6>
 801173a:	9a07      	ldr	r2, [sp, #28]
 801173c:	4654      	mov	r4, sl
 801173e:	2000      	movs	r0, #0
 8011740:	f04f 0c0a 	mov.w	ip, #10
 8011744:	4621      	mov	r1, r4
 8011746:	f811 3b01 	ldrb.w	r3, [r1], #1
 801174a:	3b30      	subs	r3, #48	; 0x30
 801174c:	2b09      	cmp	r3, #9
 801174e:	d94e      	bls.n	80117ee <_svfiprintf_r+0x17e>
 8011750:	b1b0      	cbz	r0, 8011780 <_svfiprintf_r+0x110>
 8011752:	9207      	str	r2, [sp, #28]
 8011754:	e014      	b.n	8011780 <_svfiprintf_r+0x110>
 8011756:	eba0 0308 	sub.w	r3, r0, r8
 801175a:	fa09 f303 	lsl.w	r3, r9, r3
 801175e:	4313      	orrs	r3, r2
 8011760:	9304      	str	r3, [sp, #16]
 8011762:	46a2      	mov	sl, r4
 8011764:	e7d2      	b.n	801170c <_svfiprintf_r+0x9c>
 8011766:	9b03      	ldr	r3, [sp, #12]
 8011768:	1d19      	adds	r1, r3, #4
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	9103      	str	r1, [sp, #12]
 801176e:	2b00      	cmp	r3, #0
 8011770:	bfbb      	ittet	lt
 8011772:	425b      	neglt	r3, r3
 8011774:	f042 0202 	orrlt.w	r2, r2, #2
 8011778:	9307      	strge	r3, [sp, #28]
 801177a:	9307      	strlt	r3, [sp, #28]
 801177c:	bfb8      	it	lt
 801177e:	9204      	strlt	r2, [sp, #16]
 8011780:	7823      	ldrb	r3, [r4, #0]
 8011782:	2b2e      	cmp	r3, #46	; 0x2e
 8011784:	d10c      	bne.n	80117a0 <_svfiprintf_r+0x130>
 8011786:	7863      	ldrb	r3, [r4, #1]
 8011788:	2b2a      	cmp	r3, #42	; 0x2a
 801178a:	d135      	bne.n	80117f8 <_svfiprintf_r+0x188>
 801178c:	9b03      	ldr	r3, [sp, #12]
 801178e:	1d1a      	adds	r2, r3, #4
 8011790:	681b      	ldr	r3, [r3, #0]
 8011792:	9203      	str	r2, [sp, #12]
 8011794:	2b00      	cmp	r3, #0
 8011796:	bfb8      	it	lt
 8011798:	f04f 33ff 	movlt.w	r3, #4294967295
 801179c:	3402      	adds	r4, #2
 801179e:	9305      	str	r3, [sp, #20]
 80117a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801186c <_svfiprintf_r+0x1fc>
 80117a4:	7821      	ldrb	r1, [r4, #0]
 80117a6:	2203      	movs	r2, #3
 80117a8:	4650      	mov	r0, sl
 80117aa:	f7ee fd19 	bl	80001e0 <memchr>
 80117ae:	b140      	cbz	r0, 80117c2 <_svfiprintf_r+0x152>
 80117b0:	2340      	movs	r3, #64	; 0x40
 80117b2:	eba0 000a 	sub.w	r0, r0, sl
 80117b6:	fa03 f000 	lsl.w	r0, r3, r0
 80117ba:	9b04      	ldr	r3, [sp, #16]
 80117bc:	4303      	orrs	r3, r0
 80117be:	3401      	adds	r4, #1
 80117c0:	9304      	str	r3, [sp, #16]
 80117c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80117c6:	4826      	ldr	r0, [pc, #152]	; (8011860 <_svfiprintf_r+0x1f0>)
 80117c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80117cc:	2206      	movs	r2, #6
 80117ce:	f7ee fd07 	bl	80001e0 <memchr>
 80117d2:	2800      	cmp	r0, #0
 80117d4:	d038      	beq.n	8011848 <_svfiprintf_r+0x1d8>
 80117d6:	4b23      	ldr	r3, [pc, #140]	; (8011864 <_svfiprintf_r+0x1f4>)
 80117d8:	bb1b      	cbnz	r3, 8011822 <_svfiprintf_r+0x1b2>
 80117da:	9b03      	ldr	r3, [sp, #12]
 80117dc:	3307      	adds	r3, #7
 80117de:	f023 0307 	bic.w	r3, r3, #7
 80117e2:	3308      	adds	r3, #8
 80117e4:	9303      	str	r3, [sp, #12]
 80117e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80117e8:	4433      	add	r3, r6
 80117ea:	9309      	str	r3, [sp, #36]	; 0x24
 80117ec:	e767      	b.n	80116be <_svfiprintf_r+0x4e>
 80117ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80117f2:	460c      	mov	r4, r1
 80117f4:	2001      	movs	r0, #1
 80117f6:	e7a5      	b.n	8011744 <_svfiprintf_r+0xd4>
 80117f8:	2300      	movs	r3, #0
 80117fa:	3401      	adds	r4, #1
 80117fc:	9305      	str	r3, [sp, #20]
 80117fe:	4619      	mov	r1, r3
 8011800:	f04f 0c0a 	mov.w	ip, #10
 8011804:	4620      	mov	r0, r4
 8011806:	f810 2b01 	ldrb.w	r2, [r0], #1
 801180a:	3a30      	subs	r2, #48	; 0x30
 801180c:	2a09      	cmp	r2, #9
 801180e:	d903      	bls.n	8011818 <_svfiprintf_r+0x1a8>
 8011810:	2b00      	cmp	r3, #0
 8011812:	d0c5      	beq.n	80117a0 <_svfiprintf_r+0x130>
 8011814:	9105      	str	r1, [sp, #20]
 8011816:	e7c3      	b.n	80117a0 <_svfiprintf_r+0x130>
 8011818:	fb0c 2101 	mla	r1, ip, r1, r2
 801181c:	4604      	mov	r4, r0
 801181e:	2301      	movs	r3, #1
 8011820:	e7f0      	b.n	8011804 <_svfiprintf_r+0x194>
 8011822:	ab03      	add	r3, sp, #12
 8011824:	9300      	str	r3, [sp, #0]
 8011826:	462a      	mov	r2, r5
 8011828:	4b0f      	ldr	r3, [pc, #60]	; (8011868 <_svfiprintf_r+0x1f8>)
 801182a:	a904      	add	r1, sp, #16
 801182c:	4638      	mov	r0, r7
 801182e:	f3af 8000 	nop.w
 8011832:	1c42      	adds	r2, r0, #1
 8011834:	4606      	mov	r6, r0
 8011836:	d1d6      	bne.n	80117e6 <_svfiprintf_r+0x176>
 8011838:	89ab      	ldrh	r3, [r5, #12]
 801183a:	065b      	lsls	r3, r3, #25
 801183c:	f53f af2c 	bmi.w	8011698 <_svfiprintf_r+0x28>
 8011840:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011842:	b01d      	add	sp, #116	; 0x74
 8011844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011848:	ab03      	add	r3, sp, #12
 801184a:	9300      	str	r3, [sp, #0]
 801184c:	462a      	mov	r2, r5
 801184e:	4b06      	ldr	r3, [pc, #24]	; (8011868 <_svfiprintf_r+0x1f8>)
 8011850:	a904      	add	r1, sp, #16
 8011852:	4638      	mov	r0, r7
 8011854:	f000 f9d4 	bl	8011c00 <_printf_i>
 8011858:	e7eb      	b.n	8011832 <_svfiprintf_r+0x1c2>
 801185a:	bf00      	nop
 801185c:	08012634 	.word	0x08012634
 8011860:	0801263e 	.word	0x0801263e
 8011864:	00000000 	.word	0x00000000
 8011868:	080115b9 	.word	0x080115b9
 801186c:	0801263a 	.word	0x0801263a

08011870 <__sfputc_r>:
 8011870:	6893      	ldr	r3, [r2, #8]
 8011872:	3b01      	subs	r3, #1
 8011874:	2b00      	cmp	r3, #0
 8011876:	b410      	push	{r4}
 8011878:	6093      	str	r3, [r2, #8]
 801187a:	da08      	bge.n	801188e <__sfputc_r+0x1e>
 801187c:	6994      	ldr	r4, [r2, #24]
 801187e:	42a3      	cmp	r3, r4
 8011880:	db01      	blt.n	8011886 <__sfputc_r+0x16>
 8011882:	290a      	cmp	r1, #10
 8011884:	d103      	bne.n	801188e <__sfputc_r+0x1e>
 8011886:	f85d 4b04 	ldr.w	r4, [sp], #4
 801188a:	f7ff bba9 	b.w	8010fe0 <__swbuf_r>
 801188e:	6813      	ldr	r3, [r2, #0]
 8011890:	1c58      	adds	r0, r3, #1
 8011892:	6010      	str	r0, [r2, #0]
 8011894:	7019      	strb	r1, [r3, #0]
 8011896:	4608      	mov	r0, r1
 8011898:	f85d 4b04 	ldr.w	r4, [sp], #4
 801189c:	4770      	bx	lr

0801189e <__sfputs_r>:
 801189e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118a0:	4606      	mov	r6, r0
 80118a2:	460f      	mov	r7, r1
 80118a4:	4614      	mov	r4, r2
 80118a6:	18d5      	adds	r5, r2, r3
 80118a8:	42ac      	cmp	r4, r5
 80118aa:	d101      	bne.n	80118b0 <__sfputs_r+0x12>
 80118ac:	2000      	movs	r0, #0
 80118ae:	e007      	b.n	80118c0 <__sfputs_r+0x22>
 80118b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80118b4:	463a      	mov	r2, r7
 80118b6:	4630      	mov	r0, r6
 80118b8:	f7ff ffda 	bl	8011870 <__sfputc_r>
 80118bc:	1c43      	adds	r3, r0, #1
 80118be:	d1f3      	bne.n	80118a8 <__sfputs_r+0xa>
 80118c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080118c4 <_vfiprintf_r>:
 80118c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118c8:	460d      	mov	r5, r1
 80118ca:	b09d      	sub	sp, #116	; 0x74
 80118cc:	4614      	mov	r4, r2
 80118ce:	4698      	mov	r8, r3
 80118d0:	4606      	mov	r6, r0
 80118d2:	b118      	cbz	r0, 80118dc <_vfiprintf_r+0x18>
 80118d4:	6983      	ldr	r3, [r0, #24]
 80118d6:	b90b      	cbnz	r3, 80118dc <_vfiprintf_r+0x18>
 80118d8:	f7ff fd5c 	bl	8011394 <__sinit>
 80118dc:	4b89      	ldr	r3, [pc, #548]	; (8011b04 <_vfiprintf_r+0x240>)
 80118de:	429d      	cmp	r5, r3
 80118e0:	d11b      	bne.n	801191a <_vfiprintf_r+0x56>
 80118e2:	6875      	ldr	r5, [r6, #4]
 80118e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80118e6:	07d9      	lsls	r1, r3, #31
 80118e8:	d405      	bmi.n	80118f6 <_vfiprintf_r+0x32>
 80118ea:	89ab      	ldrh	r3, [r5, #12]
 80118ec:	059a      	lsls	r2, r3, #22
 80118ee:	d402      	bmi.n	80118f6 <_vfiprintf_r+0x32>
 80118f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80118f2:	f7ff fded 	bl	80114d0 <__retarget_lock_acquire_recursive>
 80118f6:	89ab      	ldrh	r3, [r5, #12]
 80118f8:	071b      	lsls	r3, r3, #28
 80118fa:	d501      	bpl.n	8011900 <_vfiprintf_r+0x3c>
 80118fc:	692b      	ldr	r3, [r5, #16]
 80118fe:	b9eb      	cbnz	r3, 801193c <_vfiprintf_r+0x78>
 8011900:	4629      	mov	r1, r5
 8011902:	4630      	mov	r0, r6
 8011904:	f7ff fbbe 	bl	8011084 <__swsetup_r>
 8011908:	b1c0      	cbz	r0, 801193c <_vfiprintf_r+0x78>
 801190a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801190c:	07dc      	lsls	r4, r3, #31
 801190e:	d50e      	bpl.n	801192e <_vfiprintf_r+0x6a>
 8011910:	f04f 30ff 	mov.w	r0, #4294967295
 8011914:	b01d      	add	sp, #116	; 0x74
 8011916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801191a:	4b7b      	ldr	r3, [pc, #492]	; (8011b08 <_vfiprintf_r+0x244>)
 801191c:	429d      	cmp	r5, r3
 801191e:	d101      	bne.n	8011924 <_vfiprintf_r+0x60>
 8011920:	68b5      	ldr	r5, [r6, #8]
 8011922:	e7df      	b.n	80118e4 <_vfiprintf_r+0x20>
 8011924:	4b79      	ldr	r3, [pc, #484]	; (8011b0c <_vfiprintf_r+0x248>)
 8011926:	429d      	cmp	r5, r3
 8011928:	bf08      	it	eq
 801192a:	68f5      	ldreq	r5, [r6, #12]
 801192c:	e7da      	b.n	80118e4 <_vfiprintf_r+0x20>
 801192e:	89ab      	ldrh	r3, [r5, #12]
 8011930:	0598      	lsls	r0, r3, #22
 8011932:	d4ed      	bmi.n	8011910 <_vfiprintf_r+0x4c>
 8011934:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011936:	f7ff fdcc 	bl	80114d2 <__retarget_lock_release_recursive>
 801193a:	e7e9      	b.n	8011910 <_vfiprintf_r+0x4c>
 801193c:	2300      	movs	r3, #0
 801193e:	9309      	str	r3, [sp, #36]	; 0x24
 8011940:	2320      	movs	r3, #32
 8011942:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011946:	f8cd 800c 	str.w	r8, [sp, #12]
 801194a:	2330      	movs	r3, #48	; 0x30
 801194c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011b10 <_vfiprintf_r+0x24c>
 8011950:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011954:	f04f 0901 	mov.w	r9, #1
 8011958:	4623      	mov	r3, r4
 801195a:	469a      	mov	sl, r3
 801195c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011960:	b10a      	cbz	r2, 8011966 <_vfiprintf_r+0xa2>
 8011962:	2a25      	cmp	r2, #37	; 0x25
 8011964:	d1f9      	bne.n	801195a <_vfiprintf_r+0x96>
 8011966:	ebba 0b04 	subs.w	fp, sl, r4
 801196a:	d00b      	beq.n	8011984 <_vfiprintf_r+0xc0>
 801196c:	465b      	mov	r3, fp
 801196e:	4622      	mov	r2, r4
 8011970:	4629      	mov	r1, r5
 8011972:	4630      	mov	r0, r6
 8011974:	f7ff ff93 	bl	801189e <__sfputs_r>
 8011978:	3001      	adds	r0, #1
 801197a:	f000 80aa 	beq.w	8011ad2 <_vfiprintf_r+0x20e>
 801197e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011980:	445a      	add	r2, fp
 8011982:	9209      	str	r2, [sp, #36]	; 0x24
 8011984:	f89a 3000 	ldrb.w	r3, [sl]
 8011988:	2b00      	cmp	r3, #0
 801198a:	f000 80a2 	beq.w	8011ad2 <_vfiprintf_r+0x20e>
 801198e:	2300      	movs	r3, #0
 8011990:	f04f 32ff 	mov.w	r2, #4294967295
 8011994:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011998:	f10a 0a01 	add.w	sl, sl, #1
 801199c:	9304      	str	r3, [sp, #16]
 801199e:	9307      	str	r3, [sp, #28]
 80119a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80119a4:	931a      	str	r3, [sp, #104]	; 0x68
 80119a6:	4654      	mov	r4, sl
 80119a8:	2205      	movs	r2, #5
 80119aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80119ae:	4858      	ldr	r0, [pc, #352]	; (8011b10 <_vfiprintf_r+0x24c>)
 80119b0:	f7ee fc16 	bl	80001e0 <memchr>
 80119b4:	9a04      	ldr	r2, [sp, #16]
 80119b6:	b9d8      	cbnz	r0, 80119f0 <_vfiprintf_r+0x12c>
 80119b8:	06d1      	lsls	r1, r2, #27
 80119ba:	bf44      	itt	mi
 80119bc:	2320      	movmi	r3, #32
 80119be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80119c2:	0713      	lsls	r3, r2, #28
 80119c4:	bf44      	itt	mi
 80119c6:	232b      	movmi	r3, #43	; 0x2b
 80119c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80119cc:	f89a 3000 	ldrb.w	r3, [sl]
 80119d0:	2b2a      	cmp	r3, #42	; 0x2a
 80119d2:	d015      	beq.n	8011a00 <_vfiprintf_r+0x13c>
 80119d4:	9a07      	ldr	r2, [sp, #28]
 80119d6:	4654      	mov	r4, sl
 80119d8:	2000      	movs	r0, #0
 80119da:	f04f 0c0a 	mov.w	ip, #10
 80119de:	4621      	mov	r1, r4
 80119e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80119e4:	3b30      	subs	r3, #48	; 0x30
 80119e6:	2b09      	cmp	r3, #9
 80119e8:	d94e      	bls.n	8011a88 <_vfiprintf_r+0x1c4>
 80119ea:	b1b0      	cbz	r0, 8011a1a <_vfiprintf_r+0x156>
 80119ec:	9207      	str	r2, [sp, #28]
 80119ee:	e014      	b.n	8011a1a <_vfiprintf_r+0x156>
 80119f0:	eba0 0308 	sub.w	r3, r0, r8
 80119f4:	fa09 f303 	lsl.w	r3, r9, r3
 80119f8:	4313      	orrs	r3, r2
 80119fa:	9304      	str	r3, [sp, #16]
 80119fc:	46a2      	mov	sl, r4
 80119fe:	e7d2      	b.n	80119a6 <_vfiprintf_r+0xe2>
 8011a00:	9b03      	ldr	r3, [sp, #12]
 8011a02:	1d19      	adds	r1, r3, #4
 8011a04:	681b      	ldr	r3, [r3, #0]
 8011a06:	9103      	str	r1, [sp, #12]
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	bfbb      	ittet	lt
 8011a0c:	425b      	neglt	r3, r3
 8011a0e:	f042 0202 	orrlt.w	r2, r2, #2
 8011a12:	9307      	strge	r3, [sp, #28]
 8011a14:	9307      	strlt	r3, [sp, #28]
 8011a16:	bfb8      	it	lt
 8011a18:	9204      	strlt	r2, [sp, #16]
 8011a1a:	7823      	ldrb	r3, [r4, #0]
 8011a1c:	2b2e      	cmp	r3, #46	; 0x2e
 8011a1e:	d10c      	bne.n	8011a3a <_vfiprintf_r+0x176>
 8011a20:	7863      	ldrb	r3, [r4, #1]
 8011a22:	2b2a      	cmp	r3, #42	; 0x2a
 8011a24:	d135      	bne.n	8011a92 <_vfiprintf_r+0x1ce>
 8011a26:	9b03      	ldr	r3, [sp, #12]
 8011a28:	1d1a      	adds	r2, r3, #4
 8011a2a:	681b      	ldr	r3, [r3, #0]
 8011a2c:	9203      	str	r2, [sp, #12]
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	bfb8      	it	lt
 8011a32:	f04f 33ff 	movlt.w	r3, #4294967295
 8011a36:	3402      	adds	r4, #2
 8011a38:	9305      	str	r3, [sp, #20]
 8011a3a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011b20 <_vfiprintf_r+0x25c>
 8011a3e:	7821      	ldrb	r1, [r4, #0]
 8011a40:	2203      	movs	r2, #3
 8011a42:	4650      	mov	r0, sl
 8011a44:	f7ee fbcc 	bl	80001e0 <memchr>
 8011a48:	b140      	cbz	r0, 8011a5c <_vfiprintf_r+0x198>
 8011a4a:	2340      	movs	r3, #64	; 0x40
 8011a4c:	eba0 000a 	sub.w	r0, r0, sl
 8011a50:	fa03 f000 	lsl.w	r0, r3, r0
 8011a54:	9b04      	ldr	r3, [sp, #16]
 8011a56:	4303      	orrs	r3, r0
 8011a58:	3401      	adds	r4, #1
 8011a5a:	9304      	str	r3, [sp, #16]
 8011a5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a60:	482c      	ldr	r0, [pc, #176]	; (8011b14 <_vfiprintf_r+0x250>)
 8011a62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011a66:	2206      	movs	r2, #6
 8011a68:	f7ee fbba 	bl	80001e0 <memchr>
 8011a6c:	2800      	cmp	r0, #0
 8011a6e:	d03f      	beq.n	8011af0 <_vfiprintf_r+0x22c>
 8011a70:	4b29      	ldr	r3, [pc, #164]	; (8011b18 <_vfiprintf_r+0x254>)
 8011a72:	bb1b      	cbnz	r3, 8011abc <_vfiprintf_r+0x1f8>
 8011a74:	9b03      	ldr	r3, [sp, #12]
 8011a76:	3307      	adds	r3, #7
 8011a78:	f023 0307 	bic.w	r3, r3, #7
 8011a7c:	3308      	adds	r3, #8
 8011a7e:	9303      	str	r3, [sp, #12]
 8011a80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a82:	443b      	add	r3, r7
 8011a84:	9309      	str	r3, [sp, #36]	; 0x24
 8011a86:	e767      	b.n	8011958 <_vfiprintf_r+0x94>
 8011a88:	fb0c 3202 	mla	r2, ip, r2, r3
 8011a8c:	460c      	mov	r4, r1
 8011a8e:	2001      	movs	r0, #1
 8011a90:	e7a5      	b.n	80119de <_vfiprintf_r+0x11a>
 8011a92:	2300      	movs	r3, #0
 8011a94:	3401      	adds	r4, #1
 8011a96:	9305      	str	r3, [sp, #20]
 8011a98:	4619      	mov	r1, r3
 8011a9a:	f04f 0c0a 	mov.w	ip, #10
 8011a9e:	4620      	mov	r0, r4
 8011aa0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011aa4:	3a30      	subs	r2, #48	; 0x30
 8011aa6:	2a09      	cmp	r2, #9
 8011aa8:	d903      	bls.n	8011ab2 <_vfiprintf_r+0x1ee>
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	d0c5      	beq.n	8011a3a <_vfiprintf_r+0x176>
 8011aae:	9105      	str	r1, [sp, #20]
 8011ab0:	e7c3      	b.n	8011a3a <_vfiprintf_r+0x176>
 8011ab2:	fb0c 2101 	mla	r1, ip, r1, r2
 8011ab6:	4604      	mov	r4, r0
 8011ab8:	2301      	movs	r3, #1
 8011aba:	e7f0      	b.n	8011a9e <_vfiprintf_r+0x1da>
 8011abc:	ab03      	add	r3, sp, #12
 8011abe:	9300      	str	r3, [sp, #0]
 8011ac0:	462a      	mov	r2, r5
 8011ac2:	4b16      	ldr	r3, [pc, #88]	; (8011b1c <_vfiprintf_r+0x258>)
 8011ac4:	a904      	add	r1, sp, #16
 8011ac6:	4630      	mov	r0, r6
 8011ac8:	f3af 8000 	nop.w
 8011acc:	4607      	mov	r7, r0
 8011ace:	1c78      	adds	r0, r7, #1
 8011ad0:	d1d6      	bne.n	8011a80 <_vfiprintf_r+0x1bc>
 8011ad2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011ad4:	07d9      	lsls	r1, r3, #31
 8011ad6:	d405      	bmi.n	8011ae4 <_vfiprintf_r+0x220>
 8011ad8:	89ab      	ldrh	r3, [r5, #12]
 8011ada:	059a      	lsls	r2, r3, #22
 8011adc:	d402      	bmi.n	8011ae4 <_vfiprintf_r+0x220>
 8011ade:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011ae0:	f7ff fcf7 	bl	80114d2 <__retarget_lock_release_recursive>
 8011ae4:	89ab      	ldrh	r3, [r5, #12]
 8011ae6:	065b      	lsls	r3, r3, #25
 8011ae8:	f53f af12 	bmi.w	8011910 <_vfiprintf_r+0x4c>
 8011aec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011aee:	e711      	b.n	8011914 <_vfiprintf_r+0x50>
 8011af0:	ab03      	add	r3, sp, #12
 8011af2:	9300      	str	r3, [sp, #0]
 8011af4:	462a      	mov	r2, r5
 8011af6:	4b09      	ldr	r3, [pc, #36]	; (8011b1c <_vfiprintf_r+0x258>)
 8011af8:	a904      	add	r1, sp, #16
 8011afa:	4630      	mov	r0, r6
 8011afc:	f000 f880 	bl	8011c00 <_printf_i>
 8011b00:	e7e4      	b.n	8011acc <_vfiprintf_r+0x208>
 8011b02:	bf00      	nop
 8011b04:	080125f4 	.word	0x080125f4
 8011b08:	08012614 	.word	0x08012614
 8011b0c:	080125d4 	.word	0x080125d4
 8011b10:	08012634 	.word	0x08012634
 8011b14:	0801263e 	.word	0x0801263e
 8011b18:	00000000 	.word	0x00000000
 8011b1c:	0801189f 	.word	0x0801189f
 8011b20:	0801263a 	.word	0x0801263a

08011b24 <_printf_common>:
 8011b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b28:	4616      	mov	r6, r2
 8011b2a:	4699      	mov	r9, r3
 8011b2c:	688a      	ldr	r2, [r1, #8]
 8011b2e:	690b      	ldr	r3, [r1, #16]
 8011b30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011b34:	4293      	cmp	r3, r2
 8011b36:	bfb8      	it	lt
 8011b38:	4613      	movlt	r3, r2
 8011b3a:	6033      	str	r3, [r6, #0]
 8011b3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011b40:	4607      	mov	r7, r0
 8011b42:	460c      	mov	r4, r1
 8011b44:	b10a      	cbz	r2, 8011b4a <_printf_common+0x26>
 8011b46:	3301      	adds	r3, #1
 8011b48:	6033      	str	r3, [r6, #0]
 8011b4a:	6823      	ldr	r3, [r4, #0]
 8011b4c:	0699      	lsls	r1, r3, #26
 8011b4e:	bf42      	ittt	mi
 8011b50:	6833      	ldrmi	r3, [r6, #0]
 8011b52:	3302      	addmi	r3, #2
 8011b54:	6033      	strmi	r3, [r6, #0]
 8011b56:	6825      	ldr	r5, [r4, #0]
 8011b58:	f015 0506 	ands.w	r5, r5, #6
 8011b5c:	d106      	bne.n	8011b6c <_printf_common+0x48>
 8011b5e:	f104 0a19 	add.w	sl, r4, #25
 8011b62:	68e3      	ldr	r3, [r4, #12]
 8011b64:	6832      	ldr	r2, [r6, #0]
 8011b66:	1a9b      	subs	r3, r3, r2
 8011b68:	42ab      	cmp	r3, r5
 8011b6a:	dc26      	bgt.n	8011bba <_printf_common+0x96>
 8011b6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011b70:	1e13      	subs	r3, r2, #0
 8011b72:	6822      	ldr	r2, [r4, #0]
 8011b74:	bf18      	it	ne
 8011b76:	2301      	movne	r3, #1
 8011b78:	0692      	lsls	r2, r2, #26
 8011b7a:	d42b      	bmi.n	8011bd4 <_printf_common+0xb0>
 8011b7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011b80:	4649      	mov	r1, r9
 8011b82:	4638      	mov	r0, r7
 8011b84:	47c0      	blx	r8
 8011b86:	3001      	adds	r0, #1
 8011b88:	d01e      	beq.n	8011bc8 <_printf_common+0xa4>
 8011b8a:	6823      	ldr	r3, [r4, #0]
 8011b8c:	68e5      	ldr	r5, [r4, #12]
 8011b8e:	6832      	ldr	r2, [r6, #0]
 8011b90:	f003 0306 	and.w	r3, r3, #6
 8011b94:	2b04      	cmp	r3, #4
 8011b96:	bf08      	it	eq
 8011b98:	1aad      	subeq	r5, r5, r2
 8011b9a:	68a3      	ldr	r3, [r4, #8]
 8011b9c:	6922      	ldr	r2, [r4, #16]
 8011b9e:	bf0c      	ite	eq
 8011ba0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011ba4:	2500      	movne	r5, #0
 8011ba6:	4293      	cmp	r3, r2
 8011ba8:	bfc4      	itt	gt
 8011baa:	1a9b      	subgt	r3, r3, r2
 8011bac:	18ed      	addgt	r5, r5, r3
 8011bae:	2600      	movs	r6, #0
 8011bb0:	341a      	adds	r4, #26
 8011bb2:	42b5      	cmp	r5, r6
 8011bb4:	d11a      	bne.n	8011bec <_printf_common+0xc8>
 8011bb6:	2000      	movs	r0, #0
 8011bb8:	e008      	b.n	8011bcc <_printf_common+0xa8>
 8011bba:	2301      	movs	r3, #1
 8011bbc:	4652      	mov	r2, sl
 8011bbe:	4649      	mov	r1, r9
 8011bc0:	4638      	mov	r0, r7
 8011bc2:	47c0      	blx	r8
 8011bc4:	3001      	adds	r0, #1
 8011bc6:	d103      	bne.n	8011bd0 <_printf_common+0xac>
 8011bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8011bcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011bd0:	3501      	adds	r5, #1
 8011bd2:	e7c6      	b.n	8011b62 <_printf_common+0x3e>
 8011bd4:	18e1      	adds	r1, r4, r3
 8011bd6:	1c5a      	adds	r2, r3, #1
 8011bd8:	2030      	movs	r0, #48	; 0x30
 8011bda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011bde:	4422      	add	r2, r4
 8011be0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011be4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011be8:	3302      	adds	r3, #2
 8011bea:	e7c7      	b.n	8011b7c <_printf_common+0x58>
 8011bec:	2301      	movs	r3, #1
 8011bee:	4622      	mov	r2, r4
 8011bf0:	4649      	mov	r1, r9
 8011bf2:	4638      	mov	r0, r7
 8011bf4:	47c0      	blx	r8
 8011bf6:	3001      	adds	r0, #1
 8011bf8:	d0e6      	beq.n	8011bc8 <_printf_common+0xa4>
 8011bfa:	3601      	adds	r6, #1
 8011bfc:	e7d9      	b.n	8011bb2 <_printf_common+0x8e>
	...

08011c00 <_printf_i>:
 8011c00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011c04:	7e0f      	ldrb	r7, [r1, #24]
 8011c06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011c08:	2f78      	cmp	r7, #120	; 0x78
 8011c0a:	4691      	mov	r9, r2
 8011c0c:	4680      	mov	r8, r0
 8011c0e:	460c      	mov	r4, r1
 8011c10:	469a      	mov	sl, r3
 8011c12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011c16:	d807      	bhi.n	8011c28 <_printf_i+0x28>
 8011c18:	2f62      	cmp	r7, #98	; 0x62
 8011c1a:	d80a      	bhi.n	8011c32 <_printf_i+0x32>
 8011c1c:	2f00      	cmp	r7, #0
 8011c1e:	f000 80d8 	beq.w	8011dd2 <_printf_i+0x1d2>
 8011c22:	2f58      	cmp	r7, #88	; 0x58
 8011c24:	f000 80a3 	beq.w	8011d6e <_printf_i+0x16e>
 8011c28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011c2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011c30:	e03a      	b.n	8011ca8 <_printf_i+0xa8>
 8011c32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011c36:	2b15      	cmp	r3, #21
 8011c38:	d8f6      	bhi.n	8011c28 <_printf_i+0x28>
 8011c3a:	a101      	add	r1, pc, #4	; (adr r1, 8011c40 <_printf_i+0x40>)
 8011c3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011c40:	08011c99 	.word	0x08011c99
 8011c44:	08011cad 	.word	0x08011cad
 8011c48:	08011c29 	.word	0x08011c29
 8011c4c:	08011c29 	.word	0x08011c29
 8011c50:	08011c29 	.word	0x08011c29
 8011c54:	08011c29 	.word	0x08011c29
 8011c58:	08011cad 	.word	0x08011cad
 8011c5c:	08011c29 	.word	0x08011c29
 8011c60:	08011c29 	.word	0x08011c29
 8011c64:	08011c29 	.word	0x08011c29
 8011c68:	08011c29 	.word	0x08011c29
 8011c6c:	08011db9 	.word	0x08011db9
 8011c70:	08011cdd 	.word	0x08011cdd
 8011c74:	08011d9b 	.word	0x08011d9b
 8011c78:	08011c29 	.word	0x08011c29
 8011c7c:	08011c29 	.word	0x08011c29
 8011c80:	08011ddb 	.word	0x08011ddb
 8011c84:	08011c29 	.word	0x08011c29
 8011c88:	08011cdd 	.word	0x08011cdd
 8011c8c:	08011c29 	.word	0x08011c29
 8011c90:	08011c29 	.word	0x08011c29
 8011c94:	08011da3 	.word	0x08011da3
 8011c98:	682b      	ldr	r3, [r5, #0]
 8011c9a:	1d1a      	adds	r2, r3, #4
 8011c9c:	681b      	ldr	r3, [r3, #0]
 8011c9e:	602a      	str	r2, [r5, #0]
 8011ca0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011ca4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011ca8:	2301      	movs	r3, #1
 8011caa:	e0a3      	b.n	8011df4 <_printf_i+0x1f4>
 8011cac:	6820      	ldr	r0, [r4, #0]
 8011cae:	6829      	ldr	r1, [r5, #0]
 8011cb0:	0606      	lsls	r6, r0, #24
 8011cb2:	f101 0304 	add.w	r3, r1, #4
 8011cb6:	d50a      	bpl.n	8011cce <_printf_i+0xce>
 8011cb8:	680e      	ldr	r6, [r1, #0]
 8011cba:	602b      	str	r3, [r5, #0]
 8011cbc:	2e00      	cmp	r6, #0
 8011cbe:	da03      	bge.n	8011cc8 <_printf_i+0xc8>
 8011cc0:	232d      	movs	r3, #45	; 0x2d
 8011cc2:	4276      	negs	r6, r6
 8011cc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011cc8:	485e      	ldr	r0, [pc, #376]	; (8011e44 <_printf_i+0x244>)
 8011cca:	230a      	movs	r3, #10
 8011ccc:	e019      	b.n	8011d02 <_printf_i+0x102>
 8011cce:	680e      	ldr	r6, [r1, #0]
 8011cd0:	602b      	str	r3, [r5, #0]
 8011cd2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011cd6:	bf18      	it	ne
 8011cd8:	b236      	sxthne	r6, r6
 8011cda:	e7ef      	b.n	8011cbc <_printf_i+0xbc>
 8011cdc:	682b      	ldr	r3, [r5, #0]
 8011cde:	6820      	ldr	r0, [r4, #0]
 8011ce0:	1d19      	adds	r1, r3, #4
 8011ce2:	6029      	str	r1, [r5, #0]
 8011ce4:	0601      	lsls	r1, r0, #24
 8011ce6:	d501      	bpl.n	8011cec <_printf_i+0xec>
 8011ce8:	681e      	ldr	r6, [r3, #0]
 8011cea:	e002      	b.n	8011cf2 <_printf_i+0xf2>
 8011cec:	0646      	lsls	r6, r0, #25
 8011cee:	d5fb      	bpl.n	8011ce8 <_printf_i+0xe8>
 8011cf0:	881e      	ldrh	r6, [r3, #0]
 8011cf2:	4854      	ldr	r0, [pc, #336]	; (8011e44 <_printf_i+0x244>)
 8011cf4:	2f6f      	cmp	r7, #111	; 0x6f
 8011cf6:	bf0c      	ite	eq
 8011cf8:	2308      	moveq	r3, #8
 8011cfa:	230a      	movne	r3, #10
 8011cfc:	2100      	movs	r1, #0
 8011cfe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011d02:	6865      	ldr	r5, [r4, #4]
 8011d04:	60a5      	str	r5, [r4, #8]
 8011d06:	2d00      	cmp	r5, #0
 8011d08:	bfa2      	ittt	ge
 8011d0a:	6821      	ldrge	r1, [r4, #0]
 8011d0c:	f021 0104 	bicge.w	r1, r1, #4
 8011d10:	6021      	strge	r1, [r4, #0]
 8011d12:	b90e      	cbnz	r6, 8011d18 <_printf_i+0x118>
 8011d14:	2d00      	cmp	r5, #0
 8011d16:	d04d      	beq.n	8011db4 <_printf_i+0x1b4>
 8011d18:	4615      	mov	r5, r2
 8011d1a:	fbb6 f1f3 	udiv	r1, r6, r3
 8011d1e:	fb03 6711 	mls	r7, r3, r1, r6
 8011d22:	5dc7      	ldrb	r7, [r0, r7]
 8011d24:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011d28:	4637      	mov	r7, r6
 8011d2a:	42bb      	cmp	r3, r7
 8011d2c:	460e      	mov	r6, r1
 8011d2e:	d9f4      	bls.n	8011d1a <_printf_i+0x11a>
 8011d30:	2b08      	cmp	r3, #8
 8011d32:	d10b      	bne.n	8011d4c <_printf_i+0x14c>
 8011d34:	6823      	ldr	r3, [r4, #0]
 8011d36:	07de      	lsls	r6, r3, #31
 8011d38:	d508      	bpl.n	8011d4c <_printf_i+0x14c>
 8011d3a:	6923      	ldr	r3, [r4, #16]
 8011d3c:	6861      	ldr	r1, [r4, #4]
 8011d3e:	4299      	cmp	r1, r3
 8011d40:	bfde      	ittt	le
 8011d42:	2330      	movle	r3, #48	; 0x30
 8011d44:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011d48:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011d4c:	1b52      	subs	r2, r2, r5
 8011d4e:	6122      	str	r2, [r4, #16]
 8011d50:	f8cd a000 	str.w	sl, [sp]
 8011d54:	464b      	mov	r3, r9
 8011d56:	aa03      	add	r2, sp, #12
 8011d58:	4621      	mov	r1, r4
 8011d5a:	4640      	mov	r0, r8
 8011d5c:	f7ff fee2 	bl	8011b24 <_printf_common>
 8011d60:	3001      	adds	r0, #1
 8011d62:	d14c      	bne.n	8011dfe <_printf_i+0x1fe>
 8011d64:	f04f 30ff 	mov.w	r0, #4294967295
 8011d68:	b004      	add	sp, #16
 8011d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d6e:	4835      	ldr	r0, [pc, #212]	; (8011e44 <_printf_i+0x244>)
 8011d70:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011d74:	6829      	ldr	r1, [r5, #0]
 8011d76:	6823      	ldr	r3, [r4, #0]
 8011d78:	f851 6b04 	ldr.w	r6, [r1], #4
 8011d7c:	6029      	str	r1, [r5, #0]
 8011d7e:	061d      	lsls	r5, r3, #24
 8011d80:	d514      	bpl.n	8011dac <_printf_i+0x1ac>
 8011d82:	07df      	lsls	r7, r3, #31
 8011d84:	bf44      	itt	mi
 8011d86:	f043 0320 	orrmi.w	r3, r3, #32
 8011d8a:	6023      	strmi	r3, [r4, #0]
 8011d8c:	b91e      	cbnz	r6, 8011d96 <_printf_i+0x196>
 8011d8e:	6823      	ldr	r3, [r4, #0]
 8011d90:	f023 0320 	bic.w	r3, r3, #32
 8011d94:	6023      	str	r3, [r4, #0]
 8011d96:	2310      	movs	r3, #16
 8011d98:	e7b0      	b.n	8011cfc <_printf_i+0xfc>
 8011d9a:	6823      	ldr	r3, [r4, #0]
 8011d9c:	f043 0320 	orr.w	r3, r3, #32
 8011da0:	6023      	str	r3, [r4, #0]
 8011da2:	2378      	movs	r3, #120	; 0x78
 8011da4:	4828      	ldr	r0, [pc, #160]	; (8011e48 <_printf_i+0x248>)
 8011da6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011daa:	e7e3      	b.n	8011d74 <_printf_i+0x174>
 8011dac:	0659      	lsls	r1, r3, #25
 8011dae:	bf48      	it	mi
 8011db0:	b2b6      	uxthmi	r6, r6
 8011db2:	e7e6      	b.n	8011d82 <_printf_i+0x182>
 8011db4:	4615      	mov	r5, r2
 8011db6:	e7bb      	b.n	8011d30 <_printf_i+0x130>
 8011db8:	682b      	ldr	r3, [r5, #0]
 8011dba:	6826      	ldr	r6, [r4, #0]
 8011dbc:	6961      	ldr	r1, [r4, #20]
 8011dbe:	1d18      	adds	r0, r3, #4
 8011dc0:	6028      	str	r0, [r5, #0]
 8011dc2:	0635      	lsls	r5, r6, #24
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	d501      	bpl.n	8011dcc <_printf_i+0x1cc>
 8011dc8:	6019      	str	r1, [r3, #0]
 8011dca:	e002      	b.n	8011dd2 <_printf_i+0x1d2>
 8011dcc:	0670      	lsls	r0, r6, #25
 8011dce:	d5fb      	bpl.n	8011dc8 <_printf_i+0x1c8>
 8011dd0:	8019      	strh	r1, [r3, #0]
 8011dd2:	2300      	movs	r3, #0
 8011dd4:	6123      	str	r3, [r4, #16]
 8011dd6:	4615      	mov	r5, r2
 8011dd8:	e7ba      	b.n	8011d50 <_printf_i+0x150>
 8011dda:	682b      	ldr	r3, [r5, #0]
 8011ddc:	1d1a      	adds	r2, r3, #4
 8011dde:	602a      	str	r2, [r5, #0]
 8011de0:	681d      	ldr	r5, [r3, #0]
 8011de2:	6862      	ldr	r2, [r4, #4]
 8011de4:	2100      	movs	r1, #0
 8011de6:	4628      	mov	r0, r5
 8011de8:	f7ee f9fa 	bl	80001e0 <memchr>
 8011dec:	b108      	cbz	r0, 8011df2 <_printf_i+0x1f2>
 8011dee:	1b40      	subs	r0, r0, r5
 8011df0:	6060      	str	r0, [r4, #4]
 8011df2:	6863      	ldr	r3, [r4, #4]
 8011df4:	6123      	str	r3, [r4, #16]
 8011df6:	2300      	movs	r3, #0
 8011df8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011dfc:	e7a8      	b.n	8011d50 <_printf_i+0x150>
 8011dfe:	6923      	ldr	r3, [r4, #16]
 8011e00:	462a      	mov	r2, r5
 8011e02:	4649      	mov	r1, r9
 8011e04:	4640      	mov	r0, r8
 8011e06:	47d0      	blx	sl
 8011e08:	3001      	adds	r0, #1
 8011e0a:	d0ab      	beq.n	8011d64 <_printf_i+0x164>
 8011e0c:	6823      	ldr	r3, [r4, #0]
 8011e0e:	079b      	lsls	r3, r3, #30
 8011e10:	d413      	bmi.n	8011e3a <_printf_i+0x23a>
 8011e12:	68e0      	ldr	r0, [r4, #12]
 8011e14:	9b03      	ldr	r3, [sp, #12]
 8011e16:	4298      	cmp	r0, r3
 8011e18:	bfb8      	it	lt
 8011e1a:	4618      	movlt	r0, r3
 8011e1c:	e7a4      	b.n	8011d68 <_printf_i+0x168>
 8011e1e:	2301      	movs	r3, #1
 8011e20:	4632      	mov	r2, r6
 8011e22:	4649      	mov	r1, r9
 8011e24:	4640      	mov	r0, r8
 8011e26:	47d0      	blx	sl
 8011e28:	3001      	adds	r0, #1
 8011e2a:	d09b      	beq.n	8011d64 <_printf_i+0x164>
 8011e2c:	3501      	adds	r5, #1
 8011e2e:	68e3      	ldr	r3, [r4, #12]
 8011e30:	9903      	ldr	r1, [sp, #12]
 8011e32:	1a5b      	subs	r3, r3, r1
 8011e34:	42ab      	cmp	r3, r5
 8011e36:	dcf2      	bgt.n	8011e1e <_printf_i+0x21e>
 8011e38:	e7eb      	b.n	8011e12 <_printf_i+0x212>
 8011e3a:	2500      	movs	r5, #0
 8011e3c:	f104 0619 	add.w	r6, r4, #25
 8011e40:	e7f5      	b.n	8011e2e <_printf_i+0x22e>
 8011e42:	bf00      	nop
 8011e44:	08012645 	.word	0x08012645
 8011e48:	08012656 	.word	0x08012656

08011e4c <__sread>:
 8011e4c:	b510      	push	{r4, lr}
 8011e4e:	460c      	mov	r4, r1
 8011e50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011e54:	f000 f8de 	bl	8012014 <_read_r>
 8011e58:	2800      	cmp	r0, #0
 8011e5a:	bfab      	itete	ge
 8011e5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011e5e:	89a3      	ldrhlt	r3, [r4, #12]
 8011e60:	181b      	addge	r3, r3, r0
 8011e62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011e66:	bfac      	ite	ge
 8011e68:	6563      	strge	r3, [r4, #84]	; 0x54
 8011e6a:	81a3      	strhlt	r3, [r4, #12]
 8011e6c:	bd10      	pop	{r4, pc}

08011e6e <__swrite>:
 8011e6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e72:	461f      	mov	r7, r3
 8011e74:	898b      	ldrh	r3, [r1, #12]
 8011e76:	05db      	lsls	r3, r3, #23
 8011e78:	4605      	mov	r5, r0
 8011e7a:	460c      	mov	r4, r1
 8011e7c:	4616      	mov	r6, r2
 8011e7e:	d505      	bpl.n	8011e8c <__swrite+0x1e>
 8011e80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011e84:	2302      	movs	r3, #2
 8011e86:	2200      	movs	r2, #0
 8011e88:	f000 f868 	bl	8011f5c <_lseek_r>
 8011e8c:	89a3      	ldrh	r3, [r4, #12]
 8011e8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011e92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011e96:	81a3      	strh	r3, [r4, #12]
 8011e98:	4632      	mov	r2, r6
 8011e9a:	463b      	mov	r3, r7
 8011e9c:	4628      	mov	r0, r5
 8011e9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011ea2:	f000 b817 	b.w	8011ed4 <_write_r>

08011ea6 <__sseek>:
 8011ea6:	b510      	push	{r4, lr}
 8011ea8:	460c      	mov	r4, r1
 8011eaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011eae:	f000 f855 	bl	8011f5c <_lseek_r>
 8011eb2:	1c43      	adds	r3, r0, #1
 8011eb4:	89a3      	ldrh	r3, [r4, #12]
 8011eb6:	bf15      	itete	ne
 8011eb8:	6560      	strne	r0, [r4, #84]	; 0x54
 8011eba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011ebe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011ec2:	81a3      	strheq	r3, [r4, #12]
 8011ec4:	bf18      	it	ne
 8011ec6:	81a3      	strhne	r3, [r4, #12]
 8011ec8:	bd10      	pop	{r4, pc}

08011eca <__sclose>:
 8011eca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ece:	f000 b813 	b.w	8011ef8 <_close_r>
	...

08011ed4 <_write_r>:
 8011ed4:	b538      	push	{r3, r4, r5, lr}
 8011ed6:	4d07      	ldr	r5, [pc, #28]	; (8011ef4 <_write_r+0x20>)
 8011ed8:	4604      	mov	r4, r0
 8011eda:	4608      	mov	r0, r1
 8011edc:	4611      	mov	r1, r2
 8011ede:	2200      	movs	r2, #0
 8011ee0:	602a      	str	r2, [r5, #0]
 8011ee2:	461a      	mov	r2, r3
 8011ee4:	f7ef f800 	bl	8000ee8 <_write>
 8011ee8:	1c43      	adds	r3, r0, #1
 8011eea:	d102      	bne.n	8011ef2 <_write_r+0x1e>
 8011eec:	682b      	ldr	r3, [r5, #0]
 8011eee:	b103      	cbz	r3, 8011ef2 <_write_r+0x1e>
 8011ef0:	6023      	str	r3, [r4, #0]
 8011ef2:	bd38      	pop	{r3, r4, r5, pc}
 8011ef4:	2000515c 	.word	0x2000515c

08011ef8 <_close_r>:
 8011ef8:	b538      	push	{r3, r4, r5, lr}
 8011efa:	4d06      	ldr	r5, [pc, #24]	; (8011f14 <_close_r+0x1c>)
 8011efc:	2300      	movs	r3, #0
 8011efe:	4604      	mov	r4, r0
 8011f00:	4608      	mov	r0, r1
 8011f02:	602b      	str	r3, [r5, #0]
 8011f04:	f7ef feb5 	bl	8001c72 <_close>
 8011f08:	1c43      	adds	r3, r0, #1
 8011f0a:	d102      	bne.n	8011f12 <_close_r+0x1a>
 8011f0c:	682b      	ldr	r3, [r5, #0]
 8011f0e:	b103      	cbz	r3, 8011f12 <_close_r+0x1a>
 8011f10:	6023      	str	r3, [r4, #0]
 8011f12:	bd38      	pop	{r3, r4, r5, pc}
 8011f14:	2000515c 	.word	0x2000515c

08011f18 <_fstat_r>:
 8011f18:	b538      	push	{r3, r4, r5, lr}
 8011f1a:	4d07      	ldr	r5, [pc, #28]	; (8011f38 <_fstat_r+0x20>)
 8011f1c:	2300      	movs	r3, #0
 8011f1e:	4604      	mov	r4, r0
 8011f20:	4608      	mov	r0, r1
 8011f22:	4611      	mov	r1, r2
 8011f24:	602b      	str	r3, [r5, #0]
 8011f26:	f7ef feb0 	bl	8001c8a <_fstat>
 8011f2a:	1c43      	adds	r3, r0, #1
 8011f2c:	d102      	bne.n	8011f34 <_fstat_r+0x1c>
 8011f2e:	682b      	ldr	r3, [r5, #0]
 8011f30:	b103      	cbz	r3, 8011f34 <_fstat_r+0x1c>
 8011f32:	6023      	str	r3, [r4, #0]
 8011f34:	bd38      	pop	{r3, r4, r5, pc}
 8011f36:	bf00      	nop
 8011f38:	2000515c 	.word	0x2000515c

08011f3c <_isatty_r>:
 8011f3c:	b538      	push	{r3, r4, r5, lr}
 8011f3e:	4d06      	ldr	r5, [pc, #24]	; (8011f58 <_isatty_r+0x1c>)
 8011f40:	2300      	movs	r3, #0
 8011f42:	4604      	mov	r4, r0
 8011f44:	4608      	mov	r0, r1
 8011f46:	602b      	str	r3, [r5, #0]
 8011f48:	f7ef feaf 	bl	8001caa <_isatty>
 8011f4c:	1c43      	adds	r3, r0, #1
 8011f4e:	d102      	bne.n	8011f56 <_isatty_r+0x1a>
 8011f50:	682b      	ldr	r3, [r5, #0]
 8011f52:	b103      	cbz	r3, 8011f56 <_isatty_r+0x1a>
 8011f54:	6023      	str	r3, [r4, #0]
 8011f56:	bd38      	pop	{r3, r4, r5, pc}
 8011f58:	2000515c 	.word	0x2000515c

08011f5c <_lseek_r>:
 8011f5c:	b538      	push	{r3, r4, r5, lr}
 8011f5e:	4d07      	ldr	r5, [pc, #28]	; (8011f7c <_lseek_r+0x20>)
 8011f60:	4604      	mov	r4, r0
 8011f62:	4608      	mov	r0, r1
 8011f64:	4611      	mov	r1, r2
 8011f66:	2200      	movs	r2, #0
 8011f68:	602a      	str	r2, [r5, #0]
 8011f6a:	461a      	mov	r2, r3
 8011f6c:	f7ef fea8 	bl	8001cc0 <_lseek>
 8011f70:	1c43      	adds	r3, r0, #1
 8011f72:	d102      	bne.n	8011f7a <_lseek_r+0x1e>
 8011f74:	682b      	ldr	r3, [r5, #0]
 8011f76:	b103      	cbz	r3, 8011f7a <_lseek_r+0x1e>
 8011f78:	6023      	str	r3, [r4, #0]
 8011f7a:	bd38      	pop	{r3, r4, r5, pc}
 8011f7c:	2000515c 	.word	0x2000515c

08011f80 <memmove>:
 8011f80:	4288      	cmp	r0, r1
 8011f82:	b510      	push	{r4, lr}
 8011f84:	eb01 0402 	add.w	r4, r1, r2
 8011f88:	d902      	bls.n	8011f90 <memmove+0x10>
 8011f8a:	4284      	cmp	r4, r0
 8011f8c:	4623      	mov	r3, r4
 8011f8e:	d807      	bhi.n	8011fa0 <memmove+0x20>
 8011f90:	1e43      	subs	r3, r0, #1
 8011f92:	42a1      	cmp	r1, r4
 8011f94:	d008      	beq.n	8011fa8 <memmove+0x28>
 8011f96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011f9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011f9e:	e7f8      	b.n	8011f92 <memmove+0x12>
 8011fa0:	4402      	add	r2, r0
 8011fa2:	4601      	mov	r1, r0
 8011fa4:	428a      	cmp	r2, r1
 8011fa6:	d100      	bne.n	8011faa <memmove+0x2a>
 8011fa8:	bd10      	pop	{r4, pc}
 8011faa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011fae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011fb2:	e7f7      	b.n	8011fa4 <memmove+0x24>

08011fb4 <_realloc_r>:
 8011fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011fb8:	4680      	mov	r8, r0
 8011fba:	4614      	mov	r4, r2
 8011fbc:	460e      	mov	r6, r1
 8011fbe:	b921      	cbnz	r1, 8011fca <_realloc_r+0x16>
 8011fc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011fc4:	4611      	mov	r1, r2
 8011fc6:	f7fe bed1 	b.w	8010d6c <_malloc_r>
 8011fca:	b92a      	cbnz	r2, 8011fd8 <_realloc_r+0x24>
 8011fcc:	f7fe fe62 	bl	8010c94 <_free_r>
 8011fd0:	4625      	mov	r5, r4
 8011fd2:	4628      	mov	r0, r5
 8011fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011fd8:	f000 f82e 	bl	8012038 <_malloc_usable_size_r>
 8011fdc:	4284      	cmp	r4, r0
 8011fde:	4607      	mov	r7, r0
 8011fe0:	d802      	bhi.n	8011fe8 <_realloc_r+0x34>
 8011fe2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011fe6:	d812      	bhi.n	801200e <_realloc_r+0x5a>
 8011fe8:	4621      	mov	r1, r4
 8011fea:	4640      	mov	r0, r8
 8011fec:	f7fe febe 	bl	8010d6c <_malloc_r>
 8011ff0:	4605      	mov	r5, r0
 8011ff2:	2800      	cmp	r0, #0
 8011ff4:	d0ed      	beq.n	8011fd2 <_realloc_r+0x1e>
 8011ff6:	42bc      	cmp	r4, r7
 8011ff8:	4622      	mov	r2, r4
 8011ffa:	4631      	mov	r1, r6
 8011ffc:	bf28      	it	cs
 8011ffe:	463a      	movcs	r2, r7
 8012000:	f7fe fe32 	bl	8010c68 <memcpy>
 8012004:	4631      	mov	r1, r6
 8012006:	4640      	mov	r0, r8
 8012008:	f7fe fe44 	bl	8010c94 <_free_r>
 801200c:	e7e1      	b.n	8011fd2 <_realloc_r+0x1e>
 801200e:	4635      	mov	r5, r6
 8012010:	e7df      	b.n	8011fd2 <_realloc_r+0x1e>
	...

08012014 <_read_r>:
 8012014:	b538      	push	{r3, r4, r5, lr}
 8012016:	4d07      	ldr	r5, [pc, #28]	; (8012034 <_read_r+0x20>)
 8012018:	4604      	mov	r4, r0
 801201a:	4608      	mov	r0, r1
 801201c:	4611      	mov	r1, r2
 801201e:	2200      	movs	r2, #0
 8012020:	602a      	str	r2, [r5, #0]
 8012022:	461a      	mov	r2, r3
 8012024:	f7ef fe08 	bl	8001c38 <_read>
 8012028:	1c43      	adds	r3, r0, #1
 801202a:	d102      	bne.n	8012032 <_read_r+0x1e>
 801202c:	682b      	ldr	r3, [r5, #0]
 801202e:	b103      	cbz	r3, 8012032 <_read_r+0x1e>
 8012030:	6023      	str	r3, [r4, #0]
 8012032:	bd38      	pop	{r3, r4, r5, pc}
 8012034:	2000515c 	.word	0x2000515c

08012038 <_malloc_usable_size_r>:
 8012038:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801203c:	1f18      	subs	r0, r3, #4
 801203e:	2b00      	cmp	r3, #0
 8012040:	bfbc      	itt	lt
 8012042:	580b      	ldrlt	r3, [r1, r0]
 8012044:	18c0      	addlt	r0, r0, r3
 8012046:	4770      	bx	lr

08012048 <_init>:
 8012048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801204a:	bf00      	nop
 801204c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801204e:	bc08      	pop	{r3}
 8012050:	469e      	mov	lr, r3
 8012052:	4770      	bx	lr

08012054 <_fini>:
 8012054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012056:	bf00      	nop
 8012058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801205a:	bc08      	pop	{r3}
 801205c:	469e      	mov	lr, r3
 801205e:	4770      	bx	lr
